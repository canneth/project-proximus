
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00002ac0 l    d  .fini	00000000 .fini
00002ac4 l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20000bd0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00001d64 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000095c l     F .text.itcm	0000005c schedule_transfer
000009b8 l     F .text.itcm	00000036 run_callbacks
000009f0 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
00000a94 l     F .text.itcm	00000698 isr
20000dc4 l     O .bss	00000004 endpointN_notify_mask
20000dc8 l     O .bss	00000001 sof_usage
20000dd4 l     O .bss	00000004 endpoint0_notify_mask
20000dd8 l     O .bss	00000001 usb_reboot_timer
20000de0 l     O .bss	00000008 endpoint0_setupdata
20000de8 l     O .bss	00000008 reply_buffer
20000df0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20000e28 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20000e2c l     O .bss	00000004 s_hotTemp
20000e30 l     O .bss	00000004 s_hot_ROOM
20000e34 l     O .bss	00000004 s_roomC_hotC
20000e38 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
600016dc l     O .text.progmem	0000000a qualifier_descriptor
20000348 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20000bd0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20000bd4 l       .bss	00000000 object.8610
60001740 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 ConvenienceFunctions.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
0000021c l     F .text.itcm	0000006c rx_queue_transfer
00000288 l     F .text.itcm	000000b4 rx_event
0000033c l     F .text.itcm	00000098 usb_serial_flush_callback
000003d4 l     F .text.itcm	0000017c usb_serial_write.part.1
20000bec l     O .bss	00000010 rx_index
20000bfc l     O .bss	00000002 tx_packet_size
20000bfe l     O .bss	00000001 tx_noautoflush
20000bff l     O .bss	00000001 tx_head
20000c00 l     O .bss	00000100 rx_transfer
20000d00 l     O .bss	00000001 rx_tail
20000d04 l     O .bss	00000009 rx_list
20000d0e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20000d10 l     O .bss	00000010 rx_count
20000d20 l     O .bss	00000004 rx_available
20000d24 l     O .bss	00000001 rx_head
20000d25 l     O .bss	00000001 transmit_previous_timeout
20000d26 l     O .bss	00000002 tx_available
20000d40 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
000015fc l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20000e08 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000390 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600016f8 l     F .text.progmem	00000008 __memset_veneer
60001700 l     F .text.progmem	00000008 __main_veneer
60001708 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001710 l     F .text.progmem	00000008 __pwm_init_veneer
60001718 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001720 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001728 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001730 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001738 l     F .text.progmem	00000008 __delay_veneer
00002ab0 l     F .text.itcm	00000008 ___init_veneer
0000078c g     F .text.itcm	0000000c usb_serial_available
00001c1c g     F .text.itcm	00000004 operator new[](unsigned int)
00001d70 g     F .text.itcm	00000002 startup_default_late_hook
00001714  w    F .text.itcm	000000a0 yield
20000dcc g     O .bss	00000004 usb_timer1_callback
60001638 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20000e3c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
000019ec g     F .text.itcm	00000020 Print::println()
0000281c g     F .text.itcm	00000002 __malloc_unlock
600014ac g     F .text.progmem	00000058 analog_init
2000038c g     O .data	00000004 F_CPU_ACTUAL
00002168 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00001900 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000e20 g     O .bss	00000001 EventResponder::runningFromYield
00002190 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
20000e0c g     O .bss	00000004 EventResponder::firstInterrupt
00001274 g     F .text.itcm	00000004 usb_transfer_status
20000372 g     O .data	00000001 usb_enable_serial_event_processing
000019d0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000024 g     O .data	00000280 digital_pin_to_info_PGM
200026c0 g     O .bss	00000004 errno
00002ac0 g       .text.itcm	00000000 _etext
20000bd0 g       .bss	00000000 _sbss
60001750 g       *ABS*	00000000 _stextload
00000084 g     F .text.itcm	000000fc loop
0000112c g     F .text.itcm	00000064 usb_config_rx
00001898 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
20000e10 g     O .bss	00000004 EventResponder::lastInterrupt
00001c20 g     F .text.itcm	00000134 memcpy
20000e04 g     O .bss	00000004 systick_millis_count
20000df8 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
60001638  w    O .text.progmem	00000018 usb_string_manufacturer_name
000021ec g     F .text.itcm	00000010 malloc
00001834  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
6000129c g     F .text.progmem	000000ec usb_init
20000e64 g     O .bss	00000004 __malloc_top_pad
20002280 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
60001698 g     O .text.progmem	00000043 usb_config_descriptor_480
00002820 g     F .text.itcm	00000024 _sbrk_r
00001d6c g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
0000080c g     F .text.itcm	00000020 usb_serial_getchar
20000e90 g     O .bss	00000008 usb_cdc_line_coding
00001620 g     F .text.itcm	0000000a digitalWrite
20000e18 g     O .bss	00000004 EventResponder::lastYield
20000e60 g     O .bss	00000004 __malloc_max_sbrked_mem
0000162c g     F .text.itcm	00000080 pinMode
00001aa8 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss.dma	00000000 _heap_end
20000e1c g     O .bss	00000004 EventResponder::firstYield
0000219c g     F .text.itcm	00000050 __libc_init_array
00001d74  w    F .text.itcm	0000008c HardFault_HandlerC
000019b8  w    F .text.itcm	00000004 usb_serial_class::clear()
00001e00 g     F .text.itcm	00000030 _sbrk
60004214 g       *ABS*	00000000 _sdataload
20000e24 g     O .bss	00000004 MillisTimer::listWaiting
20000384 g     O .data	00000004 __brkval
20000d28 g     O .bss	00000001 usb_cdc_line_rtsdtr
600016e8 g     F .text.progmem	00000000 _init
00000550 g     F .text.itcm	00000002 usb_serial_reset
60001654 g     O .text.progmem	00000043 usb_config_descriptor_12
20002700 g       .bss	00000000 _ebss
20203050 g       .bss.dma	00000000 _heap_start
00000001 g       *ABS*	00000000 _itcm_block_count
20001000 g     O .bss	00000020 endpoint0_transfer_data
00001344 g     F .text.itcm	000002b8 pwm_init
00000180 g     F .text.itcm	0000009c project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)
60001448 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20001020 g     O .bss	00000020 endpoint0_transfer_ack
20000e98 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00001228 g     F .text.itcm	00000028 usb_transmit
00001998 g     F .text.itcm	00000020 systick_isr
20000374 g     O .data	00000010 Serial
20000e58 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
000019d8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00001d6c  w    F .text.itcm	00000002 startup_early_hook
00000748 g     F .text.itcm	00000044 usb_serial_peekchar
00001e30 g     F .text.itcm	000002c4 set_arm_clock
20000dfc g     O .bss	00000004 systick_cycle_count
2000035c g     O .data	00000016 usb_string_serial_number_default
000028e0 g     F .text.itcm	000001d0 _free_r
000019c8  w    F .text.itcm	00000004 usb_serial_class::flush()
20000bc8 g     O .data	00000004 __malloc_sbrk_base
000019c0  w    F .text.itcm	00000004 usb_serial_class::read()
000011f8 g     F .text.itcm	0000002e usb_prepare_transfer
00001d54 g     F .text.itcm	00000018 unused_interrupt_vector
60001504 g     F .text.progmem	0000011c tempmon_init
20000dc0 g     O .bss	00000004 usb_timer0_callback
000019e0  w    F .text.itcm	0000000c serialEvent()
00000798 g     F .text.itcm	00000074 usb_serial_flush_input
0000082c g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20000e68 g     O .bss	00000028 __malloc_current_mallinfo
20000310  w    O .data	00000028 vtable for usb_serial_class
20000e00 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20000e14 g     O .bss	00000004 MillisTimer::listActive
200007bc g     O .data	00000408 __malloc_av_
000008bc g     F .text.itcm	000000a0 usb_serial_flush_output
00002818 g     F .text.itcm	00000002 __malloc_lock
20002400 g     O .bss	000002c0 _VectorsRam
20000dd0 g     O .bss	00000001 usb_high_speed
0000277c g     F .text.itcm	0000009a memset
00001704 g     F .text.itcm	00000010 main
20000e5c g     O .bss	00000004 __malloc_max_total_mem
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
000016ac g     F .text.itcm	00000058 usb_init_serialnumber
60001744 g       .text.progmem	00000000 __init_array_end
0000220c g     F .text.itcm	00000570 _malloc_r
000017b4 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00002844 g     F .text.itcm	0000009c _malloc_trim_r
60001650 g     O .text.progmem	00000004 string0
00000858 g     F .text.itcm	00000018 usb_serial_write
00001d70  w    F .text.itcm	00000002 startup_late_hook
000019c4  w    F .text.itcm	00000004 usb_serial_class::available()
20002000 g     O .bss	00000280 endpoint_queue_head
60001620  w    O .text.progmem	00000016 usb_string_product_name
00001278 g     F .text.itcm	000000cc delay
00002ac0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00001a8c g     F .text.itcm	00000016 Print::print(long)
00002144 g     F .text.itcm	00000024 Panic_Temp_isr
200007b8 g     O .data	00000004 _impure_ptr
60001740 g       .text.progmem	00000000 __preinit_array_end
0000007c g     F .text.itcm	00000008 setup
200002a4 g     O .data	0000006c usb_descriptor_list
20078000 g       .bss.dma	00000000 _estack
00000870 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00000554 g     F .text.itcm	00000108 usb_serial_configure
20000bd0 g       .data	00000000 _edata
000019cc  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000020f4 g     F .text.itcm	0000004e ultoa
00001850 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20000bc4 g     O .data	00000004 __malloc_trim_threshold
000019bc  w    F .text.itcm	00000004 usb_serial_class::peek()
60001740 g       .text.progmem	00000000 __init_array_start
20000388 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
60001620 g     O .text.progmem	00000016 usb_string_product_name_default
60001388 g     F .text.progmem	000000c0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001740 g       .text.progmem	00000000 __preinit_array_start
00001250 g     F .text.itcm	00000024 usb_receive
00004de0 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
00001894 g     F .text.itcm	00000004 pendablesrvreq_isr
0000065c g     F .text.itcm	000000ec usb_serial_read
00001a0c g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00001190 g     F .text.itcm	00000068 usb_config_tx
000021fc g     F .text.itcm	00000010 free
2000035c  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.M......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001448 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001718 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001708 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001710 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001730 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001728 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	60001700 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001750
60001220:	.word	0x00002ac0
60001224:	.word	0x20000000
60001228:	.word	0x60004214
6000122c:	.word	0x20000bd0
60001230:	.word	0x20000bd0
60001234:	.word	0x20002700
60001238:	.word	0xe000ed88
6000123c:	.word	0x200023fc
60001240:	.word	0x00001d55
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00001895
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00001999
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000dfc
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20000e04
60001290:	.word	0x20002400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001720 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001738 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	600016f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20002000
6000137c:	.word	0x20002400
60001380:	.word	0x00000a95
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #116]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #116]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #112]	; (60001408 <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r7, [pc, #112]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r6, [pc, #116]	; (60001410 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139c:	ldr	r5, [pc, #116]	; (60001414 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r7, [pc, #108]	; (60001418 <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013aa:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ac:	ldr	r6, [pc, #108]	; (6000141c <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013ae:	ldr	r5, [pc, #112]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013b0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r7, [pc, #108]	; (60001424 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b8:	ldr	r6, [pc, #108]	; (60001428 <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ba:	ldr	r5, [pc, #112]	; (6000142c <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013bc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r7, [pc, #108]	; (60001430 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c4:	ldr	r6, [pc, #108]	; (60001434 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013c6:	ldr	r5, [pc, #112]	; (60001438 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ca:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013cc:	ldr	r7, [pc, #108]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013ce:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d0:	ldr	r6, [pc, #108]	; (60001440 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d2:	ldr	r5, [pc, #112]	; (60001444 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013d4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013da:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013dc:	dsb	sy
	asm("isb");
600013e0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013e4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013e8:	dsb	sy
	asm("isb");
600013ec:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013f0:	ldr.w	r3, [r2, #-136]
600013f4:	orr.w	r3, r3, #196608	; 0x30000
600013f8:	str.w	r3, [r2, #-136]
600013fc:	pop	{r4, r5, r6, r7, pc}
600013fe:	nop
60001400:	.word	0xe000ed9c
60001404:	.word	0xe000eda0
60001408:	.word	0xe000ed94
6000140c:	.word	0x03080025
60001410:	.word	0x00200011
60001414:	.word	0x07020021
60001418:	.word	0x20000012
6000141c:	.word	0x13080025
60001420:	.word	0x20200013
60001424:	.word	0x130b0027
60001428:	.word	0x40000014
6000142c:	.word	0x13100033
60001430:	.word	0x60000015
60001434:	.word	0x070b002f
60001438:	.word	0x70000016
6000143c:	.word	0x070b0035
60001440:	.word	0x70000017
60001444:	.word	0x030b002f

60001448 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001448:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144a:	ldr	r2, [pc, #92]	; (600014a8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000144e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001452:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001456:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000145e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001462:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001464:	tst.w	r3, #2
60001468:	beq.n	60001478 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000146c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000146e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001470:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001472:	tst.w	r3, #2
60001476:	bne.n	6000146a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001478:	tst.w	r3, #8192	; 0x2000
6000147c:	bne.n	60001482 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000147e:	str	r5, [r2, #20]
			continue;
60001480:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001482:	tst.w	r3, #4096	; 0x1000
60001486:	bne.n	6000148c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001488:	str	r6, [r2, #20]
			continue;
6000148a:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000148c:	cmp	r3, #0
6000148e:	bge.n	60001462 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001490:	tst.w	r3, #65536	; 0x10000
60001494:	beq.n	6000149a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001496:	str	r1, [r2, #24]
			continue;
60001498:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149a:	lsls	r3, r3, #25
6000149c:	bmi.n	600014a2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000149e:	str	r7, [r2, #20]
			continue;
600014a0:	b.n	60001462 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a2:	pop	{r4, r5, r6, r7}
600014a4:	bx	lr
600014a6:	nop
600014a8:	.word	0x400d8000

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x20000e28

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x20000e34
60001600:	.word	0x20000e38
60001604:	.word	0x20000e30
60001608:	.word	0x20002400
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x00002145
60001618:	.word	0xe000e108
6000161c:	.word	0x20000e2c

60001620 <usb_string_product_name_default>:
60001620:	..U.S.B. .S.e.r.
60001630:	i.a.l...

60001638 <usb_string_manufacturer_name_default>:
60001638:	..T.e.e.n.s.y.d.
60001648:	u.i.n.o.

60001650 <string0>:
60001650:	....

60001654 <usb_config_descriptor_12>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	.........@......
60001694:	@...

60001698 <usb_config_descriptor_480>:
60001698:	..C.....2.......
600016a8:	...$....$....$..
600016b8:	.$..............
600016c8:	................
600016d8:	....

600016dc <qualifier_descriptor>:
600016dc:	.......@....

600016e8 <_init>:
600016e8:	push	{r3, r4, r5, r6, r7, lr}
600016ea:	nop
600016ec:	pop	{r3, r4, r5, r6, r7}
600016ee:	pop	{r3}
600016f0:	mov	lr, r3
600016f2:	bx	lr
600016f4:			; <UNDEFINED> instruction: 0xffffffff

600016f8 <__memset_veneer>:
600016f8:	ldr.w	pc, [pc]	; 600016fc <__memset_veneer+0x4>
600016fc:	.word	0x0000277d

60001700 <__main_veneer>:
60001700:	ldr.w	pc, [pc]	; 60001704 <__main_veneer+0x4>
60001704:	.word	0x00001705

60001708 <__startup_early_hook_veneer>:
60001708:	ldr.w	pc, [pc]	; 6000170c <__startup_early_hook_veneer+0x4>
6000170c:	.word	0x00001d6d

60001710 <__pwm_init_veneer>:
60001710:	ldr.w	pc, [pc]	; 60001714 <__pwm_init_veneer+0x4>
60001714:	.word	0x00001345

60001718 <__set_arm_clock_veneer>:
60001718:	ldr.w	pc, [pc]	; 6000171c <__set_arm_clock_veneer+0x4>
6000171c:	.word	0x00001e31

60001720 <__usb_init_serialnumber_veneer>:
60001720:	ldr.w	pc, [pc]	; 60001724 <__usb_init_serialnumber_veneer+0x4>
60001724:	.word	0x000016ad

60001728 <____libc_init_array_veneer>:
60001728:	ldr.w	pc, [pc]	; 6000172c <____libc_init_array_veneer+0x4>
6000172c:	.word	0x0000219d

60001730 <__startup_late_hook_veneer>:
60001730:	ldr.w	pc, [pc]	; 60001734 <__startup_late_hook_veneer+0x4>
60001734:	.word	0x00001d71

60001738 <__delay_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <__delay_veneer+0x4>
6000173c:	.word	0x00001279

60001740 <__init_array_start>:
60001740:	.word	0x00000045

60001744 <__init_array_end>:
60001744:	.word	0xffffffff
60001748:	.word	0xffffffff
6000174c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	.short	0xb933
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	.word	0x20000bd0
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	cmp	r2, #196	; 0xc4
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	.word	0x4010e8bd
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	.short	0xbf00
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r2, #15
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	cmp	r2, #196	; 0xc4
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	lsrs	r0, r2, #15
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <setup>:
// Global constants
const uint8_t led_pin = 13;

void setup() {
  Serial.begin(600000000);
  pinMode(led_pin, OUTPUT);
      7c:	movs	r1, #1
      7e:	movs	r0, #13
      80:	b.w	162c <pinMode>

00000084 <loop>:
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      84:	.word	0x4ff0e92d
}

void loop() {
  digitalWrite(led_pin, LOW);
      88:	movs	r1, #0
      8a:	.short	0x200d
void setup() {
  Serial.begin(600000000);
  pinMode(led_pin, OUTPUT);
}

void loop() {
      8c:	vpush	{d8}
      90:	sub	sp, #20
  digitalWrite(led_pin, LOW);
      92:	bl	1620 <digitalWrite>
{
    T *m_data;
    DenseIndex m_rows;
    DenseIndex m_cols;
  public:
    inline explicit DenseStorage() : m_data(0), m_rows(0), m_cols(0) {}
      96:	movs	r3, #0
/** \internal Like malloc, but the returned pointer is guaranteed to be 16-byte aligned.
  * Fast, but wastes 16 additional bytes of memory. Does not throw any exception.
  */
inline void* handmade_aligned_malloc(size_t size)
{
  void *original = std::malloc(size+16);
      98:	movs	r0, #48	; 0x30
      9a:	str	r3, [sp, #4]
      9c:	str	r3, [sp, #8]
      9e:	str	r3, [sp, #12]
      a0:	bl	21ec <malloc>
  if (original == 0) return 0;
      a4:	.word	0x28004603
      a8:	beq.n	16c <loop+0xe8>
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<size_t>(original) & ~(size_t(15))) + 16);
      aa:	.short	0xf020
      ac:	lsls	r7, r1, #8
      ae:	.short	0x3210
  *(reinterpret_cast<void**>(aligned) - 1) = original;
      b0:	str.w	r0, [r2, #-4]
      b4:	mov	r4, r2
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
      b6:	.short	0xeeb0
      b8:	ldrh	r0, [r1, #24]
  typedef typename XprType::Index Index;

  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
      ba:	mov.w	sl, #0
      be:	.short	0xf8df
      c0:	sub	sp, #224	; 0xe0
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
      c2:	.short	0x2600
      c4:	mov.w	r7, #1073741824	; 0x40000000
      c8:	mov.w	r8, #0
      cc:	.word	0x90acf8df
          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
        else
          m_data = 0;
        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN
      }
      m_rows = rows;
      d0:	movs	r3, #2
/** \internal Like malloc, but the returned pointer is guaranteed to be 16-byte aligned.
  * Fast, but wastes 16 additional bytes of memory. Does not throw any exception.
  */
inline void* handmade_aligned_malloc(size_t size)
{
  void *original = std::malloc(size+16);
      d2:	.short	0x2030
    {
      if(size != m_rows*m_cols)
      {
        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols);
        if (size)
          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
      d4:	str	r4, [sp, #4]
        else
          m_data = 0;
        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN
      }
      m_rows = rows;
      d6:	str	r3, [sp, #8]
      m_cols = cols;
      d8:	.word	0xe9c49303
  typedef typename XprType::Index Index;

  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
      dc:	add	r3, sp, #0
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
      de:	.short	0xe9c4
      e0:	str	r4, [r0, #112]	; 0x70
      e2:	.short	0xed84
      e4:	ldrh	r2, [r0, #24]
      e6:	strd	r8, r9, [r4, #24]
      ea:	.short	0xf002
      ec:	ldr??.w	r4, [pc, #-1541]	; fffffaeb <_flexram_bank_config+0x55555040>
  if (original == 0) return 0;
      f0:	.word	0xf020b3a8
  void *aligned = reinterpret_cast<void*>((reinterpret_cast<size_t>(original) & ~(size_t(15))) + 16);
      f4:	movs	r7, r1
      f6:	mov	r2, r4
      f8:	.word	0x0410f100
      fc:	add.w	r1, r0, #48	; 0x30
  *(reinterpret_cast<void**>(aligned) - 1) = original;
     100:	.word	0x5c04f844
     104:	mov	r3, r4
  typedef typename XprType::Index Index;

  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
     106:	strd	r6, r7, [r0, #16]
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
     10a:	.short	0xed84
     10c:	ldrh	r4, [r0, #24]
     10e:	.short	0xe9c4
     110:	add	r3, sp, #8
     112:	.short	0xe9c4
     114:	ldrh	r6, [r0, #8]
     116:	vldmia	r3!, {d6}
    void copyCoeff(Index index, const DenseBase<OtherDerived>& other)
    {
      OtherDerived& _other = other.const_cast_derived();
      eigen_internal_assert(index >= 0 && index < m_matrix.size());
      Scalar& tmp = m_matrix.coeffRef(index);
      tmp = m_functor(tmp, _other.coeff(index));
     11a:	.short	0xed92
     11c:	ldrb	r0, [r0, #12]
{
  typedef typename Derived1::Index Index;
  inline static void run(Derived1 &dst, const Derived2 &src)
  {
    const Index size = dst.size();
    for(Index i = 0; i < size; ++i)
     11e:	.short	0x4299
     120:	vadd.f64	d7, d7, d6
     124:	.word	0x7b02eca2
     128:	bne.n	116 <loop+0x92>
       1, 4;
  a += b;
  Vector3d v(1,2,3);
  Vector3d w(1,0,0);

  serialPrintMatrix(a);
     12a:	.short	0xa801
     12c:	bl	180 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)>

  digitalWrite(led_pin, HIGH);
     130:	.word	0x200d2101
     134:	bl	1620 <digitalWrite>


  delay(9999);
     138:	movw	r0, #9999	; 0x270f
     13c:	.word	0xf89cf001
}

/** \internal Frees memory allocated with handmade_aligned_malloc */
inline void handmade_aligned_free(void *ptr)
{
  if (ptr) std::free(*(reinterpret_cast<void**>(ptr) - 1));
     140:	ldr.w	r0, [r4, #-4]
     144:	.word	0xf85af002
    inline DenseStorage(internal::constructor_without_unaligned_array_assert)
       : m_data(0), m_rows(0), m_cols(0) {}
    inline DenseStorage(DenseIndex size, DenseIndex rows, DenseIndex cols)
      : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_rows(rows), m_cols(cols) 
    { EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN }
    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols); }
     148:	ldr	r3, [sp, #4]
     14a:	.short	0xb11b
     14c:	ldr.w	r0, [r3, #-4]
     150:	.word	0xf854f002
     154:	add	sp, #20
     156:	.short	0xecbd
     158:	ldrh	r2, [r0, #24]
     15a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  #ifdef EIGEN_EXCEPTIONS
    throw std::bad_alloc();
  #else
    std::size_t huge = -1;
    new int[huge];
     15e:	.short	0xf04f
     160:	adds	r0, #255	; 0xff
     162:	.short	0xf001
     164:	ldc2l	9, cr14, [fp, #-788]	; 0xfffffcec
  typedef typename XprType::Index Index;

  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
     168:	.word	0xdeff6700
     16c:	mov.w	r0, #4294967295
  * Fast, but wastes 16 additional bytes of memory. Does not throw any exception.
  */
inline void* handmade_aligned_malloc(size_t size)
{
  void *original = std::malloc(size+16);
  if (original == 0) return 0;
     170:	.word	0xf001461c
{
  #ifdef EIGEN_EXCEPTIONS
    throw std::bad_alloc();
  #else
    std::size_t huge = -1;
    new int[huge];
     174:	ldc2l	7, cr14, [r3, #-632]	; 0xfffffd88
     178:	.word	0x3ff00000
     17c:	movs	r0, r0
     17e:	.short	0x4010

00000180 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)>:

#include "ConvenienceFunctions.h"

using namespace project_namespace;

void project_namespace::serialPrintMatrix(const Eigen::MatrixXd& matrix) {
     180:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     184:	mov	r8, r0
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     186:	movs	r1, #13
     188:	ldr	r0, [pc, #128]	; (20c <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x8c>)
     18a:	ldr.w	r7, [r8, #4]
     18e:	ldr.w	r6, [r8, #8]
     192:	bl	858 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     196:	mov	r1, r7
     198:	ldr	r0, [pc, #116]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     19a:	bl	1a8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     19e:	ldr	r0, [pc, #112]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     1a0:	bl	19ec <Print::println()>
     1a4:	movs	r1, #13
     1a6:	ldr	r0, [pc, #108]	; (214 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x94>)
     1a8:	bl	858 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     1ac:	mov	r1, r6
     1ae:	ldr	r0, [pc, #96]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     1b0:	bl	1a8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     1b4:	ldr	r0, [pc, #88]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     1b6:	bl	19ec <Print::println()>
    num_of_rows = matrix.rows();
    num_of_cols = matrix.cols();

    Serial.print("num_of_rows: "); Serial.println(num_of_rows);
    Serial.print("num_of_cols: "); Serial.println(num_of_cols);      
    Serial.println();
     1ba:	ldr	r0, [pc, #84]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     1bc:	bl	19ec <Print::println()>
    
    for (i = 0; i < num_of_rows; i++)
     1c0:	cmp	r7, #0
     1c2:	ble.n	202 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x82>
     1c4:	movs	r5, #0
    {
        for (j = 0; j < num_of_cols; j++)
     1c6:	cmp	r6, #0
     1c8:	ble.n	1f6 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x76>
     1ca:	movs	r4, #0
        {
            Serial.print(matrix(i,j), 6);   // print 6 decimal places
     1cc:	ldr.w	r2, [r8, #4]
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     1d0:	movs	r1, #6
     1d2:	ldr.w	r3, [r8]
     1d6:	mla	r2, r2, r4, r5
     1da:	ldr	r0, [pc, #52]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
    Serial.print("num_of_cols: "); Serial.println(num_of_cols);      
    Serial.println();
    
    for (i = 0; i < num_of_rows; i++)
    {
        for (j = 0; j < num_of_cols; j++)
     1dc:	adds	r4, #1
        {
            Serial.print(matrix(i,j), 6);   // print 6 decimal places
     1de:	add.w	r3, r3, r2, lsl #3
     1e2:	vldr	d0, [r3]
     1e6:	bl	1aa8 <Print::printFloat(double, unsigned char)>
     1ea:	movs	r1, #2
     1ec:	ldr	r0, [pc, #40]	; (218 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x98>)
     1ee:	bl	858 <usb_serial_write>
    Serial.print("num_of_cols: "); Serial.println(num_of_cols);      
    Serial.println();
    
    for (i = 0; i < num_of_rows; i++)
    {
        for (j = 0; j < num_of_cols; j++)
     1f2:	cmp	r6, r4
     1f4:	bne.n	1cc <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x4c>

    Serial.print("num_of_rows: "); Serial.println(num_of_rows);
    Serial.print("num_of_cols: "); Serial.println(num_of_cols);      
    Serial.println();
    
    for (i = 0; i < num_of_rows; i++)
     1f6:	adds	r5, #1
        for (j = 0; j < num_of_cols; j++)
        {
            Serial.print(matrix(i,j), 6);   // print 6 decimal places
            Serial.print(", ");
        }
        Serial.println();
     1f8:	ldr	r0, [pc, #20]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
     1fa:	bl	19ec <Print::println()>

    Serial.print("num_of_rows: "); Serial.println(num_of_rows);
    Serial.print("num_of_cols: "); Serial.println(num_of_cols);      
    Serial.println();
    
    for (i = 0; i < num_of_rows; i++)
     1fe:	cmp	r7, r5
     200:	bne.n	1c6 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x46>
            Serial.print(matrix(i,j), 6);   // print 6 decimal places
            Serial.print(", ");
        }
        Serial.println();
    }
    Serial.println();
     202:	ldr	r0, [pc, #12]	; (210 <project_namespace::serialPrintMatrix(Eigen::Matrix<double, -1, -1, 0, -1, -1> const&)+0x90>)
}
     204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(matrix(i,j), 6);   // print 6 decimal places
            Serial.print(", ");
        }
        Serial.println();
    }
    Serial.println();
     208:	b.w	19ec <Print::println()>
     20c:	.word	0x20000000
     210:	.word	0x20000374
     214:	.word	0x20000010
     218:	.word	0x20000020

0000021c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     21c:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     21e:	ldr	r1, [pc, #80]	; (270 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     220:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     224:	ldr	r5, [pc, #76]	; (274 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     226:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     228:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     22c:	ldr	r6, [pc, #72]	; (278 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     22e:	ldr	r2, [pc, #76]	; (27c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     230:	add.w	r5, r5, r0, lsl #5
     234:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     236:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     238:	mov	r0, r5
     23a:	ldrh	r2, [r6, #0]
     23c:	bl	11f8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     240:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     242:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     246:	add	r1, r4
	asm("dsb");
     248:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     24c:	ldr	r2, [pc, #48]	; (280 <rx_queue_transfer+0x64>)
     24e:	str	r3, [r2, #0]
		location += 32;
     250:	adds	r3, #32
	} while (location < end_addr);
     252:	cmp	r1, r3
     254:	bhi.n	24e <rx_queue_transfer+0x32>
	asm("dsb");
     256:	dsb	sy
	asm("isb");
     25a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     25e:	movs	r0, #3
     260:	mov	r1, r5
     262:	bl	1250 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     266:	ldr	r3, [pc, #28]	; (284 <rx_queue_transfer+0x68>)
     268:	mov.w	r2, #131072	; 0x20000
     26c:	str	r2, [r3, #0]
     26e:	pop	{r3, r4, r5, r6, r7, pc}
     270:	.word	0x20200000
     274:	.word	0x20000c00
     278:	.word	0x20000d0e
     27c:	.word	0xe000e18c
     280:	.word	0xe000ef5c
     284:	.word	0xe000e10c

00000288 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     288:	ldr	r2, [pc, #144]	; (31c <rx_event+0x94>)
     28a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     28c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     290:	ubfx	r3, r3, #16, #15
     294:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     296:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     298:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     29a:	cmp	r4, #0
     29c:	ble.n	310 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     29e:	ldr	r1, [pc, #128]	; (320 <rx_event+0x98>)
		if (head != rx_tail) {
     2a0:	ldr	r2, [pc, #128]	; (324 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     2a2:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     2a4:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     2a6:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     2a8:	ldr	r0, [pc, #124]	; (328 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     2aa:	ldr	r6, [pc, #128]	; (32c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     2ac:	cmp	r3, r2
     2ae:	beq.n	2c0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     2b0:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     2b4:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     2b8:	rsb	r2, r7, #512	; 0x200
     2bc:	cmp	r4, r2
     2be:	bls.n	2e6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     2c0:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     2c2:	movs	r2, #0
     2c4:	ldr	r7, [pc, #104]	; (330 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     2c6:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     2c8:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     2cc:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     2d0:	ldr	r6, [pc, #96]	; (334 <rx_event+0xac>)
     2d2:	ite	ls
     2d4:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     2d6:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     2d8:	strb	r2, [r1, #0]
		rx_available += len;
     2da:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     2dc:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     2de:	add	r4, r2
     2e0:	str	r4, [r6, #0]
     2e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2e6:	ldr	r3, [pc, #80]	; (338 <rx_event+0xb0>)
     2e8:	add.w	r0, r7, r8, lsl #9
     2ec:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     2ee:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     2f0:	add.w	r1, r3, r5, lsl #9
     2f4:	add	r0, r3
     2f6:	bl	1c20 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     2fa:	ldr	r2, [pc, #56]	; (334 <rx_event+0xac>)
				rx_queue_transfer(i);
     2fc:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     2fe:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     302:	ldr	r3, [r2, #0]
     304:	add	r4, r3
     306:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     30c:	b.w	21c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     310:	mov	r0, r5
	}
}
     312:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     316:	b.w	21c <rx_queue_transfer>
     31a:	nop
     31c:	.word	0x20000d0e
     320:	.word	0x20000d24
     324:	.word	0x20000d00
     328:	.word	0x20000d04
     32c:	.word	0x20000d10
     330:	.word	0x20000bec
     334:	.word	0x20000d20
     338:	.word	0x20200000

0000033c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     33c:	ldr	r3, [pc, #120]	; (3b8 <usb_serial_flush_callback+0x7c>)
     33e:	ldrb	r2, [r3, #0]
     340:	cbnz	r2, 35a <usb_serial_flush_callback+0x1e>
     342:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     346:	ldr	r2, [pc, #116]	; (3bc <usb_serial_flush_callback+0x80>)
     348:	ldrb	r2, [r2, #0]
     34a:	cbz	r2, 35a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     34c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     350:	ldr	r5, [pc, #108]	; (3c0 <usb_serial_flush_callback+0x84>)
     352:	ldrh	r2, [r5, #0]
     354:	cbnz	r2, 35c <usb_serial_flush_callback+0x20>
     356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     35a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     35c:	ldr	r6, [pc, #100]	; (3c4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     35e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     362:	ldr	r7, [pc, #100]	; (3c8 <usb_serial_flush_callback+0x8c>)
     364:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     366:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     368:	ldr	r4, [pc, #96]	; (3cc <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     36a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     36e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     372:	mov	r0, r7
     374:	mov	r1, r4
     376:	bl	11f8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     37a:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     37e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     382:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     386:	ldr	r3, [pc, #72]	; (3d0 <usb_serial_flush_callback+0x94>)
     388:	str	r1, [r3, #0]
		location += 32;
     38a:	adds	r1, #32
	} while (location < end_addr);
     38c:	cmp	r2, r1
     38e:	bhi.n	388 <usb_serial_flush_callback+0x4c>
	asm("dsb");
     390:	dsb	sy
	asm("isb");
     394:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     398:	movs	r0, #4
     39a:	mov	r1, r7
     39c:	bl	1228 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     3a0:	ldrb	r3, [r6, #0]
     3a2:	ldr	r2, [pc, #32]	; (3c4 <usb_serial_flush_callback+0x88>)
     3a4:	adds	r3, #1
     3a6:	uxtb	r3, r3
     3a8:	cmp	r3, #3
     3aa:	it	hi
     3ac:	movhi	r3, #0
     3ae:	strb	r3, [r2, #0]
	tx_available = 0;
     3b0:	movs	r3, #0
     3b2:	strh	r3, [r5, #0]
     3b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     3b8:	.word	0x20000bfe
     3bc:	.word	0x20000df8
     3c0:	.word	0x20000d26
     3c4:	.word	0x20000bff
     3c8:	.word	0x20000d40
     3cc:	.word	0x20201000
     3d0:	.word	0xe000ef70

000003d4 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     3d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3d8:	sub	sp, #20
     3da:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     3dc:	str	r1, [sp, #4]
     3de:	cmp	r1, #0
     3e0:	beq.w	528 <usb_serial_write.part.1+0x154>
     3e4:	movs	r3, #0
     3e6:	ldr.w	r8, [pc, #348]	; 544 <usb_serial_write.part.1+0x170>
     3ea:	ldr.w	r9, [pc, #332]	; 538 <usb_serial_write.part.1+0x164>
     3ee:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     3f0:	ldr	r6, [pc, #312]	; (52c <usb_serial_write.part.1+0x158>)
     3f2:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     3f6:	ldr.w	sl, [pc, #336]	; 548 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     3fa:	ldr.w	fp, [pc, #336]	; 54c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     3fe:	ldr	r2, [pc, #304]	; (530 <usb_serial_write.part.1+0x15c>)
     400:	ldrb	r4, [r2, #0]
     402:	ldr	r2, [pc, #304]	; (534 <usb_serial_write.part.1+0x160>)
     404:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     408:	cmp	r3, #0
     40a:	bne.n	4ea <usb_serial_write.part.1+0x116>
     40c:	mov	r5, r3
     40e:	mov	r4, r3
     410:	b.n	43c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     412:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     416:	cbnz	r4, 41a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     418:	ldr	r5, [r6, #0]
     41a:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     41c:	cmp	r3, #0
     41e:	bne.n	4de <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     420:	ldr	r3, [r6, #0]
     422:	subs	r3, r3, r5
     424:	cmp	r3, #120	; 0x78
     426:	bhi.n	51c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     428:	ldrb.w	r3, [sl]
     42c:	cmp	r3, #0
     42e:	beq.n	4de <usb_serial_write.part.1+0x10a>
			yield();
     430:	bl	1714 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     434:	ldrh.w	r3, [r8]
     438:	cmp	r3, #0
     43a:	bne.n	4e6 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     43c:	mov	r0, r7
     43e:	bl	1274 <usb_transfer_status>
			if (!(status & 0x80)) {
     442:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     446:	ldr	r2, [pc, #240]	; (538 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     448:	bne.n	412 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     44a:	mov.w	r3, #2048	; 0x800
     44e:	ldr	r2, [pc, #224]	; (530 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     450:	strb.w	r0, [r9]
     454:	ldrb	r4, [r2, #0]
     456:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     458:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     45c:	lsls	r4, r4, #11
		if (size >= tx_available) {
     45e:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     460:	ldr	r1, [pc, #216]	; (53c <usb_serial_write.part.1+0x168>)
     462:	add	r0, r4
		if (size >= tx_available) {
     464:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     466:	add	r0, r1
		if (size >= tx_available) {
     468:	bcc.n	4f2 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     46a:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     46c:	ldr	r1, [sp, #8]
     46e:	bl	1c20 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     472:	movs	r3, #0
     474:	mov	r1, r4
     476:	mov.w	r2, #2048	; 0x800
     47a:	mov	r0, r7
     47c:	bl	11f8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     480:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     484:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     488:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     48c:	str.w	r3, [fp]
		location += 32;
     490:	adds	r3, #32
	} while (location < end_addr);
     492:	cmp	r4, r3
     494:	bhi.n	48c <usb_serial_write.part.1+0xb8>
	asm("dsb");
     496:	dsb	sy
	asm("isb");
     49a:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     49e:	movs	r0, #4
     4a0:	mov	r1, r7
     4a2:	bl	1228 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     4a6:	ldr	r3, [pc, #136]	; (530 <usb_serial_write.part.1+0x15c>)
     4a8:	ldr	r2, [pc, #132]	; (530 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     4aa:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     4ac:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     4ae:	ldr	r0, [pc, #144]	; (540 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     4b0:	adds	r3, #1
     4b2:	uxtb	r3, r3
     4b4:	cmp	r3, #3
     4b6:	it	hi
     4b8:	movhi	r3, #0
     4ba:	strb	r3, [r2, #0]
			size -= tx_available;
     4bc:	ldrh.w	r2, [r8]
			sent += tx_available;
     4c0:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     4c2:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     4c6:	add	r3, r2
     4c8:	str	r3, [sp, #0]
			data += tx_available;
     4ca:	ldr	r3, [sp, #8]
     4cc:	add	r3, r2
     4ce:	str	r3, [sp, #8]
     4d0:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     4d2:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     4d6:	ldr	r1, [sp, #4]
     4d8:	subs	r2, r1, r2
     4da:	str	r2, [sp, #4]
     4dc:	bne.n	3fe <usb_serial_write.part.1+0x2a>
     4de:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     4e0:	add	sp, #20
     4e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4e6:	ldr	r2, [pc, #72]	; (530 <usb_serial_write.part.1+0x15c>)
     4e8:	ldrb	r4, [r2, #0]
     4ea:	mov	r2, r3
     4ec:	rsb	r0, r3, #2048	; 0x800
     4f0:	b.n	45c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     4f2:	ldr	r4, [sp, #4]
     4f4:	ldr	r1, [sp, #8]
     4f6:	mov	r2, r4
     4f8:	str	r3, [sp, #12]
     4fa:	bl	1c20 <memcpy>
			tx_available -= size;
     4fe:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     500:	ldr	r2, [pc, #60]	; (540 <usb_serial_write.part.1+0x16c>)
     502:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     506:	subs	r3, r3, r4
     508:	strh.w	r3, [r8]
     50c:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     50e:	str.w	r1, [r2, #132]	; 0x84
     512:	mov	r0, r3
     514:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     516:	add	sp, #20
     518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     51c:	movs	r3, #1
				return sent;
     51e:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     520:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     522:	add	sp, #20
     524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     528:	ldr	r0, [sp, #4]
     52a:	b.n	4e0 <usb_serial_write.part.1+0x10c>
     52c:	.word	0x20000e04
     530:	.word	0x20000bff
     534:	.word	0x20000d40
     538:	.word	0x20000d25
     53c:	.word	0x20201000
     540:	.word	0x402e0000
     544:	.word	0x20000d26
     548:	.word	0x20000df8
     54c:	.word	0xe000ef70

00000550 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     550:	bx	lr
     552:	nop

00000554 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     554:	ldr	r3, [pc, #196]	; (61c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     556:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     55a:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     55c:	ldr	r7, [pc, #192]	; (620 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     55e:	cmp	r3, #0
     560:	beq.n	60c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     562:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     566:	ldr.w	r8, [pc, #236]	; 654 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     56a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     56c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     570:	movs	r1, #0
     572:	movs	r2, #128	; 0x80
     574:	ldr	r0, [pc, #172]	; (624 <usb_serial_configure+0xd0>)
	tx_head = 0;
     576:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     578:	ldr	r6, [pc, #172]	; (628 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     57a:	bl	277c <memset>
	tx_head = 0;
     57e:	ldr	r4, [pc, #172]	; (62c <usb_serial_configure+0xd8>)
	tx_available = 0;
     580:	ldr	r3, [pc, #172]	; (630 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     582:	mov	r1, r5
     584:	mov.w	r2, #256	; 0x100
     588:	ldr	r0, [pc, #168]	; (634 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     58a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     58c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     58e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     590:	bl	277c <memset>
	memset(rx_count, 0, sizeof(rx_count));
     594:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     596:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     598:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     59a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     59c:	str	r5, [r6, #8]
     59e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     5a0:	ldr	r1, [pc, #148]	; (638 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     5a2:	ldr	r6, [pc, #152]	; (63c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     5a4:	ldr	r0, [pc, #152]	; (640 <usb_serial_configure+0xec>)
	rx_available = 0;
     5a6:	ldr.w	lr, [pc, #176]	; 658 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     5aa:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5ac:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     5ae:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5b0:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     5b2:	str	r5, [r6, #0]
     5b4:	str	r5, [r6, #4]
     5b6:	str	r5, [r6, #8]
     5b8:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     5ba:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     5be:	bl	1190 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     5c2:	ldrh.w	r1, [r8]
     5c6:	mov	r2, r5
     5c8:	ldr	r3, [pc, #120]	; (644 <usb_serial_configure+0xf0>)
     5ca:	movs	r0, #3
     5cc:	bl	112c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     5d0:	mov	r3, r5
     5d2:	ldrh	r1, [r7, #0]
     5d4:	movs	r2, #1
     5d6:	movs	r0, #4
     5d8:	bl	1190 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     5dc:	mov	r0, r4
     5de:	adds	r4, #1
     5e0:	bl	21c <rx_queue_transfer>
     5e4:	cmp	r4, #8
     5e6:	bne.n	5dc <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     5e8:	ldr	r3, [pc, #92]	; (648 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     5ea:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5ec:	ldr	r0, [pc, #92]	; (64c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     5ee:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     5f0:	ldr	r4, [pc, #92]	; (650 <usb_serial_configure+0xfc>)
     5f2:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     5f4:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     5f8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     5fc:	ldr.w	r2, [r3, #328]	; 0x148
     600:	orr.w	r2, r2, #16777216	; 0x1000000
     604:	str.w	r2, [r3, #328]	; 0x148
     608:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     60c:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     60e:	ldr.w	r8, [pc, #68]	; 654 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     612:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     614:	strh.w	r3, [r8]
     618:	b.n	570 <usb_serial_configure+0x1c>
     61a:	nop
     61c:	.word	0x20000dd0
     620:	.word	0x20000bfc
     624:	.word	0x20000d40
     628:	.word	0x20000d10
     62c:	.word	0x20000bff
     630:	.word	0x20000d26
     634:	.word	0x20000c00
     638:	.word	0x20000d24
     63c:	.word	0x20000bec
     640:	.word	0x20000d00
     644:	.word	0x00000289
     648:	.word	0x402e0000
     64c:	.word	0x20000dc0
     650:	.word	0x0000033d
     654:	.word	0x20000d0e
     658:	.word	0x20000d20

0000065c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     65c:	ldr	r3, [pc, #196]	; (724 <usb_serial_read+0xc8>)
     65e:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     662:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     666:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     668:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     66a:	ldr	r3, [pc, #188]	; (728 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     66c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     66e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     670:	cmp	r1, #0
     672:	beq.n	71c <usb_serial_read+0xc0>
     674:	ldr	r3, [pc, #180]	; (72c <usb_serial_read+0xd0>)
     676:	uxtb	r4, r4
     678:	ldrb	r3, [r3, #0]
     67a:	cmp	r4, r3
     67c:	beq.n	720 <usb_serial_read+0xc4>
     67e:	mov	sl, r0
     680:	movs	r7, #0
     682:	ldr.w	fp, [pc, #192]	; 744 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     686:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     688:	ldr	r3, [pc, #164]	; (730 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     68a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     68e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     690:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     692:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     694:	ldr	r3, [pc, #156]	; (734 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     696:	it	cs
     698:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     69a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     69c:	ldr	r3, [pc, #144]	; (730 <usb_serial_read+0xd4>)
     69e:	ldrh.w	lr, [r3, r5, lsl #1]
     6a2:	ldr	r3, [pc, #148]	; (738 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6a4:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     6a8:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6ac:	ldr	r3, [pc, #140]	; (73c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     6ae:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6b2:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     6b4:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6b6:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     6b8:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     6ba:	bcs.n	6f0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     6bc:	add.w	r1, lr, r5, lsl #9
     6c0:	mov	r2, r8
     6c2:	add	r1, r3
     6c4:	bl	1c20 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     6c8:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6ca:	ldr.w	r1, [fp]
     6ce:	mov	r0, r9
			rx_index[i] += len;
     6d0:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6d4:	rsb	r1, r8, r1
			rx_index[i] += len;
     6d8:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     6da:	str.w	r1, [fp]
			rx_index[i] += len;
     6de:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     6e2:	ldr	r3, [pc, #92]	; (740 <usb_serial_read+0xe4>)
     6e4:	mov.w	r2, #131072	; 0x20000
     6e8:	str	r2, [r3, #0]
	return count;
}
     6ea:	add	sp, #12
     6ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     6f0:	bl	1c20 <memcpy>
			p += avail;
			rx_available -= avail;
     6f4:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     6f8:	uxtb	r3, r4
			rx_queue_transfer(i);
     6fa:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     6fc:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     6fe:	add	sl, r6
			rx_available -= avail;
     700:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     704:	ldr	r2, [pc, #32]	; (728 <usb_serial_read+0xcc>)
     706:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     708:	bl	21c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     70c:	cmp	r9, r7
     70e:	bls.n	718 <usb_serial_read+0xbc>
     710:	ldr	r3, [pc, #24]	; (72c <usb_serial_read+0xd0>)
     712:	ldrb	r3, [r3, #0]
     714:	cmp	r4, r3
     716:	bne.n	686 <usb_serial_read+0x2a>
     718:	mov	r0, r7
     71a:	b.n	6e2 <usb_serial_read+0x86>
     71c:	mov	r0, r1
     71e:	b.n	6e2 <usb_serial_read+0x86>
     720:	movs	r0, #0
     722:	b.n	6e2 <usb_serial_read+0x86>
     724:	.word	0xe000e18c
     728:	.word	0x20000d00
     72c:	.word	0x20000d24
     730:	.word	0x20000bec
     734:	.word	0x20000d04
     738:	.word	0x20000d10
     73c:	.word	0x20200000
     740:	.word	0xe000e10c
     744:	.word	0x20000d20

00000748 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     748:	ldr	r3, [pc, #44]	; (778 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     74a:	ldr	r2, [pc, #48]	; (77c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     74c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     74e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     750:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     752:	cmp	r3, r2
     754:	beq.n	772 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     756:	adds	r3, #1
	uint32_t i = rx_list[tail];
     758:	ldr	r0, [pc, #36]	; (780 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     75a:	ldr	r2, [pc, #40]	; (784 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     75c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     75e:	ldr	r1, [pc, #40]	; (788 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     760:	it	cs
     762:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     764:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     766:	ldrh.w	r1, [r1, r3, lsl #1]
     76a:	add.w	r3, r2, r3, lsl #9
     76e:	ldrb	r0, [r3, r1]
     770:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     772:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     776:	bx	lr
     778:	.word	0x20000d00
     77c:	.word	0x20000d24
     780:	.word	0x20000d04
     784:	.word	0x20200000
     788:	.word	0x20000bec

0000078c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     78c:	ldr	r3, [pc, #4]	; (794 <usb_serial_available+0x8>)
     78e:	ldr	r0, [r3, #0]
}
     790:	bx	lr
     792:	nop
     794:	.word	0x20000d20

00000798 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     798:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     79c:	ldr	r6, [pc, #84]	; (7f4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     79e:	ldr	r5, [pc, #88]	; (7f8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     7a0:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     7a2:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     7a4:	uxtb	r4, r4
	while (tail != rx_head) {
     7a6:	cmp	r4, r3
     7a8:	beq.n	7ee <usb_serial_flush_input+0x56>
     7aa:	ldr.w	r9, [pc, #84]	; 800 <usb_serial_flush_input+0x68>
     7ae:	ldr.w	fp, [pc, #84]	; 804 <usb_serial_flush_input+0x6c>
     7b2:	ldr.w	r8, [pc, #84]	; 808 <usb_serial_flush_input+0x70>
     7b6:	ldr	r7, [pc, #68]	; (7fc <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     7b8:	adds	r4, #1
     7ba:	cmp	r4, #8
     7bc:	uxtb.w	sl, r4
     7c0:	bls.n	7c6 <usb_serial_flush_input+0x2e>
     7c2:	movs	r4, #0
     7c4:	mov	sl, r4
		uint32_t i = rx_list[tail];
     7c6:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     7ca:	ldr.w	r2, [fp]
     7ce:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     7d2:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     7d4:	ldrh.w	r1, [r7, r1, lsl #1]
     7d8:	subs	r3, r3, r1
     7da:	subs	r3, r2, r3
     7dc:	str.w	r3, [fp]
		rx_queue_transfer(i);
     7e0:	bl	21c <rx_queue_transfer>
		rx_tail = tail;
     7e4:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     7e8:	ldrb	r3, [r5, #0]
     7ea:	cmp	r4, r3
     7ec:	bne.n	7b8 <usb_serial_flush_input+0x20>
     7ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7f2:	nop
     7f4:	.word	0x20000d00
     7f8:	.word	0x20000d24
     7fc:	.word	0x20000bec
     800:	.word	0x20000d04
     804:	.word	0x20000d20
     808:	.word	0x20000d10

0000080c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     80c:	push	{lr}
     80e:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     810:	movs	r1, #1
     812:	add.w	r0, sp, #7
     816:	bl	65c <usb_serial_read>
     81a:	cbz	r0, 826 <usb_serial_getchar+0x1a>
     81c:	ldrb.w	r0, [sp, #7]
	return -1;
}
     820:	add	sp, #12
     822:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     826:	mov.w	r0, #4294967295
     82a:	b.n	820 <usb_serial_getchar+0x14>

0000082c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     82c:	ldr	r3, [pc, #36]	; (854 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     82e:	push	{lr}
     830:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     832:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     834:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     838:	cbnz	r3, 844 <usb_serial_putchar+0x18>
     83a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     83e:	add	sp, #12
     840:	ldr.w	pc, [sp], #4
     844:	movs	r1, #1
     846:	add.w	r0, sp, #7
     84a:	bl	3d4 <usb_serial_write.part.1>
     84e:	add	sp, #12
     850:	ldr.w	pc, [sp], #4
     854:	.word	0x20000df8

00000858 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     858:	ldr	r3, [pc, #16]	; (86c <usb_serial_write+0x14>)
     85a:	ldrb	r3, [r3, #0]
     85c:	and.w	r2, r3, #255	; 0xff
     860:	cbz	r3, 866 <usb_serial_write+0xe>
     862:	b.w	3d4 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     866:	mov	r0, r2
     868:	bx	lr
     86a:	nop
     86c:	.word	0x20000df8

00000870 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     870:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     874:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     876:	ldr.w	r8, [pc, #64]	; 8b8 <usb_serial_write_buffer_free+0x48>
     87a:	movs	r3, #1
     87c:	ldr	r5, [pc, #48]	; (8b0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     87e:	mov	r7, r4
     880:	ldr	r6, [pc, #48]	; (8b4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     882:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     886:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     888:	mov	r0, r5
     88a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     88c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     88e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     892:	beq.n	8a0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     894:	bl	1274 <usb_transfer_status>
     898:	lsls	r3, r0, #24
     89a:	it	pl
     89c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     8a0:	cmp	r4, #4
     8a2:	bne.n	886 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     8a4:	movs	r3, #0
	return sum;
}
     8a6:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     8a8:	strb.w	r3, [r8]
	return sum;
}
     8ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8b0:	.word	0x20000d40
     8b4:	.word	0x20000bff
     8b8:	.word	0x20000bfe

000008bc <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     8bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     8c0:	ldr	r3, [pc, #124]	; (940 <usb_serial_flush_output+0x84>)
     8c2:	ldrb	r3, [r3, #0]
     8c4:	cbz	r3, 8cc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     8c6:	ldr	r5, [pc, #124]	; (944 <usb_serial_flush_output+0x88>)
     8c8:	ldrh	r2, [r5, #0]
     8ca:	cbnz	r2, 8d0 <usb_serial_flush_output+0x14>
     8cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8d0:	ldr.w	r8, [pc, #132]	; 958 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     8d4:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8d8:	ldr	r6, [pc, #108]	; (948 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8da:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     8de:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8e2:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8e4:	ldr	r4, [pc, #100]	; (94c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8e6:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     8e8:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8ec:	ldr	r7, [pc, #96]	; (950 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     8ee:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8f2:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     8f4:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     8f8:	mov	r1, r4
     8fa:	bl	11f8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     8fe:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     902:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     906:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     90a:	ldr	r3, [pc, #72]	; (954 <usb_serial_flush_output+0x98>)
     90c:	str	r1, [r3, #0]
		location += 32;
     90e:	adds	r1, #32
	} while (location < end_addr);
     910:	cmp	r2, r1
     912:	bhi.n	90c <usb_serial_flush_output+0x50>
	asm("dsb");
     914:	dsb	sy
	asm("isb");
     918:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     91c:	movs	r0, #4
     91e:	mov	r1, r6
     920:	bl	1228 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     924:	ldrb.w	r3, [r8]
     928:	ldr	r2, [pc, #44]	; (958 <usb_serial_flush_output+0x9c>)
     92a:	adds	r3, #1
     92c:	uxtb	r3, r3
     92e:	cmp	r3, #3
     930:	it	hi
     932:	movhi	r3, #0
     934:	strb	r3, [r2, #0]
	tx_available = 0;
     936:	movs	r3, #0
     938:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     93a:	strb	r3, [r7, #0]
     93c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     940:	.word	0x20000df8
     944:	.word	0x20000d26
     948:	.word	0x20000d40
     94c:	.word	0x20201000
     950:	.word	0x20000bfe
     954:	.word	0xe000ef70
     958:	.word	0x20000bff

0000095c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     95c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     95e:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     960:	cbz	r3, 96a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     962:	ldr	r3, [r2, #4]
     964:	orr.w	r3, r3, #32768	; 0x8000
     968:	str	r3, [r2, #4]
	}
	__disable_irq();
     96a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     96c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     96e:	cbz	r4, 998 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     970:	ldr	r3, [pc, #64]	; (9b4 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     972:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     974:	ldr.w	r4, [r3, #432]	; 0x1b0
     978:	tst	r4, r1
     97a:	bne.n	9ac <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     97c:	ldr.w	r4, [r3, #320]	; 0x140
     980:	orr.w	r4, r4, #16384	; 0x4000
     984:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     988:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     98c:	ldr.w	r4, [r3, #320]	; 0x140
     990:	lsls	r4, r4, #17
     992:	bpl.n	97c <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     994:	tst	r1, r5
     996:	bne.n	9ac <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     998:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     99a:	ldr	r4, [pc, #24]	; (9b4 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     99c:	str	r2, [r0, #8]
	endpoint->status = 0;
     99e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     9a0:	ldr.w	r3, [r4, #432]	; 0x1b0
     9a4:	orrs	r1, r3
     9a6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     9aa:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     9ac:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     9ae:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     9b0:	pop	{r4, r5}
     9b2:	bx	lr
     9b4:	.word	0x402e0000

000009b8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     9b8:	push	{r4, r5, r6, lr}
     9ba:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     9bc:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     9be:	cbz	r0, 9e6 <run_callbacks+0x2e>
     9c0:	mov	r2, r0
     9c2:	movs	r4, #0
     9c4:	b.n	9ce <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     9c6:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     9c8:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     9ca:	cmp	r2, #1
     9cc:	beq.n	9e8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     9ce:	ldr	r3, [r2, #4]
     9d0:	ands.w	r3, r3, #128	; 0x80
     9d4:	beq.n	9c6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     9d6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     9d8:	cbz	r4, 9e6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     9da:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     9dc:	ldr	r5, [r0, #0]
		ep->callback_function(first);
     9de:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     9e0:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     9e2:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     9e4:	bne.n	9da <run_callbacks+0x22>
     9e6:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     9e8:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     9ea:	str	r3, [r6, #52]	; 0x34
			break;
     9ec:	b.n	9d8 <run_callbacks+0x20>
     9ee:	nop

000009f0 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     9f0:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     9f2:	cbnz	r1, a32 <endpoint0_transmit.constprop.1+0x42>
     9f4:	ldr	r4, [pc, #136]	; (a80 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     9f6:	ldr	r1, [pc, #140]	; (a84 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     9f8:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     9fa:	ldr	r3, [pc, #140]	; (a88 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     9fc:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9fe:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     a00:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     a02:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     a04:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a06:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     a08:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     a0a:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     a0e:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     a10:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     a14:	ldr	r5, [pc, #116]	; (a8c <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     a16:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     a1a:	ldr.w	r1, [r3, #432]	; 0x1b0
     a1e:	orr.w	r1, r1, #1
     a22:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     a26:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     a28:	ldr.w	r3, [r2, #432]	; 0x1b0
     a2c:	cmp	r3, #0
     a2e:	bne.n	a28 <endpoint0_transmit.constprop.1+0x38>
}
     a30:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     a32:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     a34:	ldr	r3, [pc, #88]	; (a90 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a36:	ldr	r5, [pc, #80]	; (a88 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     a38:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     a3a:	ldr	r4, [pc, #68]	; (a80 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     a3c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     a40:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     a42:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     a44:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     a46:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     a4a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     a4c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     a50:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     a52:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a56:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a5a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     a5e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     a60:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a62:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     a66:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     a6a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     a6e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a70:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a72:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     a76:	ldr.w	r3, [r2, #432]	; 0x1b0
     a7a:	cmp	r3, #0
     a7c:	bne.n	a76 <endpoint0_transmit.constprop.1+0x86>
     a7e:	b.n	9f6 <endpoint0_transmit.constprop.1+0x6>
     a80:	.word	0x20002000
     a84:	.word	0x20001020
     a88:	.word	0x402e0000
     a8c:	.word	0x20000dd4
     a90:	.word	0x20001000

00000a94 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
     a94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     a98:	ldr	r4, [pc, #752]	; (d8c <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
     a9a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     a9c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     aa0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     aa4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     aa8:	beq.n	b68 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     aaa:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     aae:	cmp	r3, #0
     ab0:	beq.n	b5e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     ab2:	mov.w	fp, #65537	; 0x10001
     ab6:	ldr.w	r9, [pc, #764]	; db4 <isr+0x320>
     aba:	ldr	r6, [pc, #724]	; (d90 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     abc:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     abe:	mov	sl, fp
     ac0:	ldr	r0, [r6, #40]	; 0x28
     ac2:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     ac4:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     ac8:	ldr.w	r3, [r4, #320]	; 0x140
     acc:	orr.w	r3, r3, #8192	; 0x2000
     ad0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     ad4:	ldr.w	r3, [r4, #320]	; 0x140
     ad8:	lsls	r7, r3, #18
     ada:	bpl.n	ac8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     adc:	ldr.w	r3, [r5, #320]	; 0x140
     ae0:	bic.w	r3, r3, #8192	; 0x2000
     ae4:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     ae8:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     aec:	ldr.w	r3, [r4, #436]	; 0x1b4
     af0:	ands.w	r3, r3, #65537	; 0x10001
     af4:	bne.n	aec <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     af6:	uxth	r1, r0
     af8:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     afc:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     b00:	cmp	r1, r7
     b02:	bhi.w	c50 <isr+0x1bc>
     b06:	cmp.w	r1, #1664	; 0x680
     b0a:	bcs.w	ee4 <isr+0x450>
     b0e:	cmp.w	r1, #258	; 0x102
     b12:	beq.w	dea <isr+0x356>
     b16:	bhi.w	ce2 <isr+0x24e>
     b1a:	cmp	r1, #128	; 0x80
     b1c:	beq.w	dd0 <isr+0x33c>
     b20:	cmp	r1, #130	; 0x82
     b22:	bne.w	cd2 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     b26:	uxth	r2, r2
     b28:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     b2c:	cmp	r1, #7
     b2e:	bhi.w	cd2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     b32:	lsls	r1, r1, #2
     b34:	ldr	r0, [pc, #604]	; (d94 <isr+0x300>)
		reply_buffer[0] = 0;
     b36:	ldr	r7, [pc, #608]	; (d98 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     b38:	add	r0, r1
     b3a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     b3c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     b3e:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     b40:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     b42:	bpl.w	f62 <isr+0x4ce>
     b46:	lsls	r2, r1, #15
     b48:	bpl.n	b4e <isr+0xba>
			reply_buffer[0] = 1;
     b4a:	movs	r3, #1
     b4c:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     b4e:	movs	r1, #2
     b50:	ldr	r0, [pc, #580]	; (d98 <isr+0x304>)
     b52:	bl	9f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     b56:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     b5a:	cmp	r3, #0
     b5c:	bne.n	ac0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     b5e:	ldr	r2, [pc, #556]	; (d8c <isr+0x2f8>)
     b60:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     b64:	cmp	r3, #0
     b66:	bne.n	c0a <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     b68:	tst.w	r8, #64	; 0x40
     b6c:	beq.n	ba0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     b6e:	ldr	r3, [pc, #540]	; (d8c <isr+0x2f8>)
     b70:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     b74:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     b76:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     b7a:	ldr.w	r1, [r3, #444]	; 0x1bc
     b7e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     b82:	ldr.w	r4, [r2, #432]	; 0x1b0
     b86:	ldr	r3, [pc, #516]	; (d8c <isr+0x2f8>)
     b88:	cmp	r4, #0
     b8a:	bne.n	b82 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     b8c:	mov.w	r2, #4294967295
     b90:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     b94:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     b98:	bl	550 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     b9c:	ldr	r3, [pc, #508]	; (d9c <isr+0x308>)
     b9e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     ba0:	tst.w	r8, #16777216	; 0x1000000
     ba4:	beq.n	bae <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     ba6:	ldr	r3, [pc, #504]	; (da0 <isr+0x30c>)
     ba8:	ldr	r3, [r3, #0]
     baa:	cbz	r3, bae <isr+0x11a>
     bac:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     bae:	tst.w	r8, #33554432	; 0x2000000
     bb2:	beq.n	bbc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     bb4:	ldr	r3, [pc, #492]	; (da4 <isr+0x310>)
     bb6:	ldr	r3, [r3, #0]
     bb8:	cbz	r3, bbc <isr+0x128>
     bba:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     bbc:	tst.w	r8, #4
     bc0:	beq.n	bd4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     bc2:	ldr	r3, [pc, #456]	; (d8c <isr+0x2f8>)
     bc4:	ldr.w	r3, [r3, #388]	; 0x184
     bc8:	ands.w	r3, r3, #512	; 0x200
     bcc:	beq.n	c4a <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     bce:	ldr	r3, [pc, #472]	; (da8 <isr+0x314>)
     bd0:	movs	r2, #1
     bd2:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     bd4:	ldr	r3, [pc, #436]	; (d8c <isr+0x2f8>)
     bd6:	ldr.w	r2, [r3, #328]	; 0x148
     bda:	lsls	r2, r2, #24
     bdc:	bpl.n	c04 <isr+0x170>
     bde:	tst.w	r8, #128	; 0x80
     be2:	beq.n	c04 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     be4:	ldr	r1, [pc, #452]	; (dac <isr+0x318>)
     be6:	ldrb	r2, [r1, #0]
     be8:	cbz	r2, c04 <isr+0x170>
			if (--usb_reboot_timer == 0) {
     bea:	subs	r2, #1
     bec:	uxtb	r2, r2
     bee:	strb	r2, [r1, #0]
     bf0:	cbnz	r2, c04 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     bf2:	ldr	r1, [pc, #444]	; (db0 <isr+0x31c>)
     bf4:	ldrb	r2, [r1, #0]
     bf6:	and.w	r2, r2, #251	; 0xfb
     bfa:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     bfc:	cmp	r2, #0
     bfe:	beq.w	1066 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     c02:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
     c04:	add	sp, #12
     c06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     c0a:	ldr	r1, [pc, #424]	; (db4 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     c0c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     c10:	ldr	r0, [r1, #0]
     c12:	tst	r3, r0
     c14:	bne.w	fee <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     c18:	ldr	r2, [pc, #384]	; (d9c <isr+0x308>)
     c1a:	ldr	r4, [r2, #0]
			if (completestatus) {
     c1c:	ands	r4, r3
     c1e:	beq.n	b68 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     c20:	lsls	r3, r4, #29
     c22:	bmi.w	1084 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     c26:	lsls	r7, r4, #13
     c28:	bmi.w	107c <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     c2c:	lsls	r6, r4, #28
     c2e:	bmi.w	1094 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     c32:	lsls	r5, r4, #12
     c34:	bmi.w	108c <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     c38:	lsls	r0, r4, #27
     c3a:	bmi.w	1074 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     c3e:	lsls	r1, r4, #11
     c40:	bpl.n	b68 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
     c42:	ldr	r0, [pc, #372]	; (db8 <isr+0x324>)
     c44:	bl	9b8 <run_callbacks>
     c48:	b.n	b68 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     c4a:	ldr	r2, [pc, #348]	; (da8 <isr+0x314>)
     c4c:	strb	r3, [r2, #0]
     c4e:	b.n	bd4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     c50:	movw	r7, #8225	; 0x2021
     c54:	cmp	r1, r7
     c56:	beq.n	cca <isr+0x236>
     c58:	bhi.n	d3a <isr+0x2a6>
     c5a:	cmp.w	r1, #2176	; 0x880
     c5e:	beq.w	ec8 <isr+0x434>
     c62:	cmp.w	r1, #2304	; 0x900
     c66:	bne.n	cd2 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c68:	ubfx	r0, r0, #16, #8
     c6c:	ldr	r2, [pc, #332]	; (dbc <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c6e:	ldr	r1, [pc, #336]	; (dc0 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c70:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c72:	ldr	r7, [pc, #336]	; (dc4 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c74:	ldr	r2, [pc, #336]	; (dc8 <isr+0x334>)
     c76:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c78:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c7c:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c80:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     c84:	bl	554 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c88:	ldr	r2, [pc, #320]	; (dcc <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c8a:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c8c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c8e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c90:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c92:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c94:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     c96:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     c9a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     c9c:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ca0:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ca2:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     ca6:	ldr.w	r2, [r5, #432]	; 0x1b0
     caa:	orr.w	r2, r2, #65536	; 0x10000
     cae:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     cb2:	ldr	r2, [pc, #256]	; (db4 <isr+0x320>)
     cb4:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     cb6:	ldr.w	r3, [r4, #432]	; 0x1b0
     cba:	cmp	r3, #0
     cbc:	bne.n	cb6 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     cbe:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     cc2:	cmp	r3, #0
     cc4:	bne.w	ac0 <isr+0x2c>
     cc8:	b.n	b5e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     cca:	lsrs	r1, r2, #16
     ccc:	cmp	r1, #7
     cce:	beq.w	f6a <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     cd2:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     cd6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     cda:	cmp	r3, #0
     cdc:	bne.w	ac0 <isr+0x2c>
     ce0:	b.n	b5e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     ce2:	movw	r7, #770	; 0x302
     ce6:	cmp	r1, r7
     ce8:	beq.w	e62 <isr+0x3ce>
     cec:	cmp.w	r1, #1280	; 0x500
     cf0:	bne.n	cd2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cf2:	ldr	r2, [pc, #216]	; (dcc <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cf4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cf6:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     cf8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cfa:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cfc:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     cfe:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d02:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d04:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     d08:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d0a:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     d0e:	ldr.w	r3, [r5, #432]	; 0x1b0
     d12:	orr.w	r3, r3, #65536	; 0x10000
     d16:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     d1a:	ldr.w	r3, [r4, #432]	; 0x1b0
     d1e:	cmp	r3, #0
     d20:	bne.n	d1a <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     d22:	lsrs	r3, r0, #16
     d24:	lsls	r3, r3, #25
     d26:	orr.w	r3, r3, #16777216	; 0x1000000
     d2a:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     d2e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d32:	cmp	r3, #0
     d34:	bne.w	ac0 <isr+0x2c>
     d38:	b.n	b5e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     d3a:	movw	r3, #8737	; 0x2221
     d3e:	cmp	r1, r3
     d40:	beq.w	e50 <isr+0x3bc>
     d44:	movw	r3, #8993	; 0x2321
     d48:	cmp	r1, r3
     d4a:	bne.n	cd2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d4c:	ldr	r3, [pc, #124]	; (dcc <isr+0x338>)
     d4e:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d50:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d52:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d54:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d56:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d58:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     d5c:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d5e:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d62:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     d64:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d66:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     d6a:	ldr.w	r3, [r4, #432]	; 0x1b0
     d6e:	orr.w	r3, r3, #65536	; 0x10000
     d72:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     d76:	ldr.w	r3, [r4, #432]	; 0x1b0
     d7a:	cmp	r3, #0
     d7c:	bne.n	d76 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     d7e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d82:	cmp	r3, #0
     d84:	bne.w	ac0 <isr+0x2c>
     d88:	b.n	b5e <isr+0xca>
     d8a:	nop
     d8c:	.word	0x402e0000
     d90:	.word	0x20002000
     d94:	.word	0x402e01c0
     d98:	.word	0x20000de8
     d9c:	.word	0x20000dc4
     da0:	.word	0x20000dc0
     da4:	.word	0x20000dcc
     da8:	.word	0x20000dd0
     dac:	.word	0x20000dd8
     db0:	.word	0x20000dc8
     db4:	.word	0x20000dd4
     db8:	.word	0x20002240
     dbc:	.word	0x20000df8
     dc0:	.word	0x000200c8
     dc4:	.word	0x00cc0002
     dc8:	.word	0x00c80002
     dcc:	.word	0x20001020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     dd0:	ldr	r2, [pc, #744]	; (10bc <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
     dd2:	movs	r1, #2
     dd4:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     dd6:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
     dd8:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
     dda:	bl	9f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     dde:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     de2:	cmp	r3, #0
     de4:	bne.w	ac0 <isr+0x2c>
     de8:	b.n	b5e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     dea:	uxth	r2, r2
     dec:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     df0:	cmp	r3, #7
     df2:	bhi.w	cd2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
     df6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     dfa:	mov.w	r3, r3, lsl #2
     dfe:	ldr	r2, [pc, #704]	; (10c0 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e00:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     e04:	add	r2, r3
     e06:	ldr	r3, [r2, #0]
     e08:	ite	ne
     e0a:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     e0e:	biceq.w	r3, r3, #1
     e12:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e14:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e16:	ldr	r3, [pc, #684]	; (10c4 <isr+0x630>)
     e18:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e1a:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e1c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e1e:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e22:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e24:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e28:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     e2a:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e2c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     e30:	ldr.w	r3, [r4, #432]	; 0x1b0
     e34:	orr.w	r3, r3, #65536	; 0x10000
     e38:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e3c:	ldr.w	r3, [r4, #432]	; 0x1b0
     e40:	cmp	r3, #0
     e42:	bne.n	e3c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e44:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e48:	cmp	r3, #0
     e4a:	bne.w	ac0 <isr+0x2c>
     e4e:	b.n	b5e <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e50:	ldr	r3, [pc, #628]	; (10c8 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
     e52:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e56:	ldr	r2, [pc, #628]	; (10cc <isr+0x638>)
     e58:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
     e5a:	ldr	r3, [pc, #628]	; (10d0 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e5c:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
     e5e:	strb	r0, [r3, #0]
     e60:	b.n	d4c <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     e62:	uxth	r2, r2
     e64:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     e68:	cmp	r3, #7
     e6a:	bhi.w	cd2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
     e6e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e72:	mov.w	r3, r3, lsl #2
     e76:	ldr	r2, [pc, #584]	; (10c0 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e78:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e7c:	add	r2, r3
     e7e:	ldr	r3, [r2, #0]
     e80:	ite	ne
     e82:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     e86:	orreq.w	r3, r3, #1
     e8a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e8c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e8e:	ldr	r3, [pc, #564]	; (10c4 <isr+0x630>)
     e90:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e92:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e94:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e96:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e9a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e9c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ea0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     ea2:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ea4:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     ea8:	ldr.w	r3, [r4, #432]	; 0x1b0
     eac:	orr.w	r3, r3, #65536	; 0x10000
     eb0:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     eb4:	ldr.w	r3, [r4, #432]	; 0x1b0
     eb8:	cmp	r3, #0
     eba:	bne.n	eb4 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ebc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     ec0:	cmp	r3, #0
     ec2:	bne.w	ac0 <isr+0x2c>
     ec6:	b.n	b5e <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     ec8:	ldr	r2, [pc, #520]	; (10d4 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
     eca:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     ecc:	ldr	r3, [pc, #492]	; (10bc <isr+0x628>)
     ece:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     ed0:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     ed2:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     ed4:	bl	9f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ed8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     edc:	cmp	r3, #0
     ede:	bne.w	ac0 <isr+0x2c>
     ee2:	b.n	b5e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     ee4:	ldr	r3, [pc, #496]	; (10d8 <isr+0x644>)
     ee6:	ldr	r1, [r3, #4]
     ee8:	cmp	r1, #0
     eea:	beq.w	cd2 <isr+0x23e>
     eee:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     ef0:	uxth.w	lr, r2
     ef4:	b.n	f00 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     ef6:	adds	r3, #12
     ef8:	ldr	r1, [r3, #4]
     efa:	cmp	r1, #0
     efc:	beq.w	cd2 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     f00:	ldrh	r7, [r3, #0]
     f02:	cmp	r7, r0
     f04:	bne.n	ef6 <isr+0x462>
     f06:	ldrh	r7, [r3, #2]
     f08:	cmp	r7, lr
     f0a:	bne.n	ef6 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
     f0c:	lsrs	r7, r0, #8
     f0e:	cmp	r7, #3
     f10:	beq.w	1120 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
     f14:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     f16:	lsrs	r2, r2, #16
     f18:	cmp	r3, r2
     f1a:	it	cs
     f1c:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     f1e:	cmp.w	r0, #512	; 0x200
     f22:	beq.w	109c <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     f26:	cmp.w	r0, #1792	; 0x700
     f2a:	beq.w	1040 <isr+0x5ac>
     f2e:	ldr	r7, [pc, #428]	; (10dc <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     f30:	mov	r2, r3
     f32:	str	r3, [sp, #4]
     f34:	mov	r0, r7
     f36:	bl	1c20 <memcpy>
     f3a:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     f3c:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
     f40:	add	r7, r3
	asm("dsb");
     f42:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f46:	ldr	r1, [pc, #408]	; (10e0 <isr+0x64c>)
     f48:	str	r2, [r1, #0]
		location += 32;
     f4a:	adds	r2, #32
	} while (location < end_addr);
     f4c:	cmp	r7, r2
     f4e:	bhi.n	f46 <isr+0x4b2>
	asm("dsb");
     f50:	dsb	sy
	asm("isb");
     f54:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     f58:	ldr	r0, [pc, #384]	; (10dc <isr+0x648>)
     f5a:	mov	r1, r3
     f5c:	bl	9f0 <endpoint0_transmit.constprop.1>
     f60:	b.n	b56 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     f62:	lsls	r3, r1, #31
     f64:	bpl.w	b4e <isr+0xba>
     f68:	b.n	b4a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f6a:	ldr	r7, [pc, #376]	; (10e4 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f6c:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
     f70:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f72:	ldr	r1, [pc, #372]	; (10e8 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f74:	ldr	r3, [pc, #372]	; (10ec <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f76:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f78:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f7c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f7e:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
     f82:	ldr	r1, [pc, #364]	; (10f0 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f84:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f86:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f8a:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f8e:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     f92:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f94:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f98:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f9c:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     fa0:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     fa2:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     fa4:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     fa8:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     faa:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
     fac:	ldr.w	r3, [r4, #432]	; 0x1b0
     fb0:	cmp	r3, #0
     fb2:	bne.n	fac <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
     fb4:	ldr	r2, [pc, #268]	; (10c4 <isr+0x630>)
     fb6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fb8:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     fbc:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fbe:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     fc0:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     fc4:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fc6:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     fca:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fcc:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     fd0:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     fd2:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     fd6:	ldr.w	r3, [r5, #432]	; 0x1b0
     fda:	orrs	r3, r0
     fdc:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     fe0:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
     fe4:	ldr.w	r3, [r4, #432]	; 0x1b0
     fe8:	cmp	r3, #0
     fea:	bne.n	fe4 <isr+0x550>
     fec:	b.n	b56 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
     fee:	ldr	r4, [pc, #244]	; (10e4 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
     ff0:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
     ff4:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
     ff6:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
     ff8:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
     ffa:	cmp	r4, r0
     ffc:	bne.w	c18 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1000:	ldr	r1, [pc, #236]	; (10f0 <isr+0x65c>)
    1002:	ldr	r4, [pc, #240]	; (10f4 <isr+0x660>)
    1004:	ldmia	r1, {r0, r1}
    1006:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1008:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    100a:	str	r0, [r4, #0]
    100c:	strh	r1, [r4, #4]
    100e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1010:	bne.w	c18 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1014:	cpsid	i
	sof_usage |= (1 << interface);
    1016:	ldr	r0, [pc, #224]	; (10f8 <isr+0x664>)
    1018:	ldrb	r1, [r0, #0]
    101a:	orr.w	r1, r1, #4
    101e:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1020:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1024:	lsls	r0, r1, #24
    1026:	bmi.n	1036 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1028:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    102c:	movs	r0, #128	; 0x80
    102e:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1032:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1036:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1038:	ldr	r2, [pc, #192]	; (10fc <isr+0x668>)
    103a:	movs	r1, #80	; 0x50
    103c:	strb	r1, [r2, #0]
    103e:	b.n	c18 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1040:	ldr	r0, [pc, #188]	; (1100 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1042:	mov	r2, r3
    1044:	ldr	r7, [pc, #148]	; (10dc <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1046:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    104a:	ldr	r1, [pc, #184]	; (1104 <isr+0x670>)
    104c:	ldr	r0, [pc, #184]	; (1108 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    104e:	str	r3, [sp, #4]
    1050:	cmp.w	lr, #0
    1054:	it	eq
    1056:	moveq	r1, r0
    1058:	mov	r0, r7
    105a:	bl	1c20 <memcpy>
					usb_descriptor_buffer[1] = 7;
    105e:	movs	r2, #7
    1060:	ldr	r3, [sp, #4]
    1062:	strb	r2, [r7, #1]
    1064:	b.n	f3c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1066:	ldr.w	r2, [r3, #328]	; 0x148
    106a:	bic.w	r2, r2, #128	; 0x80
    106e:	str.w	r2, [r3, #328]	; 0x148
    1072:	b.n	c02 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1074:	ldr	r0, [pc, #148]	; (110c <isr+0x678>)
    1076:	bl	9b8 <run_callbacks>
    107a:	b.n	c3e <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    107c:	ldr	r0, [pc, #144]	; (1110 <isr+0x67c>)
    107e:	bl	9b8 <run_callbacks>
    1082:	b.n	c2c <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1084:	ldr	r0, [pc, #140]	; (1114 <isr+0x680>)
    1086:	bl	9b8 <run_callbacks>
    108a:	b.n	c26 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    108c:	ldr	r0, [pc, #136]	; (1118 <isr+0x684>)
    108e:	bl	9b8 <run_callbacks>
    1092:	b.n	c38 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1094:	ldr	r0, [pc, #132]	; (111c <isr+0x688>)
    1096:	bl	9b8 <run_callbacks>
    109a:	b.n	c32 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    109c:	ldr	r0, [pc, #96]	; (1100 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    109e:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    10a0:	ldr	r1, [pc, #100]	; (1108 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    10a2:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    10a4:	ldr	r0, [pc, #92]	; (1104 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    10a6:	str	r3, [sp, #4]
    10a8:	cmp	r7, #0
    10aa:	it	eq
    10ac:	moveq	r1, r0
    10ae:	ldr	r0, [pc, #44]	; (10dc <isr+0x648>)
    10b0:	bl	1c20 <memcpy>
    10b4:	ldr	r7, [pc, #36]	; (10dc <isr+0x648>)
    10b6:	ldr	r3, [sp, #4]
    10b8:	b.n	f3c <isr+0x4a8>
    10ba:	nop
    10bc:	.word	0x20000de8
    10c0:	.word	0x402e01c0
    10c4:	.word	0x20001020
    10c8:	.word	0x20000e04
    10cc:	.word	0x20000e98
    10d0:	.word	0x20000d28
    10d4:	.word	0x20000df8
    10d8:	.word	0x200002a4
    10dc:	.word	0x20203000
    10e0:	.word	0xe000ef70
    10e4:	.word	0x20000de0
    10e8:	.word	0x00070080
    10ec:	.word	0x20001000
    10f0:	.word	0x20000df0
    10f4:	.word	0x20000e90
    10f8:	.word	0x20000dc8
    10fc:	.word	0x20000dd8
    1100:	.word	0x20000dd0
    1104:	.word	0x60001654
    1108:	.word	0x60001698
    110c:	.word	0x20002200
    1110:	.word	0x20002140
    1114:	.word	0x20002100
    1118:	.word	0x200021c0
    111c:	.word	0x20002180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1120:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1122:	ldrb	r3, [r1, #0]
    1124:	cmp	r3, r2
    1126:	it	cs
    1128:	movcs	r3, r2
    112a:	b.n	f26 <isr+0x492>

0000112c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    112c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    112e:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1132:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1136:	ite	ne
    1138:	movne	r7, #0
    113a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    113e:	cmp	r2, #2
    1140:	bls.n	1146 <usb_config_rx+0x1a>
    1142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1146:	mov.w	sl, r0, lsl #7
    114a:	ldr.w	r9, [pc, #64]	; 118c <usb_config_rx+0x60>
    114e:	mov	r5, r1
    1150:	mov	r4, r0
    1152:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1156:	movs	r1, #0
    1158:	movs	r2, #64	; 0x40
    115a:	mov	r8, r3
    115c:	mov	r0, r6
    115e:	bl	277c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1162:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1164:	orr.w	r1, r7, r5, lsl #16
    1168:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    116c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1170:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1172:	cmp.w	r8, #0
    1176:	beq.n	1142 <usb_config_rx+0x16>
    1178:	ldr	r3, [pc, #12]	; (1188 <usb_config_rx+0x5c>)
    117a:	lsls	r0, r4
    117c:	ldr	r4, [r3, #0]
    117e:	orrs	r0, r4
    1180:	str	r0, [r3, #0]
    1182:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1186:	nop
    1188:	.word	0x20000dc4
    118c:	.word	0x20002000

00001190 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1190:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1192:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1196:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    119a:	ite	ne
    119c:	movne	r7, #0
    119e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    11a2:	cmp	r2, #2
    11a4:	bls.n	11aa <usb_config_tx+0x1a>
    11a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    11aa:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    11ac:	lsls	r5, r0, #7
    11ae:	ldr.w	r9, [pc, #68]	; 11f4 <usb_config_tx+0x64>
    11b2:	mov	r8, r1
    11b4:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    11b6:	movs	r1, #0
    11b8:	mov	r4, r0
    11ba:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    11bc:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    11c0:	mov	r0, sl
    11c2:	bl	277c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    11c6:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    11c8:	orr.w	r1, r7, r8, lsl #16
    11cc:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    11d0:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    11d4:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    11d8:	cmp	r6, #0
    11da:	beq.n	11a6 <usb_config_tx+0x16>
    11dc:	add.w	r0, r4, #16
    11e0:	ldr	r3, [pc, #12]	; (11f0 <usb_config_tx+0x60>)
    11e2:	lsls	r2, r0
    11e4:	ldr	r0, [r3, #0]
    11e6:	orrs	r2, r0
    11e8:	str	r2, [r3, #0]
    11ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11ee:	nop
    11f0:	.word	0x20000dc4
    11f4:	.word	0x20002000

000011f8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    11f8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    11fa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    11fc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    11fe:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1202:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1204:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1206:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1208:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    120c:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1210:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1214:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1218:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    121a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    121c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    121e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1220:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1222:	pop	{r4, r5, r6, r7}
    1224:	bx	lr
    1226:	nop

00001228 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1228:	subs	r3, r0, #2
    122a:	cmp	r3, #2
    122c:	bls.n	1230 <usb_transmit+0x8>
    122e:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1230:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1232:	ldr	r3, [pc, #24]	; (124c <usb_transmit+0x24>)
    1234:	add.w	r4, r0, #16
    1238:	movs	r5, #1
    123a:	mov	r2, r1
    123c:	add.w	r0, r3, r0, lsl #7
    1240:	lsl.w	r1, r5, r4
}
    1244:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1246:	b.w	95c <schedule_transfer>
    124a:	nop
    124c:	.word	0x20002040

00001250 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1250:	subs	r3, r0, #2
    1252:	cmp	r3, #2
    1254:	bls.n	1258 <usb_receive+0x8>
    1256:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1258:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    125a:	ldr	r3, [pc, #20]	; (1270 <usb_receive+0x20>)
    125c:	movs	r4, #1
    125e:	mov	r2, r1
    1260:	lsl.w	r1, r4, r0
    1264:	add.w	r0, r3, r0, lsl #7
}
    1268:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    126c:	b.w	95c <schedule_transfer>
    1270:	.word	0x20002000

00001274 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1274:	ldr	r0, [r0, #4]
#endif
}
    1276:	bx	lr

00001278 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1278:	cmp	r0, #0
    127a:	beq.n	132c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    127c:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    127e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1282:	sub	sp, #20
    1284:	mov	fp, r0
    1286:	ldr	r4, [pc, #168]	; (1330 <delay+0xb8>)
    1288:	ldr	r5, [pc, #168]	; (1334 <delay+0xbc>)
    128a:	ldr	r6, [pc, #172]	; (1338 <delay+0xc0>)
    128c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1290:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1294:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1296:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1298:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    129c:	cmp	r1, #0
    129e:	bne.n	1290 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    12a0:	ldr	r7, [pc, #152]	; (133c <delay+0xc4>)
    12a2:	strd	r8, r9, [sp, #8]
    12a6:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    12a8:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12aa:	ldr	r2, [pc, #148]	; (1340 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    12ac:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    12b0:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12b2:	ldr	r2, [r2, #0]
    12b4:	movs	r7, #1
    12b6:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    12ba:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12be:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    12c0:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12c2:	cmp	r3, r1
    12c4:	it	eq
    12c6:	cmpeq	r2, r8
    12c8:	ite	cs
    12ca:	movcs	sl, r8
    12cc:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    12ce:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    12d2:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    12d6:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    12d8:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    12da:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    12de:	cmp	r3, #0
    12e0:	bne.n	12d2 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    12e2:	ldr	r0, [sp, #4]
    12e4:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    12e6:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12e8:	ldr	r0, [pc, #84]	; (1340 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    12ea:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12ee:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    12f0:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12f4:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    12f8:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    12fc:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1300:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1302:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1304:	cmp	r1, r3
    1306:	it	eq
    1308:	cmpeq	r0, r8
    130a:	ite	cs
    130c:	movcs	r3, r8
    130e:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1310:	add	r2, r3
    1312:	cmp	r2, lr
    1314:	bcc.n	1326 <delay+0xae>
			if (--msec == 0) return;
    1316:	subs.w	fp, fp, #1
			start += 1000;
    131a:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    131e:	bne.n	12d2 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1320:	add	sp, #20
    1322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    1326:	bl	1714 <yield>
	}
    132a:	b.n	12d2 <delay+0x5a>
    132c:	bx	lr
    132e:	nop
    1330:	.word	0x20002280
    1334:	.word	0x20000e04
    1338:	.word	0x20000dfc
    133c:	.word	0xe0001004
    1340:	.word	0x20000e00

00001344 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1344:	ldr	r0, [pc, #656]	; (15d8 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1346:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    134a:	ldr	r3, [pc, #656]	; (15dc <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    134c:	ldr	r2, [r0, #120]	; 0x78
    134e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    1352:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1354:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1356:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1358:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    135c:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1360:	ldr	r4, [pc, #636]	; (15e0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1362:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1366:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1368:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    136c:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    136e:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1370:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1374:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1378:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    137c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1380:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1384:	ldrh.w	r0, [r3, #392]	; 0x188
    1388:	uxth	r0, r0
    138a:	orr.w	r0, r0, #240	; 0xf0
    138e:	strh.w	r0, [r3, #392]	; 0x188
    1392:	add.w	r0, r1, r1, lsl #1
    1396:	ldr	r3, [pc, #580]	; (15dc <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1398:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    139a:	movs	r5, #0
    139c:	lsls	r0, r0, #5
    139e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    13a0:	cmp	r1, #4
    13a2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    13a4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    13a8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    13aa:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    13ac:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    13ae:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    13b0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    13b2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    13b4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    13b6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    13b8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    13ba:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    13bc:	bne.n	1392 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    13be:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    13c2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    13c6:	ldr	r3, [pc, #540]	; (15e4 <pwm_init+0x2a0>)
    13c8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    13cc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    13ce:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    13d0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    13d4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    13d6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    13da:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    13de:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    13e2:	ldrh.w	r0, [r4, #392]	; 0x188
    13e6:	uxth	r0, r0
    13e8:	orr.w	r0, r0, #3840	; 0xf00
    13ec:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    13f0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    13f4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    13f8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    13fc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1400:	ldrh.w	r0, [r3, #392]	; 0x188
    1404:	uxth	r0, r0
    1406:	orr.w	r0, r0, #240	; 0xf0
    140a:	strh.w	r0, [r3, #392]	; 0x188
    140e:	add.w	r0, r1, r1, lsl #1
    1412:	ldr	r3, [pc, #464]	; (15e4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1414:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1416:	movs	r5, #0
    1418:	lsls	r0, r0, #5
    141a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    141c:	cmp	r1, #4
    141e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1420:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1422:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1426:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1428:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    142a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    142c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    142e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1430:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1432:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1434:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1436:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1438:	bne.n	140e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    143a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    143e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1442:	ldr	r3, [pc, #420]	; (15e8 <pwm_init+0x2a4>)
    1444:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1448:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    144a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    144c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1450:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1452:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1456:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    145a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    145e:	ldrh.w	r0, [r4, #392]	; 0x188
    1462:	uxth	r0, r0
    1464:	orr.w	r0, r0, #3840	; 0xf00
    1468:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    146c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1470:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1474:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1478:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    147c:	ldrh.w	r0, [r3, #392]	; 0x188
    1480:	uxth	r0, r0
    1482:	orr.w	r0, r0, #240	; 0xf0
    1486:	strh.w	r0, [r3, #392]	; 0x188
    148a:	add.w	r0, r1, r1, lsl #1
    148e:	ldr	r3, [pc, #344]	; (15e8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1490:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1492:	movs	r5, #0
    1494:	lsls	r0, r0, #5
    1496:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1498:	cmp	r1, #4
    149a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    149c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    149e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    14a2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    14a4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    14a6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    14a8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    14aa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    14ac:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    14ae:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    14b0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    14b2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    14b4:	bne.n	148a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    14b6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    14ba:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    14be:	ldr	r3, [pc, #300]	; (15ec <pwm_init+0x2a8>)
    14c0:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    14c4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    14c6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    14c8:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    14cc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    14ce:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    14d2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    14d6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    14da:	ldrh.w	r0, [r4, #392]	; 0x188
    14de:	uxth	r0, r0
    14e0:	orr.w	r0, r0, #3840	; 0xf00
    14e4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    14e8:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    14ec:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    14f0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    14f4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    14f8:	ldrh.w	r0, [r3, #392]	; 0x188
    14fc:	uxth	r0, r0
    14fe:	orr.w	r0, r0, #240	; 0xf0
    1502:	strh.w	r0, [r3, #392]	; 0x188
    1506:	add.w	r0, r1, r1, lsl #1
    150a:	ldr	r3, [pc, #224]	; (15ec <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    150c:	adds	r1, #1
    150e:	lsls	r0, r0, #5
    1510:	mov	r4, r3
    1512:	cmp	r1, #4
    1514:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1516:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1518:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    151c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    151e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1520:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1522:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1524:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    1526:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1528:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    152a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    152c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    152e:	bne.n	1506 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1530:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1534:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1536:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1538:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    153c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    153e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1542:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1544:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1548:	orrs	r3, r7
    154a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    154e:	ldrh.w	r3, [r4, #392]	; 0x188
    1552:	uxth	r3, r3
    1554:	orr.w	r3, r3, #3840	; 0xf00
    1558:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    155c:	lsls	r0, r2, #5
    155e:	ldr	r3, [pc, #144]	; (15f0 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1560:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1562:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1564:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1566:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1568:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    156a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    156c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    156e:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1572:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1574:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1576:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1578:	bne.n	155c <pwm_init+0x218>
    157a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    157c:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    157e:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1582:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1586:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1588:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    158c:	lsls	r0, r2, #5
    158e:	ldr	r3, [pc, #100]	; (15f4 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1590:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1592:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1594:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1596:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1598:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    159a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    159c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    159e:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    15a0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    15a2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    15a4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    15a6:	bne.n	158c <pwm_init+0x248>
    15a8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    15aa:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    15ac:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    15b0:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    15b4:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    15b6:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    15ba:	lsls	r0, r2, #5
    15bc:	ldr	r3, [pc, #56]	; (15f8 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    15be:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    15c0:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    15c2:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    15c4:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    15c6:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    15c8:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    15ca:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    15cc:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    15ce:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    15d0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    15d2:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    15d4:	bne.n	15ba <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    15d6:	pop	{r4, r5, r6, r7, pc}
    15d8:	.word	0x400fc000
    15dc:	.word	0x403dc000
    15e0:	.word	0xfc030000
    15e4:	.word	0x403e0000
    15e8:	.word	0x403e4000
    15ec:	.word	0x403e8000
    15f0:	.word	0x401dc000
    15f4:	.word	0x401e0000
    15f8:	.word	0x401e4000

000015fc <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    15fc:	lsls	r0, r0, #4
    15fe:	ldr	r3, [pc, #28]	; (161c <digitalWrite.part.0+0x20>)
    1600:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    1602:	ldr	r3, [r3, r0]
	mask = p->mask;
    1604:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    1606:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    1608:	tst	r0, r2
    160a:	beq.n	1612 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    160c:	cbnz	r1, 1614 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    160e:	str.w	r2, [r3, #136]	; 0x88
    1612:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    1614:	str.w	r2, [r3, #132]	; 0x84
    1618:	bx	lr
    161a:	nop
    161c:	.word	0x20000024

00001620 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    1620:	cmp	r0, #39	; 0x27
    1622:	bhi.n	1628 <digitalWrite+0x8>
    1624:	b.w	15fc <digitalWrite.part.0>
    1628:	bx	lr
    162a:	nop

0000162c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    162c:	cmp	r0, #39	; 0x27
    162e:	bhi.n	166a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1630:	lsls	r0, r0, #4
    1632:	ldr	r2, [pc, #104]	; (169c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1634:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1636:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    163a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    163c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    163e:	beq.n	166c <pinMode+0x40>
    1640:	cmp	r1, #4
    1642:	beq.n	166c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1644:	ldr	r4, [r3, #12]
    1646:	ldr	r2, [r0, #4]
    1648:	bic.w	r2, r2, r4
    164c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    164e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1650:	cbz	r1, 168e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1652:	cmp	r1, #2
    1654:	beq.n	1694 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1656:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1658:	ldr	r3, [r3, #4]
}
    165a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    165e:	ite	eq
    1660:	ldreq	r1, [pc, #60]	; (16a0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1662:	ldrne	r1, [pc, #64]	; (16a4 <pinMode+0x78>)
    1664:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1666:	movs	r2, #21
    1668:	str	r2, [r3, #0]
}
    166a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    166c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    166e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1670:	ldr	r4, [r0, #4]
    1672:	orr.w	r2, r2, r4
    1676:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1678:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    167a:	beq.n	168e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    167c:	movw	r1, #2104	; 0x838
    1680:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1682:	ldr	r3, [r3, #4]
    1684:	movs	r2, #21
}
    1686:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    168a:	str	r2, [r3, #0]
}
    168c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    168e:	movs	r1, #56	; 0x38
    1690:	str	r1, [r2, #0]
    1692:	b.n	1682 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1694:	ldr	r1, [pc, #16]	; (16a8 <pinMode+0x7c>)
    1696:	str	r1, [r2, #0]
    1698:	b.n	1682 <pinMode+0x56>
    169a:	nop
    169c:	.word	0x20000024
    16a0:	.word	0x00013038
    16a4:	.word	0x00010038
    16a8:	.word	0x0001f038

000016ac <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    16ac:	ldr	r2, [pc, #72]	; (16f8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    16ae:	ldr	r3, [pc, #76]	; (16fc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    16b0:	ldr.w	r0, [r2, #544]	; 0x220
    16b4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    16b8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    16ba:	push	{r4, lr}
    16bc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    16be:	bhi.n	16c6 <usb_init_serialnumber+0x1a>
    16c0:	add.w	r0, r0, r0, lsl #2
    16c4:	lsls	r0, r0, #1
    16c6:	ldr	r4, [pc, #56]	; (1700 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    16c8:	add	r1, sp, #4
    16ca:	movs	r2, #10
    16cc:	bl	20f4 <ultoa>
    16d0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    16d2:	movs	r3, #0
    16d4:	mov	r0, r4
		char c = buf[i];
    16d6:	ldrb.w	r2, [r1], #1
    16da:	adds	r3, #1
		if (!c) break;
    16dc:	cbz	r2, 16ee <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    16de:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    16e0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    16e4:	bne.n	16d6 <usb_init_serialnumber+0x2a>
    16e6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    16e8:	strb	r3, [r4, #0]
}
    16ea:	add	sp, #16
    16ec:	pop	{r4, pc}
    16ee:	lsls	r3, r3, #1
    16f0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    16f2:	strb	r3, [r4, #0]
}
    16f4:	add	sp, #16
    16f6:	pop	{r4, pc}
    16f8:	.word	0x401f4400
    16fc:	.word	0x0098967f
    1700:	.word	0x2000035c

00001704 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1704:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1706:	bl	7c <setup>
	while (1) {
		loop();
    170a:	bl	84 <loop>
		yield();
    170e:	bl	1714 <yield>
    1712:	b.n	170a <main+0x6>

00001714 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1714:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    1716:	ldr	r4, [pc, #132]	; (179c <yield+0x88>)
    1718:	ldrb	r3, [r4, #0]
    171a:	cbnz	r3, 173e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    171c:	ldr	r3, [pc, #128]	; (17a0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    171e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1720:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1722:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1724:	cbnz	r3, 176e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    1726:	ldr	r3, [pc, #124]	; (17a4 <yield+0x90>)
    1728:	ldrb	r3, [r3, #0]
    172a:	cmp	r3, #0
    172c:	bne.n	1782 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    172e:	ldr	r3, [pc, #120]	; (17a8 <yield+0x94>)

	running = 0;
    1730:	movs	r1, #0
    1732:	ldr	r2, [r3, #0]
    1734:	strb	r1, [r4, #0]
    1736:	cbz	r2, 173e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1738:	mrs	r2, IPSR
		if (ipsr != 0) return;
    173c:	cbz	r2, 1740 <yield+0x2c>
    173e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1740:	mrs	r0, PRIMASK
		__disable_irq();
    1744:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1746:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1748:	cbz	r2, 1788 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    174a:	ldr	r4, [pc, #96]	; (17ac <yield+0x98>)
    174c:	ldrb	r1, [r4, #0]
    174e:	cbnz	r1, 1788 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1750:	movs	r6, #1
		firstYield = first->_next;
    1752:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1754:	strb	r6, [r4, #0]
		firstYield = first->_next;
    1756:	str	r5, [r3, #0]
		if (firstYield) {
    1758:	cbz	r5, 1790 <yield+0x7c>
			firstYield->_prev = nullptr;
    175a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    175c:	cbnz	r0, 1760 <yield+0x4c>
    175e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1760:	movs	r5, #0
		(*(first->_function))(*first);
    1762:	ldr	r3, [r2, #8]
    1764:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1766:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1768:	blx	r3
		runningFromYield = false;
    176a:	strb	r5, [r4, #0]
    176c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    176e:	bl	78c <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1772:	cmp	r0, #0
    1774:	beq.n	1726 <yield+0x12>
    1776:	bl	19e0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    177a:	ldr	r3, [pc, #40]	; (17a4 <yield+0x90>)
    177c:	ldrb	r3, [r3, #0]
    177e:	cmp	r3, #0
    1780:	beq.n	172e <yield+0x1a>
    1782:	bl	2168 <HardwareSerial::processSerialEvents()>
    1786:	b.n	172e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1788:	cmp	r0, #0
    178a:	bne.n	173e <yield+0x2a>
    178c:	cpsie	i
    178e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1790:	ldr	r3, [pc, #28]	; (17b0 <yield+0x9c>)
    1792:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1794:	cmp	r0, #0
    1796:	bne.n	1760 <yield+0x4c>
    1798:	b.n	175e <yield+0x4a>
    179a:	nop
    179c:	.word	0x20000e08
    17a0:	.word	0x20000372
    17a4:	.word	0x20000e58
    17a8:	.word	0x20000e1c
    17ac:	.word	0x20000e20
    17b0:	.word	0x20000e18

000017b4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    17b4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    17b6:	mrs	r2, PRIMASK
		__disable_irq();
    17ba:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    17bc:	ldrb	r3, [r0, #29]
    17be:	cbnz	r3, 17ce <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    17c0:	ldrb	r1, [r0, #28]
    17c2:	cmp	r1, #1
    17c4:	beq.n	17d8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    17c6:	cmp	r1, #3
    17c8:	beq.n	17ec <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    17ca:	movs	r3, #1
    17cc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    17ce:	cbnz	r2, 17d2 <EventResponder::triggerEventNotImmediate()+0x1e>
    17d0:	cpsie	i
	}
	enableInterrupts(irq);
}
    17d2:	ldr.w	r4, [sp], #4
    17d6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    17d8:	ldr	r4, [pc, #68]	; (1820 <EventResponder::triggerEventNotImmediate()+0x6c>)
    17da:	ldr	r1, [r4, #0]
    17dc:	cbz	r1, 1808 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    17de:	ldr	r1, [pc, #68]	; (1824 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    17e0:	str	r3, [r0, #20]
				_prev = lastYield;
    17e2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    17e4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    17e6:	str	r3, [r0, #24]
				_prev->_next = this;
    17e8:	str	r0, [r3, #20]
    17ea:	b.n	17ca <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    17ec:	ldr	r4, [pc, #56]	; (1828 <EventResponder::triggerEventNotImmediate()+0x74>)
    17ee:	ldr	r1, [r4, #0]
    17f0:	cbz	r1, 1814 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17f2:	ldr	r1, [pc, #56]	; (182c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    17f4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    17f6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    17f8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    17fa:	str	r3, [r0, #24]
				_prev->_next = this;
    17fc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    17fe:	ldr	r3, [pc, #48]	; (1830 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1800:	mov.w	r1, #268435456	; 0x10000000
    1804:	str	r1, [r3, #0]
    1806:	b.n	17ca <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    1808:	ldr	r3, [pc, #24]	; (1824 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    180a:	str	r1, [r0, #20]
				_prev = nullptr;
    180c:	str	r1, [r0, #24]
				firstYield = this;
    180e:	str	r0, [r4, #0]
				lastYield = this;
    1810:	str	r0, [r3, #0]
    1812:	b.n	17ca <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1814:	ldr	r3, [pc, #20]	; (182c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    1816:	str	r1, [r0, #20]
				_prev = nullptr;
    1818:	str	r1, [r0, #24]
				firstInterrupt = this;
    181a:	str	r0, [r4, #0]
				lastInterrupt = this;
    181c:	str	r0, [r3, #0]
    181e:	b.n	17fe <EventResponder::triggerEventNotImmediate()+0x4a>
    1820:	.word	0x20000e1c
    1824:	.word	0x20000e18
    1828:	.word	0x20000e0c
    182c:	.word	0x20000e10
    1830:	.word	0xe000ed04

00001834 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1834:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1836:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1838:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    183a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    183c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    183e:	beq.n	1848 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1840:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1844:	b.w	17b4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1848:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    184a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    184e:	bx	r3

00001850 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1850:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1852:	mrs	r1, PRIMASK
		__disable_irq();
    1856:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1858:	ldr	r4, [pc, #48]	; (188c <EventResponder::runFromInterrupt()+0x3c>)
    185a:	ldr	r3, [r4, #0]
		if (first) {
    185c:	cbz	r3, 1882 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    185e:	ldr	r6, [pc, #48]	; (1890 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1860:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1862:	ldr	r2, [r3, #20]
    1864:	str	r2, [r4, #0]
			if (firstInterrupt) {
    1866:	cbz	r2, 1888 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1868:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    186a:	cbnz	r1, 186e <EventResponder::runFromInterrupt()+0x1e>
    186c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    186e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1870:	mov	r0, r3
    1872:	ldr	r3, [r3, #8]
    1874:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1876:	mrs	r1, PRIMASK
		__disable_irq();
    187a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    187c:	ldr	r3, [r4, #0]
		if (first) {
    187e:	cmp	r3, #0
    1880:	bne.n	1862 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1882:	cbnz	r1, 1886 <EventResponder::runFromInterrupt()+0x36>
    1884:	cpsie	i
    1886:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1888:	str	r2, [r6, #0]
    188a:	b.n	186a <EventResponder::runFromInterrupt()+0x1a>
    188c:	.word	0x20000e0c
    1890:	.word	0x20000e10

00001894 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1894:	b.w	1850 <EventResponder::runFromInterrupt()>

00001898 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    1898:	ldr	r2, [pc, #96]	; (18fc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    189a:	push	{r4, r5}
	if (listActive == nullptr) {
    189c:	ldr	r4, [r2, #0]
    189e:	cmp	r4, #0
    18a0:	beq.n	18f4 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    18a2:	ldr	r3, [r0, #0]
    18a4:	ldr	r1, [r4, #0]
    18a6:	cmp	r3, r1
    18a8:	bcs.n	18ca <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    18aa:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    18ac:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    18ae:	str	r4, [r0, #8]
		_prev = nullptr;
    18b0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    18b2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    18b4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    18b6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    18b8:	movs	r3, #2
}
    18ba:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    18bc:	strb	r3, [r0, #20]
}
    18be:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    18c0:	str	r3, [r0, #0]
    18c2:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    18c4:	ldr	r1, [r2, #0]
    18c6:	cmp	r3, r1
    18c8:	bcc.n	18dc <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18ca:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    18cc:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18ce:	cmp	r2, #0
    18d0:	bne.n	18c0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    18d2:	str	r2, [r0, #8]
		_prev = timer;
    18d4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    18d6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    18d8:	str	r0, [r4, #8]
    18da:	b.n	18b8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    18dc:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    18de:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    18e0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    18e2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    18e4:	str	r5, [r0, #12]
				timer->_prev = this;
    18e6:	str	r0, [r4, #12]
				_prev->_next = this;
    18e8:	ldr	r1, [r0, #12]
    18ea:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    18ec:	str	r3, [r4, #0]
				_state = TimerActive;
    18ee:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    18f0:	pop	{r4, r5}
    18f2:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    18f4:	str	r4, [r0, #8]
		_prev = nullptr;
    18f6:	str	r4, [r0, #12]
		listActive = this;
    18f8:	str	r0, [r2, #0]
    18fa:	b.n	18b8 <MillisTimer::addToActiveList()+0x20>
    18fc:	.word	0x20000e14

00001900 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1900:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1902:	ldr	r6, [pc, #136]	; (198c <MillisTimer::runFromTimer()+0x8c>)
    1904:	ldr	r4, [r6, #0]
	while (timer) {
    1906:	cbz	r4, 1954 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1908:	ldr	r3, [r4, #0]
    190a:	cmp	r3, #0
    190c:	bne.n	1984 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    190e:	mov	r5, r3
    1910:	ldr	r7, [pc, #124]	; (1990 <MillisTimer::runFromTimer()+0x90>)
    1912:	b.n	191e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1914:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1916:	cbz	r4, 1954 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1918:	ldr	r3, [r4, #0]
    191a:	cmp	r3, #0
    191c:	bne.n	1984 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    191e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1920:	cbz	r3, 1924 <MillisTimer::runFromTimer()+0x24>
    1922:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1924:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    1926:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1928:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    192a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    192c:	ldr	r3, [r3, #0]
    192e:	cmp	r3, r7
    1930:	bne.n	1976 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1932:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1934:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1936:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1938:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    193a:	beq.n	197e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    193c:	bl	17b4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1940:	ldr	r3, [r4, #4]
    1942:	cmp	r3, #0
    1944:	beq.n	1914 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    1946:	str	r3, [r4, #0]
				timer->addToActiveList();
    1948:	mov	r0, r4
    194a:	bl	1898 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    194e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1950:	cmp	r4, #0
    1952:	bne.n	1918 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1954:	mrs	r3, PRIMASK
		__disable_irq();
    1958:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    195a:	ldr	r2, [pc, #56]	; (1994 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    195c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    195e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1960:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1962:	cbnz	r3, 1966 <MillisTimer::runFromTimer()+0x66>
    1964:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    1966:	cbz	r0, 1974 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    1968:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    196a:	bl	1898 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    196e:	mov	r0, r4
    1970:	cmp	r0, #0
    1972:	bne.n	1968 <MillisTimer::runFromTimer()+0x68>
    1974:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1976:	mov	r2, r4
    1978:	movs	r1, #0
    197a:	blx	r3
    197c:	b.n	1940 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    197e:	ldr	r3, [r0, #8]
    1980:	blx	r3
    1982:	b.n	1940 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    1984:	subs	r3, #1
    1986:	str	r3, [r4, #0]
			break;
    1988:	b.n	1954 <MillisTimer::runFromTimer()+0x54>
    198a:	nop
    198c:	.word	0x20000e14
    1990:	.word	0x00001835
    1994:	.word	0x20000e24

00001998 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1998:	ldr	r2, [pc, #16]	; (19ac <systick_isr+0x14>)
    199a:	ldr	r3, [pc, #20]	; (19b0 <systick_isr+0x18>)
    199c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    199e:	ldr	r2, [pc, #20]	; (19b4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    19a0:	str	r1, [r3, #0]
	systick_millis_count++;
    19a2:	ldr	r3, [r2, #0]
    19a4:	adds	r3, #1
    19a6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    19a8:	b.w	1900 <MillisTimer::runFromTimer()>
    19ac:	.word	0xe0001004
    19b0:	.word	0x20000dfc
    19b4:	.word	0x20000e04

000019b8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    19b8:	b.w	798 <usb_serial_flush_input>

000019bc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    19bc:	b.w	748 <usb_serial_peekchar>

000019c0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    19c0:	b.w	80c <usb_serial_getchar>

000019c4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    19c4:	b.w	78c <usb_serial_available>

000019c8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    19c8:	b.w	8bc <usb_serial_flush_output>

000019cc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    19cc:	b.w	870 <usb_serial_write_buffer_free>

000019d0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19d0:	mov	r0, r1
    19d2:	mov	r1, r2
    19d4:	b.w	858 <usb_serial_write>

000019d8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    19d8:	mov	r0, r1
    19da:	b.w	82c <usb_serial_putchar>
    19de:	nop

000019e0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    19e0:	ldr	r3, [pc, #4]	; (19e8 <serialEvent()+0x8>)
    19e2:	movs	r2, #0
    19e4:	strb	r2, [r3, #0]
    19e6:	bx	lr
    19e8:	.word	0x20000372

000019ec <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    19ec:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    19ee:	ldr	r4, [pc, #24]	; (1a08 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    19f0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    19f2:	ldr	r3, [r0, #0]
    19f4:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    19f6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    19f8:	add	r1, sp, #4
    19fa:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    19fc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1a00:	blx	r3
}
    1a02:	add	sp, #8
    1a04:	pop	{r4, pc}
    1a06:	nop
    1a08:	.word	0x20000338

00001a0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    1a0c:	push	{r4, r5, r6, r7, lr}
    1a0e:	mov	r6, r0
    1a10:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    1a12:	cmp	r2, #0
    1a14:	beq.n	1a7e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    1a16:	cmp	r2, #1
    1a18:	it	eq
    1a1a:	moveq	r2, #10
	}


	if (n == 0) {
    1a1c:	cbz	r1, 1a74 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    1a1e:	movs	r5, #33	; 0x21
    1a20:	b.n	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    1a22:	uxtb	r5, r7
    1a24:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    1a26:	udiv	r4, r1, r2
    1a2a:	mls	r1, r2, r4, r1
    1a2e:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a30:	cmp	r1, #9
    1a32:	add.w	r1, r0, #55	; 0x37
    1a36:	add.w	r0, r0, #48	; 0x30
    1a3a:	it	hi
    1a3c:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    1a3e:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a40:	add	r4, sp, #40	; 0x28
    1a42:	it	ls
    1a44:	uxtbls	r0, r0
    1a46:	add	r4, r5
    1a48:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    1a4c:	cmp	r1, #0
    1a4e:	bne.n	1a22 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    1a50:	cbz	r3, 1a60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    1a52:	subs	r5, #1
		buf[i] = '-';
    1a54:	add	r3, sp, #40	; 0x28
    1a56:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    1a58:	uxtb	r5, r5
		buf[i] = '-';
    1a5a:	add	r3, r5
    1a5c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    1a60:	ldr	r3, [r6, #0]
    1a62:	add	r1, sp, #4
    1a64:	rsb	r2, r5, #34	; 0x22
    1a68:	mov	r0, r6
    1a6a:	add	r1, r5
    1a6c:	ldr	r3, [r3, #4]
    1a6e:	blx	r3
}
    1a70:	add	sp, #44	; 0x2c
    1a72:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1a74:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1a76:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1a78:	strb.w	r2, [sp, #37]	; 0x25
    1a7c:	b.n	1a50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    1a7e:	ldr	r3, [r0, #0]
    1a80:	uxtb	r1, r1
    1a82:	ldr	r3, [r3, #0]
    1a84:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    1a86:	add	sp, #44	; 0x2c
    1a88:	pop	{r4, r5, r6, r7, pc}
    1a8a:	nop

00001a8c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    1a8c:	cmp	r1, #0
    1a8e:	blt.n	1a98 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    1a90:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    1a92:	movs	r2, #10
    1a94:	b.w	1a0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    1a98:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    1a9a:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    1a9c:	movs	r2, #10
    1a9e:	b.w	1a0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1aa2:	nop
    1aa4:	movs	r0, r0
	...

00001aa8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1aa8:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    1aac:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1aae:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    1ab2:	mov	r5, r0
    1ab4:	vpush	{d8}
    1ab8:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1aba:	bvs.w	1be0 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    1abe:	vabs.f64	d7, d0
    1ac2:	vldr	d6, [pc, #300]	; 1bf0 <Print::printFloat(double, unsigned char)+0x148>
    1ac6:	vcmp.f64	d7, d6
    1aca:	vmrs	APSR_nzcv, fpscr
    1ace:	ble.n	1ae6 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1ad0:	ldr	r3, [r0, #0]
    1ad2:	movs	r2, #3
    1ad4:	ldr	r1, [pc, #312]	; (1c10 <Print::printFloat(double, unsigned char)+0x168>)
    1ad6:	ldr	r3, [r3, #4]
    1ad8:	blx	r3
    1ada:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    1adc:	mov	r0, r6
    1ade:	add	sp, #24
    1ae0:	vpop	{d8}
    1ae4:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    1ae6:	vldr	d7, [pc, #272]	; 1bf8 <Print::printFloat(double, unsigned char)+0x150>
    1aea:	vcmpe.f64	d0, d7
    1aee:	vmrs	APSR_nzcv, fpscr
    1af2:	bgt.n	1ba6 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    1af4:	vldr	d7, [pc, #264]	; 1c00 <Print::printFloat(double, unsigned char)+0x158>
    1af8:	vcmpe.f64	d0, d7
    1afc:	vmrs	APSR_nzcv, fpscr
    1b00:	bmi.n	1ba6 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    1b02:	vcmpe.f64	d0, #0.0
    1b06:	mov	r4, r1
    1b08:	vmrs	APSR_nzcv, fpscr
    1b0c:	bmi.n	1bbc <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    1b0e:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    1b10:	cmp	r4, #0
    1b12:	beq.n	1bc4 <Print::printFloat(double, unsigned char)+0x11c>
    1b14:	vmov.f64	d8, #96	; 0x3f000000  0.5
    1b18:	movs	r2, #0
		rounding *= 0.1;
    1b1a:	vldr	d7, [pc, #236]	; 1c08 <Print::printFloat(double, unsigned char)+0x160>
    1b1e:	adds	r2, #1
    1b20:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    1b24:	uxtb	r1, r2
    1b26:	cmp	r4, r1
    1b28:	bhi.n	1b1e <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    1b2a:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1b2e:	movs	r2, #10
    1b30:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    1b32:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    1b36:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    1b3a:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    1b3e:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    1b42:	bl	1a0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b46:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1b48:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1b4c:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1b50:	mov.w	r3, #46	; 0x2e
    1b54:	it	cs
    1b56:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1b58:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1b5a:	strb.w	r3, [sp, #8]
    1b5e:	add	r4, r2
    1b60:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1b62:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1b66:	adds	r3, r2, #1
    1b68:	add	r1, sp, #24
    1b6a:	add	r1, r2
    1b6c:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    1b6e:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    1b70:	vcvt.u32.f64	s13, d0
    1b74:	vstr	s13, [sp, #4]
    1b78:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    1b7c:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1b80:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    1b84:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1b88:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    1b8c:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    1b90:	bne.n	1b62 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    1b92:	ldr	r3, [r5, #0]
    1b94:	mov	r0, r5
    1b96:	add	r1, sp, #8
    1b98:	ldr	r3, [r3, #4]
    1b9a:	blx	r3
	}
	return count;
}
    1b9c:	mov	r0, r6
    1b9e:	add	sp, #24
    1ba0:	vpop	{d8}
    1ba4:	pop	{r4, r5, r6, pc}
    1ba6:	ldr	r3, [r5, #0]
    1ba8:	movs	r2, #3
    1baa:	ldr	r1, [pc, #104]	; (1c14 <Print::printFloat(double, unsigned char)+0x16c>)
    1bac:	ldr	r3, [r3, #4]
    1bae:	blx	r3
    1bb0:	mov	r6, r0
    1bb2:	mov	r0, r6
    1bb4:	add	sp, #24
    1bb6:	vpop	{d8}
    1bba:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    1bbc:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    1bc0:	movs	r3, #1
    1bc2:	b.n	1b10 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1bc4:	vmov.f64	d7, #96	; 0x3f000000  0.5
    1bc8:	mov	r0, r5
    1bca:	movs	r2, #10
    1bcc:	vadd.f64	d0, d0, d7
    1bd0:	vcvt.u32.f64	s15, d0
    1bd4:	vmov	r1, s15
    1bd8:	bl	1a0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bdc:	mov	r6, r0
    1bde:	b.n	1adc <Print::printFloat(double, unsigned char)+0x34>
    1be0:	ldr	r3, [r0, #0]
    1be2:	movs	r2, #3
    1be4:	ldr	r1, [pc, #48]	; (1c18 <Print::printFloat(double, unsigned char)+0x170>)
    1be6:	ldr	r3, [r3, #4]
    1be8:	blx	r3
    1bea:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1bec:	b.n	1adc <Print::printFloat(double, unsigned char)+0x34>
    1bee:	nop
    1bf0:	.word	0xffffffff
    1bf4:	.word	0x7fefffff
    1bf8:	.word	0xe0000000
    1bfc:	.word	0x41efffff
    1c00:	.word	0xe0000000
    1c04:	.word	0xc1efffff
    1c08:	.word	0x9999999a
    1c0c:	.word	0x3fb99999
    1c10:	.word	0x20000344
    1c14:	.word	0x20000340
    1c18:	.word	0x2000033c

00001c1c <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    1c1c:	b.w	21ec <malloc>

00001c20 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1c20:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1c22:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1c26:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1c2a:	bne.n	1d08 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1c2c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1c2e:	bcc.n	1cb4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1c30:	ldr.w	r3, [r1], #4
    1c34:	str.w	r3, [r0], #4
    1c38:	ldr.w	r3, [r1], #4
    1c3c:	str.w	r3, [r0], #4
    1c40:	ldr.w	r3, [r1], #4
    1c44:	str.w	r3, [r0], #4
    1c48:	ldr.w	r3, [r1], #4
    1c4c:	str.w	r3, [r0], #4
    1c50:	ldr.w	r3, [r1], #4
    1c54:	str.w	r3, [r0], #4
    1c58:	ldr.w	r3, [r1], #4
    1c5c:	str.w	r3, [r0], #4
    1c60:	ldr.w	r3, [r1], #4
    1c64:	str.w	r3, [r0], #4
    1c68:	ldr.w	r3, [r1], #4
    1c6c:	str.w	r3, [r0], #4
    1c70:	ldr.w	r3, [r1], #4
    1c74:	str.w	r3, [r0], #4
    1c78:	ldr.w	r3, [r1], #4
    1c7c:	str.w	r3, [r0], #4
    1c80:	ldr.w	r3, [r1], #4
    1c84:	str.w	r3, [r0], #4
    1c88:	ldr.w	r3, [r1], #4
    1c8c:	str.w	r3, [r0], #4
    1c90:	ldr.w	r3, [r1], #4
    1c94:	str.w	r3, [r0], #4
    1c98:	ldr.w	r3, [r1], #4
    1c9c:	str.w	r3, [r0], #4
    1ca0:	ldr.w	r3, [r1], #4
    1ca4:	str.w	r3, [r0], #4
    1ca8:	ldr.w	r3, [r1], #4
    1cac:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1cb0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1cb2:	bcs.n	1c30 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1cb4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1cb6:	bcc.n	1cdc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1cb8:	ldr.w	r3, [r1], #4
    1cbc:	str.w	r3, [r0], #4
    1cc0:	ldr.w	r3, [r1], #4
    1cc4:	str.w	r3, [r0], #4
    1cc8:	ldr.w	r3, [r1], #4
    1ccc:	str.w	r3, [r0], #4
    1cd0:	ldr.w	r3, [r1], #4
    1cd4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1cd8:	subs	r2, #16
	bhs	.Lmid_block_loop
    1cda:	bcs.n	1cb8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1cdc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1cde:	bcc.n	1cec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1ce0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1ce4:	str.w	r3, [r0], #4
	subs	r2, #4
    1ce8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1cea:	bcs.n	1ce0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1cec:	adds	r2, #4
	beq	.Ldone
    1cee:	beq.n	1d02 <memcpy+0xe2>

	lsls	r2, r2, #31
    1cf0:	lsls	r2, r2, #31
	itt ne
    1cf2:	itt	ne
	ldrbne  r3, [r1], #1
    1cf4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1cf8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1cfc:	bcc.n	1d02 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1cfe:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1d00:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1d02:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1d04:	bx	lr
    1d06:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1d08:	cmp	r2, #8
	blo	.Lbyte_copy
    1d0a:	bcc.n	1d34 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1d0c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1d0e:	beq.n	1c2c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1d10:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1d14:	beq.n	1c2c <memcpy+0xc>

	rsb	r3, #4
    1d16:	rsb	r3, r3, #4
	subs	r2, r3
    1d1a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1d1c:	lsls	r3, r3, #31
	itt ne
    1d1e:	itt	ne
	ldrbne  r3, [r1], #1
    1d20:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1d24:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1d28:	bcc.n	1c2c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1d2a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1d2e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1d32:	b.n	1c2c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1d34:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1d36:	bcc.n	1cec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1d38:	subs	r2, #1
	ldrb    r3, [r1], #1
    1d3a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1d3e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1d42:	bcs.n	1d38 <memcpy+0x118>

	ldrb	r3, [r1]
    1d44:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1d46:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1d48:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1d4a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1d4c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1d4e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1d50:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1d52:	bx	lr

00001d54 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1d54:	movs	r0, #4
    1d56:	mov	r1, lr
    1d58:	tst	r0, r1
    1d5a:	beq.n	1d64 <_MSP>
    1d5c:	mrs	r0, PSP
    1d60:	b.w	1d74 <HardFault_HandlerC>

00001d64 <_MSP>:
    1d64:	mrs	r0, MSP
    1d68:	b.w	1d74 <HardFault_HandlerC>

00001d6c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1d6c:	bx	lr
    1d6e:	nop

00001d70 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1d70:	bx	lr
    1d72:	nop

00001d74 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d74:	ldr	r3, [pc, #108]	; (1de4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1d76:	movs	r1, #5
    1d78:	ldr	r2, [pc, #108]	; (1de8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1d7a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1d7c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1d7e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1d82:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1d84:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1d88:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d8a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1d8c:	ldr	r4, [pc, #92]	; (1dec <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d8e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1d90:	ldr	r0, [pc, #92]	; (1df0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1d92:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1d94:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1d98:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1d9c:	ldr	r3, [r4, #0]
    1d9e:	cmp	r3, r0
    1da0:	bls.n	1da8 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1da2:	ldr	r0, [pc, #80]	; (1df4 <HardFault_HandlerC+0x80>)
    1da4:	bl	1e30 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1da8:	ldr	r5, [pc, #56]	; (1de4 <HardFault_HandlerC+0x70>)
    1daa:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1dac:	movs	r0, #0
    1dae:	ldr	r2, [pc, #72]	; (1df8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1db0:	ldr	r1, [pc, #72]	; (1dfc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1db2:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1db6:	str	r0, [sp, #4]
    1db8:	ldr	r3, [sp, #4]
    1dba:	cmp	r3, r2
    1dbc:	bhi.n	1dca <HardFault_HandlerC+0x56>
    1dbe:	ldr	r3, [sp, #4]
    1dc0:	adds	r3, #1
    1dc2:	str	r3, [sp, #4]
    1dc4:	ldr	r3, [sp, #4]
    1dc6:	cmp	r3, r2
    1dc8:	bls.n	1dbe <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1dca:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1dce:	str	r0, [sp, #4]
    1dd0:	ldr	r3, [sp, #4]
    1dd2:	cmp	r3, r1
    1dd4:	bhi.n	1db2 <HardFault_HandlerC+0x3e>
    1dd6:	ldr	r3, [sp, #4]
    1dd8:	adds	r3, #1
    1dda:	str	r3, [sp, #4]
    1ddc:	ldr	r3, [sp, #4]
    1dde:	cmp	r3, r1
    1de0:	bls.n	1dd6 <HardFault_HandlerC+0x62>
    1de2:	b.n	1db2 <HardFault_HandlerC+0x3e>
    1de4:	.word	0x401bc000
    1de8:	.word	0x401f8000
    1dec:	.word	0x2000038c
    1df0:	.word	0x23c345ff
    1df4:	.word	0x11e1a300
    1df8:	.word	0x000f423f
    1dfc:	.word	0x0089543f

00001e00 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1e00:	ldr	r2, [pc, #36]	; (1e28 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1e02:	push	{r3, lr}
        char *prev = __brkval;
    1e04:	ldr	r3, [r2, #0]
        if (incr != 0) {
    1e06:	cbz	r0, 1e12 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1e08:	add	r0, r3
    1e0a:	ldr	r1, [pc, #32]	; (1e2c <_sbrk+0x2c>)
    1e0c:	cmp	r0, r1
    1e0e:	bhi.n	1e16 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1e10:	str	r0, [r2, #0]
        }
        return prev;
}
    1e12:	mov	r0, r3
    1e14:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1e16:	bl	2190 <__errno>
    1e1a:	movs	r2, #12
                        return (void *)-1;
    1e1c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1e20:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1e22:	mov	r0, r3
    1e24:	pop	{r3, pc}
    1e26:	nop
    1e28:	.word	0x20000384
    1e2c:	.word	0x20280000

00001e30 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e30:	ldr	r2, [pc, #600]	; (208c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e32:	ldr	r3, [pc, #604]	; (2090 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e34:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1e36:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1e3a:	ldr	r4, [pc, #600]	; (2094 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e3c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1e40:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1e42:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e44:	bls.n	1e80 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1e46:	ldr	r3, [pc, #592]	; (2098 <set_arm_clock+0x268>)
    1e48:	cmp	r0, r3
    1e4a:	bls.w	2078 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1e4e:	ldr	r3, [pc, #588]	; (209c <set_arm_clock+0x26c>)
    1e50:	movw	r5, #1575	; 0x627
    1e54:	ldr	r7, [pc, #584]	; (20a0 <set_arm_clock+0x270>)
    1e56:	add	r3, r0
    1e58:	ldr	r4, [pc, #584]	; (20a4 <set_arm_clock+0x274>)
    1e5a:	lsrs	r2, r3, #8
    1e5c:	umull	r3, r2, r7, r2
    1e60:	lsrs	r3, r2, #7
    1e62:	add.w	r3, r3, r3, lsl #2
    1e66:	add.w	r2, r3, r3, lsl #2
    1e6a:	addw	r3, r2, #1250	; 0x4e2
    1e6e:	cmp	r3, r5
    1e70:	it	cs
    1e72:	movcs	r3, r5
    1e74:	sub.w	r3, r3, #800	; 0x320
    1e78:	umull	r3, r5, r4, r3
    1e7c:	lsrs	r5, r5, #3
    1e7e:	b.n	1e8a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1e80:	ldr	r5, [pc, #548]	; (20a8 <set_arm_clock+0x278>)
    1e82:	cmp	r0, r5
    1e84:	ite	ls
    1e86:	movls	r5, #6
    1e88:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e8a:	ldr	r2, [pc, #516]	; (2090 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e8c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e90:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e94:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e96:	orr.w	r3, r3, #192	; 0xc0
    1e9a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e9e:	bcs.n	1eb6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1ea0:	ldr	r3, [pc, #496]	; (2094 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1ea2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1ea6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1ea8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1eaa:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1eac:	ldr	r3, [r2, #0]
    1eae:	cmp	r3, #0
    1eb0:	bge.n	1eac <set_arm_clock+0x7c>
    1eb2:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1eb6:	ands.w	r3, lr, #33554432	; 0x2000000
    1eba:	bne.n	1f20 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1ebc:	ldr	r4, [pc, #492]	; (20ac <set_arm_clock+0x27c>)
    1ebe:	ldr	r2, [pc, #496]	; (20b0 <set_arm_clock+0x280>)
    1ec0:	ldr.w	ip, [r4, #16]
    1ec4:	mov	r4, r2
    1ec6:	and.w	r2, ip, r2
    1eca:	cmp	r2, r4
    1ecc:	itet	eq
    1ece:	moveq.w	r3, #402653184	; 0x18000000
    1ed2:	movne.w	r2, #4096	; 0x1000
    1ed6:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1ed8:	eor.w	r4, lr, r3
    1edc:	tst.w	r4, #939524096	; 0x38000000
    1ee0:	beq.n	1ef4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1ee2:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1ee6:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1eea:	ldr	r4, [pc, #420]	; (2090 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1eec:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1ef0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1ef4:	eor.w	r3, r1, r2
    1ef8:	tst.w	r3, #12288	; 0x3000
    1efc:	beq.n	1f10 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1efe:	ldr	r3, [pc, #400]	; (2090 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1f00:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1f04:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1f06:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1f08:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1f0a:	ldr	r3, [r2, #72]	; 0x48
    1f0c:	lsls	r4, r3, #28
    1f0e:	bmi.n	1f0a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1f10:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1f14:	ldr	r2, [pc, #376]	; (2090 <set_arm_clock+0x260>)
    1f16:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1f1a:	ldr	r3, [r2, #72]	; 0x48
    1f1c:	lsls	r1, r3, #26
    1f1e:	bmi.n	1f1a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1f20:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1f22:	ldr	r4, [pc, #400]	; (20b4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1f24:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f26:	mul.w	r3, r1, r2
    1f2a:	mul.w	r3, r0, r3
    1f2e:	cmp	r3, r4
    1f30:	bhi.n	1f46 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1f32:	cmp	r2, #7
    1f34:	bhi.w	2062 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1f38:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f3a:	mul.w	r3, r1, r2
    1f3e:	mul.w	r3, r0, r3
    1f42:	cmp	r3, r4
    1f44:	bls.n	1f32 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1f46:	ldr	r0, [pc, #368]	; (20b8 <set_arm_clock+0x288>)
    1f48:	ldr	r4, [pc, #368]	; (20bc <set_arm_clock+0x28c>)
    1f4a:	add	r0, r3
    1f4c:	umull	r0, r3, r4, r0
    1f50:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1f52:	cmp	r3, #108	; 0x6c
    1f54:	bhi.w	206e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1f58:	cmp	r3, #53	; 0x35
    1f5a:	bhi.w	207c <set_arm_clock+0x24c>
    1f5e:	ldr.w	r8, [pc, #392]	; 20e8 <set_arm_clock+0x2b8>
    1f62:	movs	r3, #54	; 0x36
    1f64:	ldr	r0, [pc, #344]	; (20c0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f66:	ldr.w	ip, [pc, #324]	; 20ac <set_arm_clock+0x27c>
    1f6a:	ldr	r4, [pc, #344]	; (20c4 <set_arm_clock+0x294>)
    1f6c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f70:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f74:	and.w	r4, r9, r4
    1f78:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f7a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f7e:	beq.n	1f98 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1f80:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f84:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f88:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f8a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1f8e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f92:	ldr	r3, [r4, #0]
    1f94:	cmp	r3, #0
    1f96:	bge.n	1f92 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1f98:	ldr.w	ip, [pc, #244]	; 2090 <set_arm_clock+0x260>
    1f9c:	subs	r2, #1
    1f9e:	ldr.w	r3, [ip, #16]
    1fa2:	and.w	r3, r3, #7
    1fa6:	cmp	r3, r2
    1fa8:	beq.n	1fba <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1faa:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1fae:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1fb0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1fb4:	ldr	r3, [r4, #72]	; 0x48
    1fb6:	lsls	r3, r3, #15
    1fb8:	bmi.n	1fb4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1fba:	subs	r1, #1
    1fbc:	lsls	r1, r1, #10
    1fbe:	eor.w	r3, lr, r1
    1fc2:	tst.w	r3, #7168	; 0x1c00
    1fc6:	beq.n	1fe2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1fc8:	ldr	r3, [pc, #196]	; (2090 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1fca:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fce:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fd2:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fd4:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1fd8:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fdc:	ldr	r3, [r2, #72]	; 0x48
    1fde:	lsls	r1, r3, #30
    1fe0:	bmi.n	1fdc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1fe2:	ldr	r3, [pc, #228]	; (20c8 <set_arm_clock+0x298>)
    1fe4:	ldr	r1, [pc, #228]	; (20cc <set_arm_clock+0x29c>)
    1fe6:	add	r3, r0
    1fe8:	lsrs	r3, r3, #7
    1fea:	umull	r3, r1, r1, r3
    1fee:	lsrs	r1, r1, #12
    1ff0:	cmp	r1, #4
    1ff2:	it	cs
    1ff4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1ff6:	subs	r3, r1, #1
    1ff8:	lsls	r3, r3, #8
    1ffa:	eor.w	r2, lr, r3
    1ffe:	tst.w	r2, #768	; 0x300
    2002:	beq.n	2014 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2004:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2008:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    200c:	ldr	r2, [pc, #128]	; (2090 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    200e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2012:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2014:	ldr	r3, [pc, #120]	; (2090 <set_arm_clock+0x260>)
    2016:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2018:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    201a:	bic.w	r4, r4, #33554432	; 0x2000000
    201e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2020:	ldr	r3, [r2, #72]	; 0x48
    2022:	lsls	r3, r3, #26
    2024:	bmi.n	2020 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2026:	ldr	r3, [pc, #168]	; (20d0 <set_arm_clock+0x2a0>)
    2028:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    202c:	ldr	r4, [pc, #164]	; (20d4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    202e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2030:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2034:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2036:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    203a:	ldr	r4, [pc, #156]	; (20d8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    203c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2040:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2044:	ldr	r2, [pc, #148]	; (20dc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2046:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2048:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    204a:	bcs.n	205e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    204c:	ldr	r3, [pc, #68]	; (2094 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    204e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2052:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2054:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2056:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2058:	ldr	r3, [r2, #0]
    205a:	cmp	r3, #0
    205c:	bge.n	2058 <set_arm_clock+0x228>
	}

	return frequency;
}
    205e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2062:	cmp	r1, #4
    2064:	bhi.w	1f46 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2068:	adds	r1, #1
				div_arm = 1;
    206a:	movs	r2, #1
    206c:	b.n	1f26 <set_arm_clock+0xf6>
    206e:	ldr.w	r8, [pc, #124]	; 20ec <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2072:	movs	r3, #108	; 0x6c
    2074:	ldr	r0, [pc, #104]	; (20e0 <set_arm_clock+0x2b0>)
    2076:	b.n	1f66 <set_arm_clock+0x136>
    2078:	movs	r5, #18
    207a:	b.n	1e8a <set_arm_clock+0x5a>
    207c:	ldr	r0, [pc, #100]	; (20e4 <set_arm_clock+0x2b4>)
    207e:	ldr.w	r8, [pc, #112]	; 20f0 <set_arm_clock+0x2c0>
    2082:	mul.w	r0, r0, r3
    2086:	orr.w	r8, r3, r8
    208a:	b.n	1f66 <set_arm_clock+0x136>
    208c:	.word	0x1f78a400
    2090:	.word	0x400fc000
    2094:	.word	0x40080000
    2098:	.word	0x23c34600
    209c:	.word	0xdc3cba00
    20a0:	.word	0x004cb223
    20a4:	.word	0x51eb851f
    20a8:	.word	0x016e3600
    20ac:	.word	0x400d8000
    20b0:	.word	0x80003040
    20b4:	.word	0x269fb1ff
    20b8:	.word	0x005b8d80
    20bc:	.word	0x165e9f81
    20c0:	.word	0x269fb200
    20c4:	.word	0x8001307f
    20c8:	.word	0x08f0d17f
    20cc:	.word	0x00e5109f
    20d0:	.word	0x431bde83
    20d4:	.word	0x2000038c
    20d8:	.word	0x20000388
    20dc:	.word	0x20000e00
    20e0:	.word	0x4d3f6400
    20e4:	.word	0x00b71b00
    20e8:	.word	0x80002036
    20ec:	.word	0x8000206c
    20f0:	.word	0x80002000

000020f4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20f4:	push	{r4, r5, r6, r7}
    20f6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    20f8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    20fa:	mov	r7, r6
    20fc:	b.n	2100 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    20fe:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2100:	udiv	r3, r0, r2
    2104:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2108:	add.w	r4, r0, #55	; 0x37
    210c:	cmp	r0, #9
    210e:	add.w	r0, r0, #48	; 0x30
    2112:	uxtb	r4, r4
    2114:	it	ls
    2116:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2118:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    211a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    211e:	cmp	r3, #0
    2120:	bne.n	20fe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    2122:	adds	r2, r1, r5
    2124:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2126:	cbz	r5, 213c <ultoa+0x48>
    2128:	adds	r3, #1
		t = buf[j];
    212a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    212e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2130:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    2132:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2134:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2136:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    213a:	blt.n	2128 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    213c:	mov	r0, r1
    213e:	pop	{r4, r5, r6, r7}
    2140:	bx	lr
    2142:	nop

00002144 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2144:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2146:	ldr	r2, [pc, #24]	; (2160 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2148:	movs	r1, #7
    214a:	ldr	r3, [pc, #24]	; (2164 <Panic_Temp_isr+0x20>)
    214c:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    214e:	ldr	r3, [r2, #56]	; 0x38
    2150:	orr.w	r3, r3, #64	; 0x40
    2154:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    2156:	dsb	sy
  while (1) asm ("wfi");
    215a:	wfi
    215c:	b.n	215a <Panic_Temp_isr+0x16>
    215e:	nop
    2160:	.word	0x400d4000
    2164:	.word	0x400ac000

00002168 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    2168:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    216a:	ldr	r3, [pc, #28]	; (2188 <HardwareSerial::processSerialEvents()+0x20>)
    216c:	ldrb	r4, [r3, #0]
    216e:	cbz	r4, 2184 <HardwareSerial::processSerialEvents()+0x1c>
    2170:	ldr	r5, [pc, #24]	; (218c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    2172:	ldr.w	r3, [r5, #4]!
    2176:	cmp	r3, #0
    2178:	beq.n	2172 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    217a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    217c:	subs	r3, r4, #1
    217e:	ands.w	r4, r3, #255	; 0xff
    2182:	bne.n	2172 <HardwareSerial::processSerialEvents()+0xa>
    2184:	pop	{r3, r4, r5, pc}
    2186:	nop
    2188:	.word	0x20000e58
    218c:	.word	0x20000e38

00002190 <__errno>:
    2190:	ldr	r3, [pc, #4]	; (2198 <__errno+0x8>)
    2192:	ldr	r0, [r3, #0]
    2194:	bx	lr
    2196:	nop
    2198:	.word	0x200007b8

0000219c <__libc_init_array>:
    219c:	push	{r4, r5, r6, lr}
    219e:	ldr	r6, [pc, #60]	; (21dc <__libc_init_array+0x40>)
    21a0:	ldr	r5, [pc, #60]	; (21e0 <__libc_init_array+0x44>)
    21a2:	subs	r6, r6, r5
    21a4:	asrs	r6, r6, #2
    21a6:	it	ne
    21a8:	movne	r4, #0
    21aa:	beq.n	21b8 <__libc_init_array+0x1c>
    21ac:	adds	r4, #1
    21ae:	ldr.w	r3, [r5], #4
    21b2:	blx	r3
    21b4:	cmp	r6, r4
    21b6:	bne.n	21ac <__libc_init_array+0x10>
    21b8:	ldr	r6, [pc, #40]	; (21e4 <__libc_init_array+0x48>)
    21ba:	ldr	r5, [pc, #44]	; (21e8 <__libc_init_array+0x4c>)
    21bc:	subs	r6, r6, r5
    21be:	bl	2ab0 <___init_veneer>
    21c2:	asrs	r6, r6, #2
    21c4:	it	ne
    21c6:	movne	r4, #0
    21c8:	beq.n	21d8 <__libc_init_array+0x3c>
    21ca:	adds	r4, #1
    21cc:	ldr.w	r3, [r5], #4
    21d0:	blx	r3
    21d2:	cmp	r6, r4
    21d4:	bne.n	21ca <__libc_init_array+0x2e>
    21d6:	pop	{r4, r5, r6, pc}
    21d8:	pop	{r4, r5, r6, pc}
    21da:	nop
    21dc:	.word	0x60001740
    21e0:	.word	0x60001740
    21e4:	.word	0x60001744
    21e8:	.word	0x60001740

000021ec <malloc>:
    21ec:	ldr	r3, [pc, #8]	; (21f8 <malloc+0xc>)
    21ee:	mov	r1, r0
    21f0:	ldr	r0, [r3, #0]
    21f2:	b.w	220c <_malloc_r>
    21f6:	nop
    21f8:	.word	0x200007b8

000021fc <free>:
    21fc:	ldr	r3, [pc, #8]	; (2208 <free+0xc>)
    21fe:	mov	r1, r0
    2200:	ldr	r0, [r3, #0]
    2202:	b.w	28e0 <_free_r>
    2206:	nop
    2208:	.word	0x200007b8

0000220c <_malloc_r>:
    220c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2210:	add.w	r5, r1, #11
    2214:	cmp	r5, #22
    2216:	sub	sp, #12
    2218:	mov	r6, r0
    221a:	bls.w	235c <_malloc_r+0x150>
    221e:	bics.w	r5, r5, #7
    2222:	bmi.w	23a4 <_malloc_r+0x198>
    2226:	cmp	r1, r5
    2228:	bhi.w	23a4 <_malloc_r+0x198>
    222c:	bl	2818 <__malloc_lock>
    2230:	cmp.w	r5, #504	; 0x1f8
    2234:	bcc.w	2770 <_malloc_r+0x564>
    2238:	lsrs	r3, r5, #9
    223a:	beq.w	23b2 <_malloc_r+0x1a6>
    223e:	cmp	r3, #4
    2240:	bhi.w	254a <_malloc_r+0x33e>
    2244:	lsrs	r0, r5, #6
    2246:	add.w	lr, r0, #57	; 0x39
    224a:	mov.w	r3, lr, lsl #1
    224e:	adds	r0, #56	; 0x38
    2250:	ldr	r7, [pc, #784]	; (2564 <_malloc_r+0x358>)
    2252:	add.w	r3, r7, r3, lsl #2
    2256:	sub.w	r1, r3, #8
    225a:	ldr	r4, [r3, #4]
    225c:	cmp	r1, r4
    225e:	bne.n	2270 <_malloc_r+0x64>
    2260:	b.n	23bc <_malloc_r+0x1b0>
    2262:	cmp	r2, #0
    2264:	bge.w	23c0 <_malloc_r+0x1b4>
    2268:	ldr	r4, [r4, #12]
    226a:	cmp	r1, r4
    226c:	beq.w	23bc <_malloc_r+0x1b0>
    2270:	ldr	r3, [r4, #4]
    2272:	bic.w	r3, r3, #3
    2276:	subs	r2, r3, r5
    2278:	cmp	r2, #15
    227a:	ble.n	2262 <_malloc_r+0x56>
    227c:	ldr	r1, [pc, #740]	; (2564 <_malloc_r+0x358>)
    227e:	ldr	r4, [r7, #16]
    2280:	add.w	lr, r1, #8
    2284:	cmp	r4, lr
    2286:	beq.w	25f0 <_malloc_r+0x3e4>
    228a:	ldr	r3, [r4, #4]
    228c:	bic.w	r3, r3, #3
    2290:	subs	r2, r3, r5
    2292:	cmp	r2, #15
    2294:	bgt.w	25ca <_malloc_r+0x3be>
    2298:	cmp	r2, #0
    229a:	str.w	lr, [r1, #20]
    229e:	str.w	lr, [r1, #16]
    22a2:	bge.w	23e2 <_malloc_r+0x1d6>
    22a6:	cmp.w	r3, #512	; 0x200
    22aa:	bcs.w	257c <_malloc_r+0x370>
    22ae:	lsrs	r3, r3, #3
    22b0:	add.w	ip, r3, #1
    22b4:	movs	r2, #1
    22b6:	asrs	r3, r3, #2
    22b8:	lsl.w	r3, r2, r3
    22bc:	ldr	r2, [r1, #4]
    22be:	ldr.w	r8, [r1, ip, lsl #3]
    22c2:	str.w	r8, [r4, #8]
    22c6:	add.w	r9, r1, ip, lsl #3
    22ca:	orrs	r2, r3
    22cc:	sub.w	r3, r9, #8
    22d0:	str	r3, [r4, #12]
    22d2:	str	r2, [r1, #4]
    22d4:	str.w	r4, [r1, ip, lsl #3]
    22d8:	str.w	r4, [r8, #12]
    22dc:	asrs	r3, r0, #2
    22de:	movs	r4, #1
    22e0:	lsls	r4, r3
    22e2:	cmp	r4, r2
    22e4:	bhi.w	23fc <_malloc_r+0x1f0>
    22e8:	tst	r4, r2
    22ea:	bne.n	22fa <_malloc_r+0xee>
    22ec:	bic.w	r0, r0, #3
    22f0:	lsls	r4, r4, #1
    22f2:	tst	r4, r2
    22f4:	add.w	r0, r0, #4
    22f8:	beq.n	22f0 <_malloc_r+0xe4>
    22fa:	add.w	r9, r7, r0, lsl #3
    22fe:	mov	ip, r9
    2300:	mov	r8, r0
    2302:	ldr.w	r1, [ip, #12]
    2306:	cmp	ip, r1
    2308:	bne.n	231a <_malloc_r+0x10e>
    230a:	b.n	25f4 <_malloc_r+0x3e8>
    230c:	cmp	r2, #0
    230e:	bge.w	2614 <_malloc_r+0x408>
    2312:	ldr	r1, [r1, #12]
    2314:	cmp	ip, r1
    2316:	beq.w	25f4 <_malloc_r+0x3e8>
    231a:	ldr	r3, [r1, #4]
    231c:	bic.w	r3, r3, #3
    2320:	subs	r2, r3, r5
    2322:	cmp	r2, #15
    2324:	ble.n	230c <_malloc_r+0x100>
    2326:	mov	r4, r1
    2328:	ldr.w	ip, [r1, #12]
    232c:	ldr.w	r8, [r4, #8]!
    2330:	adds	r3, r1, r5
    2332:	orr.w	r5, r5, #1
    2336:	str	r5, [r1, #4]
    2338:	orr.w	r1, r2, #1
    233c:	str.w	ip, [r8, #12]
    2340:	mov	r0, r6
    2342:	str.w	r8, [ip, #8]
    2346:	str	r3, [r7, #20]
    2348:	str	r3, [r7, #16]
    234a:	str.w	lr, [r3, #12]
    234e:	str.w	lr, [r3, #8]
    2352:	str	r1, [r3, #4]
    2354:	str	r2, [r3, r2]
    2356:	bl	281c <__malloc_unlock>
    235a:	b.n	239c <_malloc_r+0x190>
    235c:	cmp	r1, #16
    235e:	bhi.n	23a4 <_malloc_r+0x198>
    2360:	bl	2818 <__malloc_lock>
    2364:	movs	r5, #16
    2366:	movs	r3, #6
    2368:	movs	r0, #2
    236a:	ldr	r7, [pc, #504]	; (2564 <_malloc_r+0x358>)
    236c:	add.w	r3, r7, r3, lsl #2
    2370:	sub.w	r2, r3, #8
    2374:	ldr	r4, [r3, #4]
    2376:	cmp	r4, r2
    2378:	beq.w	2606 <_malloc_r+0x3fa>
    237c:	ldr	r3, [r4, #4]
    237e:	ldr	r1, [r4, #12]
    2380:	ldr	r5, [r4, #8]
    2382:	bic.w	r3, r3, #3
    2386:	add	r3, r4
    2388:	mov	r0, r6
    238a:	ldr	r2, [r3, #4]
    238c:	str	r1, [r5, #12]
    238e:	orr.w	r2, r2, #1
    2392:	str	r5, [r1, #8]
    2394:	str	r2, [r3, #4]
    2396:	bl	281c <__malloc_unlock>
    239a:	adds	r4, #8
    239c:	mov	r0, r4
    239e:	add	sp, #12
    23a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a4:	movs	r4, #0
    23a6:	movs	r3, #12
    23a8:	mov	r0, r4
    23aa:	str	r3, [r6, #0]
    23ac:	add	sp, #12
    23ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b2:	movs	r3, #128	; 0x80
    23b4:	mov.w	lr, #64	; 0x40
    23b8:	movs	r0, #63	; 0x3f
    23ba:	b.n	2250 <_malloc_r+0x44>
    23bc:	mov	r0, lr
    23be:	b.n	227c <_malloc_r+0x70>
    23c0:	add	r3, r4
    23c2:	ldr	r1, [r4, #12]
    23c4:	ldr	r2, [r3, #4]
    23c6:	ldr	r5, [r4, #8]
    23c8:	orr.w	r2, r2, #1
    23cc:	str	r1, [r5, #12]
    23ce:	mov	r0, r6
    23d0:	str	r5, [r1, #8]
    23d2:	str	r2, [r3, #4]
    23d4:	bl	281c <__malloc_unlock>
    23d8:	adds	r4, #8
    23da:	mov	r0, r4
    23dc:	add	sp, #12
    23de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e2:	add	r3, r4
    23e4:	mov	r0, r6
    23e6:	ldr	r2, [r3, #4]
    23e8:	orr.w	r2, r2, #1
    23ec:	str	r2, [r3, #4]
    23ee:	bl	281c <__malloc_unlock>
    23f2:	adds	r4, #8
    23f4:	mov	r0, r4
    23f6:	add	sp, #12
    23f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23fc:	ldr	r4, [r7, #8]
    23fe:	ldr	r3, [r4, #4]
    2400:	bic.w	r8, r3, #3
    2404:	cmp	r8, r5
    2406:	bcc.n	2412 <_malloc_r+0x206>
    2408:	rsb	r3, r5, r8
    240c:	cmp	r3, #15
    240e:	bgt.w	252a <_malloc_r+0x31e>
    2412:	ldr	r3, [pc, #340]	; (2568 <_malloc_r+0x35c>)
    2414:	ldr.w	r9, [pc, #352]	; 2578 <_malloc_r+0x36c>
    2418:	ldr	r2, [r3, #0]
    241a:	ldr.w	r3, [r9]
    241e:	adds	r3, #1
    2420:	add	r2, r5
    2422:	add.w	sl, r4, r8
    2426:	beq.w	26ea <_malloc_r+0x4de>
    242a:	add.w	r2, r2, #4096	; 0x1000
    242e:	adds	r2, #15
    2430:	bic.w	r2, r2, #4080	; 0xff0
    2434:	bic.w	r2, r2, #15
    2438:	mov	r1, r2
    243a:	mov	r0, r6
    243c:	str	r2, [sp, #4]
    243e:	bl	2820 <_sbrk_r>
    2442:	cmp.w	r0, #4294967295
    2446:	mov	fp, r0
    2448:	ldr	r2, [sp, #4]
    244a:	beq.w	26fe <_malloc_r+0x4f2>
    244e:	cmp	sl, r0
    2450:	bhi.w	264c <_malloc_r+0x440>
    2454:	ldr	r3, [pc, #276]	; (256c <_malloc_r+0x360>)
    2456:	ldr	r1, [r3, #0]
    2458:	cmp	sl, fp
    245a:	add	r1, r2
    245c:	str	r1, [r3, #0]
    245e:	beq.w	2708 <_malloc_r+0x4fc>
    2462:	ldr.w	r0, [r9]
    2466:	ldr.w	lr, [pc, #272]	; 2578 <_malloc_r+0x36c>
    246a:	adds	r0, #1
    246c:	ittet	ne
    246e:	rsbne	sl, sl, fp
    2472:	addne	r1, sl
    2474:	streq.w	fp, [lr]
    2478:	strne	r1, [r3, #0]
    247a:	ands.w	r1, fp, #7
    247e:	beq.w	26b0 <_malloc_r+0x4a4>
    2482:	rsb	r0, r1, #8
    2486:	rsb	r1, r1, #4096	; 0x1000
    248a:	add	fp, r0
    248c:	adds	r1, #8
    248e:	add	r2, fp
    2490:	ubfx	r2, r2, #0, #12
    2494:	rsb	r9, r2, r1
    2498:	mov	r1, r9
    249a:	mov	r0, r6
    249c:	str	r3, [sp, #4]
    249e:	bl	2820 <_sbrk_r>
    24a2:	adds	r3, r0, #1
    24a4:	ldr	r3, [sp, #4]
    24a6:	beq.w	2728 <_malloc_r+0x51c>
    24aa:	rsb	r2, fp, r0
    24ae:	add	r2, r9
    24b0:	orr.w	r2, r2, #1
    24b4:	ldr	r1, [r3, #0]
    24b6:	str.w	fp, [r7, #8]
    24ba:	add	r1, r9
    24bc:	cmp	r4, r7
    24be:	str.w	r2, [fp, #4]
    24c2:	str	r1, [r3, #0]
    24c4:	ldr.w	r9, [pc, #164]	; 256c <_malloc_r+0x360>
    24c8:	beq.n	24f8 <_malloc_r+0x2ec>
    24ca:	cmp.w	r8, #15
    24ce:	bls.w	26cc <_malloc_r+0x4c0>
    24d2:	ldr	r2, [r4, #4]
    24d4:	sub.w	r3, r8, #12
    24d8:	bic.w	r3, r3, #7
    24dc:	adds	r0, r4, r3
    24de:	and.w	r2, r2, #1
    24e2:	mov.w	lr, #5
    24e6:	orrs	r2, r3
    24e8:	cmp	r3, #15
    24ea:	str	r2, [r4, #4]
    24ec:	str.w	lr, [r0, #4]
    24f0:	str.w	lr, [r0, #8]
    24f4:	bhi.w	2730 <_malloc_r+0x524>
    24f8:	ldr	r3, [pc, #116]	; (2570 <_malloc_r+0x364>)
    24fa:	ldr	r4, [r7, #8]
    24fc:	ldr	r2, [r3, #0]
    24fe:	cmp	r1, r2
    2500:	it	hi
    2502:	strhi	r1, [r3, #0]
    2504:	ldr	r3, [pc, #108]	; (2574 <_malloc_r+0x368>)
    2506:	ldr	r2, [r3, #0]
    2508:	cmp	r1, r2
    250a:	ldr	r2, [r4, #4]
    250c:	it	hi
    250e:	strhi	r1, [r3, #0]
    2510:	bic.w	r2, r2, #3
    2514:	cmp	r5, r2
    2516:	sub.w	r3, r2, r5
    251a:	bhi.n	2520 <_malloc_r+0x314>
    251c:	cmp	r3, #15
    251e:	bgt.n	252a <_malloc_r+0x31e>
    2520:	mov	r0, r6
    2522:	bl	281c <__malloc_unlock>
    2526:	movs	r4, #0
    2528:	b.n	239c <_malloc_r+0x190>
    252a:	adds	r2, r4, r5
    252c:	orr.w	r3, r3, #1
    2530:	orr.w	r5, r5, #1
    2534:	str	r5, [r4, #4]
    2536:	mov	r0, r6
    2538:	str	r2, [r7, #8]
    253a:	str	r3, [r2, #4]
    253c:	bl	281c <__malloc_unlock>
    2540:	adds	r4, #8
    2542:	mov	r0, r4
    2544:	add	sp, #12
    2546:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254a:	cmp	r3, #20
    254c:	bls.n	2632 <_malloc_r+0x426>
    254e:	cmp	r3, #84	; 0x54
    2550:	bhi.w	269c <_malloc_r+0x490>
    2554:	lsrs	r0, r5, #12
    2556:	add.w	lr, r0, #111	; 0x6f
    255a:	mov.w	r3, lr, lsl #1
    255e:	adds	r0, #110	; 0x6e
    2560:	b.n	2250 <_malloc_r+0x44>
    2562:	nop
    2564:	.word	0x200007bc
    2568:	.word	0x20000e64
    256c:	.word	0x20000e68
    2570:	.word	0x20000e60
    2574:	.word	0x20000e5c
    2578:	.word	0x20000bc8
    257c:	lsrs	r2, r3, #9
    257e:	cmp	r2, #4
    2580:	bls.n	2640 <_malloc_r+0x434>
    2582:	cmp	r2, #20
    2584:	bhi.w	26ee <_malloc_r+0x4e2>
    2588:	add.w	r1, r2, #92	; 0x5c
    258c:	lsls	r1, r1, #1
    258e:	adds	r2, #91	; 0x5b
    2590:	add.w	ip, r7, r1, lsl #2
    2594:	ldr.w	r1, [r7, r1, lsl #2]
    2598:	ldr.w	r8, [pc, #476]	; 2778 <_malloc_r+0x56c>
    259c:	sub.w	ip, ip, #8
    25a0:	cmp	ip, r1
    25a2:	beq.w	26b6 <_malloc_r+0x4aa>
    25a6:	ldr	r2, [r1, #4]
    25a8:	bic.w	r2, r2, #3
    25ac:	cmp	r3, r2
    25ae:	bcs.n	25b6 <_malloc_r+0x3aa>
    25b0:	ldr	r1, [r1, #8]
    25b2:	cmp	ip, r1
    25b4:	bne.n	25a6 <_malloc_r+0x39a>
    25b6:	ldr.w	ip, [r1, #12]
    25ba:	ldr	r2, [r7, #4]
    25bc:	str.w	ip, [r4, #12]
    25c0:	str	r1, [r4, #8]
    25c2:	str.w	r4, [ip, #8]
    25c6:	str	r4, [r1, #12]
    25c8:	b.n	22dc <_malloc_r+0xd0>
    25ca:	adds	r3, r4, r5
    25cc:	orr.w	r7, r2, #1
    25d0:	orr.w	r5, r5, #1
    25d4:	str	r5, [r4, #4]
    25d6:	mov	r0, r6
    25d8:	str	r3, [r1, #20]
    25da:	str	r3, [r1, #16]
    25dc:	str.w	lr, [r3, #12]
    25e0:	str.w	lr, [r3, #8]
    25e4:	str	r7, [r3, #4]
    25e6:	str	r2, [r3, r2]
    25e8:	adds	r4, #8
    25ea:	bl	281c <__malloc_unlock>
    25ee:	b.n	239c <_malloc_r+0x190>
    25f0:	ldr	r2, [r1, #4]
    25f2:	b.n	22dc <_malloc_r+0xd0>
    25f4:	add.w	r8, r8, #1
    25f8:	tst.w	r8, #3
    25fc:	add.w	ip, ip, #8
    2600:	bne.w	2302 <_malloc_r+0xf6>
    2604:	b.n	2668 <_malloc_r+0x45c>
    2606:	ldr	r4, [r3, #12]
    2608:	cmp	r3, r4
    260a:	it	eq
    260c:	addeq	r0, #2
    260e:	beq.w	227c <_malloc_r+0x70>
    2612:	b.n	237c <_malloc_r+0x170>
    2614:	add	r3, r1
    2616:	mov	r4, r1
    2618:	ldr	r2, [r3, #4]
    261a:	ldr	r1, [r1, #12]
    261c:	ldr.w	r5, [r4, #8]!
    2620:	orr.w	r2, r2, #1
    2624:	str	r2, [r3, #4]
    2626:	mov	r0, r6
    2628:	str	r1, [r5, #12]
    262a:	str	r5, [r1, #8]
    262c:	bl	281c <__malloc_unlock>
    2630:	b.n	239c <_malloc_r+0x190>
    2632:	add.w	lr, r3, #92	; 0x5c
    2636:	add.w	r0, r3, #91	; 0x5b
    263a:	mov.w	r3, lr, lsl #1
    263e:	b.n	2250 <_malloc_r+0x44>
    2640:	lsrs	r2, r3, #6
    2642:	add.w	r1, r2, #57	; 0x39
    2646:	lsls	r1, r1, #1
    2648:	adds	r2, #56	; 0x38
    264a:	b.n	2590 <_malloc_r+0x384>
    264c:	cmp	r4, r7
    264e:	ldr	r3, [pc, #296]	; (2778 <_malloc_r+0x56c>)
    2650:	beq.w	2454 <_malloc_r+0x248>
    2654:	ldr	r4, [r3, #8]
    2656:	ldr	r2, [r4, #4]
    2658:	bic.w	r2, r2, #3
    265c:	b.n	2514 <_malloc_r+0x308>
    265e:	ldr.w	r3, [r9], #-8
    2662:	cmp	r9, r3
    2664:	bne.w	276c <_malloc_r+0x560>
    2668:	tst.w	r0, #3
    266c:	add.w	r0, r0, #4294967295
    2670:	bne.n	265e <_malloc_r+0x452>
    2672:	ldr	r3, [r7, #4]
    2674:	bic.w	r3, r3, r4
    2678:	str	r3, [r7, #4]
    267a:	lsls	r4, r4, #1
    267c:	cmp	r4, r3
    267e:	bhi.w	23fc <_malloc_r+0x1f0>
    2682:	cmp	r4, #0
    2684:	beq.w	23fc <_malloc_r+0x1f0>
    2688:	tst	r4, r3
    268a:	mov	r0, r8
    268c:	bne.w	22fa <_malloc_r+0xee>
    2690:	lsls	r4, r4, #1
    2692:	tst	r4, r3
    2694:	add.w	r0, r0, #4
    2698:	beq.n	2690 <_malloc_r+0x484>
    269a:	b.n	22fa <_malloc_r+0xee>
    269c:	cmp.w	r3, #340	; 0x154
    26a0:	bhi.n	26d4 <_malloc_r+0x4c8>
    26a2:	lsrs	r0, r5, #15
    26a4:	add.w	lr, r0, #120	; 0x78
    26a8:	mov.w	r3, lr, lsl #1
    26ac:	adds	r0, #119	; 0x77
    26ae:	b.n	2250 <_malloc_r+0x44>
    26b0:	mov.w	r1, #4096	; 0x1000
    26b4:	b.n	248e <_malloc_r+0x282>
    26b6:	movs	r1, #1
    26b8:	ldr.w	r3, [r8, #4]
    26bc:	asrs	r2, r2, #2
    26be:	lsl.w	r2, r1, r2
    26c2:	orrs	r2, r3
    26c4:	str.w	r2, [r8, #4]
    26c8:	mov	r1, ip
    26ca:	b.n	25bc <_malloc_r+0x3b0>
    26cc:	movs	r3, #1
    26ce:	str.w	r3, [fp, #4]
    26d2:	b.n	2520 <_malloc_r+0x314>
    26d4:	movw	r2, #1364	; 0x554
    26d8:	cmp	r3, r2
    26da:	bhi.n	271e <_malloc_r+0x512>
    26dc:	lsrs	r0, r5, #18
    26de:	add.w	lr, r0, #125	; 0x7d
    26e2:	mov.w	r3, lr, lsl #1
    26e6:	adds	r0, #124	; 0x7c
    26e8:	b.n	2250 <_malloc_r+0x44>
    26ea:	adds	r2, #16
    26ec:	b.n	2438 <_malloc_r+0x22c>
    26ee:	cmp	r2, #84	; 0x54
    26f0:	bhi.n	2740 <_malloc_r+0x534>
    26f2:	lsrs	r2, r3, #12
    26f4:	add.w	r1, r2, #111	; 0x6f
    26f8:	lsls	r1, r1, #1
    26fa:	adds	r2, #110	; 0x6e
    26fc:	b.n	2590 <_malloc_r+0x384>
    26fe:	ldr	r4, [r7, #8]
    2700:	ldr	r2, [r4, #4]
    2702:	bic.w	r2, r2, #3
    2706:	b.n	2514 <_malloc_r+0x308>
    2708:	ubfx	r0, sl, #0, #12
    270c:	cmp	r0, #0
    270e:	bne.w	2462 <_malloc_r+0x256>
    2712:	add	r2, r8
    2714:	ldr	r3, [r7, #8]
    2716:	orr.w	r2, r2, #1
    271a:	str	r2, [r3, #4]
    271c:	b.n	24f8 <_malloc_r+0x2ec>
    271e:	movs	r3, #254	; 0xfe
    2720:	mov.w	lr, #127	; 0x7f
    2724:	movs	r0, #126	; 0x7e
    2726:	b.n	2250 <_malloc_r+0x44>
    2728:	movs	r2, #1
    272a:	mov.w	r9, #0
    272e:	b.n	24b4 <_malloc_r+0x2a8>
    2730:	add.w	r1, r4, #8
    2734:	mov	r0, r6
    2736:	bl	28e0 <_free_r>
    273a:	ldr.w	r1, [r9]
    273e:	b.n	24f8 <_malloc_r+0x2ec>
    2740:	cmp.w	r2, #340	; 0x154
    2744:	bhi.n	2752 <_malloc_r+0x546>
    2746:	lsrs	r2, r3, #15
    2748:	add.w	r1, r2, #120	; 0x78
    274c:	lsls	r1, r1, #1
    274e:	adds	r2, #119	; 0x77
    2750:	b.n	2590 <_malloc_r+0x384>
    2752:	movw	r1, #1364	; 0x554
    2756:	cmp	r2, r1
    2758:	bhi.n	2766 <_malloc_r+0x55a>
    275a:	lsrs	r2, r3, #18
    275c:	add.w	r1, r2, #125	; 0x7d
    2760:	lsls	r1, r1, #1
    2762:	adds	r2, #124	; 0x7c
    2764:	b.n	2590 <_malloc_r+0x384>
    2766:	movs	r1, #254	; 0xfe
    2768:	movs	r2, #126	; 0x7e
    276a:	b.n	2590 <_malloc_r+0x384>
    276c:	ldr	r3, [r7, #4]
    276e:	b.n	267a <_malloc_r+0x46e>
    2770:	lsrs	r0, r5, #3
    2772:	adds	r3, r0, #1
    2774:	lsls	r3, r3, #1
    2776:	b.n	236a <_malloc_r+0x15e>
    2778:	.word	0x200007bc

0000277c <memset>:
    277c:	push	{r4, r5, r6}
    277e:	lsls	r4, r0, #30
    2780:	beq.n	2810 <memset+0x94>
    2782:	subs	r4, r2, #1
    2784:	cmp	r2, #0
    2786:	beq.n	280c <memset+0x90>
    2788:	uxtb	r5, r1
    278a:	mov	r3, r0
    278c:	b.n	2794 <memset+0x18>
    278e:	subs	r2, r4, #1
    2790:	cbz	r4, 280c <memset+0x90>
    2792:	mov	r4, r2
    2794:	strb.w	r5, [r3], #1
    2798:	lsls	r2, r3, #30
    279a:	bne.n	278e <memset+0x12>
    279c:	cmp	r4, #3
    279e:	bls.n	27fe <memset+0x82>
    27a0:	uxtb	r5, r1
    27a2:	orr.w	r5, r5, r5, lsl #8
    27a6:	cmp	r4, #15
    27a8:	orr.w	r5, r5, r5, lsl #16
    27ac:	bls.n	27e2 <memset+0x66>
    27ae:	add.w	r2, r3, #16
    27b2:	mov	r6, r4
    27b4:	subs	r6, #16
    27b6:	cmp	r6, #15
    27b8:	str.w	r5, [r2, #-16]
    27bc:	str.w	r5, [r2, #-12]
    27c0:	str.w	r5, [r2, #-8]
    27c4:	str.w	r5, [r2, #-4]
    27c8:	add.w	r2, r2, #16
    27cc:	bhi.n	27b4 <memset+0x38>
    27ce:	sub.w	r2, r4, #16
    27d2:	bic.w	r2, r2, #15
    27d6:	and.w	r4, r4, #15
    27da:	adds	r2, #16
    27dc:	cmp	r4, #3
    27de:	add	r3, r2
    27e0:	bls.n	27fe <memset+0x82>
    27e2:	mov	r6, r3
    27e4:	mov	r2, r4
    27e6:	subs	r2, #4
    27e8:	cmp	r2, #3
    27ea:	str.w	r5, [r6], #4
    27ee:	bhi.n	27e6 <memset+0x6a>
    27f0:	subs	r2, r4, #4
    27f2:	bic.w	r2, r2, #3
    27f6:	adds	r2, #4
    27f8:	add	r3, r2
    27fa:	and.w	r4, r4, #3
    27fe:	cbz	r4, 280c <memset+0x90>
    2800:	uxtb	r1, r1
    2802:	add	r4, r3
    2804:	strb.w	r1, [r3], #1
    2808:	cmp	r3, r4
    280a:	bne.n	2804 <memset+0x88>
    280c:	pop	{r4, r5, r6}
    280e:	bx	lr
    2810:	mov	r4, r2
    2812:	mov	r3, r0
    2814:	b.n	279c <memset+0x20>
    2816:	nop

00002818 <__malloc_lock>:
    2818:	bx	lr
    281a:	nop

0000281c <__malloc_unlock>:
    281c:	bx	lr
    281e:	nop

00002820 <_sbrk_r>:
    2820:	push	{r3, r4, r5, lr}
    2822:	ldr	r4, [pc, #28]	; (2840 <_sbrk_r+0x20>)
    2824:	movs	r3, #0
    2826:	mov	r5, r0
    2828:	mov	r0, r1
    282a:	str	r3, [r4, #0]
    282c:	bl	1e00 <_sbrk>
    2830:	adds	r3, r0, #1
    2832:	beq.n	2836 <_sbrk_r+0x16>
    2834:	pop	{r3, r4, r5, pc}
    2836:	ldr	r3, [r4, #0]
    2838:	cmp	r3, #0
    283a:	beq.n	2834 <_sbrk_r+0x14>
    283c:	str	r3, [r5, #0]
    283e:	pop	{r3, r4, r5, pc}
    2840:	.word	0x200026c0

00002844 <_malloc_trim_r>:
    2844:	push	{r3, r4, r5, r6, r7, lr}
    2846:	ldr	r7, [pc, #140]	; (28d4 <_malloc_trim_r+0x90>)
    2848:	mov	r4, r1
    284a:	mov	r6, r0
    284c:	bl	2818 <__malloc_lock>
    2850:	ldr	r3, [r7, #8]
    2852:	ldr	r5, [r3, #4]
    2854:	bic.w	r5, r5, #3
    2858:	subs	r1, r5, r4
    285a:	addw	r1, r1, #4079	; 0xfef
    285e:	bic.w	r1, r1, #4080	; 0xff0
    2862:	bic.w	r1, r1, #15
    2866:	sub.w	r4, r1, #4096	; 0x1000
    286a:	cmp.w	r4, #4096	; 0x1000
    286e:	blt.n	2880 <_malloc_trim_r+0x3c>
    2870:	movs	r1, #0
    2872:	mov	r0, r6
    2874:	bl	2820 <_sbrk_r>
    2878:	ldr	r3, [r7, #8]
    287a:	add	r3, r5
    287c:	cmp	r0, r3
    287e:	beq.n	288a <_malloc_trim_r+0x46>
    2880:	mov	r0, r6
    2882:	bl	281c <__malloc_unlock>
    2886:	movs	r0, #0
    2888:	pop	{r3, r4, r5, r6, r7, pc}
    288a:	negs	r1, r4
    288c:	mov	r0, r6
    288e:	bl	2820 <_sbrk_r>
    2892:	adds	r0, #1
    2894:	beq.n	28b2 <_malloc_trim_r+0x6e>
    2896:	ldr	r3, [pc, #64]	; (28d8 <_malloc_trim_r+0x94>)
    2898:	ldr	r2, [r7, #8]
    289a:	ldr	r1, [r3, #0]
    289c:	subs	r5, r5, r4
    289e:	orr.w	r5, r5, #1
    28a2:	mov	r0, r6
    28a4:	subs	r1, r1, r4
    28a6:	str	r5, [r2, #4]
    28a8:	str	r1, [r3, #0]
    28aa:	bl	281c <__malloc_unlock>
    28ae:	movs	r0, #1
    28b0:	pop	{r3, r4, r5, r6, r7, pc}
    28b2:	movs	r1, #0
    28b4:	mov	r0, r6
    28b6:	bl	2820 <_sbrk_r>
    28ba:	ldr	r2, [r7, #8]
    28bc:	subs	r3, r0, r2
    28be:	cmp	r3, #15
    28c0:	ble.n	2880 <_malloc_trim_r+0x3c>
    28c2:	ldr	r4, [pc, #24]	; (28dc <_malloc_trim_r+0x98>)
    28c4:	ldr	r1, [pc, #16]	; (28d8 <_malloc_trim_r+0x94>)
    28c6:	ldr	r4, [r4, #0]
    28c8:	orr.w	r3, r3, #1
    28cc:	subs	r0, r0, r4
    28ce:	str	r3, [r2, #4]
    28d0:	str	r0, [r1, #0]
    28d2:	b.n	2880 <_malloc_trim_r+0x3c>
    28d4:	.word	0x200007bc
    28d8:	.word	0x20000e68
    28dc:	.word	0x20000bc8

000028e0 <_free_r>:
    28e0:	cmp	r1, #0
    28e2:	beq.n	2970 <_free_r+0x90>
    28e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28e8:	mov	r5, r1
    28ea:	mov	r8, r0
    28ec:	bl	2818 <__malloc_lock>
    28f0:	ldr.w	r7, [r5, #-4]
    28f4:	ldr	r1, [pc, #424]	; (2aa0 <_free_r+0x1c0>)
    28f6:	bic.w	r3, r7, #1
    28fa:	sub.w	r4, r5, #8
    28fe:	adds	r2, r4, r3
    2900:	ldr	r6, [r1, #8]
    2902:	ldr	r0, [r2, #4]
    2904:	cmp	r2, r6
    2906:	bic.w	r0, r0, #3
    290a:	beq.n	29d2 <_free_r+0xf2>
    290c:	lsls	r6, r7, #31
    290e:	str	r0, [r2, #4]
    2910:	bmi.n	292a <_free_r+0x4a>
    2912:	ldr.w	r7, [r5, #-8]
    2916:	subs	r4, r4, r7
    2918:	add.w	lr, r1, #8
    291c:	ldr	r5, [r4, #8]
    291e:	cmp	r5, lr
    2920:	add	r3, r7
    2922:	beq.n	2a04 <_free_r+0x124>
    2924:	ldr	r7, [r4, #12]
    2926:	str	r7, [r5, #12]
    2928:	str	r5, [r7, #8]
    292a:	adds	r5, r2, r0
    292c:	ldr	r5, [r5, #4]
    292e:	lsls	r5, r5, #31
    2930:	bpl.n	29b8 <_free_r+0xd8>
    2932:	orr.w	r2, r3, #1
    2936:	str	r2, [r4, #4]
    2938:	str	r3, [r4, r3]
    293a:	cmp.w	r3, #512	; 0x200
    293e:	bcs.n	2972 <_free_r+0x92>
    2940:	lsrs	r3, r3, #3
    2942:	adds	r2, r3, #1
    2944:	ldr	r5, [r1, #4]
    2946:	ldr.w	r7, [r1, r2, lsl #3]
    294a:	str	r7, [r4, #8]
    294c:	movs	r0, #1
    294e:	asrs	r3, r3, #2
    2950:	lsl.w	r3, r0, r3
    2954:	add.w	r0, r1, r2, lsl #3
    2958:	orrs	r5, r3
    295a:	subs	r0, #8
    295c:	str	r0, [r4, #12]
    295e:	str	r5, [r1, #4]
    2960:	str.w	r4, [r1, r2, lsl #3]
    2964:	str	r4, [r7, #12]
    2966:	mov	r0, r8
    2968:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    296c:	b.w	281c <__malloc_unlock>
    2970:	bx	lr
    2972:	lsrs	r2, r3, #9
    2974:	cmp	r2, #4
    2976:	bhi.n	2a20 <_free_r+0x140>
    2978:	lsrs	r2, r3, #6
    297a:	add.w	r7, r2, #57	; 0x39
    297e:	lsls	r7, r7, #1
    2980:	add.w	r5, r2, #56	; 0x38
    2984:	add.w	r0, r1, r7, lsl #2
    2988:	ldr.w	r2, [r1, r7, lsl #2]
    298c:	ldr	r1, [pc, #272]	; (2aa0 <_free_r+0x1c0>)
    298e:	subs	r0, #8
    2990:	cmp	r0, r2
    2992:	beq.n	2a30 <_free_r+0x150>
    2994:	ldr	r1, [r2, #4]
    2996:	bic.w	r1, r1, #3
    299a:	cmp	r3, r1
    299c:	bcs.n	29a4 <_free_r+0xc4>
    299e:	ldr	r2, [r2, #8]
    29a0:	cmp	r0, r2
    29a2:	bne.n	2994 <_free_r+0xb4>
    29a4:	ldr	r0, [r2, #12]
    29a6:	str	r0, [r4, #12]
    29a8:	str	r2, [r4, #8]
    29aa:	str	r4, [r0, #8]
    29ac:	str	r4, [r2, #12]
    29ae:	mov	r0, r8
    29b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29b4:	b.w	281c <__malloc_unlock>
    29b8:	ldr	r5, [r2, #8]
    29ba:	ldr	r7, [pc, #232]	; (2aa4 <_free_r+0x1c4>)
    29bc:	cmp	r5, r7
    29be:	add	r3, r0
    29c0:	beq.n	2a42 <_free_r+0x162>
    29c2:	ldr	r0, [r2, #12]
    29c4:	str	r0, [r5, #12]
    29c6:	orr.w	r2, r3, #1
    29ca:	str	r5, [r0, #8]
    29cc:	str	r2, [r4, #4]
    29ce:	str	r3, [r4, r3]
    29d0:	b.n	293a <_free_r+0x5a>
    29d2:	lsls	r7, r7, #31
    29d4:	add	r3, r0
    29d6:	bmi.n	29e8 <_free_r+0x108>
    29d8:	ldr.w	r2, [r5, #-8]
    29dc:	subs	r4, r4, r2
    29de:	add	r3, r2
    29e0:	ldr	r0, [r4, #8]
    29e2:	ldr	r2, [r4, #12]
    29e4:	str	r2, [r0, #12]
    29e6:	str	r0, [r2, #8]
    29e8:	ldr	r2, [pc, #188]	; (2aa8 <_free_r+0x1c8>)
    29ea:	ldr	r2, [r2, #0]
    29ec:	orr.w	r0, r3, #1
    29f0:	cmp	r3, r2
    29f2:	str	r0, [r4, #4]
    29f4:	str	r4, [r1, #8]
    29f6:	bcc.n	2966 <_free_r+0x86>
    29f8:	ldr	r3, [pc, #176]	; (2aac <_free_r+0x1cc>)
    29fa:	mov	r0, r8
    29fc:	ldr	r1, [r3, #0]
    29fe:	bl	2844 <_malloc_trim_r>
    2a02:	b.n	2966 <_free_r+0x86>
    2a04:	adds	r1, r2, r0
    2a06:	ldr	r1, [r1, #4]
    2a08:	lsls	r1, r1, #31
    2a0a:	bmi.n	2a96 <_free_r+0x1b6>
    2a0c:	ldr	r1, [r2, #8]
    2a0e:	ldr	r2, [r2, #12]
    2a10:	str	r2, [r1, #12]
    2a12:	add	r3, r0
    2a14:	orr.w	r0, r3, #1
    2a18:	str	r1, [r2, #8]
    2a1a:	str	r0, [r4, #4]
    2a1c:	str	r3, [r4, r3]
    2a1e:	b.n	2966 <_free_r+0x86>
    2a20:	cmp	r2, #20
    2a22:	bhi.n	2a54 <_free_r+0x174>
    2a24:	add.w	r7, r2, #92	; 0x5c
    2a28:	lsls	r7, r7, #1
    2a2a:	add.w	r5, r2, #91	; 0x5b
    2a2e:	b.n	2984 <_free_r+0xa4>
    2a30:	asrs	r2, r5, #2
    2a32:	ldr	r3, [r1, #4]
    2a34:	movs	r5, #1
    2a36:	lsl.w	r2, r5, r2
    2a3a:	orrs	r3, r2
    2a3c:	str	r3, [r1, #4]
    2a3e:	mov	r2, r0
    2a40:	b.n	29a6 <_free_r+0xc6>
    2a42:	orr.w	r2, r3, #1
    2a46:	str	r4, [r1, #20]
    2a48:	str	r4, [r1, #16]
    2a4a:	str	r5, [r4, #12]
    2a4c:	str	r5, [r4, #8]
    2a4e:	str	r2, [r4, #4]
    2a50:	str	r3, [r4, r3]
    2a52:	b.n	2966 <_free_r+0x86>
    2a54:	cmp	r2, #84	; 0x54
    2a56:	bhi.n	2a66 <_free_r+0x186>
    2a58:	lsrs	r2, r3, #12
    2a5a:	add.w	r7, r2, #111	; 0x6f
    2a5e:	lsls	r7, r7, #1
    2a60:	add.w	r5, r2, #110	; 0x6e
    2a64:	b.n	2984 <_free_r+0xa4>
    2a66:	cmp.w	r2, #340	; 0x154
    2a6a:	bhi.n	2a7a <_free_r+0x19a>
    2a6c:	lsrs	r2, r3, #15
    2a6e:	add.w	r7, r2, #120	; 0x78
    2a72:	lsls	r7, r7, #1
    2a74:	add.w	r5, r2, #119	; 0x77
    2a78:	b.n	2984 <_free_r+0xa4>
    2a7a:	movw	r0, #1364	; 0x554
    2a7e:	cmp	r2, r0
    2a80:	bhi.n	2a90 <_free_r+0x1b0>
    2a82:	lsrs	r2, r3, #18
    2a84:	add.w	r7, r2, #125	; 0x7d
    2a88:	lsls	r7, r7, #1
    2a8a:	add.w	r5, r2, #124	; 0x7c
    2a8e:	b.n	2984 <_free_r+0xa4>
    2a90:	movs	r7, #254	; 0xfe
    2a92:	movs	r5, #126	; 0x7e
    2a94:	b.n	2984 <_free_r+0xa4>
    2a96:	orr.w	r2, r3, #1
    2a9a:	str	r2, [r4, #4]
    2a9c:	str	r3, [r4, r3]
    2a9e:	b.n	2966 <_free_r+0x86>
    2aa0:	.word	0x200007bc
    2aa4:	.word	0x200007c4
    2aa8:	.word	0x20000bc4
    2aac:	.word	0x20000e64

00002ab0 <___init_veneer>:
    2ab0:	ldr.w	pc, [pc]	; 2ab4 <___init_veneer+0x4>
    2ab4:	.word	0x600016e9
	...

Disassembly of section .fini:

00002ac0 <_fini>:
    2ac0:	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	nop
