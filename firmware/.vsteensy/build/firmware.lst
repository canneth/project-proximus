
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00005e00 l    d  .fini	00000000 .fini
00005e04 l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20000e40 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00001f5c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
000029fc l     F .text.itcm	0000005c schedule_transfer
00002a58 l     F .text.itcm	00000036 run_callbacks
00002a90 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
00002b34 l     F .text.itcm	00000698 isr
20001484 l     O .bss	00000004 endpointN_notify_mask
20001488 l     O .bss	00000001 sof_usage
20001494 l     O .bss	00000004 endpoint0_notify_mask
20001498 l     O .bss	00000001 usb_reboot_timer
200014a0 l     O .bss	00000008 endpoint0_setupdata
200014a8 l     O .bss	00000008 reply_buffer
200014b0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
200014c8 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
200014cc l     O .bss	00000004 s_hotTemp
200014d0 l     O .bss	00000004 s_hot_ROOM
200014d4 l     O .bss	00000004 s_roomC_hotC
200014d8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
600017c0 l     O .text.progmem	0000000a qualifier_descriptor
200009c8 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20000e40 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20000e44 l       .bss	00000000 object.8610
60001820 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000384 l     F .text.itcm	00000084 _GLOBAL__sub_I_robot
00000000 l    df *ABS*	00000000 LegStanceController.cpp
00000000 l    df *ABS*	00000000 Leg.cpp
00000000 l    df *ABS*	00000000 MasterController.cpp
00000000 l    df *ABS*	00000000 GaitConfig.cpp
00000000 l    df *ABS*	00000000 IMU.cpp
00000000 l    df *ABS*	00000000 Robot.cpp
00000000 l    df *ABS*	00000000 LegSwingController.cpp
00000000 l    df *ABS*	00000000 Command.cpp
00000000 l    df *ABS*	00000000 GaitController.cpp
00000000 l    df *ABS*	00000000 SparkFun_BNO080_Arduino_Library.cpp
000008e4 l     F .text.itcm	00000068 BNO080::printHeader() [clone .part.7]
0000094c l     F .text.itcm	000001e4 BNO080::printPacket() [clone .part.6]
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00001ff8 l     F .text.itcm	0000006c rx_queue_transfer
00002064 l     F .text.itcm	000000b4 rx_event
00002118 l     F .text.itcm	00000098 usb_serial_flush_callback
000021b0 l     F .text.itcm	0000017c usb_serial_write.part.1
200012a0 l     O .bss	00000010 rx_index
200012b0 l     O .bss	00000002 tx_packet_size
200012b2 l     O .bss	00000001 tx_noautoflush
200012b3 l     O .bss	00000001 tx_head
200012c0 l     O .bss	00000100 rx_transfer
200013c0 l     O .bss	00000001 rx_tail
200013c4 l     O .bss	00000009 rx_list
200013ce l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
200013d0 l     O .bss	00000010 rx_count
200013e0 l     O .bss	00000004 rx_available
200013e4 l     O .bss	00000001 rx_head
200013e5 l     O .bss	00000001 transmit_previous_timeout
200013e6 l     O .bss	00000002 tx_available
20001400 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
000036c0 l     F .text.itcm	00000024 digitalWrite.part.0
000036e4 l     F .text.itcm	0000001c digitalRead.part.1
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
200014dc l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_atan2.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
20000550 l     O .data	00000080 npio2_hw
200005d0 l     O .data	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
200008e8 l     O .data	0000000c init_jk
200008f4 l     O .data	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
20000920 l     O .data	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_atan.c
20000930 l     O .data	00000010 atanlo
20000940 l     O .data	00000010 atanhi
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20000a08 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20203050 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600017d8 l     F .text.progmem	00000008 __delay_veneer
600017e0 l     F .text.progmem	00000008 __startup_early_hook_veneer
600017e8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600017f0 l     F .text.progmem	00000008 __memset_veneer
600017f8 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001800 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001808 l     F .text.progmem	00000008 __pwm_init_veneer
60001810 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001818 l     F .text.progmem	00000008 __main_veneer
00005df8 l     F .text.itcm	00000008 ___init_veneer
00000468 g     F .text.itcm	000000e8 project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)
00002568 g     F .text.itcm	0000000c usb_serial_available
00001454 g     F .text.itcm	00000054 BNO080::dataAvailable()
00001f68 g     F .text.itcm	00000002 startup_default_late_hook
00005734 g     F .text.itcm	0000000e fabs
00003800  w    F .text.itcm	000000a0 yield
000017a0 g     F .text.itcm	00000030 BNO080::softReset()
2000148c g     O .bss	00000004 usb_timer1_callback
6000171c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200014fc g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
20000950 g     O .data	00000070 Wire1
00000ea8 g     F .text.itcm	0000006c BNO080::waitForI2C()
00003abc g     F .text.itcm	00000020 Print::println()
600014ac g     F .text.progmem	00000058 analog_init
0000040c g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
00000858 g     F .text.itcm	00000034 project_namespace::Command::Command()
200009c4 g     O .data	00000004 F_CPU_ACTUAL
00003d3c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
000039d0 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000088c g     F .text.itcm	0000002c project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)
200014f4 g     O .bss	00000001 EventResponder::runningFromYield
00005d00 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
200014e0 g     O .bss	00000004 EventResponder::firstInterrupt
00003314 g     F .text.itcm	00000004 usb_transfer_status
00000858 g     F .text.itcm	00000034 project_namespace::Command::Command()
00004c34 g     F .text.itcm	00000298 __ieee754_rem_pio2f
200009f2 g     O .data	00000001 usb_enable_serial_event_processing
20001130 g     O .bss	00000040 imu
00003aa0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000220 g     O .data	00000280 digital_pin_to_info_PGM
6000166c g     O .text.progmem	0000004c TwoWire::i2c3_hardware
00005e00 g       .text.itcm	00000000 _etext
20000e40 g       .bss	00000000 _sbss
0000370c g     F .text.itcm	0000000c digitalRead
60001830 g       *ABS*	00000000 _stextload
00000114 g     F .text.itcm	00000270 loop
000031cc g     F .text.itcm	00000064 usb_config_rx
00004110 g     F .text.itcm	000000b0 sqrtf
00003968 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00001b84 g     F .text.itcm	000000e0 TwoWire::endTransmission(unsigned char)
00001794 g     F .text.itcm	0000000a BNO080::enableGyro(unsigned short)
200014e4 g     O .bss	00000004 EventResponder::lastInterrupt
00001e18 g     F .text.itcm	00000134 memcpy
000014a8 g     F .text.itcm	00000288 BNO080::sendPacket(unsigned char, unsigned char)
200014c4 g     O .bss	00000004 systick_millis_count
00001b48 g     F .text.itcm	0000003c TwoWire::wait_idle()
200014b8 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
6000171c  w    O .text.progmem	00000018 usb_string_manufacturer_name
600016b8 g     O .text.progmem	0000004c TwoWire::i2c1_hardware
000008c4  w    F .text.itcm	0000001e TwoWire::read()
00001dfc  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600013c0 g     F .text.progmem	000000ec usb_init
0000040c g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
20003280 g     O .bss	00000004 systick_safe_read
00001a30 g     F .text.itcm	00000118 TwoWire::force_clock()
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
00001788 g     F .text.itcm	0000000a BNO080::enableLinearAccelerometer(unsigned short)
00000d7c g     F .text.itcm	0000003a BNO080::getQuatI()
00000e6c g     F .text.itcm	0000003a BNO080::getQuatRadianAccuracy()
20000000 g       .data	00000000 _sdata
6000177c g     O .text.progmem	00000043 usb_config_descriptor_480
00001f64 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
000025e8 g     F .text.itcm	00000020 usb_serial_getchar
20001ac0 g     O .bss	00000008 usb_cdc_line_coding
00003700 g     F .text.itcm	0000000a digitalWrite
00005b5c g     F .text.itcm	0000000e fabsf
200014ec g     O .bss	00000004 EventResponder::lastYield
20000e60 g     O .bss	00000030 command
00000e30 g     F .text.itcm	0000003a BNO080::getQuatReal()
00003718 g     F .text.itcm	00000080 pinMode
00003b78 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss.dma	00000000 _heap_end
20000a04 g     O .data	00000001 __fdlib_version
200014f0 g     O .bss	00000004 EventResponder::firstYield
00005d0c g     F .text.itcm	00000050 __libc_init_array
000056a4 g     F .text.itcm	00000090 __kernel_sinf
000008b8  w    F .text.itcm	0000000c TwoWire::available()
00001f6c  w    F .text.itcm	0000008c HardFault_HandlerC
00001c64 g     F .text.itcm	00000120 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
00003a88  w    F .text.itcm	00000004 usb_serial_class::clear()
60007634 g       *ABS*	00000000 _sdataload
200014f8 g     O .bss	00000004 MillisTimer::listWaiting
200013e8 g     O .bss	00000001 usb_cdc_line_rtsdtr
600017cc g     F .text.progmem	00000000 _init
0000232c g     F .text.itcm	00000002 usb_serial_reset
00003d64 g     F .text.itcm	00000090 cosf
20001070 g     O .bss	000000c0 master_controller
00000b30 g     F .text.itcm	0000024c BNO080::parseInputReport()
60001738 g     O .text.progmem	00000043 usb_config_descriptor_12
200001fc g     O .data	00000024 vtable for TwoWire
200032c0 g       .bss	00000000 _ebss
00005768 g     F .text.itcm	0000011c rint
00004f70 g     F .text.itcm	00000104 __kernel_cosf
60001620 g     O .text.progmem	0000004c TwoWire::i2c4_hardware
00000001 g       *ABS*	00000000 _itcm_block_count
20002000 g     O .bss	00000020 endpoint0_transfer_data
00003408 g     F .text.itcm	000002b8 pwm_init
0000177c g     F .text.itcm	0000000a BNO080::enableRotationVector(unsigned short)
00000448 g     F .text.itcm	0000001e project_namespace::MasterController::MasterController(project_namespace::IMU&)
6000135c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20002020 g     O .bss	00000020 endpoint0_transfer_ack
20001ac8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000032c8 g     F .text.itcm	00000028 usb_transmit
00003a68 g     F .text.itcm	00000020 systick_isr
00000850 g     F .text.itcm	00000006 project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)
200009f4 g     O .data	00000010 Serial
20001518 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00003aa8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00001f64  w    F .text.itcm	00000002 startup_early_hook
00002524 g     F .text.itcm	00000044 usb_serial_peekchar
00002738 g     F .text.itcm	000002c4 set_arm_clock
200014bc g     O .bss	00000004 systick_cycle_count
200009dc g     O .data	00000016 usb_string_serial_number_default
00003a98  w    F .text.itcm	00000004 usb_serial_class::flush()
00003a90  w    F .text.itcm	00000004 usb_serial_class::read()
00000db8 g     F .text.itcm	0000003a BNO080::getQuatJ()
00003298 g     F .text.itcm	0000002e usb_prepare_transfer
00001f4c g     F .text.itcm	00000018 unused_interrupt_vector
20001480 g     O .bss	00000004 usb_timer0_callback
60001504 g     F .text.progmem	0000011c tempmon_init
00003ab0  w    F .text.itcm	0000000c serialEvent()
00002574 g     F .text.itcm	00000074 usb_serial_flush_input
000041c0 g     F .text.itcm	00000784 __ieee754_pow
00003e88 g     F .text.itcm	00000280 pow
00002608 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2000050c  w    O .data	00000028 vtable for usb_serial_class
20000e90 g     O .bss	000001e0 robot
200014c0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00000448 g     F .text.itcm	0000001e project_namespace::MasterController::MasterController(project_namespace::IMU&)
00000df4 g     F .text.itcm	0000003a BNO080::getQuatK()
200014e8 g     O .bss	00000004 MillisTimer::listActive
0000088c g     F .text.itcm	0000002c project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)
00002698 g     F .text.itcm	000000a0 usb_serial_flush_output
000005d0 g     F .text.itcm	00000280 project_namespace::Robot::Robot()
00005bfc g     F .text.itcm	000000d0 scalbnf
20001800 g     O .bss	000002c0 _VectorsRam
20001490 g     O .bss	00000001 usb_high_speed
00005d5c g     F .text.itcm	0000009a memset
00004ecc g     F .text.itcm	000000a2 __ieee754_sqrtf
00000468 g     F .text.itcm	000000e8 project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)
000037f0 g     F .text.itcm	00000010 main
000010d4 g     F .text.itcm	00000380 BNO080::receivePacket()
00000f84 g     F .text.itcm	00000150 BNO080::getData(unsigned short)
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
20000e5c g     O .bss	00000004 last_time
00005754 g     F .text.itcm	00000004 matherr
00003798 g     F .text.itcm	00000058 usb_init_serialnumber
60001828 g       .text.progmem	00000000 __init_array_end
20000088  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
000038a0 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00000850 g     F .text.itcm	00000006 project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)
00001d84 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60001734 g     O .text.progmem	00000004 string0
00002634 g     F .text.itcm	00000018 usb_serial_write
00005744 g     F .text.itcm	00000010 finite
00000408 g     F .text.itcm	00000004 project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)
00001f68  w    F .text.itcm	00000002 startup_late_hook
000017d0 g     F .text.itcm	00000100 BNO080::begin(unsigned char, TwoWire&, unsigned char)
00003a94  w    F .text.itcm	00000004 usb_serial_class::available()
00000554 g     F .text.itcm	0000007a project_namespace::IMU::getHeadingQuaternion()
20003000 g     O .bss	00000280 endpoint_queue_head
60001704  w    O .text.progmem	00000016 usb_string_product_name
00000550 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
00005ccc g     F .text.itcm	0000001a copysign
00003318 g     F .text.itcm	000000cc delay
00005e00 g     F .fini	00000000 _fini
000018f0 g     F .text.itcm	00000030 TwoWire::write(unsigned char)
60001020 g     O .text.progmem	0000000c BootData
00005ce8 g     F .text.itcm	00000018 copysignf
00003b5c g     F .text.itcm	00000016 Print::print(long)
000033e4 g     F .text.itcm	00000024 Panic_Temp_isr
20000e30 g     O .data	00000004 _impure_ptr
00005888 g     F .text.itcm	0000011c scalbn
00004108 g     F .text.itcm	00000004 atan2f
60001820 g       .text.progmem	00000000 __preinit_array_end
20001170 g     O .bss	00000130 imu_hardware
000018d4  w    F .text.itcm	00000018 TwoWire::peek()
000018ec  w    F .text.itcm	00000002 TwoWire::flush()
0000007c g     F .text.itcm	00000098 setup
200004a0 g     O .data	0000006c usb_descriptor_list
00003df4 g     F .text.itcm	00000094 sinf
00005758 g     F .text.itcm	00000010 nan
00004944 g     F .text.itcm	00000184 __ieee754_sqrt
20078000 g       .bss.dma	00000000 _estack
0000264c g     F .text.itcm	0000004c usb_serial_write_buffer_free
00002330 g     F .text.itcm	00000108 usb_serial_configure
00001920 g     F .text.itcm	0000003a TwoWire::write(unsigned char const*, unsigned int)
20000e40 g       .data	00000000 _edata
00003a9c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00003cec g     F .text.itcm	0000004e ultoa
00000f14 g     F .text.itcm	00000070 BNO080::waitForSPI()
0000195c g     F .text.itcm	000000d4 TwoWire::begin()
00001730 g     F .text.itcm	0000004c BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)
00003920 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
00003a8c  w    F .text.itcm	00000004 usb_serial_class::peek()
000059a4 g     F .text.itcm	000001b8 atanf
60001820 g       .text.progmem	00000000 __init_array_start
200009c0 g     O .data	00000004 F_BUS_ACTUAL
00000408 g     F .text.itcm	00000004 project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)
00005074 g     F .text.itcm	00000630 __kernel_rem_pio2f
00000000 g       .text.itcm	00000000 _stext
60001704 g     O .text.progmem	00000016 usb_string_product_name_default
00000550 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
00005b6c g     F .text.itcm	00000090 floorf
6000129c g     F .text.progmem	000000c0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001820 g       .text.progmem	00000000 __preinit_array_start
000032f0 g     F .text.itcm	00000024 usb_receive
00008470 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
00003964 g     F .text.itcm	00000004 pendablesrvreq_isr
000018d0  w    F .text.itcm	00000004 Print::availableForWrite()
000005d0 g     F .text.itcm	00000280 project_namespace::Robot::Robot()
00002438 g     F .text.itcm	000000ec usb_serial_read
00003adc g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00003230 g     F .text.itcm	00000068 usb_config_tx
00004ac8 g     F .text.itcm	0000016c __ieee754_atan2f
200009dc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`p.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	600017e8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600017e0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013c0 <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001808 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600017f8 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001810 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	60001818 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001830
60001220:	.word	0x00005e00
60001224:	.word	0x20000000
60001228:	.word	0x60007634
6000122c:	.word	0x20000e40
60001230:	.word	0x20000e40
60001234:	.word	0x200032c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x200017fc
60001240:	.word	0x00001f4d
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00003965
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00003a69
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x200014bc
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x200014c4
60001290:	.word	0x20001800
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	dsb	sy
	asm("isb");
60001300:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	ldr.w	r3, [r2, #-136]
60001308:	orr.w	r3, r3, #196608	; 0x30000
6000130c:	str.w	r3, [r2, #-136]
60001310:	pop	{r4, r5, r6, r7, pc}
60001312:	nop
60001314:	.word	0xe000ed9c
60001318:	.word	0xe000eda0
6000131c:	.word	0xe000ed94
60001320:	.word	0x03080025
60001324:	.word	0x00200011
60001328:	.word	0x07020021
6000132c:	.word	0x20000012
60001330:	.word	0x13080025
60001334:	.word	0x20200013
60001338:	.word	0x130b0027
6000133c:	.word	0x40000014
60001340:	.word	0x13100033
60001344:	.word	0x60000015
60001348:	.word	0x070b002f
6000134c:	.word	0x70000016
60001350:	.word	0x070b0035
60001354:	.word	0x70000017
60001358:	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	tst.w	r3, #2
6000137c:	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	tst.w	r3, #2
6000138a:	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	tst.w	r3, #8192	; 0x2000
60001390:	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	str	r5, [r2, #20]
			continue;
60001394:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	tst.w	r3, #4096	; 0x1000
6000139a:	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	str	r6, [r2, #20]
			continue;
6000139e:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	cmp	r3, #0
600013a2:	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	tst.w	r3, #65536	; 0x10000
600013a8:	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	str	r1, [r2, #24]
			continue;
600013ac:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	lsls	r3, r3, #25
600013b0:	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	str	r7, [r2, #20]
			continue;
600013b4:	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	pop	{r4, r5, r6, r7}
600013b8:	bx	lr
600013ba:	nop
600013bc:	.word	0x400d8000

600013c0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c0:	ldr	r3, [pc, #192]	; (60001484 <usb_init+0xc4>)
600013c2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013c6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013cc:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013d0:	bl	60001800 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d4:	ldr	r1, [pc, #176]	; (60001488 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013d6:	ldr	r0, [pc, #180]	; (6000148c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013dc:	ldr	r4, [pc, #176]	; (60001490 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013de:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013e2:	ldr	r3, [pc, #176]	; (60001494 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013e4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013e8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013ec:	ldr	r2, [r4, #0]
600013ee:	ands	r3, r2
600013f0:	cbnz	r3, 600013fa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013f2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013f6:	lsls	r2, r3, #30
600013f8:	beq.n	60001430 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013fa:	ldr	r3, [pc, #144]	; (6000148c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013fc:	mov.w	r1, #2147483648	; 0x80000000
60001400:	ldr	r2, [pc, #140]	; (60001490 <usb_init+0xd0>)
60001402:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001404:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001406:	ldr.w	r1, [r3, #320]	; 0x140
6000140a:	orr.w	r1, r1, #2
6000140e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001412:	ldr.w	r3, [r2, #320]	; 0x140
60001416:	lsls	r3, r3, #30
60001418:	bmi.n	60001412 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000141a:	mov.w	r0, #131072	; 0x20000
6000141e:	ldr	r1, [pc, #120]	; (60001498 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001420:	ldr	r3, [pc, #108]	; (60001490 <usb_init+0xd0>)
60001422:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001426:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001428:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000142a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000142c:	bl	600017d8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001430:	ldr	r5, [pc, #104]	; (6000149c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001432:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001434:	ldr	r3, [pc, #88]	; (60001490 <usb_init+0xd0>)
60001436:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000143a:	ldr	r4, [pc, #80]	; (6000148c <usb_init+0xcc>)
6000143c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000143e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001440:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001442:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001444:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001446:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000144a:	mov.w	r2, #640	; 0x280
6000144e:	bl	600017f0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001452:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001456:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000145a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000145e:	ldr	r2, [pc, #64]	; (600014a0 <usb_init+0xe0>)
60001460:	ldr	r1, [pc, #64]	; (600014a4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001462:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001464:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001466:	str.w	r5, [r4, #344]	; 0x158
6000146a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000146e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001472:	ldr	r2, [pc, #52]	; (600014a8 <usb_init+0xe8>)
60001474:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001478:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000147a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000147c:	str.w	r3, [r4, #320]	; 0x140
60001480:	pop	{r4, r5, r6, pc}
60001482:	nop
60001484:	.word	0x400d8000
60001488:	.word	0x400fc000
6000148c:	.word	0x402e0000
60001490:	.word	0x400d9000
60001494:	.word	0x001e1c00
60001498:	.word	0xe000e28c
6000149c:	.word	0x20003000
600014a0:	.word	0x20001800
600014a4:	.word	0x00002b35
600014a8:	.word	0xe000e10c

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x200014c8

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x200014d4
60001600:	.word	0x200014d8
60001604:	.word	0x200014d0
60001608:	.word	0x20001800
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x000033e5
60001618:	.word	0xe000e108
6000161c:	.word	0x200014cc

60001620 <TwoWire::i2c4_hardware>:
60001620:	...@............
60001630:	...@............
	...
60001648:	...........@....
60001658:	................
60001668:	....

6000166c <TwoWire::i2c3_hardware>:
6000166c:	p..@............
6000167c:	...@....$.......
6000168c:	...@............
6000169c:	...@....%.......
600016ac:	...@........

600016b8 <TwoWire::i2c1_hardware>:
600016b8:	p..@............
600016c8:	...@............
	...
600016e0:	...........@....
600016f0:	................
60001700:	....

60001704 <usb_string_product_name_default>:
60001704:	..U.S.B. .S.e.r.
60001714:	i.a.l...

6000171c <usb_string_manufacturer_name_default>:
6000171c:	..T.e.e.n.s.y.d.
6000172c:	u.i.n.o.

60001734 <string0>:
60001734:	....

60001738 <usb_config_descriptor_12>:
60001738:	..C.....2.......
60001748:	...$....$....$..
60001758:	.$..............
60001768:	.........@......
60001778:	@...

6000177c <usb_config_descriptor_480>:
6000177c:	..C.....2.......
6000178c:	...$....$....$..
6000179c:	.$..............
600017ac:	................
600017bc:	....

600017c0 <qualifier_descriptor>:
600017c0:	.......@....

600017cc <_init>:
600017cc:	push	{r3, r4, r5, r6, r7, lr}
600017ce:	nop
600017d0:	pop	{r3, r4, r5, r6, r7}
600017d2:	pop	{r3}
600017d4:	mov	lr, r3
600017d6:	bx	lr

600017d8 <__delay_veneer>:
600017d8:	ldr.w	pc, [pc]	; 600017dc <__delay_veneer+0x4>
600017dc:	.word	0x00003319

600017e0 <__startup_early_hook_veneer>:
600017e0:	ldr.w	pc, [pc]	; 600017e4 <__startup_early_hook_veneer+0x4>
600017e4:	.word	0x00001f65

600017e8 <__set_arm_clock_veneer>:
600017e8:	ldr.w	pc, [pc]	; 600017ec <__set_arm_clock_veneer+0x4>
600017ec:	.word	0x00002739

600017f0 <__memset_veneer>:
600017f0:	ldr.w	pc, [pc]	; 600017f4 <__memset_veneer+0x4>
600017f4:	.word	0x00005d5d

600017f8 <__startup_late_hook_veneer>:
600017f8:	ldr.w	pc, [pc]	; 600017fc <__startup_late_hook_veneer+0x4>
600017fc:	.word	0x00001f69

60001800 <__usb_init_serialnumber_veneer>:
60001800:	ldr.w	pc, [pc]	; 60001804 <__usb_init_serialnumber_veneer+0x4>
60001804:	.word	0x00003799

60001808 <__pwm_init_veneer>:
60001808:	ldr.w	pc, [pc]	; 6000180c <__pwm_init_veneer+0x4>
6000180c:	.word	0x00003409

60001810 <____libc_init_array_veneer>:
60001810:	ldr.w	pc, [pc]	; 60001814 <____libc_init_array_veneer+0x4>
60001814:	.word	0x00005d0d

60001818 <__main_veneer>:
60001818:	ldr.w	pc, [pc]	; 6000181c <__main_veneer+0x4>
6000181c:	.word	0x000037f1

60001820 <__init_array_start>:
60001820:	.word	0x00000045
60001824:	.word	0x00000385

60001828 <__init_array_end>:
60001828:	.word	0xffffffff
6000182c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	lsrs	r0, r0, #25
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x00005e04

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	.word	0x4b07bd10
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r0, #25
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldrsh	r4, [r0, r0]
  ADC2_CFG = mode1;
      72:	.short	0x0000
  
  if(num >= 4){
      74:	lsrs	r0, r0, #25
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <setup>:
      7c:	push	{r3, r4, r5, lr}
      7e:	.short	0x481c
      80:	ldr	r4, [pc, #112]	; (f4 <setup+0x78>)
      82:	.short	0x491d
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      84:	ldr	r2, [pc, #116]	; (fc <setup+0x80>)
      86:	.short	0x7823
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      88:	cmp	r3, #0
      8a:	.short	0xd0fc
      8c:	ldrb	r3, [r0, #0]
      8e:	.short	0x07db
      90:	bpl.n	86 <setup+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      92:	.short	0x680b
      94:	ldr	r5, [r2, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      96:	subs	r3, r3, r5
      98:	.word	0xd9f42b0e

/////////////////////

void setup() {
    while(!Serial);
    pinMode(led_pin, OUTPUT);
      9c:	movs	r1, #1
      9e:	.short	0x200d
      a0:	bl	3718 <pinMode>
    
    // IMU SETUP
    Wire1.begin();
    Wire1.setClock(400000); // Increase I2C data rate to 400kHz
    
    if (imu.imu_hardware.begin(0x4B, Wire1) == false)
      a4:	.word	0x48174c16
    while(!Serial);
    pinMode(led_pin, OUTPUT);
    Serial.begin(600000000);
    
    // IMU SETUP
    Wire1.begin();
      a8:	bl	195c <TwoWire::begin()>
    Wire1.setClock(400000); // Increase I2C data rate to 400kHz
      ac:	.word	0x48154916
      b0:	bl	1d84 <TwoWire::setClock(unsigned long)>
    
    if (imu.imu_hardware.begin(0x4B, Wire1) == false)
      b4:	ldr	r0, [r4, #48]	; 0x30
      b6:	.short	0x23ff
      b8:	ldr	r2, [pc, #72]	; (104 <setup+0x88>)
      ba:	movs	r1, #75	; 0x4b
      bc:	bl	17d0 <BNO080::begin(unsigned char, TwoWire&, unsigned char)>
      c0:	.word	0x2160b938
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      c4:	ldr	r0, [pc, #68]	; (10c <setup+0x90>)
      c6:	.short	0xf002
      c8:			; <UNDEFINED> instruction: 0xfab54811
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      cc:	bl	3abc <Print::println()>
      d0:	b.n	d0 <setup+0x54>
    {
        Serial.println("BNO080 not detected at default I2C address. Check your jumpers and the hookup guide. Freezing...");
        while (1);
    }
    imu.imu_hardware.enableRotationVector(Config::dt*1000); // For quaternion; send data update every 50ms
      d2:	ldr	r0, [r4, #48]	; 0x30
      d4:	movs	r1, #10
      d6:	bl	177c <BNO080::enableRotationVector(unsigned short)>
    imu.imu_hardware.enableLinearAccelerometer(Config::dt*1000); // Send data update every 50ms
      da:	ldr	r0, [r4, #48]	; 0x30
      dc:	movs	r1, #10
      de:	bl	1788 <BNO080::enableLinearAccelerometer(unsigned short)>
    imu.imu_hardware.enableGyro(Config::dt*1000); // Send data update every 50ms
      e2:	.short	0x6b20
      e4:	movs	r1, #10
}
      e6:	.short	0xe8bd
      e8:	ands	r0, r7
        Serial.println("BNO080 not detected at default I2C address. Check your jumpers and the hookup guide. Freezing...");
        while (1);
    }
    imu.imu_hardware.enableRotationVector(Config::dt*1000); // For quaternion; send data update every 50ms
    imu.imu_hardware.enableLinearAccelerometer(Config::dt*1000); // Send data update every 50ms
    imu.imu_hardware.enableGyro(Config::dt*1000); // Send data update every 50ms
      ea:	.short	0xf001
      ec:	cbnz	r3, 144 <loop+0x30>
      ee:	nop
      f0:	.word	0x200013e8
      f4:	asrs	r0, r7, #18
      f6:	.short	0x2000
      f8:	asrs	r4, r0, #19
      fa:	.short	0x2000
      fc:	subs	r0, r1, r3
      fe:	movs	r0, #0
     100:	.word	0x20001130
     104:	lsrs	r0, r2, #5
     106:	.short	0x2000
     108:	subs	r0, r0, r2
     10a:	movs	r6, r0
     10c:	movs	r0, r0
     10e:	.short	0x2000
     110:	lsrs	r4, r6, #7
     112:	.short	0x2000

00000114 <loop>:
}

void loop() {
     114:	push	{r4, r5, r7, lr}
     116:	.short	0x4b93
    long current_time = millis();
    long delta_time = current_time - last_time;
     118:	ldr	r2, [pc, #588]	; (368 <loop+0x254>)
    imu.imu_hardware.enableRotationVector(Config::dt*1000); // For quaternion; send data update every 50ms
    imu.imu_hardware.enableLinearAccelerometer(Config::dt*1000); // Send data update every 50ms
    imu.imu_hardware.enableGyro(Config::dt*1000); // Send data update every 50ms
}

void loop() {
     11a:	.short	0xed2d
     11c:	ldrh	r0, [r1, #24]
     11e:	.short	0xb084
     120:	ldr	r0, [r3, #0]
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
     122:	ldr	r3, [r2, #0]
    imu.imu_hardware.enableRotationVector(Config::dt*1000); // For quaternion; send data update every 50ms
    imu.imu_hardware.enableLinearAccelerometer(Config::dt*1000); // Send data update every 50ms
    imu.imu_hardware.enableGyro(Config::dt*1000); // Send data update every 50ms
}

void loop() {
     124:	.word	0xb08caf00
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
     128:	subs	r3, r0, r3
     12a:	.short	0x2b09
     12c:	bgt.n	138 <loop+0x24>
    Serial.println(sprintf_buffer);

    // TODO: Log joint angles and feed into simulation to check movement!

    */
     12e:	adds	r7, #16
     130:	.word	0xecbd46bd
     134:	ldrh	r0, [r1, #24]
     136:	.short	0xbdb0
     138:	add.w	r4, sp, #15
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
        return;
    }
    last_time = current_time;
     13c:	str	r0, [r2, #0]
    Eigen::Vector3f rpy_angles;
    rpy_angles = imu.getHeadingQuaternion().normalized().toRotationMatrix().eulerAngles(0, 1, 2);
     13e:	.short	0x498b
     140:	bic.w	r4, r4, #15
     144:	.word	0x0510f104
     148:	mov	r0, r5
     14a:	.short	0xf000
     14c:			; <UNDEFINED> instruction: 0xfa03ed94
     150:	ldrh	r5, [r0, r0]
     152:	.short	0xedd4
     154:	ldr	r4, [r0, #32]
#else
  scalar_sum_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
     156:	.short	0xee65
     158:	ldrb	r5, [r0, #8]
     15a:	.short	0xedd4
     15c:	ldrh	r7, [r0, r0]
     15e:	.short	0xed94
     160:	ldr	r6, [r0, #32]
     162:	.short	0xee25
     164:	lsrs	r5, r4, #10
     166:	.short	0xeee6
     168:	ldrb	r6, [r4, #10]
     16a:	vmov.f32	s14, s15
     16e:	.short	0xeef0
     170:	ldrb	r0, [r0, #9]
     172:	.short	0xeee6
     174:	ldrb	r6, [r0, #8]
     176:	.short	0xee77
     178:	ldrb	r7, [r4, #8]
{
  typedef typename internal::nested_eval<Derived,2>::type _Nested;
  _Nested n(derived());
  RealScalar z = n.squaredNorm();
  // NOTE: after extensive benchmarking, this conditional does not impact performance, at least on recent x86 CPU
  if(z>RealScalar(0))
     17a:	.short	0xeef5
     17c:	ldrb	r0, [r0, #11]
     17e:	.short	0xeef1
     180:	lsls.w	r3, r0, r0
     184:	strh	r6, [r0, #6]
    }
    EIGEN_DEVICE_FUNC
    explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
      : m_data(internal::constructor_without_unaligned_array_assert()) {}
    EIGEN_DEVICE_FUNC 
    DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
     186:	.short	0xe895
     188:	movs	r7, r1
     18a:	.short	0xe884
     18c:	movs	r7, r1
     18e:	.short	0xedd4
     190:	ldrb	r0, [r0, #8]
     192:	.short	0xedd4
     194:	ldr	r1, [r0, #32]
     196:	.short	0xed94
     198:	ldrh	r2, [r0, #16]
     19a:	vldr	s12, [r4, #12]
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
  const Scalar ty  = Scalar(2)*this->y();
     19e:	vadd.f32	s10, s13, s13
  const Scalar tz  = Scalar(2)*this->z();
     1a2:	vadd.f32	s11, s16, s16
  // if not inlined then the cost of the return by value is huge ~ +35%,
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
     1a6:	vadd.f32	s9, s15, s15
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
     1aa:	vmul.f32	s14, s13, s10
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();
     1ae:	.short	0xee28
     1b0:	ldrh	r5, [r4, #16]
  const Scalar tz  = Scalar(2)*this->z();
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
     1b2:	.short	0xee27
     1b4:	add	r2, sp, #532	; 0x214
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
     1b6:	.short	0xeef0
     1b8:	lsrs	r7, r0, #9

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
     1ba:	.short	0xeef0
     1bc:	add	r2, sp, #288	; 0x120
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
     1be:	.short	0xee66
     1c0:	ldr	r5, [r4, #40]	; 0x28
     1c2:	.short	0xeee7
     1c4:	lsrs	r4, r4, #10

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
     1c6:	vfma.f32	s21, s15, s9
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
     1ca:	vmov.f32	s19, s20
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
     1ce:	vmul.f32	s15, s15, s11
     1d2:	vmov.f32	s0, s13
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
     1d6:	vfms.f32	s19, s11, s12
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
  res.coeffRef(2,1) = tyz+twx;
     1da:	.short	0xeee4
     1dc:	ldr	r6, [r0, #40]	; 0x28
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
     1de:	vmov.f32	s23, s15
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
     1e2:	vfms.f32	s15, s10, s12
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
     1e6:	vmov.f32	s8, #112	; 0x3f800000  1.0
     1ea:	vadd.f32	s16, s14, s16
     1ee:	vfms.f32	s0, s9, s12
     1f2:	.short	0xee74
     1f4:	lsrs	r0, r4, #9
     1f6:	vsub.f32	s16, s8, s16
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
     1fa:	.short	0xee74
     1fc:	add	r2, sp, #424	; 0x1a8
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
  res.coeffRef(2,1) = tyz+twx;
     1fe:	.short	0xeeb0
     200:	ldr	r2, [sp, #408]	; 0x198
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
     202:	.short	0xeea5
     204:	add	r2, sp, #536	; 0x218
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
     206:	.short	0xeee5
     208:	rev	r6, r0
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
     20a:	.short	0xeef0
     20c:	ldrh	r7, [r4, #18]
     20e:	bl	4108 <atan2f>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
     212:	vmul.f32	s19, s19, s19
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
     216:	vmov.f32	s22, s0
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
     21a:	vmov.f32	s0, s19
     21e:	vfma.f32	s0, s16, s16
     222:	.short	0xeef1
     224:	lsrs	r0, r0, #11
     226:	.short	0xeef4
     228:	lsrs	r0, r4, #9
     22a:	.short	0xeef1
     22c:			; <UNDEFINED> instruction: 0xfa10f040
     230:	strh	r4, [r2, #4]
  } 
  else
  {
    res[0] = atan2(coeff(j,k), coeff(k,k));
    Scalar c2 = Vector2(coeff(i,i), coeff(i,j)).norm();
    if((odd && res[0]<Scalar(0)) || ((!odd) && res[0]>Scalar(0))) {
     232:	vcmpe.f32	s22, #0.0
     236:	vmrs	APSR_nzcv, fpscr
     23a:	.short	0xdd7a
      if(res[0] > Scalar(0)) {
        res[0] -= Scalar(EIGEN_PI);
     23c:	vldr	s15, [pc, #304]	; 370 <loop+0x25c>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
     240:	vneg.f32	s1, s1
     244:	.word	0x0a6beeb1
     248:	vsub.f32	s22, s22, s15
     24c:	bl	4108 <atan2f>
     250:	vmov.f32	s19, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
     254:	.word	0x0a4beeb0
     258:	adds	r4, r7, #4
     25a:	bl	3df4 <sinf>
     25e:	vmov.f32	s23, s0
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
     262:	vmov.f32	s0, s22
     266:	.short	0xf107
     268:	lsls	r4, r1, #20
     26a:	.short	0xf003
     26c:	ldc2l	14, cr14, [fp, #-168]!	; 0xffffff58
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
     270:	add	r2, sp, #256	; 0x100
     272:	vnmul.f32	s1, s18, s23
  *
  * \sa class CwiseUnaryOp, MatrixBase::operator-
  */
template<typename Scalar> struct scalar_opposite_op {
  EIGEN_EMPTY_STRUCT_CTOR(scalar_opposite_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a) const { return -a; }
     276:	vneg.f32	s16, s22
     27a:	vfma.f32	s1, s0, s21
     27e:	vmov.f32	s0, s20
     282:	vfma.f32	s0, s23, s17
     286:	bl	4108 <atan2f>
     28a:	vneg.f32	s15, s19
     28e:	vneg.f32	s0, s0
     292:	movs	r1, #13
     294:	ldr	r0, [pc, #220]	; (374 <loop+0x260>)
     296:	vstr	s15, [r7, #8]
     29a:	vstr	s0, [r7, #12]
     29e:	vstr	s16, [r7, #4]
     2a2:	bl	2634 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     2a6:	movs	r3, #0
     2a8:	movs	r2, #10
     2aa:	movs	r1, #3
     2ac:	ldr	r0, [pc, #200]	; (378 <loop+0x264>)
     2ae:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     2b2:	ldr	r0, [pc, #196]	; (378 <loop+0x264>)
     2b4:	bl	3abc <Print::println()>
     2b8:	movs	r1, #13
     2ba:	ldr	r0, [pc, #192]	; (37c <loop+0x268>)
     2bc:	bl	2634 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     2c0:	movs	r3, #0
     2c2:	movs	r2, #10
     2c4:	movs	r1, #1
     2c6:	ldr	r0, [pc, #176]	; (378 <loop+0x264>)
     2c8:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     2cc:	ldr	r0, [pc, #168]	; (378 <loop+0x264>)
     2ce:	bl	3abc <Print::println()>
                uint8_t num_of_rows = matrix_to_print.rows();
                uint8_t num_of_cols = matrix_to_print.cols();

                Serial.print("num_of_rows: "); Serial.println(num_of_rows);
                Serial.print("num_of_cols: "); Serial.println(num_of_cols);       
                Serial.println();
     2d2:	ldr	r0, [pc, #164]	; (378 <loop+0x264>)
     2d4:	bl	3abc <Print::println()>
     2d8:	vmov.f32	s0, s16
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2dc:	vcvt.f64.f32	d0, s0
     2e0:	movs	r1, #5
     2e2:	ldr	r0, [pc, #148]	; (378 <loop+0x264>)
     2e4:	bl	3b78 <Print::printFloat(double, unsigned char)>
     2e8:	movs	r1, #2
     2ea:	ldr	r0, [pc, #148]	; (380 <loop+0x26c>)
     2ec:	bl	2634 <usb_serial_write>
                    for (uint8_t j = 0; j < num_of_cols; j++)
                    {
                        Serial.print(matrix_to_print(i, j), 5); // To 5 dp
                        Serial.print(", ");
                    }
                    Serial.println();
     2f0:	ldr	r0, [pc, #132]	; (378 <loop+0x264>)
     2f2:	bl	3abc <Print::println()>

                Serial.print("num_of_rows: "); Serial.println(num_of_rows);
                Serial.print("num_of_cols: "); Serial.println(num_of_cols);       
                Serial.println();
            
                for (uint8_t i = 0; i < num_of_rows; i++)
     2f6:	cmp	r5, r4
     2f8:	beq.n	302 <loop+0x1ee>
     2fa:	adds	r4, #4
     2fc:	vldr	s0, [r4]
     300:	b.n	2dc <loop+0x1c8>
                        Serial.print(matrix_to_print(i, j), 5); // To 5 dp
                        Serial.print(", ");
                    }
                    Serial.println();
                }
                Serial.println();
     302:	ldr	r0, [pc, #116]	; (378 <loop+0x264>)
     304:	bl	3abc <Print::println()>
    Serial.println(sprintf_buffer);

    // TODO: Log joint angles and feed into simulation to check movement!

    */
     308:	adds	r7, #16
     30a:	mov	sp, r7
     30c:	vpop	{d8-d11}
     310:	pop	{r4, r5, r7, pc}
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
     312:	vsqrt.f32	s0, s15
     316:	vcmp.f32	s0, s0
     31a:	vmrs	APSR_nzcv, fpscr
     31e:	bne.n	340 <loop+0x22c>
#else
  scalar_quotient_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
     320:	vdiv.f32	s15, s13, s0
     324:	vdiv.f32	s16, s12, s0
     328:	vdiv.f32	s13, s10, s0
     32c:	vdiv.f32	s12, s11, s0
     330:	b.n	19e <loop+0x8a>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
     332:	vneg.f32	s0, s23
     336:	bl	4108 <atan2f>
     33a:	vmov.f32	s19, s0
     33e:	b.n	254 <loop+0x140>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
     340:	vmov.f32	s0, s15
     344:	bl	4110 <sqrtf>
     348:	vldr	s13, [r4, #16]
     34c:	vldr	s10, [r4, #20]
     350:	vldr	s12, [r4, #24]
     354:	vldr	s11, [r4, #28]
     358:	b.n	320 <loop+0x20c>
     35a:	bl	4110 <sqrtf>
     35e:	vmov.f32	s1, s0
     362:	b.n	232 <loop+0x11e>
     364:	.word	0x200014c4
     368:	.word	0x20000e5c
     36c:	.word	0x20001130
     370:	.word	0x40490fdb
     374:	.word	0x20000064
     378:	.word	0x200009f4
     37c:	.word	0x20000074
     380:	.word	0x20000084

00000384 <_GLOBAL__sub_I_robot>:
     384:	push	{r3, r4, r5, r6, r7, lr}

using namespace project_namespace;

const int led_pin = 13;

Robot robot;
     386:	ldr	r0, [pc, #100]	; (3ec <_GLOBAL__sub_I_robot+0x68>)
#define CALIBRATE_STOP 5

#define MAX_PACKET_SIZE 128 //Packets can be up to 32k but we don't have that much RAM.
#define MAX_METADATA_SIZE 9 //This is in words. There can be many but we mostly only care about the first 9 (Qs, range, etc)

class BNO080
     388:	movs	r5, #12
     38a:	bl	5d0 <project_namespace::Robot::Robot()>
Command command;
     38e:	ldr	r0, [pc, #96]	; (3f0 <_GLOBAL__sub_I_robot+0x6c>)
     390:	bl	858 <project_namespace::Command::Command()>
     394:	ldr	r3, [pc, #92]	; (3f4 <_GLOBAL__sub_I_robot+0x70>)
     396:	movs	r2, #14
BNO080 imu_hardware;
IMU imu(imu_hardware);
     398:	ldr	r4, [pc, #92]	; (3f8 <_GLOBAL__sub_I_robot+0x74>)
     39a:	movs	r1, #9
     39c:	movs	r0, #4
     39e:	strh.w	r2, [r3, #288]	; 0x120
     3a2:	movs	r7, #10
     3a4:	movs	r2, #0
     3a6:	strh.w	r5, [r3, #290]	; 0x122
     3aa:	movs	r5, #8
     3ac:	strh.w	r1, [r3, #296]	; 0x128
     3b0:	strh.w	r0, [r3, #298]	; 0x12a
     3b4:	mov	r1, r3
     3b6:	mov	r0, r4
     3b8:	strh.w	r2, [r3, #136]	; 0x88
     3bc:	str.w	r2, [r3, #132]	; 0x84
     3c0:	strb.w	r2, [r3, #138]	; 0x8a
     3c4:	strb.w	r2, [r3, #188]	; 0xbc
     3c8:	strh.w	r7, [r3, #300]	; 0x12c
     3cc:	strh.w	r5, [r3, #292]	; 0x124
     3d0:	strh.w	r5, [r3, #294]	; 0x126
     3d4:	bl	550 <project_namespace::IMU::IMU(BNO080&)>
MasterController master_controller(imu);
     3d8:	mov	r1, r4
     3da:	ldr	r0, [pc, #32]	; (3fc <_GLOBAL__sub_I_robot+0x78>)
     3dc:	bl	448 <project_namespace::MasterController::MasterController(project_namespace::IMU&)>
     3e0:	ldr	r2, [pc, #28]	; (400 <_GLOBAL__sub_I_robot+0x7c>)

long last_time = millis();
     3e2:	ldr	r3, [pc, #32]	; (404 <_GLOBAL__sub_I_robot+0x80>)
     3e4:	ldr	r2, [r2, #0]
     3e6:	str	r2, [r3, #0]
     3e8:	pop	{r3, r4, r5, r6, r7, pc}
     3ea:	nop
     3ec:	.word	0x20000e90
     3f0:	.word	0x20000e60
     3f4:	.word	0x20001170
     3f8:	.word	0x20001130
     3fc:	.word	0x20001070
     400:	.word	0x200014c4
     404:	.word	0x20000e5c

00000408 <project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)>:
     408:	str	r1, [r0, #0]
     40a:	bx	lr

0000040c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>:
     40c:	push	{r4, r5}
     40e:	mov	r3, r0
     410:	vstr	s0, [r0]
     414:	vstr	s1, [r0, #4]
     418:	movs	r4, #0
     41a:	vstr	s2, [r0, #8]
     41e:	add.w	r5, r0, #24
     422:	vstr	s3, [r0, #12]
     426:	vstr	s4, [r0, #16]
     42a:	vstr	s5, [r0, #20]
     42e:	ldmia	r1, {r0, r1, r2}
     430:	stmia.w	r5, {r0, r1, r2}
     434:	str	r4, [r3, #36]	; 0x24
     436:	mov	r0, r3
     438:	str	r4, [r3, #40]	; 0x28
     43a:	str	r4, [r3, #44]	; 0x2c
     43c:	str	r4, [r3, #48]	; 0x30
     43e:	str	r4, [r3, #52]	; 0x34
     440:	str	r4, [r3, #56]	; 0x38
     442:	pop	{r4, r5}
     444:	bx	lr
     446:	nop

00000448 <project_namespace::MasterController::MasterController(project_namespace::IMU&)>:
        new_foot_positions_wrt_body = body_rpy_matrix.transpose()*new_foot_positions_wrt_body;
        // Move feet to calculated positions
        robot.moveAllFeet(new_foot_positions_wrt_body); // Foot positions (true), joint angles in Legs and Robot are internally updated.
        // Update robot attributes
        robot.setStancePolygonLength(command.getStancePolygonLength()); // Resting foot locations are updated internally
        robot.setStancePolygonWidth(command.getStancePolygonWidth()); // Resting foot locations are updated internally
     448:	push	{r3, r4, r5, lr}
     44a:	mov	r5, r1
     44c:	mov	r4, r0
        robot.setStanceHeight(command.getStanceHeight()); // Resting foot locations are updated internally
     44e:	movs	r2, #1
     450:	movs	r1, #0
     452:	mov	r3, r5
     454:	str.w	r5, [r0], #16
     458:	bl	88c <project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)>
        robot.setBodyRoll(command.getBodyRoll());
     45c:	movs	r3, #0
     45e:	mov	r0, r4
     460:	str.w	r3, [r4, #176]	; 0xb0
     464:	pop	{r3, r4, r5, pc}
        robot.setBodyPitch(command.getBodyPitch());
     466:	nop

00000468 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)>:
     468:	movs	r3, #0
     46a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     46e:	movs	r5, #0
     470:	add	r7, sp, #0
     472:	str	r3, [r0, #16]
     474:	sub	sp, #80	; 0x50
     476:	str	r5, [r0, #8]
     478:	str	r5, [r0, #12]
     47a:	str	r5, [r0, #120]	; 0x78
     47c:	str	r3, [r0, #20]
     47e:	str	r3, [r0, #24]
     480:	str	r3, [r0, #28]
     482:	str	r3, [r0, #32]
     484:	str	r3, [r0, #36]	; 0x24
     486:	str	r3, [r0, #40]	; 0x28
     488:	str	r3, [r0, #44]	; 0x2c
     48a:	str	r3, [r0, #48]	; 0x30
     48c:	str	r3, [r0, #52]	; 0x34
     48e:	str	r3, [r0, #56]	; 0x38
     490:	str	r3, [r0, #60]	; 0x3c
     492:	str	r3, [r0, #64]	; 0x40
     494:	str	r3, [r0, #68]	; 0x44
     496:	str	r3, [r0, #72]	; 0x48
     498:	str	r3, [r0, #76]	; 0x4c
     49a:	str	r3, [r0, #80]	; 0x50
     49c:	str	r3, [r0, #84]	; 0x54
     49e:	str	r3, [r0, #88]	; 0x58
     4a0:	str	r3, [r0, #92]	; 0x5c
     4a2:	str	r3, [r0, #96]	; 0x60
     4a4:	str	r3, [r0, #100]	; 0x64
     4a6:	str	r3, [r0, #104]	; 0x68
     4a8:	str	r3, [r0, #108]	; 0x6c
     4aa:	str	r3, [r0, #112]	; 0x70
     4ac:	str	r3, [r0, #116]	; 0x74
     4ae:	stmia.w	r0, {r1, r2}
     4b2:	cbz	r1, 4ba <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x52>
     4b4:	mov	sp, r7
     4b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ba:	add.w	r4, sp, #15
     4be:	movs	r3, #1
     4c0:	ldr.w	r8, [pc, #132]	; 548 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xe0>
     4c4:	mov	r5, r0
     4c6:	bic.w	r2, r4, #15
     4ca:	ldr.w	ip, [pc, #128]	; 54c <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xe4>
     4ce:	mov	r4, r3
     4d0:	add.w	lr, r0, #76	; 0x4c
     4d4:	mov	r6, r2
     4d6:	str.w	r8, [r0, #8]
     4da:	str	r1, [r2, #48]	; 0x30
     4dc:	str	r1, [r2, #20]
     4de:	str	r1, [r2, #24]
     4e0:	str	r1, [r2, #60]	; 0x3c
     4e2:	str	r3, [r2, #0]
     4e4:	str	r3, [r2, #16]
     4e6:	str	r3, [r2, #32]
     4e8:	str	r3, [r2, #4]
     4ea:	str	r3, [r2, #36]	; 0x24
     4ec:	str	r3, [r2, #52]	; 0x34
     4ee:	str	r3, [r2, #8]
     4f0:	str	r3, [r2, #40]	; 0x28
     4f2:	str	r3, [r2, #56]	; 0x38
     4f4:	str	r3, [r2, #12]
     4f6:	str	r3, [r2, #28]
     4f8:	str	r3, [r2, #44]	; 0x2c
     4fa:	str.w	ip, [r5, #12]!
     4fe:	mov	r1, r6
     500:	mov	r2, r5
     502:	movs	r3, #0
     504:	b.n	50a <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xa2>
     506:	ldr.w	r4, [r1, #4]!
     50a:	adds	r3, #1
     50c:	str.w	r4, [r2, #4]!
     510:	cmp	r3, #4
     512:	bne.n	506 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x9e>
     514:	adds	r5, #16
     516:	cmp	lr, r5
     518:	beq.n	520 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xb8>
     51a:	ldr.w	r4, [r6, #16]!
     51e:	b.n	4fe <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x96>
     520:	movs	r2, #15
     522:	movs	r1, #2
     524:	movs	r6, #34	; 0x22
     526:	movs	r5, #19
     528:	movs	r4, #0
     52a:	str	r3, [r0, #80]	; 0x50
     52c:	str	r1, [r0, #84]	; 0x54
     52e:	str	r1, [r0, #96]	; 0x60
     530:	str	r1, [r0, #104]	; 0x68
     532:	str	r2, [r0, #88]	; 0x58
     534:	str	r2, [r0, #100]	; 0x64
     536:	str	r2, [r0, #108]	; 0x6c
     538:	str	r2, [r0, #116]	; 0x74
     53a:	str	r6, [r0, #92]	; 0x5c
     53c:	str	r5, [r0, #112]	; 0x70
     53e:	str	r4, [r0, #120]	; 0x78
     540:	mov	sp, r7
     542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     546:	nop
     548:	.word	0x3ca3d70a
     54c:	.word	0x3e19999a

00000550 <project_namespace::IMU::IMU(BNO080&)>:
#include "IMU.h"

using namespace project_namespace;

IMU::IMU(BNO080& imu_hardware_init):
    imu_hardware(imu_hardware_init)
     550:	str	r1, [r0, #48]	; 0x30
{ }
     552:	bx	lr

00000554 <project_namespace::IMU::getHeadingQuaternion()>:
    }
    Eigen::Vector3f gyro_vals(x, y, z);
    last_gyro = gyro_vals;
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
     554:	push	{r3, r4, r5, lr}
     556:	mov	r5, r0
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     558:	ldr	r0, [r1, #48]	; 0x30
    }
    Eigen::Vector3f gyro_vals(x, y, z);
    last_gyro = gyro_vals;
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
     55a:	mov	r4, r1
     55c:	vpush	{d8-d9}
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     560:	bl	1454 <BNO080::dataAvailable()>
     564:	cbnz	r0, 578 <project_namespace::IMU::getHeadingQuaternion()+0x24>
     566:	adds	r4, #32
        last_quaternion = heading_quaternion;
        return heading_quaternion;
    } else {
        return last_quaternion;
    }
     568:	vpop	{d8-d9}
     56c:	ldmia.w	r4, {r0, r1, r2, r3}
     570:	stmia.w	r5, {r0, r1, r2, r3}
     574:	mov	r0, r5
     576:	pop	{r3, r4, r5, pc}
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_w = imu_hardware.getQuatReal();
     578:	ldr	r0, [r4, #48]	; 0x30
     57a:	bl	e30 <BNO080::getQuatReal()>
        quat_x = imu_hardware.getQuatI();
     57e:	ldr	r0, [r4, #48]	; 0x30
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_w = imu_hardware.getQuatReal();
     580:	vmov.f32	s16, s0
        quat_x = imu_hardware.getQuatI();
     584:	bl	d7c <BNO080::getQuatI()>
        quat_y = imu_hardware.getQuatJ();
     588:	ldr	r0, [r4, #48]	; 0x30
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_w = imu_hardware.getQuatReal();
        quat_x = imu_hardware.getQuatI();
     58a:	vmov.f32	s19, s0
        quat_y = imu_hardware.getQuatJ();
     58e:	bl	db8 <BNO080::getQuatJ()>
        quat_z = imu_hardware.getQuatK();
     592:	ldr	r0, [r4, #48]	; 0x30
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_w = imu_hardware.getQuatReal();
        quat_x = imu_hardware.getQuatI();
        quat_y = imu_hardware.getQuatJ();
     594:	vmov.f32	s18, s0
        quat_z = imu_hardware.getQuatK();
     598:	bl	df4 <BNO080::getQuatK()>
     59c:	vmov.f32	s17, s0
        quat_accuracy = imu_hardware.getQuatRadianAccuracy();
     5a0:	ldr	r0, [r4, #48]	; 0x30
     5a2:	bl	e6c <BNO080::getQuatRadianAccuracy()>
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
     5a6:	vstr	s19, [r4, #32]
     5aa:	vstr	s18, [r4, #36]	; 0x24
        last_quaternion = heading_quaternion;
        return heading_quaternion;
    } else {
        return last_quaternion;
    }
     5ae:	mov	r0, r5
     5b0:	vstr	s17, [r4, #40]	; 0x28
     5b4:	vstr	s16, [r4, #44]	; 0x2c
     5b8:	vstr	s19, [r5]
     5bc:	vstr	s18, [r5, #4]
     5c0:	vstr	s17, [r5, #8]
     5c4:	vstr	s16, [r5, #12]
     5c8:	vpop	{d8-d9}
     5cc:	pop	{r3, r4, r5, pc}
     5ce:	nop

000005d0 <project_namespace::Robot::Robot()>:
     5d0:	movs	r3, #0
     5d2:	movs	r2, #0
     5d4:	ldr	r1, [pc, #588]	; (824 <project_namespace::Robot::Robot()+0x254>)
     5d6:	push	{r4, r5, r6, lr}
     5d8:	mov	r4, r0
     5da:	ldr	r6, [pc, #588]	; (828 <project_namespace::Robot::Robot()+0x258>)
     5dc:	movs	r5, #1
     5de:	adds	r0, #240	; 0xf0
     5e0:	vpush	{d8-d12}
     5e4:	vldr	s16, [pc, #580]	; 82c <project_namespace::Robot::Robot()+0x25c>
     5e8:	sub	sp, #16
     5ea:	vldr	s22, [pc, #580]	; 830 <project_namespace::Robot::Robot()+0x260>
     5ee:	vldr	s24, [pc, #580]	; 834 <project_namespace::Robot::Robot()+0x264>
     5f2:	vmov.f32	s5, s16
     5f6:	vldr	s21, [pc, #576]	; 838 <project_namespace::Robot::Robot()+0x268>
     5fa:	vmov.f32	s4, s16
     5fe:	vldr	s23, [pc, #572]	; 83c <project_namespace::Robot::Robot()+0x26c>
     602:	vmov.f32	s3, s22
     606:	vldr	s20, [pc, #568]	; 840 <project_namespace::Robot::Robot()+0x270>
     60a:	vmov.f32	s2, s24
     60e:	vldr	s18, [pc, #564]	; 844 <project_namespace::Robot::Robot()+0x274>
     612:	vmov.f32	s1, s21
     616:	str	r1, [r4, #4]
     618:	vmov.f32	s0, s23
     61c:	add	r1, sp, #4
     61e:	str	r3, [r4, #12]
     620:	str	r3, [r4, #16]
     622:	str	r3, [r4, #20]
     624:	str	r3, [r4, #32]
     626:	str	r3, [r4, #36]	; 0x24
     628:	str	r3, [r4, #40]	; 0x28
     62a:	str	r3, [r4, #44]	; 0x2c
     62c:	str	r3, [r4, #48]	; 0x30
     62e:	str	r3, [r4, #52]	; 0x34
     630:	str	r3, [r4, #56]	; 0x38
     632:	str	r3, [r4, #60]	; 0x3c
     634:	str	r3, [r4, #64]	; 0x40
     636:	str	r3, [r4, #68]	; 0x44
     638:	str	r3, [r4, #72]	; 0x48
     63a:	str	r3, [r4, #76]	; 0x4c
     63c:	str	r3, [r4, #80]	; 0x50
     63e:	str	r3, [r4, #84]	; 0x54
     640:	str	r3, [r4, #88]	; 0x58
     642:	str	r3, [r4, #92]	; 0x5c
     644:	str	r3, [r4, #96]	; 0x60
     646:	str	r3, [r4, #100]	; 0x64
     648:	str	r3, [r4, #104]	; 0x68
     64a:	str	r3, [r4, #108]	; 0x6c
     64c:	str	r3, [r4, #112]	; 0x70
     64e:	str	r3, [r4, #116]	; 0x74
     650:	str	r3, [r4, #120]	; 0x78
     652:	str	r3, [r4, #124]	; 0x7c
     654:	vldr	s19, [pc, #496]	; 848 <project_namespace::Robot::Robot()+0x278>
     658:	vldr	s17, [pc, #496]	; 84c <project_namespace::Robot::Robot()+0x27c>
     65c:	str	r6, [r4, #0]
     65e:	str	r6, [r4, #8]
     660:	str.w	r3, [r4, #128]	; 0x80
     664:	str.w	r2, [r4, #224]	; 0xe0
     668:	str.w	r2, [r4, #228]	; 0xe4
     66c:	str.w	r2, [r4, #232]	; 0xe8
     670:	str.w	r2, [r4, #236]	; 0xec
     674:	str.w	r3, [r4, #132]	; 0x84
     678:	str.w	r3, [r4, #136]	; 0x88
     67c:	str.w	r3, [r4, #140]	; 0x8c
     680:	str.w	r3, [r4, #144]	; 0x90
     684:	str.w	r3, [r4, #148]	; 0x94
     688:	str.w	r3, [r4, #152]	; 0x98
     68c:	str.w	r3, [r4, #156]	; 0x9c
     690:	str.w	r3, [r4, #160]	; 0xa0
     694:	str.w	r3, [r4, #164]	; 0xa4
     698:	str.w	r3, [r4, #168]	; 0xa8
     69c:	str.w	r3, [r4, #172]	; 0xac
     6a0:	str.w	r3, [r4, #176]	; 0xb0
     6a4:	str.w	r3, [r4, #180]	; 0xb4
     6a8:	str.w	r3, [r4, #184]	; 0xb8
     6ac:	str.w	r3, [r4, #188]	; 0xbc
     6b0:	str.w	r3, [r4, #192]	; 0xc0
     6b4:	str.w	r3, [r4, #196]	; 0xc4
     6b8:	str.w	r3, [r4, #200]	; 0xc8
     6bc:	str.w	r3, [r4, #204]	; 0xcc
     6c0:	str.w	r3, [r4, #208]	; 0xd0
     6c4:	str.w	r3, [r4, #212]	; 0xd4
     6c8:	str.w	r3, [r4, #216]	; 0xd8
     6cc:	str.w	r3, [r4, #220]	; 0xdc
     6d0:	str	r5, [sp, #4]
     6d2:	str	r5, [sp, #8]
     6d4:	str	r5, [sp, #12]
     6d6:	bl	40c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     6da:	vmov.f32	s2, s24
     6de:	add	r1, sp, #4
     6e0:	vmov.f32	s0, s23
     6e4:	add.w	r0, r4, #300	; 0x12c
     6e8:	vmov.f32	s5, s16
     6ec:	str	r5, [sp, #4]
     6ee:	vmov.f32	s4, s16
     6f2:	str	r5, [sp, #8]
     6f4:	vmov.f32	s3, s20
     6f8:	str	r5, [sp, #12]
     6fa:	vmov.f32	s1, s18
     6fe:	bl	40c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     702:	vmov.f32	s3, s22
     706:	vmov.f32	s1, s21
     70a:	add	r1, sp, #4
     70c:	vmov.f32	s5, s16
     710:	add.w	r0, r4, #360	; 0x168
     714:	vmov.f32	s4, s16
     718:	str	r5, [sp, #4]
     71a:	vmov.f32	s2, s19
     71e:	str	r5, [sp, #8]
     720:	vmov.f32	s0, s17
     724:	str	r5, [sp, #12]
     726:	bl	40c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     72a:	add	r1, sp, #4
     72c:	vmov.f32	s3, s20
     730:	add.w	r0, r4, #420	; 0x1a4
     734:	vmov.f32	s2, s19
     738:	str	r5, [sp, #4]
     73a:	vmov.f32	s1, s18
     73e:	str	r5, [sp, #8]
     740:	vmov.f32	s0, s17
     744:	str	r5, [sp, #12]
     746:	vmov.f32	s5, s16
     74a:	vmov.f32	s4, s16
     74e:	bl	40c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     752:	vldr	s9, [r4]
     756:	vldr	s14, [r4, #4]
     75a:	vmov.f64	d3, #96	; 0x3f000000  0.5
     75e:	vcvt.f64.f32	d6, s9
     762:	vldr	s15, [r4, #8]
     766:	vcvt.f64.f32	d5, s14
     76a:	mov	r0, r4
     76c:	vmov.f32	s8, #96	; 0x3f000000  0.5
     770:	vnmul.f64	d6, d6, d3
     774:	vnmul.f64	d5, d5, d3
     778:	vneg.f32	s15, s15
     77c:	vcvt.f32.f64	s12, d6
     780:	vmul.f32	s14, s14, s8
     784:	vmul.f32	s13, s9, s8
     788:	vstr	s15, [r4, #40]	; 0x28
     78c:	vcvt.f32.f64	s10, d5
     790:	vstr	s15, [r4, #52]	; 0x34
     794:	vstr	s15, [r4, #64]	; 0x40
     798:	vstr	s15, [r4, #76]	; 0x4c
     79c:	vstr	s15, [r4, #88]	; 0x58
     7a0:	vstr	s15, [r4, #100]	; 0x64
     7a4:	vstr	s15, [r4, #112]	; 0x70
     7a8:	vstr	s12, [r4, #56]	; 0x38
     7ac:	vstr	s12, [r4, #68]	; 0x44
     7b0:	vstr	s12, [r4, #104]	; 0x68
     7b4:	vstr	s12, [r4, #116]	; 0x74
     7b8:	vstr	s10, [r4, #48]	; 0x30
     7bc:	vstr	s10, [r4, #72]	; 0x48
     7c0:	vstr	s10, [r4, #96]	; 0x60
     7c4:	vstr	s10, [r4, #120]	; 0x78
     7c8:	vstr	s10, [r4, #144]	; 0x90
     7cc:	vstr	s15, [r4, #124]	; 0x7c
     7d0:	vstr	s15, [r4, #136]	; 0x88
     7d4:	vstr	s13, [r4, #32]
     7d8:	vstr	s13, [r4, #44]	; 0x2c
     7dc:	vstr	s13, [r4, #80]	; 0x50
     7e0:	vstr	s13, [r4, #92]	; 0x5c
     7e4:	vstr	s13, [r4, #128]	; 0x80
     7e8:	vstr	s13, [r4, #140]	; 0x8c
     7ec:	vstr	s14, [r4, #36]	; 0x24
     7f0:	vstr	s14, [r4, #60]	; 0x3c
     7f4:	vstr	s14, [r4, #84]	; 0x54
     7f8:	vstr	s14, [r4, #108]	; 0x6c
     7fc:	vstr	s14, [r4, #132]	; 0x84
     800:	vstr	s15, [r4, #148]	; 0x94
     804:	vstr	s10, [r4, #168]	; 0xa8
     808:	vstr	s12, [r4, #152]	; 0x98
     80c:	vstr	s12, [r4, #164]	; 0xa4
     810:	vstr	s14, [r4, #156]	; 0x9c
     814:	vstr	s15, [r4, #160]	; 0xa0
     818:	vstr	s15, [r4, #172]	; 0xac
     81c:	add	sp, #16
     81e:	vpop	{d8-d12}
     822:	pop	{r4, r5, r6, pc}
     824:	.word	0x3db851ec
     828:	.word	0x3e4ccccd
     82c:	.word	0x3e23d70a
     830:	.word	0x3d916873
     834:	.word	0x3d1ba5e3
     838:	.word	0x3d23d70a
     83c:	.word	0x3e1eb852
     840:	.word	0xbd916873
     844:	.word	0xbd23d70a
     848:	.word	0xbd1ba5e3
     84c:	.word	0xbe1eb852

00000850 <project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)>:

// CONSTRUCTORS

LegSwingController::LegSwingController(GaitConfig& gait_config_init, IMU& imu_init):
    gait_config(gait_config_init),
    imu(imu_init)
     850:	stmia.w	r0, {r1, r2}
{ }
     854:	bx	lr
     856:	nop

00000858 <project_namespace::Command::Command()>:
     858:	movs	r2, #0
     85a:	ldr	r1, [pc, #36]	; (880 <project_namespace::Command::Command()+0x28>)
     85c:	push	{r4, r5, r6}
     85e:	ldr	r6, [pc, #36]	; (884 <project_namespace::Command::Command()+0x2c>)
     860:	movs	r4, #0
     862:	ldr	r5, [pc, #36]	; (888 <project_namespace::Command::Command()+0x30>)
     864:	str	r6, [r0, #4]
     866:	str	r5, [r0, #40]	; 0x28
     868:	str	r4, [r0, #44]	; 0x2c
     86a:	str	r1, [r0, #0]
     86c:	str	r1, [r0, #8]
     86e:	str	r2, [r0, #12]
     870:	str	r2, [r0, #16]
     872:	str	r2, [r0, #20]
     874:	str	r2, [r0, #24]
     876:	str	r2, [r0, #28]
     878:	str	r2, [r0, #32]
     87a:	str	r2, [r0, #36]	; 0x24
     87c:	pop	{r4, r5, r6}
     87e:	bx	lr
     880:	.word	0x3e4ccccd
     884:	.word	0x3db851ec
     888:	.word	0x3dcccccd

0000088c <project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)>:
#include "MatrixPrinter.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitController::GaitController(Gait gait_init, FootTrajectory trajectory_shape_init, IMU& imu_init):
     88c:	push	{r3, r4, r5, lr}
    gait(gait_init),
    trajectory_shape(trajectory_shape_init),
    imu(imu_init),
    gait_config(GaitConfig(gait, trajectory_shape)),
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
     88e:	add.w	r5, r0, #16
#include "MatrixPrinter.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitController::GaitController(Gait gait_init, FootTrajectory trajectory_shape_init, IMU& imu_init):
     892:	mov	r4, r0
    gait(gait_init),
    trajectory_shape(trajectory_shape_init),
    imu(imu_init),
    gait_config(GaitConfig(gait, trajectory_shape)),
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
     894:	stmia.w	r0, {r1, r2, r3}
     898:	mov	r0, r5
     89a:	bl	468 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)>
     89e:	mov	r1, r5
     8a0:	add.w	r0, r4, #144	; 0x90
     8a4:	bl	408 <project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)>
     8a8:	mov	r1, r5
     8aa:	ldr	r2, [r4, #8]
     8ac:	add.w	r0, r4, #148	; 0x94
     8b0:	bl	850 <project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)>
{ }
     8b4:	mov	r0, r4
     8b6:	pop	{r3, r4, r5, pc}

000008b8 <TwoWire::available()>:
     8b8:	ldrb.w	r2, [r0, #59]	; 0x3b
     8bc:	ldrb.w	r0, [r0, #58]	; 0x3a
     8c0:	subs	r0, r2, r0
     8c2:	bx	lr

000008c4 <TwoWire::read()>:
     8c4:	ldrb.w	r3, [r0, #58]	; 0x3a
     8c8:	ldrb.w	r2, [r0, #59]	; 0x3b
     8cc:	cmp	r2, r3
     8ce:	bls.n	8dc <TwoWire::read()+0x18>
     8d0:	adds	r2, r3, #1
     8d2:	add	r3, r0
     8d4:	strb.w	r2, [r0, #58]	; 0x3a
     8d8:	ldrb	r0, [r3, #26]
     8da:	bx	lr
     8dc:	mov.w	r0, #4294967295
     8e0:	bx	lr
     8e2:	nop

000008e4 <BNO080::printHeader() [clone .part.7]>:
     8e4:	push	{r4, r5, r6, lr}
     8e6:	mov	r4, r0
     8e8:	ldr.w	r0, [r0, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8ec:	movs	r2, #7
     8ee:	ldr	r1, [pc, #80]	; (940 <BNO080::printHeader() [clone .part.7]+0x5c>)
     8f0:	ldr	r3, [r0, #0]
     8f2:	subs	r5, r4, #1
     8f4:	adds	r6, r4, #3
     8f6:	ldr	r3, [r3, #4]
     8f8:	blx	r3
     8fa:	ldr.w	r0, [r4, #184]	; 0xb8
     8fe:	movs	r2, #1
     900:	ldr	r1, [pc, #64]	; (944 <BNO080::printHeader() [clone .part.7]+0x60>)
     902:	ldr	r3, [r0, #0]
     904:	ldr	r3, [r3, #4]
     906:	blx	r3
     908:	ldrb.w	r1, [r5, #1]!
     90c:	cmp	r1, #15
     90e:	bls.n	92c <BNO080::printHeader() [clone .part.7]+0x48>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     910:	movs	r3, #0
     912:	movs	r2, #16
     914:	ldr.w	r0, [r4, #184]	; 0xb8
     918:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     91c:	cmp	r5, r6
     91e:	bne.n	8fa <BNO080::printHeader() [clone .part.7]+0x16>
     920:	ldr.w	r0, [r4, #184]	; 0xb8
     924:	ldmia.w	sp!, {r4, r5, r6, lr}
     928:	b.w	3abc <Print::println()>
     92c:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     930:	movs	r2, #1
     932:	ldr	r1, [pc, #20]	; (948 <BNO080::printHeader() [clone .part.7]+0x64>)
     934:	ldr	r3, [r0, #0]
     936:	ldr	r3, [r3, #4]
     938:	blx	r3
     93a:	ldrb	r1, [r5, #0]
     93c:	b.n	910 <BNO080::printHeader() [clone .part.7]+0x2c>
     93e:	nop
     940:	.word	0x20000098
     944:	.word	0x20000080
     948:	.word	0x200000a0

0000094c <BNO080::printPacket() [clone .part.6]>:
     94c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     950:	ldrb	r3, [r0, #0]
     952:	mov	r5, r0
     954:	ldrb	r7, [r0, #1]
     956:	subs	r6, r0, #1
     958:	ldr.w	r0, [r0, #184]	; 0xb8
     95c:	movs	r2, #7
     95e:	orr.w	r7, r3, r7, lsl #8
     962:	ldr	r1, [pc, #408]	; (afc <BNO080::printPacket() [clone .part.6]+0x1b0>)
     964:	ldr	r3, [r0, #0]
     966:	adds	r4, r5, #3
     968:	sxth	r7, r7
     96a:	ldr	r3, [r3, #4]
     96c:	uxth.w	r8, r7
     970:	blx	r3
     972:	ldr.w	r0, [r5, #184]	; 0xb8
     976:	movs	r2, #1
     978:	ldr	r1, [pc, #388]	; (b00 <BNO080::printPacket() [clone .part.6]+0x1b4>)
     97a:	ldr	r3, [r0, #0]
     97c:	ldr	r3, [r3, #4]
     97e:	blx	r3
     980:	ldrb.w	r1, [r6, #1]!
     984:	cmp	r1, #15
     986:	bls.n	9f4 <BNO080::printPacket() [clone .part.6]+0xa8>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     988:	movs	r3, #0
     98a:	movs	r2, #16
     98c:	ldr.w	r0, [r5, #184]	; 0xb8
     990:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     994:	cmp	r4, r6
     996:	bne.n	972 <BNO080::printPacket() [clone .part.6]+0x26>
     998:	subs	r6, r7, #4
     99a:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     99e:	movs	r2, #6
     9a0:	ldr	r1, [pc, #352]	; (b04 <BNO080::printPacket() [clone .part.6]+0x1b8>)
     9a2:	uxtb	r6, r6
     9a4:	ldr	r3, [r0, #0]
     9a6:	cmp	r6, #40	; 0x28
     9a8:	ldr	r3, [r3, #4]
     9aa:	it	cs
     9ac:	movcs	r6, #40	; 0x28
     9ae:	blx	r3
     9b0:	cbz	r6, a06 <BNO080::printPacket() [clone .part.6]+0xba>
     9b2:	subs	r6, #1
     9b4:	uxtb	r6, r6
     9b6:	adds	r6, #4
     9b8:	add	r6, r5
     9ba:	b.n	9cc <BNO080::printPacket() [clone .part.6]+0x80>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     9bc:	movs	r3, #0
     9be:	movs	r2, #16
     9c0:	ldr.w	r0, [r5, #184]	; 0xb8
     9c4:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     9c8:	cmp	r6, r4
     9ca:	beq.n	a06 <BNO080::printPacket() [clone .part.6]+0xba>
     9cc:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9d0:	movs	r2, #1
     9d2:	ldr	r1, [pc, #300]	; (b00 <BNO080::printPacket() [clone .part.6]+0x1b4>)
     9d4:	ldr	r3, [r0, #0]
     9d6:	ldr	r3, [r3, #4]
     9d8:	blx	r3
     9da:	ldrb.w	r1, [r4, #1]!
     9de:	cmp	r1, #15
     9e0:	bhi.n	9bc <BNO080::printPacket() [clone .part.6]+0x70>
     9e2:	ldr.w	r0, [r5, #184]	; 0xb8
     9e6:	movs	r2, #1
     9e8:	ldr	r1, [pc, #284]	; (b08 <BNO080::printPacket() [clone .part.6]+0x1bc>)
     9ea:	ldr	r3, [r0, #0]
     9ec:	ldr	r3, [r3, #4]
     9ee:	blx	r3
     9f0:	ldrb	r1, [r4, #0]
     9f2:	b.n	9bc <BNO080::printPacket() [clone .part.6]+0x70>
     9f4:	ldr.w	r0, [r5, #184]	; 0xb8
     9f8:	movs	r2, #1
     9fa:	ldr	r1, [pc, #268]	; (b08 <BNO080::printPacket() [clone .part.6]+0x1bc>)
     9fc:	ldr	r3, [r0, #0]
     9fe:	ldr	r3, [r3, #4]
     a00:	blx	r3
     a02:	ldrb	r1, [r6, #0]
     a04:	b.n	988 <BNO080::printPacket() [clone .part.6]+0x3c>
     a06:	cmp	r7, #0
     a08:	blt.n	a8a <BNO080::printPacket() [clone .part.6]+0x13e>
     a0a:	ldr.w	r0, [r5, #184]	; 0xb8
     a0e:	movs	r2, #8
     a10:	ldr	r1, [pc, #248]	; (b0c <BNO080::printPacket() [clone .part.6]+0x1c0>)
     a12:	ldr	r3, [r0, #0]
     a14:	ldr	r3, [r3, #4]
     a16:	blx	r3
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     a18:	mov	r1, r8
     a1a:	ldr.w	r0, [r5, #184]	; 0xb8
     a1e:	bl	3b5c <Print::print(long)>
     a22:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     a26:	ldr	r1, [pc, #232]	; (b10 <BNO080::printPacket() [clone .part.6]+0x1c4>)
     a28:	movs	r2, #9
     a2a:	ldr	r3, [r0, #0]
     a2c:	ldr	r3, [r3, #4]
     a2e:	blx	r3
     a30:	ldrb	r1, [r5, #2]
     a32:	cbz	r1, a60 <BNO080::printPacket() [clone .part.6]+0x114>
     a34:	cmp	r1, #1
     a36:	beq.n	ac0 <BNO080::printPacket() [clone .part.6]+0x174>
     a38:	cmp	r1, #2
     a3a:	beq.n	ada <BNO080::printPacket() [clone .part.6]+0x18e>
     a3c:	cmp	r1, #3
     a3e:	beq.n	a7a <BNO080::printPacket() [clone .part.6]+0x12e>
     a40:	cmp	r1, #4
     a42:	beq.n	aea <BNO080::printPacket() [clone .part.6]+0x19e>
     a44:	cmp	r1, #5
     a46:	beq.n	aa6 <BNO080::printPacket() [clone .part.6]+0x15a>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a48:	movs	r3, #0
     a4a:	movs	r2, #10
     a4c:	ldr.w	r0, [r5, #184]	; 0xb8
     a50:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a54:	ldr.w	r0, [r5, #184]	; 0xb8
     a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     a5c:	b.w	3abc <Print::println()>
     a60:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     a64:	movs	r2, #7
     a66:	ldr	r1, [pc, #172]	; (b14 <BNO080::printPacket() [clone .part.6]+0x1c8>)
     a68:	ldr	r3, [r0, #0]
     a6a:	ldr	r3, [r3, #4]
     a6c:	blx	r3
     a6e:	ldr.w	r0, [r5, #184]	; 0xb8
     a72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     a76:	b.w	3abc <Print::println()>
     a7a:	ldr.w	r0, [r5, #184]	; 0xb8
     a7e:	movs	r2, #13
     a80:	ldr	r1, [pc, #148]	; (b18 <BNO080::printPacket() [clone .part.6]+0x1cc>)
     a82:	ldr	r3, [r0, #0]
     a84:	ldr	r3, [r3, #4]
     a86:	blx	r3
     a88:	b.n	a54 <BNO080::printPacket() [clone .part.6]+0x108>
     a8a:	ldr.w	r4, [r5, #184]	; 0xb8
     a8e:	movs	r2, #20
     a90:	ldr	r1, [pc, #136]	; (b1c <BNO080::printPacket() [clone .part.6]+0x1d0>)
     a92:	ubfx	r8, r8, #0, #15
     a96:	ldr	r3, [r4, #0]
     a98:	mov	r0, r4
     a9a:	ldr	r3, [r3, #4]
     a9c:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     a9e:	mov	r0, r4
     aa0:	bl	3abc <Print::println()>
     aa4:	b.n	a0a <BNO080::printPacket() [clone .part.6]+0xbe>
     aa6:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     aaa:	movs	r2, #11
     aac:	ldr	r1, [pc, #112]	; (b20 <BNO080::printPacket() [clone .part.6]+0x1d4>)
     aae:	ldr	r3, [r0, #0]
     ab0:	ldr	r3, [r3, #4]
     ab2:	blx	r3
     ab4:	ldr.w	r0, [r5, #184]	; 0xb8
     ab8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     abc:	b.w	3abc <Print::println()>
     ac0:	ldr.w	r0, [r5, #184]	; 0xb8
     ac4:	movs	r2, #10
     ac6:	ldr	r1, [pc, #92]	; (b24 <BNO080::printPacket() [clone .part.6]+0x1d8>)
     ac8:	ldr	r3, [r0, #0]
     aca:	ldr	r3, [r3, #4]
     acc:	blx	r3
     ace:	ldr.w	r0, [r5, #184]	; 0xb8
     ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     ad6:	b.w	3abc <Print::println()>
     ada:	ldr.w	r0, [r5, #184]	; 0xb8
     ade:	movs	r2, #7
     ae0:	ldr	r1, [pc, #68]	; (b28 <BNO080::printPacket() [clone .part.6]+0x1dc>)
     ae2:	ldr	r3, [r0, #0]
     ae4:	ldr	r3, [r3, #4]
     ae6:	blx	r3
     ae8:	b.n	a54 <BNO080::printPacket() [clone .part.6]+0x108>
     aea:	ldr.w	r0, [r5, #184]	; 0xb8
     aee:	movs	r2, #11
     af0:	ldr	r1, [pc, #56]	; (b2c <BNO080::printPacket() [clone .part.6]+0x1e0>)
     af2:	ldr	r3, [r0, #0]
     af4:	ldr	r3, [r3, #4]
     af6:	blx	r3
     af8:	b.n	a54 <BNO080::printPacket() [clone .part.6]+0x108>
     afa:	nop
     afc:	.word	0x20000098
     b00:	.word	0x20000080
     b04:	.word	0x200000a4
     b08:	.word	0x200000a0
     b0c:	.word	0x200000c4
     b10:	.word	0x200000d0
     b14:	.word	0x200000dc
     b18:	.word	0x200000f8
     b1c:	.word	0x200000ac
     b20:	.word	0x20000114
     b24:	.word	0x200000e4
     b28:	.word	0x200000f0
     b2c:	.word	0x20000108

00000b30 <BNO080::parseInputReport()>:
     b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b34:	ldrb	r2, [r0, #1]
     b36:	ldrb	r3, [r0, #0]
     b38:	ldr.w	r1, [r0, #5]
     b3c:	orr.w	r3, r3, r2, lsl #8
     b40:	ldrb	r2, [r0, #2]
     b42:	str.w	r1, [r0, #256]	; 0x100
     b46:	cmp	r2, #5
     b48:	ubfx	r3, r3, #0, #15
     b4c:	ldrb	r1, [r0, #8]
     b4e:	ldrb	r6, [r0, #7]
     b50:	ldrb	r5, [r0, #6]
     b52:	ldrb	r4, [r0, #5]
     b54:	beq.n	c22 <BNO080::parseInputReport()+0xf2>
     b56:	subs	r3, #4
     b58:	ldrb.w	lr, [r0, #11]
     b5c:	ldrb	r6, [r0, #14]
     b5e:	sxth	r3, r3
     b60:	ldrb	r7, [r0, #13]
     b62:	ldrb	r5, [r0, #15]
     b64:	and.w	r8, lr, #3
     b68:	ldrb	r4, [r0, #16]
     b6a:	cmp	r3, #14
     b6c:	ldrb.w	r9, [r0, #18]
     b70:	orr.w	ip, r7, r6, lsl #8
     b74:	ldrb	r2, [r0, #17]
     b76:	orr.w	r4, r5, r4, lsl #8
     b7a:	orr.w	r9, r2, r9, lsl #8
     b7e:	bgt.n	bd6 <BNO080::parseInputReport()+0xa6>
     b80:	movs	r2, #0
     b82:	mov	r1, r2
     b84:	ldrb	r3, [r0, #9]
     b86:	cmp	r3, #1
     b88:	beq.n	bf2 <BNO080::parseInputReport()+0xc2>
     b8a:	cmp	r3, #4
     b8c:	beq.n	c76 <BNO080::parseInputReport()+0x146>
     b8e:	cmp	r3, #2
     b90:	beq.n	c8a <BNO080::parseInputReport()+0x15a>
     b92:	cmp	r3, #3
     b94:	beq.w	c9e <BNO080::parseInputReport()+0x16e>
     b98:	cmp	r3, #8
     b9a:	it	ne
     b9c:	cmpne	r3, #5
     b9e:	beq.n	c06 <BNO080::parseInputReport()+0xd6>
     ba0:	sub.w	sl, r3, #40	; 0x28
     ba4:	cmp.w	sl, #1
     ba8:	bls.n	c06 <BNO080::parseInputReport()+0xd6>
     baa:	cmp	r3, #17
     bac:	beq.w	cb2 <BNO080::parseInputReport()+0x182>
     bb0:	cmp	r3, #19
     bb2:	beq.w	cf0 <BNO080::parseInputReport()+0x1c0>
     bb6:	cmp	r3, #30
     bb8:	beq.w	cca <BNO080::parseInputReport()+0x19a>
     bbc:	cmp	r3, #20
     bbe:	beq.w	cf8 <BNO080::parseInputReport()+0x1c8>
     bc2:	cmp	r3, #21
     bc4:	beq.w	d20 <BNO080::parseInputReport()+0x1f0>
     bc8:	cmp	r3, #22
     bca:	beq.n	cba <BNO080::parseInputReport()+0x18a>
     bcc:	cmp	r3, #241	; 0xf1
     bce:	beq.w	d08 <BNO080::parseInputReport()+0x1d8>
     bd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bd6:	ldrb	r1, [r0, #20]
     bd8:	cmp	r3, #16
     bda:	ldrb	r2, [r0, #19]
     bdc:	orr.w	r2, r2, r1, lsl #8
     be0:	ble.w	d6e <BNO080::parseInputReport()+0x23e>
     be4:	ldrb	r3, [r0, #21]
     be6:	ldrb	r1, [r0, #22]
     be8:	orr.w	r1, r3, r1, lsl #8
     bec:	ldrb	r3, [r0, #9]
     bee:	cmp	r3, #1
     bf0:	bne.n	b8a <BNO080::parseInputReport()+0x5a>
     bf2:	strh.w	r8, [r0, #210]	; 0xd2
     bf6:	strh.w	ip, [r0, #204]	; 0xcc
     bfa:	strh.w	r4, [r0, #206]	; 0xce
     bfe:	strh.w	r9, [r0, #208]	; 0xd0
     c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c06:	strh.w	r8, [r0, #246]	; 0xf6
     c0a:	strh.w	ip, [r0, #236]	; 0xec
     c0e:	strh.w	r4, [r0, #238]	; 0xee
     c12:	strh.w	r9, [r0, #240]	; 0xf0
     c16:	strh.w	r2, [r0, #242]	; 0xf2
     c1a:	strh.w	r1, [r0, #244]	; 0xf4
     c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c22:	ldrb	r2, [r0, #4]
     c24:	orr.w	r5, r5, r6, lsl #8
     c28:	ldrb	r3, [r0, #9]
     c2a:	orr.w	r4, r2, r4, lsl #8
     c2e:	ldrb	r7, [r0, #11]
     c30:	ldrb	r2, [r0, #10]
     c32:	orr.w	r1, r1, r3, lsl #8
     c36:	ldrb	r6, [r0, #13]
     c38:	ldrb	r3, [r0, #12]
     c3a:	orr.w	r7, r2, r7, lsl #8
     c3e:	ldrb.w	ip, [r0, #15]
     c42:	orr.w	r6, r3, r6, lsl #8
     c46:	ldrb	r2, [r0, #14]
     c48:	ldrb.w	lr, [r0, #17]
     c4c:	ldrb	r3, [r0, #16]
     c4e:	orr.w	r2, r2, ip, lsl #8
     c52:	strh.w	r5, [r0, #238]	; 0xee
     c56:	orr.w	r3, r3, lr, lsl #8
     c5a:	strh.w	r4, [r0, #236]	; 0xec
     c5e:	strh.w	r1, [r0, #240]	; 0xf0
     c62:	strh.w	r7, [r0, #242]	; 0xf2
     c66:	strh.w	r6, [r0, #248]	; 0xf8
     c6a:	strh.w	r2, [r0, #250]	; 0xfa
     c6e:	strh.w	r3, [r0, #252]	; 0xfc
     c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c76:	strh.w	r8, [r0, #218]	; 0xda
     c7a:	strh.w	ip, [r0, #212]	; 0xd4
     c7e:	strh.w	r4, [r0, #214]	; 0xd6
     c82:	strh.w	r9, [r0, #216]	; 0xd8
     c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c8a:	strh.w	r8, [r0, #226]	; 0xe2
     c8e:	strh.w	ip, [r0, #220]	; 0xdc
     c92:	strh.w	r4, [r0, #222]	; 0xde
     c96:	strh.w	r9, [r0, #224]	; 0xe0
     c9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c9e:	strh.w	r8, [r0, #234]	; 0xea
     ca2:	strh.w	ip, [r0, #228]	; 0xe4
     ca6:	strh.w	r4, [r0, #230]	; 0xe6
     caa:	strh.w	r9, [r0, #232]	; 0xe8
     cae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cb2:	strh.w	r9, [r0, #254]	; 0xfe
     cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cba:	strh.w	ip, [r0, #282]	; 0x11a
     cbe:	strh.w	r4, [r0, #284]	; 0x11c
     cc2:	strh.w	r9, [r0, #286]	; 0x11e
     cc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cca:	mvn.w	r1, #14
     cce:	add.w	r2, r0, #15
     cd2:	add.w	r4, r0, #23
     cd6:	strb.w	r6, [r0, #261]	; 0x105
     cda:	subs	r1, r1, r0
     cdc:	b.n	ce2 <BNO080::parseInputReport()+0x1b2>
     cde:	ldrb.w	r5, [r2, #1]!
     ce2:	ldr.w	r3, [r0, #264]	; 0x108
     ce6:	cmp	r2, r4
     ce8:	add	r3, r2
     cea:	strb	r5, [r3, r1]
     cec:	bne.n	cde <BNO080::parseInputReport()+0x1ae>
     cee:	b.n	bd2 <BNO080::parseInputReport()+0xa2>
     cf0:	strb.w	r7, [r0, #260]	; 0x104
     cf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cf8:	strh.w	ip, [r0, #270]	; 0x10e
     cfc:	strh.w	r4, [r0, #272]	; 0x110
     d00:	strh.w	r9, [r0, #274]	; 0x112
     d04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d08:	ldrb.w	r3, [r0, #188]	; 0xbc
     d0c:	mov	r4, r0
     d0e:	cbnz	r3, d30 <BNO080::parseInputReport()+0x200>
     d10:	cmp.w	lr, #7
     d14:	bne.w	bd2 <BNO080::parseInputReport()+0xa2>
     d18:	strb.w	r6, [r4, #268]	; 0x10c
     d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d20:	strh.w	ip, [r0, #276]	; 0x114
     d24:	strh.w	r4, [r0, #278]	; 0x116
     d28:	strh.w	r9, [r0, #280]	; 0x118
     d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d30:	ldr.w	r5, [r0, #184]	; 0xb8
     d34:	movs	r2, #1
     d36:	ldr	r1, [pc, #60]	; (d74 <BNO080::parseInputReport()+0x244>)
     d38:	ldr	r3, [r5, #0]
     d3a:	mov	r0, r5
     d3c:	ldr	r3, [r3, #4]
     d3e:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     d40:	mov	r0, r5
     d42:	bl	3abc <Print::println()>
     d46:	ldrb	r3, [r4, #11]
     d48:	cmp	r3, #7
     d4a:	bne.w	bd2 <BNO080::parseInputReport()+0xa2>
     d4e:	ldrb.w	r3, [r4, #188]	; 0xbc
     d52:	cbz	r3, d6a <BNO080::parseInputReport()+0x23a>
     d54:	ldr.w	r5, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     d58:	movs	r2, #20
     d5a:	ldr	r1, [pc, #28]	; (d78 <BNO080::parseInputReport()+0x248>)
     d5c:	ldr	r3, [r5, #0]
     d5e:	mov	r0, r5
     d60:	ldr	r3, [r3, #4]
     d62:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     d64:	mov	r0, r5
     d66:	bl	3abc <Print::println()>
     d6a:	ldrb	r6, [r4, #14]
     d6c:	b.n	d18 <BNO080::parseInputReport()+0x1e8>
     d6e:	movs	r1, #0
     d70:	b.n	b84 <BNO080::parseInputReport()+0x54>
     d72:	nop
     d74:	.word	0x20000120
     d78:	.word	0x20000124

00000d7c <BNO080::getQuatI()>:
     d7c:	push	{r3, lr}
     d7e:	ldrsh.w	r2, [r0, #236]	; 0xec
     d82:	vmov.f64	d0, #0	; 0x40000000  2.0
     d86:	ldrb.w	r3, [r0, #288]	; 0x120
     d8a:	vmov	s14, r2
     d8e:	negs	r3, r3
     d90:	vpush	{d8}
     d94:	vmov	s2, r3
     d98:	vcvt.f32.s32	s16, s14
     d9c:	vcvt.f64.s32	d1, s2
     da0:	bl	3e88 <pow>
     da4:	vcvt.f64.f32	d7, s16
     da8:	vpop	{d8}
     dac:	vmul.f64	d0, d7, d0
     db0:	vcvt.f32.f64	s0, d0
     db4:	pop	{r3, pc}
     db6:	nop

00000db8 <BNO080::getQuatJ()>:
     db8:	push	{r3, lr}
     dba:	ldrsh.w	r2, [r0, #238]	; 0xee
     dbe:	vmov.f64	d0, #0	; 0x40000000  2.0
     dc2:	ldrb.w	r3, [r0, #288]	; 0x120
     dc6:	vmov	s14, r2
     dca:	negs	r3, r3
     dcc:	vpush	{d8}
     dd0:	vmov	s2, r3
     dd4:	vcvt.f32.s32	s16, s14
     dd8:	vcvt.f64.s32	d1, s2
     ddc:	bl	3e88 <pow>
     de0:	vcvt.f64.f32	d7, s16
     de4:	vpop	{d8}
     de8:	vmul.f64	d0, d7, d0
     dec:	vcvt.f32.f64	s0, d0
     df0:	pop	{r3, pc}
     df2:	nop

00000df4 <BNO080::getQuatK()>:
     df4:	push	{r3, lr}
     df6:	ldrsh.w	r2, [r0, #240]	; 0xf0
     dfa:	vmov.f64	d0, #0	; 0x40000000  2.0
     dfe:	ldrb.w	r3, [r0, #288]	; 0x120
     e02:	vmov	s14, r2
     e06:	negs	r3, r3
     e08:	vpush	{d8}
     e0c:	vmov	s2, r3
     e10:	vcvt.f32.s32	s16, s14
     e14:	vcvt.f64.s32	d1, s2
     e18:	bl	3e88 <pow>
     e1c:	vcvt.f64.f32	d7, s16
     e20:	vpop	{d8}
     e24:	vmul.f64	d0, d7, d0
     e28:	vcvt.f32.f64	s0, d0
     e2c:	pop	{r3, pc}
     e2e:	nop

00000e30 <BNO080::getQuatReal()>:
     e30:	push	{r3, lr}
     e32:	ldrsh.w	r2, [r0, #242]	; 0xf2
     e36:	vmov.f64	d0, #0	; 0x40000000  2.0
     e3a:	ldrb.w	r3, [r0, #288]	; 0x120
     e3e:	vmov	s14, r2
     e42:	negs	r3, r3
     e44:	vpush	{d8}
     e48:	vmov	s2, r3
     e4c:	vcvt.f32.s32	s16, s14
     e50:	vcvt.f64.s32	d1, s2
     e54:	bl	3e88 <pow>
     e58:	vcvt.f64.f32	d7, s16
     e5c:	vpop	{d8}
     e60:	vmul.f64	d0, d7, d0
     e64:	vcvt.f32.f64	s0, d0
     e68:	pop	{r3, pc}
     e6a:	nop

00000e6c <BNO080::getQuatRadianAccuracy()>:
     e6c:	push	{r3, lr}
     e6e:	ldrsh.w	r2, [r0, #244]	; 0xf4
     e72:	vmov.f64	d0, #0	; 0x40000000  2.0
     e76:	ldrb.w	r3, [r0, #290]	; 0x122
     e7a:	vmov	s14, r2
     e7e:	negs	r3, r3
     e80:	vpush	{d8}
     e84:	vmov	s2, r3
     e88:	vcvt.f32.s32	s16, s14
     e8c:	vcvt.f64.s32	d1, s2
     e90:	bl	3e88 <pow>
     e94:	vcvt.f64.f32	d7, s16
     e98:	vpop	{d8}
     e9c:	vmul.f64	d0, d7, d0
     ea0:	vcvt.f32.f64	s0, d0
     ea4:	pop	{r3, pc}
     ea6:	nop

00000ea8 <BNO080::waitForI2C()>:
     ea8:	push	{r4, r5, r6, lr}
     eaa:	mov	r5, r0
     eac:	movs	r4, #100	; 0x64
     eae:	ldr	r6, [pc, #92]	; (f0c <BNO080::waitForI2C()+0x64>)
     eb0:	b.n	ece <BNO080::waitForI2C()+0x26>
     eb2:	ldrb.w	r3, [r0, #59]	; 0x3b
     eb6:	ldrb.w	r2, [r0, #58]	; 0x3a
     eba:	movs	r0, #1
     ebc:	subs	r3, r3, r2
     ebe:	cmp	r3, #0
     ec0:	bgt.n	ee4 <BNO080::waitForI2C()+0x3c>
     ec2:	bl	3318 <delay>
     ec6:	subs	r3, r4, #1
     ec8:	ands.w	r4, r3, #255	; 0xff
     ecc:	beq.n	ee8 <BNO080::waitForI2C()+0x40>
     ece:	ldr.w	r0, [r5, #176]	; 0xb0
     ed2:	ldr	r3, [r0, #0]
     ed4:	ldr	r3, [r3, #16]
     ed6:	cmp	r3, r6
     ed8:	beq.n	eb2 <BNO080::waitForI2C()+0xa>
     eda:	blx	r3
     edc:	mov	r3, r0
     ede:	movs	r0, #1
     ee0:	cmp	r3, #0
     ee2:	ble.n	ec2 <BNO080::waitForI2C()+0x1a>
     ee4:	movs	r0, #1
     ee6:	pop	{r4, r5, r6, pc}
     ee8:	ldrb.w	r0, [r5, #188]	; 0xbc
     eec:	cmp	r0, #0
     eee:	beq.n	ee6 <BNO080::waitForI2C()+0x3e>
     ef0:	ldr.w	r5, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     ef4:	movs	r2, #11
     ef6:	ldr	r1, [pc, #24]	; (f10 <BNO080::waitForI2C()+0x68>)
     ef8:	ldr	r3, [r5, #0]
     efa:	mov	r0, r5
     efc:	ldr	r3, [r3, #4]
     efe:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     f00:	mov	r0, r5
     f02:	bl	3abc <Print::println()>
     f06:	mov	r0, r4
     f08:	pop	{r4, r5, r6, pc}
     f0a:	nop
     f0c:	.word	0x000008b9
     f10:	.word	0x2000013c

00000f14 <BNO080::waitForSPI()>:
     f14:	push	{r4, r5, r6, lr}
     f16:	mov	r5, r0
     f18:	movs	r4, #125	; 0x7d
     f1a:	b.n	f2a <BNO080::waitForSPI()+0x16>
     f1c:	movs	r0, #1
     f1e:	bl	3318 <delay>
     f22:	subs	r3, r4, #1
     f24:	ands.w	r4, r3, #255	; 0xff
     f28:	beq.n	f58 <BNO080::waitForSPI()+0x44>
     f2a:	ldrb.w	r0, [r5, #202]	; 0xca
     f2e:	bl	370c <digitalRead>
     f32:	cbz	r0, f54 <BNO080::waitForSPI()+0x40>
     f34:	ldrb.w	r3, [r5, #188]	; 0xbc
     f38:	cmp	r3, #0
     f3a:	beq.n	f1c <BNO080::waitForSPI()+0x8>
     f3c:	ldr.w	r6, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f40:	movs	r2, #8
     f42:	ldr	r1, [pc, #56]	; (f7c <BNO080::waitForSPI()+0x68>)
     f44:	ldr	r3, [r6, #0]
     f46:	mov	r0, r6
     f48:	ldr	r3, [r3, #4]
     f4a:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     f4c:	mov	r0, r6
     f4e:	bl	3abc <Print::println()>
     f52:	b.n	f1c <BNO080::waitForSPI()+0x8>
     f54:	movs	r0, #1
     f56:	pop	{r4, r5, r6, pc}
     f58:	ldrb.w	r0, [r5, #188]	; 0xbc
     f5c:	cmp	r0, #0
     f5e:	beq.n	f56 <BNO080::waitForSPI()+0x42>
     f60:	ldr.w	r5, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f64:	movs	r2, #15
     f66:	ldr	r1, [pc, #24]	; (f80 <BNO080::waitForSPI()+0x6c>)
     f68:	ldr	r3, [r5, #0]
     f6a:	mov	r0, r5
     f6c:	ldr	r3, [r3, #4]
     f6e:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     f70:	mov	r0, r5
     f72:	bl	3abc <Print::println()>
     f76:	mov	r0, r4
     f78:	pop	{r4, r5, r6, pc}
     f7a:	nop
     f7c:	.word	0x20000148
     f80:	.word	0x20000154

00000f84 <BNO080::getData(unsigned short)>:
     f84:	cmp	r1, #0
     f86:	beq.w	10ca <BNO080::getData(unsigned short)+0x146>
     f8a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f8e:	mov	r6, r0
     f90:	mov	r9, r1
     f92:	movs	r5, #0
     f94:	ldr	r7, [pc, #312]	; (10d0 <BNO080::getData(unsigned short)+0x14c>)
     f96:	cmp.w	r9, #28
     f9a:	mov	r8, r9
     f9c:	mov.w	r3, #1
     fa0:	ldrb.w	r1, [r6, #180]	; 0xb4
     fa4:	it	cs
     fa6:	movcs.w	r8, #28
     faa:	ldr.w	r0, [r6, #176]	; 0xb0
     fae:	add.w	r2, r8, #4
     fb2:	uxtb	r2, r2
     fb4:	bl	1c64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
     fb8:	mov	r0, r6
     fba:	bl	ea8 <BNO080::waitForI2C()>
     fbe:	cmp	r0, #0
     fc0:	beq.w	10c6 <BNO080::getData(unsigned short)+0x142>
     fc4:	ldr.w	r0, [r6, #176]	; 0xb0
     fc8:	ldr	r3, [r0, #0]
     fca:	ldr	r3, [r3, #20]
     fcc:	cmp	r3, r7
     fce:	bne.n	10ba <BNO080::getData(unsigned short)+0x136>
     fd0:	ldrb.w	r2, [r0, #58]	; 0x3a
     fd4:	ldrb.w	r1, [r0, #59]	; 0x3b
     fd8:	cmp	r1, r2
     fda:	bls.n	fea <BNO080::getData(unsigned short)+0x66>
     fdc:	adds	r2, #1
     fde:	strb.w	r2, [r0, #58]	; 0x3a
     fe2:	ldr.w	r0, [r6, #176]	; 0xb0
     fe6:	ldr	r3, [r0, #0]
     fe8:	ldr	r3, [r3, #20]
     fea:	cmp	r3, r7
     fec:	bne.n	10ae <BNO080::getData(unsigned short)+0x12a>
     fee:	ldrb.w	r2, [r0, #58]	; 0x3a
     ff2:	ldrb.w	r1, [r0, #59]	; 0x3b
     ff6:	cmp	r1, r2
     ff8:	bls.n	109e <BNO080::getData(unsigned short)+0x11a>
     ffa:	adds	r2, #1
     ffc:	strb.w	r2, [r0, #58]	; 0x3a
    1000:	ldr.w	r0, [r6, #176]	; 0xb0
    1004:	ldr	r3, [r0, #0]
    1006:	ldr	r3, [r3, #20]
    1008:	cmp	r3, r7
    100a:	bne.n	10aa <BNO080::getData(unsigned short)+0x126>
    100c:	ldrb.w	r2, [r0, #58]	; 0x3a
    1010:	ldrb.w	r1, [r0, #59]	; 0x3b
    1014:	cmp	r1, r2
    1016:	bls.n	109e <BNO080::getData(unsigned short)+0x11a>
    1018:	adds	r2, #1
    101a:	strb.w	r2, [r0, #58]	; 0x3a
    101e:	ldr.w	r0, [r6, #176]	; 0xb0
    1022:	ldr	r3, [r0, #0]
    1024:	ldr	r3, [r3, #20]
    1026:	cmp	r3, r7
    1028:	bne.n	10a2 <BNO080::getData(unsigned short)+0x11e>
    102a:	ldrb.w	r3, [r0, #58]	; 0x3a
    102e:	ldrb.w	r2, [r0, #59]	; 0x3b
    1032:	cmp	r2, r3
    1034:	bls.n	1040 <BNO080::getData(unsigned short)+0xbc>
    1036:	adds	r3, #1
    1038:	strb.w	r3, [r0, #58]	; 0x3a
    103c:	ldr.w	r0, [r6, #176]	; 0xb0
    1040:	movs	r4, #0
    1042:	b.n	1078 <BNO080::getData(unsigned short)+0xf4>
    1044:	ldrb.w	r3, [r0, #58]	; 0x3a
    1048:	ldrb.w	r2, [r0, #59]	; 0x3b
    104c:	add.w	lr, r3, #1
    1050:	adds	r1, r0, r3
    1052:	cmp	r2, r3
    1054:	bls.n	109a <BNO080::getData(unsigned short)+0x116>
    1056:	strb.w	lr, [r0, #58]	; 0x3a
    105a:	ldrb	r0, [r1, #26]
    105c:	adds	r4, #1
    105e:	cmp	r5, #127	; 0x7f
    1060:	add.w	r2, r5, #1
    1064:	add.w	r3, r6, r5
    1068:	uxtb	r4, r4
    106a:	bhi.n	1070 <BNO080::getData(unsigned short)+0xec>
    106c:	uxth	r5, r2
    106e:	strb	r0, [r3, #4]
    1070:	cmp	r4, r8
    1072:	bcs.n	1086 <BNO080::getData(unsigned short)+0x102>
    1074:	ldr.w	r0, [r6, #176]	; 0xb0
    1078:	ldr	r3, [r0, #0]
    107a:	ldr	r3, [r3, #20]
    107c:	cmp	r3, r7
    107e:	beq.n	1044 <BNO080::getData(unsigned short)+0xc0>
    1080:	blx	r3
    1082:	uxtb	r0, r0
    1084:	b.n	105c <BNO080::getData(unsigned short)+0xd8>
    1086:	rsb	r9, r8, r9
    108a:	uxth.w	r9, r9
    108e:	cmp.w	r9, #0
    1092:	bne.n	f96 <BNO080::getData(unsigned short)+0x12>
    1094:	movs	r0, #1
    1096:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    109a:	movs	r0, #255	; 0xff
    109c:	b.n	105c <BNO080::getData(unsigned short)+0xd8>
    109e:	cmp	r3, r7
    10a0:	beq.n	1040 <BNO080::getData(unsigned short)+0xbc>
    10a2:	blx	r3
    10a4:	ldr.w	r0, [r6, #176]	; 0xb0
    10a8:	b.n	1040 <BNO080::getData(unsigned short)+0xbc>
    10aa:	blx	r3
    10ac:	b.n	101e <BNO080::getData(unsigned short)+0x9a>
    10ae:	blx	r3
    10b0:	ldr.w	r0, [r6, #176]	; 0xb0
    10b4:	ldr	r3, [r0, #0]
    10b6:	ldr	r3, [r3, #20]
    10b8:	b.n	1008 <BNO080::getData(unsigned short)+0x84>
    10ba:	blx	r3
    10bc:	ldr.w	r0, [r6, #176]	; 0xb0
    10c0:	ldr	r3, [r0, #0]
    10c2:	ldr	r3, [r3, #20]
    10c4:	b.n	fea <BNO080::getData(unsigned short)+0x66>
    10c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    10ca:	movs	r0, #1
    10cc:	bx	lr
    10ce:	nop
    10d0:	.word	0x000008c5

000010d4 <BNO080::receivePacket()>:
    10d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10d8:	mov	r4, r0
    10da:	ldr.w	r0, [r0, #176]	; 0xb0
    10de:	cmp	r0, #0
    10e0:	beq.n	11d6 <BNO080::receivePacket()+0x102>
    10e2:	movs	r3, #1
    10e4:	movs	r2, #4
    10e6:	ldrb.w	r1, [r4, #180]	; 0xb4
    10ea:	bl	1c64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    10ee:	mov	r0, r4
    10f0:	bl	ea8 <BNO080::waitForI2C()>
    10f4:	mov	r5, r0
    10f6:	cbnz	r0, 1100 <BNO080::receivePacket()+0x2c>
    10f8:	movs	r5, #0
    10fa:	mov	r0, r5
    10fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1100:	ldr.w	r3, [r4, #176]	; 0xb0
    1104:	ldr	r7, [pc, #592]	; (1358 <BNO080::receivePacket()+0x284>)
    1106:	ldr	r2, [r3, #0]
    1108:	ldr	r2, [r2, #20]
    110a:	cmp	r2, r7
    110c:	bne.w	1316 <BNO080::receivePacket()+0x242>
    1110:	ldrb.w	r1, [r3, #58]	; 0x3a
    1114:	ldrb.w	r0, [r3, #59]	; 0x3b
    1118:	cmp	r0, r1
    111a:	bls.w	140e <BNO080::receivePacket()+0x33a>
    111e:	adds	r2, r1, #1
    1120:	add	r1, r3
    1122:	strb.w	r2, [r3, #58]	; 0x3a
    1126:	ldr.w	r3, [r4, #176]	; 0xb0
    112a:	ldrb.w	r9, [r1, #26]
    112e:	ldr	r2, [r3, #0]
    1130:	sxth.w	sl, r9
    1134:	ldr	r2, [r2, #20]
    1136:	cmp	r2, r7
    1138:	bne.w	132c <BNO080::receivePacket()+0x258>
    113c:	ldrb.w	r0, [r3, #58]	; 0x3a
    1140:	ldrb.w	r1, [r3, #59]	; 0x3b
    1144:	cmp	r1, r0
    1146:	bls.w	1416 <BNO080::receivePacket()+0x342>
    114a:	adds	r2, r0, #1
    114c:	add	r0, r3
    114e:	strb.w	r2, [r3, #58]	; 0x3a
    1152:	ldrb.w	fp, [r0, #26]
    1156:	ldr.w	r3, [r4, #176]	; 0xb0
    115a:	mov.w	r1, fp, lsl #8
    115e:	ldr	r2, [r3, #0]
    1160:	sxth	r6, r1
    1162:	ldr	r2, [r2, #20]
    1164:	cmp	r2, r7
    1166:	bne.w	134e <BNO080::receivePacket()+0x27a>
    116a:	ldrb.w	r1, [r3, #58]	; 0x3a
    116e:	ldrb.w	r0, [r3, #59]	; 0x3b
    1172:	cmp	r0, r1
    1174:	bls.w	141e <BNO080::receivePacket()+0x34a>
    1178:	adds	r2, r1, #1
    117a:	add	r1, r3
    117c:	strb.w	r2, [r3, #58]	; 0x3a
    1180:	ldrb	r0, [r1, #26]
    1182:	ldr.w	r3, [r4, #176]	; 0xb0
    1186:	uxtb.w	r8, r0
    118a:	ldr	r2, [r3, #0]
    118c:	ldr	r2, [r2, #20]
    118e:	cmp	r2, r7
    1190:	bne.w	1346 <BNO080::receivePacket()+0x272>
    1194:	ldrb.w	r2, [r3, #58]	; 0x3a
    1198:	ldrb.w	r1, [r3, #59]	; 0x3b
    119c:	cmp	r1, r2
    119e:	bls.w	1428 <BNO080::receivePacket()+0x354>
    11a2:	adds	r1, r2, #1
    11a4:	add	r2, r3
    11a6:	strb.w	r1, [r3, #58]	; 0x3a
    11aa:	ldrb	r0, [r2, #26]
    11ac:	orr.w	r1, r6, sl
    11b0:	strb.w	r9, [r4]
    11b4:	strb.w	fp, [r4, #1]
    11b8:	ubfx	r1, r1, #0, #15
    11bc:	strb.w	r8, [r4, #2]
    11c0:	strb	r0, [r4, #3]
    11c2:	cmp	r1, #0
    11c4:	beq.n	10f8 <BNO080::receivePacket()+0x24>
    11c6:	subs	r1, #4
    11c8:	mov	r0, r4
    11ca:	uxth	r1, r1
    11cc:	bl	f84 <BNO080::getData(unsigned short)>
    11d0:	mov	r0, r5
    11d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11d6:	ldrb.w	r0, [r4, #202]	; 0xca
    11da:	bl	370c <digitalRead>
    11de:	cmp	r0, #1
    11e0:	beq.n	10f8 <BNO080::receivePacket()+0x24>
    11e2:	ldr.w	r3, [r4, #192]	; 0xc0
    11e6:	ldr.w	r0, [r4, #196]	; 0xc4
    11ea:	ldrb	r2, [r3, #19]
    11ec:	cmp	r2, #0
    11ee:	beq.n	124e <BNO080::receivePacket()+0x17a>
    11f0:	cpsid	i
    11f2:	ldrb	r2, [r3, #19]
    11f4:	lsls	r7, r2, #31
    11f6:	bpl.n	1206 <BNO080::receivePacket()+0x132>
    11f8:	ldr	r1, [pc, #352]	; (135c <BNO080::receivePacket()+0x288>)
    11fa:	ldr	r2, [r3, #20]
    11fc:	ldr	r5, [r1, #0]
    11fe:	ands	r2, r5
    1200:	str	r2, [r3, #40]	; 0x28
    1202:	str	r2, [r1, #0]
    1204:	ldrb	r2, [r3, #19]
    1206:	lsls	r6, r2, #30
    1208:	bpl.n	1218 <BNO080::receivePacket()+0x144>
    120a:	ldr	r1, [pc, #340]	; (1360 <BNO080::receivePacket()+0x28c>)
    120c:	ldr	r2, [r3, #24]
    120e:	ldr	r5, [r1, #0]
    1210:	ands	r2, r5
    1212:	str	r2, [r3, #44]	; 0x2c
    1214:	str	r2, [r1, #0]
    1216:	ldrb	r2, [r3, #19]
    1218:	lsls	r5, r2, #29
    121a:	bpl.n	122a <BNO080::receivePacket()+0x156>
    121c:	ldr	r1, [pc, #324]	; (1364 <BNO080::receivePacket()+0x290>)
    121e:	ldr	r2, [r3, #28]
    1220:	ldr	r5, [r1, #0]
    1222:	ands	r2, r5
    1224:	str	r2, [r3, #48]	; 0x30
    1226:	str	r2, [r1, #0]
    1228:	ldrb	r2, [r3, #19]
    122a:	lsls	r1, r2, #28
    122c:	bpl.n	123c <BNO080::receivePacket()+0x168>
    122e:	ldr	r1, [pc, #312]	; (1368 <BNO080::receivePacket()+0x294>)
    1230:	ldr	r2, [r3, #32]
    1232:	ldr	r5, [r1, #0]
    1234:	ands	r2, r5
    1236:	str	r2, [r3, #52]	; 0x34
    1238:	str	r2, [r1, #0]
    123a:	ldrb	r2, [r3, #19]
    123c:	lsls	r7, r2, #27
    123e:	bpl.n	124c <BNO080::receivePacket()+0x178>
    1240:	ldr	r1, [pc, #296]	; (136c <BNO080::receivePacket()+0x298>)
    1242:	ldr	r2, [r3, #36]	; 0x24
    1244:	ldr	r5, [r1, #0]
    1246:	ands	r2, r5
    1248:	str	r2, [r3, #56]	; 0x38
    124a:	str	r2, [r1, #0]
    124c:	cpsie	i
    124e:	ldr	r2, [r3, #8]
    1250:	cmp	r0, r2
    1252:	beq.w	1402 <BNO080::receivePacket()+0x32e>
    1256:	ldr	r2, [pc, #280]	; (1370 <BNO080::receivePacket()+0x29c>)
    1258:	str	r0, [r3, #8]
    125a:	ldr	r2, [r2, #24]
    125c:	ldr	r1, [pc, #276]	; (1374 <BNO080::receivePacket()+0x2a0>)
    125e:	ubfx	r5, r2, #4, #2
    1262:	ubfx	r2, r2, #26, #3
    1266:	ldr.w	r1, [r1, r5, lsl #2]
    126a:	adds	r2, #1
    126c:	udiv	r1, r1, r2
    1270:	cmp	r0, #0
    1272:	beq.n	1354 <BNO080::receivePacket()+0x280>
    1274:	udiv	r2, r1, r0
    1278:	cbz	r2, 1290 <BNO080::receivePacket()+0x1bc>
    127a:	udiv	r1, r1, r2
    127e:	cmp	r0, r1
    1280:	it	cc
    1282:	addcc	r2, #1
    1284:	cmp.w	r2, #258	; 0x102
    1288:	bcc.w	142c <BNO080::receivePacket()+0x358>
    128c:	movw	r2, #32767	; 0x7fff
    1290:	str	r2, [r3, #12]
    1292:	ldr	r3, [r3, #0]
    1294:	movs	r5, #0
    1296:	movs	r1, #3
    1298:	ldr	r6, [pc, #220]	; (1378 <BNO080::receivePacket()+0x2a4>)
    129a:	movs	r0, #1
    129c:	str	r5, [r3, #16]
    129e:	str	r1, [r3, #36]	; 0x24
    12a0:	mov	r1, r5
    12a2:	str	r2, [r3, #64]	; 0x40
    12a4:	str	r6, [r3, #96]	; 0x60
    12a6:	str	r0, [r3, #16]
    12a8:	ldrb.w	r0, [r4, #200]	; 0xc8
    12ac:	bl	3700 <digitalWrite>
    12b0:	ldr.w	r6, [r4, #192]	; 0xc0
    12b4:	ldr	r3, [r6, #0]
    12b6:	str	r5, [r3, #100]	; 0x64
    12b8:	ldr	r2, [r3, #92]	; 0x5c
    12ba:	tst.w	r2, #2031616	; 0x1f0000
    12be:	beq.n	12b8 <BNO080::receivePacket()+0x1e4>
    12c0:	ldr	r1, [r3, #116]	; 0x74
    12c2:	movs	r2, #0
    12c4:	uxtb	r1, r1
    12c6:	str	r2, [r3, #100]	; 0x64
    12c8:	ldr	r2, [r3, #92]	; 0x5c
    12ca:	tst.w	r2, #2031616	; 0x1f0000
    12ce:	beq.n	12c8 <BNO080::receivePacket()+0x1f4>
    12d0:	ldr	r5, [r3, #116]	; 0x74
    12d2:	movs	r2, #0
    12d4:	uxtb	r7, r5
    12d6:	str	r2, [r3, #100]	; 0x64
    12d8:	ldr	r2, [r3, #92]	; 0x5c
    12da:	tst.w	r2, #2031616	; 0x1f0000
    12de:	beq.n	12d8 <BNO080::receivePacket()+0x204>
    12e0:	ldr	r0, [r3, #116]	; 0x74
    12e2:	movs	r2, #0
    12e4:	uxtb	r0, r0
    12e6:	str	r2, [r3, #100]	; 0x64
    12e8:	ldr	r2, [r3, #92]	; 0x5c
    12ea:	tst.w	r2, #2031616	; 0x1f0000
    12ee:	beq.n	12e8 <BNO080::receivePacket()+0x214>
    12f0:	lsls	r5, r5, #8
    12f2:	ldr	r3, [r3, #116]	; 0x74
    12f4:	strb	r1, [r4, #0]
    12f6:	and.w	r5, r5, #32512	; 0x7f00
    12fa:	strb	r3, [r4, #3]
    12fc:	strb	r7, [r4, #1]
    12fe:	orrs	r5, r1
    1300:	strb	r0, [r4, #2]
    1302:	bne.n	137c <BNO080::receivePacket()+0x2a8>
    1304:	ldrb.w	r3, [r4, #188]	; 0xbc
    1308:	cmp	r3, #0
    130a:	beq.w	10f8 <BNO080::receivePacket()+0x24>
    130e:	mov	r0, r4
    1310:	bl	8e4 <BNO080::printHeader() [clone .part.7]>
    1314:	b.n	10fa <BNO080::receivePacket()+0x26>
    1316:	mov	r0, r3
    1318:	blx	r2
    131a:	ldr.w	r3, [r4, #176]	; 0xb0
    131e:	uxtb.w	r9, r0
    1322:	ldr	r2, [r3, #0]
    1324:	sxth.w	sl, r9
    1328:	ldr	r2, [r2, #20]
    132a:	b.n	1136 <BNO080::receivePacket()+0x62>
    132c:	mov	r0, r3
    132e:	blx	r2
    1330:	ldr.w	r3, [r4, #176]	; 0xb0
    1334:	lsls	r1, r0, #8
    1336:	ldr	r2, [r3, #0]
    1338:	uxtb.w	fp, r0
    133c:	sxth	r6, r1
    133e:	ldr	r2, [r2, #20]
    1340:	b.n	1164 <BNO080::receivePacket()+0x90>
    1342:	mov.w	r8, #255	; 0xff
    1346:	mov	r0, r3
    1348:	blx	r2
    134a:	uxtb	r0, r0
    134c:	b.n	11ac <BNO080::receivePacket()+0xd8>
    134e:	mov	r0, r3
    1350:	blx	r2
    1352:	b.n	1182 <BNO080::receivePacket()+0xae>
    1354:	mov	r2, r1
    1356:	b.n	1278 <BNO080::receivePacket()+0x1a4>
    1358:	.word	0x000008c5
    135c:	.word	0xe000e180
    1360:	.word	0xe000e184
    1364:	.word	0xe000e188
    1368:	.word	0xe000e18c
    136c:	.word	0xe000e190
    1370:	.word	0x400fc000
    1374:	.word	0x20000088
    1378:	.word	0xc0000007
    137c:	subs	r5, #4
    137e:	uxth	r0, r5
    1380:	cbz	r0, 13ac <BNO080::receivePacket()+0x2d8>
    1382:	adds	r5, r4, #4
    1384:	movs	r1, #0
    1386:	movs	r7, #255	; 0xff
    1388:	ldr	r2, [r6, #0]
    138a:	str	r7, [r2, #100]	; 0x64
    138c:	ldr	r3, [r2, #92]	; 0x5c
    138e:	tst.w	r3, #2031616	; 0x1f0000
    1392:	beq.n	138c <BNO080::receivePacket()+0x2b8>
    1394:	cmp	r1, #127	; 0x7f
    1396:	ldr	r3, [r2, #116]	; 0x74
    1398:	add.w	r1, r1, #1
    139c:	add.w	r5, r5, #1
    13a0:	it	ls
    13a2:	strbls.w	r3, [r5, #-1]
    13a6:	uxth	r3, r1
    13a8:	cmp	r0, r3
    13aa:	bhi.n	1388 <BNO080::receivePacket()+0x2b4>
    13ac:	movs	r1, #1
    13ae:	ldrb.w	r0, [r4, #200]	; 0xc8
    13b2:	bl	3700 <digitalWrite>
    13b6:	ldr.w	r2, [r4, #192]	; 0xc0
    13ba:	ldrb	r3, [r2, #19]
    13bc:	cbz	r3, 13f8 <BNO080::receivePacket()+0x324>
    13be:	lsls	r6, r3, #31
    13c0:	bpl.n	13ca <BNO080::receivePacket()+0x2f6>
    13c2:	ldr	r3, [pc, #124]	; (1440 <BNO080::receivePacket()+0x36c>)
    13c4:	ldr	r1, [r2, #40]	; 0x28
    13c6:	str	r1, [r3, #0]
    13c8:	ldrb	r3, [r2, #19]
    13ca:	lsls	r5, r3, #30
    13cc:	bpl.n	13d6 <BNO080::receivePacket()+0x302>
    13ce:	ldr	r3, [pc, #116]	; (1444 <BNO080::receivePacket()+0x370>)
    13d0:	ldr	r1, [r2, #44]	; 0x2c
    13d2:	str	r1, [r3, #0]
    13d4:	ldrb	r3, [r2, #19]
    13d6:	lsls	r0, r3, #29
    13d8:	bpl.n	13e2 <BNO080::receivePacket()+0x30e>
    13da:	ldr	r3, [pc, #108]	; (1448 <BNO080::receivePacket()+0x374>)
    13dc:	ldr	r1, [r2, #48]	; 0x30
    13de:	str	r1, [r3, #0]
    13e0:	ldrb	r3, [r2, #19]
    13e2:	lsls	r1, r3, #28
    13e4:	bpl.n	13ee <BNO080::receivePacket()+0x31a>
    13e6:	ldr	r3, [pc, #100]	; (144c <BNO080::receivePacket()+0x378>)
    13e8:	ldr	r1, [r2, #52]	; 0x34
    13ea:	str	r1, [r3, #0]
    13ec:	ldrb	r3, [r2, #19]
    13ee:	lsls	r3, r3, #27
    13f0:	bpl.n	13f8 <BNO080::receivePacket()+0x324>
    13f2:	ldr	r2, [r2, #56]	; 0x38
    13f4:	ldr	r3, [pc, #88]	; (1450 <BNO080::receivePacket()+0x37c>)
    13f6:	str	r2, [r3, #0]
    13f8:	ldrb.w	r5, [r4, #188]	; 0xbc
    13fc:	cbnz	r5, 1406 <BNO080::receivePacket()+0x332>
    13fe:	movs	r5, #1
    1400:	b.n	10fa <BNO080::receivePacket()+0x26>
    1402:	ldr	r2, [r3, #12]
    1404:	b.n	1292 <BNO080::receivePacket()+0x1be>
    1406:	mov	r0, r4
    1408:	bl	94c <BNO080::printPacket() [clone .part.6]>
    140c:	b.n	10fa <BNO080::receivePacket()+0x26>
    140e:	mov.w	sl, #255	; 0xff
    1412:	mov	r9, sl
    1414:	b.n	1136 <BNO080::receivePacket()+0x62>
    1416:	mvn.w	r6, #255	; 0xff
    141a:	mov.w	fp, #255	; 0xff
    141e:	cmp	r2, r7
    1420:	bne.n	1342 <BNO080::receivePacket()+0x26e>
    1422:	movs	r0, #255	; 0xff
    1424:	mov	r8, r0
    1426:	b.n	11ac <BNO080::receivePacket()+0xd8>
    1428:	movs	r0, #255	; 0xff
    142a:	b.n	11ac <BNO080::receivePacket()+0xd8>
    142c:	cmp	r2, #2
    142e:	bls.n	143a <BNO080::receivePacket()+0x366>
    1430:	subs	r2, #2
    1432:	lsrs	r1, r2, #1
    1434:	orr.w	r2, r2, r1, lsl #8
    1438:	b.n	1290 <BNO080::receivePacket()+0x1bc>
    143a:	movs	r2, #0
    143c:	b.n	1290 <BNO080::receivePacket()+0x1bc>
    143e:	nop
    1440:	.word	0xe000e100
    1444:	.word	0xe000e104
    1448:	.word	0xe000e108
    144c:	.word	0xe000e10c
    1450:	.word	0xe000e110

00001454 <BNO080::dataAvailable()>:
    1454:	push	{r3, r4, r5, lr}
    1456:	mov	r4, r0
    1458:	ldrb.w	r0, [r0, #202]	; 0xca
    145c:	cmp	r0, #255	; 0xff
    145e:	beq.n	1468 <BNO080::dataAvailable()+0x14>
    1460:	bl	370c <digitalRead>
    1464:	cmp	r0, #1
    1466:	beq.n	1480 <BNO080::dataAvailable()+0x2c>
    1468:	mov	r0, r4
    146a:	bl	10d4 <BNO080::receivePacket()>
    146e:	mov	r5, r0
    1470:	cbz	r0, 1480 <BNO080::dataAvailable()+0x2c>
    1472:	ldrb	r3, [r4, #2]
    1474:	cmp	r3, #3
    1476:	beq.n	1486 <BNO080::dataAvailable()+0x32>
    1478:	cmp	r3, #2
    147a:	beq.n	1494 <BNO080::dataAvailable()+0x40>
    147c:	cmp	r3, #5
    147e:	beq.n	148c <BNO080::dataAvailable()+0x38>
    1480:	movs	r5, #0
    1482:	mov	r0, r5
    1484:	pop	{r3, r4, r5, pc}
    1486:	ldrb	r3, [r4, #4]
    1488:	cmp	r3, #251	; 0xfb
    148a:	bne.n	1480 <BNO080::dataAvailable()+0x2c>
    148c:	mov	r0, r4
    148e:	bl	b30 <BNO080::parseInputReport()>
    1492:	b.n	1482 <BNO080::dataAvailable()+0x2e>
    1494:	ldrb	r3, [r4, #4]
    1496:	cmp	r3, #241	; 0xf1
    1498:	bne.n	1482 <BNO080::dataAvailable()+0x2e>
    149a:	ldrb	r3, [r4, #6]
    149c:	cmp	r3, #7
    149e:	bne.n	1482 <BNO080::dataAvailable()+0x2e>
    14a0:	ldrb	r3, [r4, #9]
    14a2:	strb.w	r3, [r4, #268]	; 0x10c
    14a6:	b.n	1482 <BNO080::dataAvailable()+0x2e>

000014a8 <BNO080::sendPacket(unsigned char, unsigned char)>:
    14a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14ac:	add.w	r8, r2, #4
    14b0:	ldr.w	r3, [r0, #176]	; 0xb0
    14b4:	mov	r5, r2
    14b6:	mov	r6, r0
    14b8:	mov	r7, r1
    14ba:	uxtb.w	r8, r8
    14be:	cmp	r3, #0
    14c0:	beq.n	1544 <BNO080::sendPacket(unsigned char, unsigned char)+0x9c>
    14c2:	ldrb.w	r2, [r0, #180]	; 0xb4
    14c6:	movs	r0, #1
    14c8:	mov	r1, r8
    14ca:	lsls	r2, r0
    14cc:	strb.w	r0, [r3, #96]	; 0x60
    14d0:	strb.w	r0, [r3, #95]	; 0x5f
    14d4:	strb.w	r2, [r3, #61]	; 0x3d
    14d8:	ldr.w	r0, [r6, #176]	; 0xb0
    14dc:	ldr	r3, [r0, #0]
    14de:	ldr	r3, [r3, #0]
    14e0:	blx	r3
    14e2:	ldr.w	r0, [r6, #176]	; 0xb0
    14e6:	movs	r1, #0
    14e8:	ldr	r3, [r0, #0]
    14ea:	ldr	r3, [r3, #0]
    14ec:	blx	r3
    14ee:	ldr.w	r0, [r6, #176]	; 0xb0
    14f2:	mov	r1, r7
    14f4:	add	r7, r6
    14f6:	ldr	r3, [r0, #0]
    14f8:	ldr	r3, [r3, #0]
    14fa:	blx	r3
    14fc:	ldr.w	r0, [r6, #176]	; 0xb0
    1500:	ldrb.w	r1, [r7, #132]	; 0x84
    1504:	ldr	r3, [r0, #0]
    1506:	adds	r2, r1, #1
    1508:	ldr	r3, [r3, #0]
    150a:	strb.w	r2, [r7, #132]	; 0x84
    150e:	blx	r3
    1510:	cbz	r5, 152e <BNO080::sendPacket(unsigned char, unsigned char)+0x86>
    1512:	subs	r5, #1
    1514:	adds	r4, r6, #3
    1516:	uxtb	r5, r5
    1518:	adds	r5, #4
    151a:	add	r5, r6
    151c:	ldr.w	r0, [r6, #176]	; 0xb0
    1520:	ldrb.w	r1, [r4, #1]!
    1524:	ldr	r3, [r0, #0]
    1526:	ldr	r3, [r3, #0]
    1528:	blx	r3
    152a:	cmp	r4, r5
    152c:	bne.n	151c <BNO080::sendPacket(unsigned char, unsigned char)+0x74>
    152e:	ldr.w	r0, [r6, #176]	; 0xb0
    1532:	movs	r1, #1
    1534:	bl	1b84 <TwoWire::endTransmission(unsigned char)>
    1538:	clz	r4, r0
    153c:	lsrs	r4, r4, #5
    153e:	mov	r0, r4
    1540:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1544:	bl	f14 <BNO080::waitForSPI()>
    1548:	mov	r4, r0
    154a:	cmp	r0, #0
    154c:	beq.n	153e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
    154e:	ldr.w	r3, [r6, #192]	; 0xc0
    1552:	ldr.w	r9, [r6, #196]	; 0xc4
    1556:	ldrb	r2, [r3, #19]
    1558:	cmp	r2, #0
    155a:	beq.n	15ba <BNO080::sendPacket(unsigned char, unsigned char)+0x112>
    155c:	cpsid	i
    155e:	ldrb	r2, [r3, #19]
    1560:	lsls	r0, r2, #31
    1562:	bpl.n	1572 <BNO080::sendPacket(unsigned char, unsigned char)+0xca>
    1564:	ldr	r1, [pc, #404]	; (16fc <BNO080::sendPacket(unsigned char, unsigned char)+0x254>)
    1566:	ldr	r0, [r3, #20]
    1568:	ldr	r2, [r1, #0]
    156a:	ands	r2, r0
    156c:	str	r2, [r3, #40]	; 0x28
    156e:	str	r2, [r1, #0]
    1570:	ldrb	r2, [r3, #19]
    1572:	lsls	r1, r2, #30
    1574:	bpl.n	1584 <BNO080::sendPacket(unsigned char, unsigned char)+0xdc>
    1576:	ldr	r1, [pc, #392]	; (1700 <BNO080::sendPacket(unsigned char, unsigned char)+0x258>)
    1578:	ldr	r0, [r3, #24]
    157a:	ldr	r2, [r1, #0]
    157c:	ands	r2, r0
    157e:	str	r2, [r3, #44]	; 0x2c
    1580:	str	r2, [r1, #0]
    1582:	ldrb	r2, [r3, #19]
    1584:	lsls	r0, r2, #29
    1586:	bpl.n	1596 <BNO080::sendPacket(unsigned char, unsigned char)+0xee>
    1588:	ldr	r1, [pc, #376]	; (1704 <BNO080::sendPacket(unsigned char, unsigned char)+0x25c>)
    158a:	ldr	r0, [r3, #28]
    158c:	ldr	r2, [r1, #0]
    158e:	ands	r2, r0
    1590:	str	r2, [r3, #48]	; 0x30
    1592:	str	r2, [r1, #0]
    1594:	ldrb	r2, [r3, #19]
    1596:	lsls	r1, r2, #28
    1598:	bpl.n	15a8 <BNO080::sendPacket(unsigned char, unsigned char)+0x100>
    159a:	ldr	r1, [pc, #364]	; (1708 <BNO080::sendPacket(unsigned char, unsigned char)+0x260>)
    159c:	ldr	r0, [r3, #32]
    159e:	ldr	r2, [r1, #0]
    15a0:	ands	r2, r0
    15a2:	str	r2, [r3, #52]	; 0x34
    15a4:	str	r2, [r1, #0]
    15a6:	ldrb	r2, [r3, #19]
    15a8:	lsls	r2, r2, #27
    15aa:	bpl.n	15b8 <BNO080::sendPacket(unsigned char, unsigned char)+0x110>
    15ac:	ldr	r1, [pc, #348]	; (170c <BNO080::sendPacket(unsigned char, unsigned char)+0x264>)
    15ae:	ldr	r0, [r3, #36]	; 0x24
    15b0:	ldr	r2, [r1, #0]
    15b2:	ands	r2, r0
    15b4:	str	r2, [r3, #56]	; 0x38
    15b6:	str	r2, [r1, #0]
    15b8:	cpsie	i
    15ba:	ldr	r2, [r3, #8]
    15bc:	cmp	r9, r2
    15be:	beq.w	16e6 <BNO080::sendPacket(unsigned char, unsigned char)+0x23e>
    15c2:	ldr	r2, [pc, #332]	; (1710 <BNO080::sendPacket(unsigned char, unsigned char)+0x268>)
    15c4:	str.w	r9, [r3, #8]
    15c8:	ldr	r2, [r2, #24]
    15ca:	ldr.w	lr, [pc, #348]	; 1728 <BNO080::sendPacket(unsigned char, unsigned char)+0x280>
    15ce:	ubfx	r1, r2, #26, #3
    15d2:	ubfx	ip, r2, #4, #2
    15d6:	adds	r1, #1
    15d8:	ldr.w	r2, [lr, ip, lsl #2]
    15dc:	udiv	r1, r2, r1
    15e0:	cmp.w	r9, #0
    15e4:	beq.n	16e2 <BNO080::sendPacket(unsigned char, unsigned char)+0x23a>
    15e6:	udiv	r2, r1, r9
    15ea:	cbz	r2, 1600 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
    15ec:	udiv	r1, r1, r2
    15f0:	cmp	r9, r1
    15f2:	it	cc
    15f4:	addcc	r2, #1
    15f6:	cmp.w	r2, #258	; 0x102
    15fa:	bcc.n	16ea <BNO080::sendPacket(unsigned char, unsigned char)+0x242>
    15fc:	movw	r2, #32767	; 0x7fff
    1600:	str	r2, [r3, #12]
    1602:	ldr	r3, [r3, #0]
    1604:	movs	r1, #0
    1606:	mov.w	ip, #3
    160a:	ldr.w	lr, [pc, #288]	; 172c <BNO080::sendPacket(unsigned char, unsigned char)+0x284>
    160e:	movs	r0, #1
    1610:	str	r1, [r3, #16]
    1612:	str.w	ip, [r3, #36]	; 0x24
    1616:	str	r2, [r3, #64]	; 0x40
    1618:	str.w	lr, [r3, #96]	; 0x60
    161c:	str	r0, [r3, #16]
    161e:	ldrb.w	r0, [r6, #200]	; 0xc8
    1622:	bl	3700 <digitalWrite>
    1626:	ldr.w	r1, [r6, #192]	; 0xc0
    162a:	ldr	r3, [r1, #0]
    162c:	str.w	r8, [r3, #100]	; 0x64
    1630:	ldr	r2, [r3, #92]	; 0x5c
    1632:	tst.w	r2, #2031616	; 0x1f0000
    1636:	beq.n	1630 <BNO080::sendPacket(unsigned char, unsigned char)+0x188>
    1638:	movs	r2, #0
    163a:	ldr	r0, [r3, #116]	; 0x74
    163c:	str	r2, [r3, #100]	; 0x64
    163e:	ldr	r2, [r3, #92]	; 0x5c
    1640:	tst.w	r2, #2031616	; 0x1f0000
    1644:	beq.n	163e <BNO080::sendPacket(unsigned char, unsigned char)+0x196>
    1646:	ldr	r2, [r3, #116]	; 0x74
    1648:	str	r7, [r3, #100]	; 0x64
    164a:	ldr	r2, [r3, #92]	; 0x5c
    164c:	tst.w	r2, #2031616	; 0x1f0000
    1650:	beq.n	164a <BNO080::sendPacket(unsigned char, unsigned char)+0x1a2>
    1652:	add	r7, r6
    1654:	ldr	r3, [r3, #116]	; 0x74
    1656:	ldrb.w	r3, [r7, #132]	; 0x84
    165a:	adds	r2, r3, #1
    165c:	strb.w	r2, [r7, #132]	; 0x84
    1660:	ldr	r1, [r1, #0]
    1662:	str	r3, [r1, #100]	; 0x64
    1664:	ldr	r3, [r1, #92]	; 0x5c
    1666:	tst.w	r3, #2031616	; 0x1f0000
    166a:	beq.n	1664 <BNO080::sendPacket(unsigned char, unsigned char)+0x1bc>
    166c:	ldr	r3, [r1, #116]	; 0x74
    166e:	cbz	r5, 168e <BNO080::sendPacket(unsigned char, unsigned char)+0x1e6>
    1670:	subs	r0, r5, #1
    1672:	adds	r2, r6, #3
    1674:	uxtb	r0, r0
    1676:	adds	r0, #4
    1678:	add	r0, r6
    167a:	ldrb.w	r3, [r2, #1]!
    167e:	str	r3, [r1, #100]	; 0x64
    1680:	ldr	r3, [r1, #92]	; 0x5c
    1682:	tst.w	r3, #2031616	; 0x1f0000
    1686:	beq.n	1680 <BNO080::sendPacket(unsigned char, unsigned char)+0x1d8>
    1688:	cmp	r0, r2
    168a:	ldr	r3, [r1, #116]	; 0x74
    168c:	bne.n	167a <BNO080::sendPacket(unsigned char, unsigned char)+0x1d2>
    168e:	movs	r1, #1
    1690:	ldrb.w	r0, [r6, #200]	; 0xc8
    1694:	bl	3700 <digitalWrite>
    1698:	ldr.w	r3, [r6, #192]	; 0xc0
    169c:	ldrb	r2, [r3, #19]
    169e:	cmp	r2, #0
    16a0:	beq.w	153e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
    16a4:	lsls	r6, r2, #31
    16a6:	bpl.n	16b0 <BNO080::sendPacket(unsigned char, unsigned char)+0x208>
    16a8:	ldr	r2, [pc, #104]	; (1714 <BNO080::sendPacket(unsigned char, unsigned char)+0x26c>)
    16aa:	ldr	r1, [r3, #40]	; 0x28
    16ac:	str	r1, [r2, #0]
    16ae:	ldrb	r2, [r3, #19]
    16b0:	lsls	r5, r2, #30
    16b2:	bpl.n	16bc <BNO080::sendPacket(unsigned char, unsigned char)+0x214>
    16b4:	ldr	r2, [pc, #96]	; (1718 <BNO080::sendPacket(unsigned char, unsigned char)+0x270>)
    16b6:	ldr	r1, [r3, #44]	; 0x2c
    16b8:	str	r1, [r2, #0]
    16ba:	ldrb	r2, [r3, #19]
    16bc:	lsls	r0, r2, #29
    16be:	bpl.n	16c8 <BNO080::sendPacket(unsigned char, unsigned char)+0x220>
    16c0:	ldr	r2, [pc, #88]	; (171c <BNO080::sendPacket(unsigned char, unsigned char)+0x274>)
    16c2:	ldr	r1, [r3, #48]	; 0x30
    16c4:	str	r1, [r2, #0]
    16c6:	ldrb	r2, [r3, #19]
    16c8:	lsls	r1, r2, #28
    16ca:	bpl.n	16d4 <BNO080::sendPacket(unsigned char, unsigned char)+0x22c>
    16cc:	ldr	r2, [pc, #80]	; (1720 <BNO080::sendPacket(unsigned char, unsigned char)+0x278>)
    16ce:	ldr	r1, [r3, #52]	; 0x34
    16d0:	str	r1, [r2, #0]
    16d2:	ldrb	r2, [r3, #19]
    16d4:	lsls	r2, r2, #27
    16d6:	bpl.w	153e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
    16da:	ldr	r2, [r3, #56]	; 0x38
    16dc:	ldr	r3, [pc, #68]	; (1724 <BNO080::sendPacket(unsigned char, unsigned char)+0x27c>)
    16de:	str	r2, [r3, #0]
    16e0:	b.n	153e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
    16e2:	mov	r2, r1
    16e4:	b.n	15ea <BNO080::sendPacket(unsigned char, unsigned char)+0x142>
    16e6:	ldr	r2, [r3, #12]
    16e8:	b.n	1602 <BNO080::sendPacket(unsigned char, unsigned char)+0x15a>
    16ea:	cmp	r2, #2
    16ec:	bhi.n	16f2 <BNO080::sendPacket(unsigned char, unsigned char)+0x24a>
    16ee:	movs	r2, #0
    16f0:	b.n	1600 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
    16f2:	subs	r2, #2
    16f4:	lsrs	r1, r2, #1
    16f6:	orr.w	r2, r2, r1, lsl #8
    16fa:	b.n	1600 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
    16fc:	.word	0xe000e180
    1700:	.word	0xe000e184
    1704:	.word	0xe000e188
    1708:	.word	0xe000e18c
    170c:	.word	0xe000e190
    1710:	.word	0x400fc000
    1714:	.word	0xe000e100
    1718:	.word	0xe000e104
    171c:	.word	0xe000e108
    1720:	.word	0xe000e10c
    1724:	.word	0xe000e110
    1728:	.word	0x20000088
    172c:	.word	0xc0000007

00001730 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>:
    1730:	push	{r4, r5, r6, r7, lr}
    1732:	mov.w	r5, #1000	; 0x3e8
    1736:	strb	r1, [r0, #5]
    1738:	lsrs	r7, r3, #8
    173a:	mov.w	lr, #253	; 0xfd
    173e:	mul.w	r2, r5, r2
    1742:	lsrs	r6, r3, #16
    1744:	movs	r5, #0
    1746:	strb	r3, [r0, #17]
    1748:	asrs	r1, r2, #8
    174a:	strb	r2, [r0, #9]
    174c:	lsrs	r3, r3, #24
    174e:	strb.w	lr, [r0, #4]
    1752:	strb	r1, [r0, #10]
    1754:	asrs	r1, r2, #16
    1756:	lsrs	r2, r2, #24
    1758:	strb	r7, [r0, #18]
    175a:	strb	r1, [r0, #11]
    175c:	movs	r1, #2
    175e:	strb	r2, [r0, #12]
    1760:	movs	r2, #17
    1762:	strb	r6, [r0, #19]
    1764:	strb	r3, [r0, #20]
    1766:	strb	r5, [r0, #6]
    1768:	strb	r5, [r0, #7]
    176a:	strb	r5, [r0, #8]
    176c:	strb	r5, [r0, #13]
    176e:	strb	r5, [r0, #14]
    1770:	strb	r5, [r0, #15]
    1772:	strb	r5, [r0, #16]
    1774:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1778:	b.w	14a8 <BNO080::sendPacket(unsigned char, unsigned char)>

0000177c <BNO080::enableRotationVector(unsigned short)>:
    177c:	mov	r2, r1
    177e:	movs	r3, #0
    1780:	movs	r1, #5
    1782:	b.w	1730 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>
    1786:	nop

00001788 <BNO080::enableLinearAccelerometer(unsigned short)>:
    1788:	mov	r2, r1
    178a:	movs	r3, #0
    178c:	movs	r1, #4
    178e:	b.w	1730 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>
    1792:	nop

00001794 <BNO080::enableGyro(unsigned short)>:
    1794:	mov	r2, r1
    1796:	movs	r3, #0
    1798:	movs	r1, #2
    179a:	b.w	1730 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>
    179e:	nop

000017a0 <BNO080::softReset()>:
    17a0:	movs	r2, #1
    17a2:	push	{r4, lr}
    17a4:	mov	r1, r2
    17a6:	strb	r2, [r0, #4]
    17a8:	mov	r4, r0
    17aa:	bl	14a8 <BNO080::sendPacket(unsigned char, unsigned char)>
    17ae:	movs	r0, #50	; 0x32
    17b0:	bl	3318 <delay>
    17b4:	mov	r0, r4
    17b6:	bl	10d4 <BNO080::receivePacket()>
    17ba:	cmp	r0, #0
    17bc:	bne.n	17b4 <BNO080::softReset()+0x14>
    17be:	movs	r0, #50	; 0x32
    17c0:	bl	3318 <delay>
    17c4:	mov	r0, r4
    17c6:	bl	10d4 <BNO080::receivePacket()>
    17ca:	cmp	r0, #0
    17cc:	bne.n	17c4 <BNO080::softReset()+0x24>
    17ce:	pop	{r4, pc}

000017d0 <BNO080::begin(unsigned char, TwoWire&, unsigned char)>:
    17d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17d4:	strb.w	r1, [r0, #180]	; 0xb4
    17d8:	mov	r4, r0
    17da:	str.w	r2, [r0, #176]	; 0xb0
    17de:	movs	r5, #0
    17e0:	strb.w	r3, [r0, #202]	; 0xca
    17e4:	bl	17a0 <BNO080::softReset()>
    17e8:	movs	r3, #249	; 0xf9
    17ea:	movs	r2, #2
    17ec:	strb	r5, [r4, #5]
    17ee:	strb	r3, [r4, #4]
    17f0:	mov	r0, r4
    17f2:	mov	r1, r2
    17f4:	bl	14a8 <BNO080::sendPacket(unsigned char, unsigned char)>
    17f8:	mov	r0, r4
    17fa:	bl	10d4 <BNO080::receivePacket()>
    17fe:	cbz	r0, 1808 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x38>
    1800:	ldrb	r3, [r4, #4]
    1802:	cmp	r3, #248	; 0xf8
    1804:	beq.n	180c <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x3c>
    1806:	mov	r0, r5
    1808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    180c:	ldrb.w	r6, [r4, #188]	; 0xbc
    1810:	cmp	r6, #0
    1812:	beq.n	1808 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x38>
    1814:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1818:	movs	r2, #20
    181a:	ldr	r1, [pc, #160]	; (18bc <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xec>)
    181c:	ldr	r3, [r0, #0]
    181e:	ldr	r3, [r3, #4]
    1820:	blx	r3
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1822:	mov	r3, r5
    1824:	ldrb	r1, [r4, #6]
    1826:	movs	r2, #16
    1828:	ldr.w	r0, [r4, #184]	; 0xb8
    182c:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1830:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1834:	movs	r2, #21
    1836:	ldr	r1, [pc, #136]	; (18c0 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf0>)
    1838:	ldr	r3, [r0, #0]
    183a:	ldr	r3, [r3, #4]
    183c:	blx	r3
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    183e:	mov	r3, r5
    1840:	ldrb	r1, [r4, #7]
    1842:	movs	r2, #16
    1844:	ldr.w	r0, [r4, #184]	; 0xb8
    1848:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    184c:	ldr.w	r0, [r4, #184]	; 0xb8
    1850:	ldr	r7, [r4, #8]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1852:	movs	r2, #19
    1854:	ldr	r3, [r0, #0]
    1856:	ldr	r1, [pc, #108]	; (18c4 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf4>)
    1858:	ldr	r3, [r3, #4]
    185a:	blx	r3

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    185c:	mov	r3, r5
    185e:	mov	r1, r7
    1860:	movs	r2, #16
    1862:	ldr.w	r0, [r4, #184]	; 0xb8
    1866:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    186a:	ldr.w	r0, [r4, #184]	; 0xb8
    186e:	ldr	r7, [r4, #12]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1870:	movs	r2, #20
    1872:	ldr	r3, [r0, #0]
    1874:	ldr	r1, [pc, #80]	; (18c8 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf8>)
    1876:	ldr	r3, [r3, #4]
    1878:	blx	r3

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    187a:	mov	r3, r5
    187c:	mov	r1, r7
    187e:	movs	r2, #16
    1880:	ldr.w	r0, [r4, #184]	; 0xb8
    1884:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1888:	ldr.w	r0, [r4, #184]	; 0xb8
    188c:	ldrb	r3, [r4, #16]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    188e:	movs	r2, #21
    1890:	ldr	r1, [r0, #0]
    1892:	ldrb	r7, [r4, #17]
    1894:	ldr.w	r8, [r1, #4]
    1898:	ldr	r1, [pc, #48]	; (18cc <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xfc>)
    189a:	orr.w	r7, r3, r7, lsl #8
    189e:	blx	r8
    18a0:	ldr.w	r4, [r4, #184]	; 0xb8
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    18a4:	mov	r1, r7
    18a6:	mov	r3, r5
    18a8:	movs	r2, #16
    18aa:	mov	r0, r4
    18ac:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    18b0:	mov	r0, r4
    18b2:	bl	3abc <Print::println()>
    18b6:	mov	r0, r6
    18b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18bc:	.word	0x20000164
    18c0:	.word	0x2000017c
    18c4:	.word	0x20000194
    18c8:	.word	0x200001a8
    18cc:	.word	0x200001c0

000018d0 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    18d0:	movs	r0, #0
    18d2:	bx	lr

000018d4 <TwoWire::peek()>:
    18d4:	ldrb.w	r3, [r0, #58]	; 0x3a
    18d8:	ldrb.w	r2, [r0, #59]	; 0x3b
    18dc:	cmp	r2, r3
    18de:	bls.n	18e6 <TwoWire::peek()+0x12>
    18e0:	add	r3, r0
    18e2:	ldrb	r0, [r3, #26]
    18e4:	bx	lr
    18e6:	mov.w	r0, #4294967295
    18ea:	bx	lr

000018ec <TwoWire::flush()>:
    18ec:	bx	lr
    18ee:	nop

000018f0 <TwoWire::write(unsigned char)>:
    18f0:	ldrh.w	r3, [r0, #96]	; 0x60
    18f4:	cbz	r3, 191c <TwoWire::write(unsigned char)+0x2c>
    18f6:	ldrb.w	r3, [r0, #95]	; 0x5f
    18fa:	cmp	r3, #32
    18fc:	bhi.n	1916 <TwoWire::write(unsigned char)+0x26>
    18fe:	adds	r2, r0, r3
    1900:	push	{r4}
    1902:	adds	r4, r3, #1
    1904:	movs	r3, #1
    1906:	strb.w	r4, [r0, #95]	; 0x5f
    190a:	mov	r0, r3
    190c:	strb.w	r1, [r2, #61]	; 0x3d
    1910:	ldr.w	r4, [sp], #4
    1914:	bx	lr
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1916:	movs	r2, #1
    1918:	movs	r3, #0
    191a:	strb	r2, [r0, #4]
    191c:	mov	r0, r3
    191e:	bx	lr

00001920 <TwoWire::write(unsigned char const*, unsigned int)>:
    1920:	push	{r3, r4, r5, lr}
    1922:	mov	r5, r0
    1924:	ldrh.w	r0, [r0, #96]	; 0x60
    1928:	cbz	r0, 1950 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
    192a:	ldrb.w	r3, [r5, #95]	; 0x5f
    192e:	mov	r4, r2
    1930:	rsb	r2, r3, #33	; 0x21
    1934:	cmp	r4, r2
    1936:	bhi.n	1952 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
    1938:	add.w	r0, r5, #61	; 0x3d
    193c:	mov	r2, r4
    193e:	add	r0, r3
    1940:	bl	1e18 <memcpy>
    1944:	ldrb.w	r3, [r5, #95]	; 0x5f
    1948:	mov	r0, r4
    194a:	add	r4, r3
    194c:	strb.w	r4, [r5, #95]	; 0x5f
    1950:	pop	{r3, r4, r5, pc}
    1952:	mov	r4, r2
    1954:	movs	r2, #1
    1956:	strb	r2, [r5, #4]
    1958:	b.n	1938 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    195a:	nop

0000195c <TwoWire::begin()>:
    195c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1960:	ldr	r7, [pc, #188]	; (1a20 <TwoWire::begin()+0xc4>)
    1962:	movs	r5, #0
    1964:	ldr	r2, [r0, #20]
    1966:	movs	r4, #1
    1968:	ldr	r1, [r7, #56]	; 0x38
    196a:	mov.w	lr, #2
    196e:	ldr	r6, [r2, #0]
    1970:	mov.w	r8, #180224	; 0x2c000
    1974:	bic.w	r1, r1, #16515072	; 0xfc0000
    1978:	ldr	r3, [r0, #16]
    197a:	ldr.w	ip, [pc, #176]	; 1a2c <TwoWire::begin()+0xd0>
    197e:	orr.w	r1, r1, #262144	; 0x40000
    1982:	str	r1, [r7, #56]	; 0x38
    1984:	ldr	r1, [r6, #0]
    1986:	ldr	r7, [r2, #4]
    1988:	orrs	r1, r7
    198a:	str	r1, [r6, #0]
    198c:	mov.w	r1, #65537	; 0x10001
    1990:	ldr	r6, [pc, #144]	; (1a24 <TwoWire::begin()+0xc8>)
    1992:	str.w	lr, [r3, #16]
    1996:	str	r5, [r3, #16]
    1998:	str.w	ip, [r3, #72]	; 0x48
    199c:	str	r4, [r3, #36]	; 0x24
    199e:	str	r6, [r3, #40]	; 0x28
    19a0:	movw	r6, #63585	; 0xf861
    19a4:	str.w	r8, [r3, #44]	; 0x2c
    19a8:	ldr	r7, [r3, #72]	; 0x48
    19aa:	str	r7, [r3, #80]	; 0x50
    19ac:	str	r5, [r3, #32]
    19ae:	str	r1, [r3, #88]	; 0x58
    19b0:	str	r4, [r3, #16]
    19b2:	ldrb	r1, [r0, #24]
    19b4:	ldr	r3, [pc, #112]	; (1a28 <TwoWire::begin()+0xcc>)
    19b6:	add.w	r1, r2, r1, lsl #4
    19ba:	ldrb	r1, [r1, #8]
    19bc:	add.w	r1, r3, r1, lsl #4
    19c0:	ldr	r1, [r1, #8]
    19c2:	str	r6, [r1, #0]
    19c4:	ldrb	r1, [r0, #24]
    19c6:	add.w	r1, r2, r1, lsl #4
    19ca:	ldrb	r4, [r1, #8]
    19cc:	ldr	r5, [r1, #12]
    19ce:	add.w	r1, r3, r4, lsl #4
    19d2:	ldr	r1, [r1, #4]
    19d4:	str	r5, [r1, #0]
    19d6:	ldrb	r1, [r0, #24]
    19d8:	add.w	r1, r2, r1, lsl #4
    19dc:	ldr	r4, [r1, #16]
    19de:	cbz	r4, 19e4 <TwoWire::begin()+0x88>
    19e0:	ldr	r1, [r1, #20]
    19e2:	str	r1, [r4, #0]
    19e4:	ldrb	r1, [r0, #25]
    19e6:	movw	r4, #63585	; 0xf861
    19ea:	add.w	r1, r2, r1, lsl #4
    19ee:	ldrb.w	r1, [r1, #40]	; 0x28
    19f2:	add.w	r1, r3, r1, lsl #4
    19f6:	ldr	r1, [r1, #8]
    19f8:	str	r4, [r1, #0]
    19fa:	ldrb	r1, [r0, #25]
    19fc:	add.w	r1, r2, r1, lsl #4
    1a00:	ldrb.w	r4, [r1, #40]	; 0x28
    1a04:	ldr	r1, [r1, #44]	; 0x2c
    1a06:	add.w	r3, r3, r4, lsl #4
    1a0a:	ldr	r3, [r3, #4]
    1a0c:	str	r1, [r3, #0]
    1a0e:	ldrb	r3, [r0, #25]
    1a10:	add.w	r2, r2, r3, lsl #4
    1a14:	ldr	r3, [r2, #48]	; 0x30
    1a16:	cbz	r3, 1a1c <TwoWire::begin()+0xc0>
    1a18:	ldr	r2, [r2, #52]	; 0x34
    1a1a:	str	r2, [r3, #0]
    1a1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a20:	.word	0x400fc000
    1a24:	.word	0x05050bb8
    1a28:	.word	0x20000220
    1a2c:	.word	0x1928373b

00001a30 <TwoWire::force_clock()>:
    1a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a34:	mov	fp, r0
    1a36:	ldr	r0, [pc, #256]	; (1b38 <TwoWire::force_clock()+0x108>)
    1a38:	sub	sp, #12
    1a3a:	movs	r5, #21
    1a3c:	ldr.w	sl, [fp, #20]
    1a40:	ldrb.w	r6, [fp, #24]
    1a44:	ldrb.w	r3, [fp, #25]
    1a48:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a4c:	ldr	r1, [pc, #236]	; (1b3c <TwoWire::force_clock()+0x10c>)
    1a4e:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a52:	ldr.w	lr, [pc, #236]	; 1b40 <TwoWire::force_clock()+0x110>
    1a56:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a58:	mov	r4, r1
    1a5a:	ldrb.w	r3, [r3, #40]	; 0x28
    1a5e:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a60:	ldr.w	r9, [pc, #224]	; 1b44 <TwoWire::force_clock()+0x114>
    1a64:	lsls	r3, r3, #4
    1a66:	adds	r7, r0, r6
    1a68:	ldr.w	r8, [r0, r6]
    1a6c:	add.w	ip, r0, r3
    1a70:	ldr	r6, [r0, r3]
    1a72:	ldr	r0, [r7, #12]
    1a74:	ldr	r3, [r7, #4]
    1a76:	ldr.w	r7, [ip, #12]
    1a7a:	str	r3, [sp, #0]
    1a7c:	str	r5, [r3, #0]
    1a7e:	str.w	r0, [r8, #132]	; 0x84
    1a82:	ldr.w	r3, [r8, #4]
    1a86:	ldr.w	r2, [ip, #4]
    1a8a:	orrs	r3, r0
    1a8c:	str	r2, [sp, #4]
    1a8e:	str.w	r3, [r8, #4]
    1a92:	str	r5, [r2, #0]
    1a94:	str.w	r7, [r6, #132]	; 0x84
    1a98:	ldr	r3, [r6, #4]
    1a9a:	orrs	r3, r7
    1a9c:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a9e:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1aa0:	ldr.w	r3, [lr]
    1aa4:	umull	r3, r2, r9, r3
    1aa8:	lsrs	r2, r2, #18
    1aaa:	add.w	r2, r2, r2, lsl #2
    1aae:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ab0:	ldr	r3, [r4, #0]
    1ab2:	subs	r3, r3, r1
    1ab4:	cmp	r2, r3
    1ab6:	bhi.n	1ab0 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ab8:	ldr	r2, [pc, #128]	; (1b3c <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1aba:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1abc:	ldr.w	ip, [pc, #132]	; 1b44 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ac0:	mov	r9, r2
    1ac2:	ldr.w	r3, [r8, #8]
    1ac6:	tst	r0, r3
    1ac8:	beq.n	1ad0 <TwoWire::force_clock()+0xa0>
    1aca:	ldr	r3, [r6, #8]
    1acc:	tst	r7, r3
    1ace:	bne.n	1b34 <TwoWire::force_clock()+0x104>
    1ad0:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ad4:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1ad6:	ldr.w	r1, [lr]
    1ada:	umull	r3, r1, ip, r1
    1ade:	lsrs	r1, r1, #18
    1ae0:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ae4:	ldr	r3, [r2, #0]
    1ae6:	subs	r3, r3, r4
    1ae8:	cmp	r1, r3
    1aea:	bhi.n	1ae4 <TwoWire::force_clock()+0xb4>
    1aec:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1af0:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1af4:	ldr.w	r1, [lr]
    1af8:	umull	r3, r1, ip, r1
    1afc:	lsrs	r1, r1, #18
    1afe:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1b02:	ldr	r3, [r2, #0]
    1b04:	subs	r3, r3, r4
    1b06:	cmp	r1, r3
    1b08:	bhi.n	1b02 <TwoWire::force_clock()+0xd2>
    1b0a:	subs	r5, #1
    1b0c:	bne.n	1ac2 <TwoWire::force_clock()+0x92>
    1b0e:	mov	r0, r5
    1b10:	ldrb.w	r3, [fp, #24]
    1b14:	ldr	r2, [sp, #0]
    1b16:	add.w	r3, sl, r3, lsl #4
    1b1a:	ldr	r3, [r3, #12]
    1b1c:	str	r3, [r2, #0]
    1b1e:	ldrb.w	r3, [fp, #25]
    1b22:	ldr	r2, [sp, #4]
    1b24:	add.w	sl, sl, r3, lsl #4
    1b28:	ldr.w	r3, [sl, #44]	; 0x2c
    1b2c:	str	r3, [r2, #0]
    1b2e:	add	sp, #12
    1b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b34:	movs	r0, #1
    1b36:	b.n	1b10 <TwoWire::force_clock()+0xe0>
    1b38:	.word	0x20000220
    1b3c:	.word	0xe0001004
    1b40:	.word	0x200009c4
    1b44:	.word	0x431bde83

00001b48 <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1b48:	ldr	r1, [pc, #52]	; (1b80 <TwoWire::wait_idle()+0x38>)
    1b4a:	ldr	r2, [r0, #16]
    1b4c:	push	{r4, lr}
    1b4e:	ldr	r4, [r1, #0]
    1b50:	b.n	1b5e <TwoWire::wait_idle()+0x16>
    1b52:	lsls	r3, r3, #7
    1b54:	bmi.n	1b66 <TwoWire::wait_idle()+0x1e>
    1b56:	ldr	r3, [r1, #0]
    1b58:	subs	r3, r3, r4
    1b5a:	cmp	r3, #16
    1b5c:	bhi.n	1b70 <TwoWire::wait_idle()+0x28>
    1b5e:	ldr	r3, [r2, #20]
    1b60:	tst.w	r3, #33554432	; 0x2000000
    1b64:	bne.n	1b52 <TwoWire::wait_idle()+0xa>
    1b66:	mov.w	r3, #32512	; 0x7f00
    1b6a:	movs	r0, #1
    1b6c:	str	r3, [r2, #20]
    1b6e:	pop	{r4, pc}
    1b70:	mov	r4, r0
    1b72:	bl	1a30 <TwoWire::force_clock()>
    1b76:	cmp	r0, #0
    1b78:	beq.n	1b6e <TwoWire::wait_idle()+0x26>
    1b7a:	ldr	r2, [r4, #16]
    1b7c:	b.n	1b66 <TwoWire::wait_idle()+0x1e>
    1b7e:	nop
    1b80:	.word	0x200014c4

00001b84 <TwoWire::endTransmission(unsigned char)>:
    1b84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b88:	ldrb.w	sl, [r0, #95]	; 0x5f
    1b8c:	cmp.w	sl, #0
    1b90:	bne.n	1b98 <TwoWire::endTransmission(unsigned char)+0x14>
    1b92:	movs	r0, #4
    1b94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b98:	mov	r5, r0
    1b9a:	mov	r6, r1
    1b9c:	bl	1b48 <TwoWire::wait_idle()>
    1ba0:	cmp	r0, #0
    1ba2:	beq.n	1b92 <TwoWire::endTransmission(unsigned char)+0xe>
    1ba4:	ldr	r7, [pc, #184]	; (1c60 <TwoWire::endTransmission(unsigned char)+0xdc>)
    1ba6:	movs	r4, #0
    1ba8:	mov.w	r9, #512	; 0x200
    1bac:	ldr.w	r8, [r7]
    1bb0:	cmp	r4, sl
    1bb2:	ldr	r1, [r5, #16]
    1bb4:	bhi.n	1bec <TwoWire::endTransmission(unsigned char)+0x68>
    1bb6:	ldr	r3, [r1, #92]	; 0x5c
    1bb8:	and.w	r3, r3, #7
    1bbc:	cmp	r3, #3
    1bbe:	bls.n	1bd4 <TwoWire::endTransmission(unsigned char)+0x50>
    1bc0:	b.n	1bec <TwoWire::endTransmission(unsigned char)+0x68>
    1bc2:	ldrb.w	r2, [r5, #61]	; 0x3d
    1bc6:	adds	r3, #1
    1bc8:	movs	r4, #1
    1bca:	orr.w	r2, r2, #1024	; 0x400
    1bce:	cmp	r3, #4
    1bd0:	str	r2, [r1, #96]	; 0x60
    1bd2:	beq.n	1bec <TwoWire::endTransmission(unsigned char)+0x68>
    1bd4:	adds	r2, r5, r4
    1bd6:	cmp	r4, #0
    1bd8:	beq.n	1bc2 <TwoWire::endTransmission(unsigned char)+0x3e>
    1bda:	cmp	sl, r4
    1bdc:	bls.n	1c2e <TwoWire::endTransmission(unsigned char)+0xaa>
    1bde:	adds	r3, #1
    1be0:	ldrb.w	r2, [r2, #61]	; 0x3d
    1be4:	adds	r4, #1
    1be6:	cmp	r3, #4
    1be8:	str	r2, [r1, #96]	; 0x60
    1bea:	bne.n	1bd4 <TwoWire::endTransmission(unsigned char)+0x50>
    1bec:	ldr	r3, [r1, #20]
    1bee:	lsls	r0, r3, #20
    1bf0:	bmi.n	1c38 <TwoWire::endTransmission(unsigned char)+0xb4>
    1bf2:	lsls	r2, r3, #21
    1bf4:	bmi.n	1c46 <TwoWire::endTransmission(unsigned char)+0xc2>
    1bf6:	lsls	r0, r3, #18
    1bf8:	bmi.n	1c04 <TwoWire::endTransmission(unsigned char)+0x80>
    1bfa:	ldr	r2, [r7, #0]
    1bfc:	rsb	r2, r8, r2
    1c00:	cmp	r2, #50	; 0x32
    1c02:	bls.n	1c18 <TwoWire::endTransmission(unsigned char)+0x94>
    1c04:	ldr	r3, [r1, #16]
    1c06:	mov.w	r2, #512	; 0x200
    1c0a:	movs	r0, #4
    1c0c:	orr.w	r3, r3, #768	; 0x300
    1c10:	str	r3, [r1, #16]
    1c12:	str	r2, [r1, #96]	; 0x60
    1c14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c18:	cmp	r4, sl
    1c1a:	bls.n	1c28 <TwoWire::endTransmission(unsigned char)+0xa4>
    1c1c:	ldr	r2, [r1, #92]	; 0x5c
    1c1e:	lsls	r2, r2, #29
    1c20:	bne.n	1c28 <TwoWire::endTransmission(unsigned char)+0xa4>
    1c22:	lsls	r3, r3, #22
    1c24:	bmi.n	1c5a <TwoWire::endTransmission(unsigned char)+0xd6>
    1c26:	cbz	r6, 1c5a <TwoWire::endTransmission(unsigned char)+0xd6>
    1c28:	bl	3800 <yield>
    1c2c:	b.n	1bb0 <TwoWire::endTransmission(unsigned char)+0x2c>
    1c2e:	cbz	r6, 1c34 <TwoWire::endTransmission(unsigned char)+0xb0>
    1c30:	str.w	r9, [r1, #96]	; 0x60
    1c34:	adds	r4, #1
    1c36:	b.n	1bec <TwoWire::endTransmission(unsigned char)+0x68>
    1c38:	ldr	r3, [r1, #16]
    1c3a:	movs	r0, #4
    1c3c:	orr.w	r3, r3, #768	; 0x300
    1c40:	str	r3, [r1, #16]
    1c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c46:	ldr	r3, [r1, #16]
    1c48:	mov.w	r2, #512	; 0x200
    1c4c:	movs	r0, #2
    1c4e:	orr.w	r3, r3, #768	; 0x300
    1c52:	str	r3, [r1, #16]
    1c54:	str	r2, [r1, #96]	; 0x60
    1c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c5a:	movs	r0, #0
    1c5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c60:	.word	0x200014c4

00001c64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
    1c64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c68:	mov	r4, r1
    1c6a:	mov	r5, r2
    1c6c:	mov	r8, r3
    1c6e:	mov	r9, r0
    1c70:	bl	1b48 <TwoWire::wait_idle()>
    1c74:	cbnz	r0, 1c7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
    1c76:	movs	r0, #4
    1c78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7c:	movs	r2, #0
    1c7e:	lsls	r3, r4, #1
    1c80:	cmp	r5, #0
    1c82:	movw	sl, #1025	; 0x401
    1c86:	mov	r4, r2
    1c88:	uxtb	r3, r3
    1c8a:	ldr	r6, [pc, #244]	; (1d80 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>)
    1c8c:	it	eq
    1c8e:	moveq	r5, #1
    1c90:	cmp	r4, #2
    1c92:	orr.w	sl, r3, sl
    1c96:	ldr.w	fp, [r6]
    1c9a:	strb.w	r2, [r9, #58]	; 0x3a
    1c9e:	strb.w	r2, [r9, #59]	; 0x3b
    1ca2:	bls.n	1d36 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
    1ca4:	ldr.w	r3, [r9, #16]
    1ca8:	ldrb.w	r2, [r9, #59]	; 0x3b
    1cac:	cmp	r2, #31
    1cae:	bhi.n	1cd6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1cb0:	ldr	r1, [r3, #92]	; 0x5c
    1cb2:	ubfx	r1, r1, #16, #3
    1cb6:	cbnz	r1, 1cbe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
    1cb8:	b.n	1cd6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1cba:	cmp	r2, #32
    1cbc:	beq.n	1cd6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1cbe:	add.w	lr, r2, #1
    1cc2:	add.w	r0, r9, r2
    1cc6:	subs	r1, #1
    1cc8:	uxtb.w	r2, lr
    1ccc:	strb.w	r2, [r9, #59]	; 0x3b
    1cd0:	ldr	r7, [r3, #112]	; 0x70
    1cd2:	strb	r7, [r0, #26]
    1cd4:	bne.n	1cba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
    1cd6:	ldr	r2, [r3, #20]
    1cd8:	lsls	r0, r2, #20
    1cda:	bmi.n	1d76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
    1cdc:	tst.w	r2, #9216	; 0x2400
    1ce0:	bne.n	1cec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    1ce2:	ldr	r1, [r6, #0]
    1ce4:	rsb	r1, fp, r1
    1ce8:	cmp	r1, #50	; 0x32
    1cea:	bls.n	1d12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
    1cec:	ldr	r2, [r3, #16]
    1cee:	mov.w	r1, #512	; 0x200
    1cf2:	orr.w	r2, r2, #768	; 0x300
    1cf6:	str	r2, [r3, #16]
    1cf8:	str	r1, [r3, #96]	; 0x60
    1cfa:	ldr	r2, [r3, #92]	; 0x5c
    1cfc:	tst.w	r2, #458752	; 0x70000
    1d00:	beq.n	1d0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    1d02:	ldr	r2, [r3, #16]
    1d04:	orr.w	r2, r2, #512	; 0x200
    1d08:	str	r2, [r3, #16]
    1d0a:	ldrb.w	r0, [r9, #59]	; 0x3b
    1d0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d12:	ldrb.w	r1, [r9, #59]	; 0x3b
    1d16:	cmp	r1, r5
    1d18:	bcc.n	1d2e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    1d1a:	cmp	r4, #2
    1d1c:	bls.n	1d2e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    1d1e:	ldr	r1, [r3, #92]	; 0x5c
    1d20:	lsls	r1, r1, #29
    1d22:	bne.n	1d2e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    1d24:	lsls	r2, r2, #22
    1d26:	bmi.n	1cfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    1d28:	cmp.w	r8, #0
    1d2c:	beq.n	1cfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    1d2e:	bl	3800 <yield>
    1d32:	cmp	r4, #2
    1d34:	bhi.n	1ca4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    1d36:	ldr.w	r2, [r9, #16]
    1d3a:	ldr	r3, [r2, #92]	; 0x5c
    1d3c:	and.w	r3, r3, #7
    1d40:	cmp	r3, #3
    1d42:	bhi.n	1d60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    1d44:	subs	r1, r5, #1
    1d46:	mov.w	r0, #512	; 0x200
    1d4a:	orr.w	r1, r1, #256	; 0x100
    1d4e:	cbnz	r4, 1d64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
    1d50:	str.w	sl, [r2, #96]	; 0x60
    1d54:	subs	r3, #1
    1d56:	adds	r4, #1
    1d58:	cmp	r3, #3
    1d5a:	bhi.n	1d60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    1d5c:	cmp	r4, #2
    1d5e:	bls.n	1d4e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
    1d60:	mov	r3, r2
    1d62:	b.n	1ca8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
    1d64:	cmp	r4, #1
    1d66:	beq.n	1d72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
    1d68:	cmp.w	r8, #0
    1d6c:	beq.n	1d54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    1d6e:	str	r0, [r2, #96]	; 0x60
    1d70:	b.n	1d54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    1d72:	str	r1, [r2, #96]	; 0x60
    1d74:	b.n	1d54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    1d76:	ldr	r2, [r3, #16]
    1d78:	orr.w	r2, r2, #768	; 0x300
    1d7c:	str	r2, [r3, #16]
    1d7e:	b.n	1cfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    1d80:	.word	0x200014c4

00001d84 <TwoWire::setClock(unsigned long)>:
    1d84:	ldr	r3, [r0, #16]
    1d86:	movs	r2, #0
    1d88:	ldr	r0, [pc, #76]	; (1dd8 <TwoWire::setClock(unsigned long)+0x54>)
    1d8a:	cmp	r1, r0
    1d8c:	push	{r4}
    1d8e:	str	r2, [r3, #16]
    1d90:	bls.n	1dc4 <TwoWire::setClock(unsigned long)+0x40>
    1d92:	ldr	r0, [pc, #72]	; (1ddc <TwoWire::setClock(unsigned long)+0x58>)
    1d94:	cmp	r1, r0
    1d96:	bls.n	1dbe <TwoWire::setClock(unsigned long)+0x3a>
    1d98:	ldr	r4, [pc, #68]	; (1de0 <TwoWire::setClock(unsigned long)+0x5c>)
    1d9a:	ldr	r0, [pc, #72]	; (1de4 <TwoWire::setClock(unsigned long)+0x60>)
    1d9c:	ldr	r1, [pc, #72]	; (1de8 <TwoWire::setClock(unsigned long)+0x64>)
    1d9e:	str	r4, [r3, #72]	; 0x48
    1da0:	str	r2, [r3, #36]	; 0x24
    1da2:	str	r0, [r3, #40]	; 0x28
    1da4:	str	r1, [r3, #44]	; 0x2c
    1da6:	ldr	r4, [r3, #72]	; 0x48
    1da8:	movs	r0, #0
    1daa:	mov.w	r1, #65537	; 0x10001
    1dae:	movs	r2, #1
    1db0:	str	r4, [r3, #80]	; 0x50
    1db2:	str	r0, [r3, #32]
    1db4:	ldr.w	r4, [sp], #4
    1db8:	str	r1, [r3, #88]	; 0x58
    1dba:	str	r2, [r3, #16]
    1dbc:	bx	lr
    1dbe:	ldr	r4, [pc, #44]	; (1dec <TwoWire::setClock(unsigned long)+0x68>)
    1dc0:	ldr	r0, [pc, #44]	; (1df0 <TwoWire::setClock(unsigned long)+0x6c>)
    1dc2:	b.n	1d9c <TwoWire::setClock(unsigned long)+0x18>
    1dc4:	ldr	r4, [pc, #44]	; (1df4 <TwoWire::setClock(unsigned long)+0x70>)
    1dc6:	movs	r0, #1
    1dc8:	ldr	r1, [pc, #44]	; (1df8 <TwoWire::setClock(unsigned long)+0x74>)
    1dca:	mov.w	r2, #180224	; 0x2c000
    1dce:	str	r4, [r3, #72]	; 0x48
    1dd0:	str	r0, [r3, #36]	; 0x24
    1dd2:	str	r1, [r3, #40]	; 0x28
    1dd4:	str	r2, [r3, #44]	; 0x2c
    1dd6:	b.n	1da6 <TwoWire::setClock(unsigned long)+0x22>
    1dd8:	.word	0x00061a7f
    1ddc:	.word	0x000f423f
    1de0:	.word	0x0407090a
    1de4:	.word	0x01010960
    1de8:	.word	0x00057f00
    1dec:	.word	0x0c121a1c
    1df0:	.word	0x02020e10
    1df4:	.word	0x1928373b
    1df8:	.word	0x05050bb8

00001dfc <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1dfc:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1dfe:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1e00:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1e02:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1e04:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1e06:	beq.n	1e10 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1e08:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1e0c:	b.w	38a0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1e10:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1e12:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1e16:	bx	r3

00001e18 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1e18:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1e1a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1e1e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1e22:	bne.n	1f00 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1e24:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1e26:	bcc.n	1eac <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1e28:	ldr.w	r3, [r1], #4
    1e2c:	str.w	r3, [r0], #4
    1e30:	ldr.w	r3, [r1], #4
    1e34:	str.w	r3, [r0], #4
    1e38:	ldr.w	r3, [r1], #4
    1e3c:	str.w	r3, [r0], #4
    1e40:	ldr.w	r3, [r1], #4
    1e44:	str.w	r3, [r0], #4
    1e48:	ldr.w	r3, [r1], #4
    1e4c:	str.w	r3, [r0], #4
    1e50:	ldr.w	r3, [r1], #4
    1e54:	str.w	r3, [r0], #4
    1e58:	ldr.w	r3, [r1], #4
    1e5c:	str.w	r3, [r0], #4
    1e60:	ldr.w	r3, [r1], #4
    1e64:	str.w	r3, [r0], #4
    1e68:	ldr.w	r3, [r1], #4
    1e6c:	str.w	r3, [r0], #4
    1e70:	ldr.w	r3, [r1], #4
    1e74:	str.w	r3, [r0], #4
    1e78:	ldr.w	r3, [r1], #4
    1e7c:	str.w	r3, [r0], #4
    1e80:	ldr.w	r3, [r1], #4
    1e84:	str.w	r3, [r0], #4
    1e88:	ldr.w	r3, [r1], #4
    1e8c:	str.w	r3, [r0], #4
    1e90:	ldr.w	r3, [r1], #4
    1e94:	str.w	r3, [r0], #4
    1e98:	ldr.w	r3, [r1], #4
    1e9c:	str.w	r3, [r0], #4
    1ea0:	ldr.w	r3, [r1], #4
    1ea4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1ea8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1eaa:	bcs.n	1e28 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1eac:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1eae:	bcc.n	1ed4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1eb0:	ldr.w	r3, [r1], #4
    1eb4:	str.w	r3, [r0], #4
    1eb8:	ldr.w	r3, [r1], #4
    1ebc:	str.w	r3, [r0], #4
    1ec0:	ldr.w	r3, [r1], #4
    1ec4:	str.w	r3, [r0], #4
    1ec8:	ldr.w	r3, [r1], #4
    1ecc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1ed0:	subs	r2, #16
	bhs	.Lmid_block_loop
    1ed2:	bcs.n	1eb0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1ed4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1ed6:	bcc.n	1ee4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1ed8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1edc:	str.w	r3, [r0], #4
	subs	r2, #4
    1ee0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1ee2:	bcs.n	1ed8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1ee4:	adds	r2, #4
	beq	.Ldone
    1ee6:	beq.n	1efa <memcpy+0xe2>

	lsls	r2, r2, #31
    1ee8:	lsls	r2, r2, #31
	itt ne
    1eea:	itt	ne
	ldrbne  r3, [r1], #1
    1eec:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1ef0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1ef4:	bcc.n	1efa <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1ef6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1ef8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1efa:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1efc:	bx	lr
    1efe:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1f00:	cmp	r2, #8
	blo	.Lbyte_copy
    1f02:	bcc.n	1f2c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1f04:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1f06:	beq.n	1e24 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1f08:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1f0c:	beq.n	1e24 <memcpy+0xc>

	rsb	r3, #4
    1f0e:	rsb	r3, r3, #4
	subs	r2, r3
    1f12:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1f14:	lsls	r3, r3, #31
	itt ne
    1f16:	itt	ne
	ldrbne  r3, [r1], #1
    1f18:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1f1c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1f20:	bcc.n	1e24 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1f22:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1f26:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1f2a:	b.n	1e24 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1f2c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1f2e:	bcc.n	1ee4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1f30:	subs	r2, #1
	ldrb    r3, [r1], #1
    1f32:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1f36:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1f3a:	bcs.n	1f30 <memcpy+0x118>

	ldrb	r3, [r1]
    1f3c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1f3e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1f40:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1f42:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1f44:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1f46:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1f48:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1f4a:	bx	lr

00001f4c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1f4c:	movs	r0, #4
    1f4e:	mov	r1, lr
    1f50:	tst	r0, r1
    1f52:	beq.n	1f5c <_MSP>
    1f54:	mrs	r0, PSP
    1f58:	b.w	1f6c <HardFault_HandlerC>

00001f5c <_MSP>:
    1f5c:	mrs	r0, MSP
    1f60:	b.w	1f6c <HardFault_HandlerC>

00001f64 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1f64:	bx	lr
    1f66:	nop

00001f68 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1f68:	bx	lr
    1f6a:	nop

00001f6c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1f6c:	ldr	r3, [pc, #108]	; (1fdc <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1f6e:	movs	r1, #5
    1f70:	ldr	r2, [pc, #108]	; (1fe0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1f72:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1f74:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1f76:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1f7a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1f7c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1f80:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1f82:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1f84:	ldr	r4, [pc, #92]	; (1fe4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1f86:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1f88:	ldr	r0, [pc, #92]	; (1fe8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1f8a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1f8c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1f90:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1f94:	ldr	r3, [r4, #0]
    1f96:	cmp	r3, r0
    1f98:	bls.n	1fa0 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1f9a:	ldr	r0, [pc, #80]	; (1fec <HardFault_HandlerC+0x80>)
    1f9c:	bl	2738 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1fa0:	ldr	r5, [pc, #56]	; (1fdc <HardFault_HandlerC+0x70>)
    1fa2:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1fa4:	movs	r0, #0
    1fa6:	ldr	r2, [pc, #72]	; (1ff0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1fa8:	ldr	r1, [pc, #72]	; (1ff4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1faa:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1fae:	str	r0, [sp, #4]
    1fb0:	ldr	r3, [sp, #4]
    1fb2:	cmp	r3, r2
    1fb4:	bhi.n	1fc2 <HardFault_HandlerC+0x56>
    1fb6:	ldr	r3, [sp, #4]
    1fb8:	adds	r3, #1
    1fba:	str	r3, [sp, #4]
    1fbc:	ldr	r3, [sp, #4]
    1fbe:	cmp	r3, r2
    1fc0:	bls.n	1fb6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1fc2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1fc6:	str	r0, [sp, #4]
    1fc8:	ldr	r3, [sp, #4]
    1fca:	cmp	r3, r1
    1fcc:	bhi.n	1faa <HardFault_HandlerC+0x3e>
    1fce:	ldr	r3, [sp, #4]
    1fd0:	adds	r3, #1
    1fd2:	str	r3, [sp, #4]
    1fd4:	ldr	r3, [sp, #4]
    1fd6:	cmp	r3, r1
    1fd8:	bls.n	1fce <HardFault_HandlerC+0x62>
    1fda:	b.n	1faa <HardFault_HandlerC+0x3e>
    1fdc:	.word	0x401bc000
    1fe0:	.word	0x401f8000
    1fe4:	.word	0x200009c4
    1fe8:	.word	0x23c345ff
    1fec:	.word	0x11e1a300
    1ff0:	.word	0x000f423f
    1ff4:	.word	0x0089543f

00001ff8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1ff8:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1ffa:	ldr	r1, [pc, #80]	; (204c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1ffc:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2000:	ldr	r5, [pc, #76]	; (2050 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2002:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2004:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2008:	ldr	r6, [pc, #72]	; (2054 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    200a:	ldr	r2, [pc, #76]	; (2058 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    200c:	add.w	r5, r5, r0, lsl #5
    2010:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2012:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2014:	mov	r0, r5
    2016:	ldrh	r2, [r6, #0]
    2018:	bl	3298 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    201c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    201e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2022:	add	r1, r4
	asm("dsb");
    2024:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2028:	ldr	r2, [pc, #48]	; (205c <rx_queue_transfer+0x64>)
    202a:	str	r3, [r2, #0]
		location += 32;
    202c:	adds	r3, #32
	} while (location < end_addr);
    202e:	cmp	r1, r3
    2030:	bhi.n	202a <rx_queue_transfer+0x32>
	asm("dsb");
    2032:	dsb	sy
	asm("isb");
    2036:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    203a:	movs	r0, #3
    203c:	mov	r1, r5
    203e:	bl	32f0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2042:	ldr	r3, [pc, #28]	; (2060 <rx_queue_transfer+0x68>)
    2044:	mov.w	r2, #131072	; 0x20000
    2048:	str	r2, [r3, #0]
    204a:	pop	{r3, r4, r5, r6, r7, pc}
    204c:	.word	0x20200000
    2050:	.word	0x200012c0
    2054:	.word	0x200013ce
    2058:	.word	0xe000e18c
    205c:	.word	0xe000ef5c
    2060:	.word	0xe000e10c

00002064 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2064:	ldr	r2, [pc, #144]	; (20f8 <rx_event+0x94>)
    2066:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2068:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    206c:	ubfx	r3, r3, #16, #15
    2070:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    2072:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2074:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2076:	cmp	r4, #0
    2078:	ble.n	20ec <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    207a:	ldr	r1, [pc, #128]	; (20fc <rx_event+0x98>)
		if (head != rx_tail) {
    207c:	ldr	r2, [pc, #128]	; (2100 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    207e:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2080:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2082:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2084:	ldr	r0, [pc, #124]	; (2104 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    2086:	ldr	r6, [pc, #128]	; (2108 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2088:	cmp	r3, r2
    208a:	beq.n	209c <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    208c:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2090:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2094:	rsb	r2, r7, #512	; 0x200
    2098:	cmp	r4, r2
    209a:	bls.n	20c2 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    209c:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    209e:	movs	r2, #0
    20a0:	ldr	r7, [pc, #104]	; (210c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    20a2:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    20a4:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    20a8:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    20ac:	ldr	r6, [pc, #96]	; (2110 <rx_event+0xac>)
    20ae:	ite	ls
    20b0:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    20b2:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    20b4:	strb	r2, [r1, #0]
		rx_available += len;
    20b6:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    20b8:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    20ba:	add	r4, r2
    20bc:	str	r4, [r6, #0]
    20be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    20c2:	ldr	r3, [pc, #80]	; (2114 <rx_event+0xb0>)
    20c4:	add.w	r0, r7, r8, lsl #9
    20c8:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    20ca:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    20cc:	add.w	r1, r3, r5, lsl #9
    20d0:	add	r0, r3
    20d2:	bl	1e18 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    20d6:	ldr	r2, [pc, #56]	; (2110 <rx_event+0xac>)
				rx_queue_transfer(i);
    20d8:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    20da:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    20de:	ldr	r3, [r2, #0]
    20e0:	add	r4, r3
    20e2:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    20e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    20e8:	b.w	1ff8 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    20ec:	mov	r0, r5
	}
}
    20ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    20f2:	b.w	1ff8 <rx_queue_transfer>
    20f6:	nop
    20f8:	.word	0x200013ce
    20fc:	.word	0x200013e4
    2100:	.word	0x200013c0
    2104:	.word	0x200013c4
    2108:	.word	0x200013d0
    210c:	.word	0x200012a0
    2110:	.word	0x200013e0
    2114:	.word	0x20200000

00002118 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2118:	ldr	r3, [pc, #120]	; (2194 <usb_serial_flush_callback+0x7c>)
    211a:	ldrb	r2, [r3, #0]
    211c:	cbnz	r2, 2136 <usb_serial_flush_callback+0x1e>
    211e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    2122:	ldr	r2, [pc, #116]	; (2198 <usb_serial_flush_callback+0x80>)
    2124:	ldrb	r2, [r2, #0]
    2126:	cbz	r2, 2136 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2128:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    212c:	ldr	r5, [pc, #108]	; (219c <usb_serial_flush_callback+0x84>)
    212e:	ldrh	r2, [r5, #0]
    2130:	cbnz	r2, 2138 <usb_serial_flush_callback+0x20>
    2132:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2136:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2138:	ldr	r6, [pc, #100]	; (21a0 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    213a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    213e:	ldr	r7, [pc, #100]	; (21a4 <usb_serial_flush_callback+0x8c>)
    2140:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2142:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2144:	ldr	r4, [pc, #96]	; (21a8 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2146:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    214a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    214e:	mov	r0, r7
    2150:	mov	r1, r4
    2152:	bl	3298 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2156:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    215a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    215e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2162:	ldr	r3, [pc, #72]	; (21ac <usb_serial_flush_callback+0x94>)
    2164:	str	r1, [r3, #0]
		location += 32;
    2166:	adds	r1, #32
	} while (location < end_addr);
    2168:	cmp	r2, r1
    216a:	bhi.n	2164 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    216c:	dsb	sy
	asm("isb");
    2170:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2174:	movs	r0, #4
    2176:	mov	r1, r7
    2178:	bl	32c8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    217c:	ldrb	r3, [r6, #0]
    217e:	ldr	r2, [pc, #32]	; (21a0 <usb_serial_flush_callback+0x88>)
    2180:	adds	r3, #1
    2182:	uxtb	r3, r3
    2184:	cmp	r3, #3
    2186:	it	hi
    2188:	movhi	r3, #0
    218a:	strb	r3, [r2, #0]
	tx_available = 0;
    218c:	movs	r3, #0
    218e:	strh	r3, [r5, #0]
    2190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2194:	.word	0x200012b2
    2198:	.word	0x200014b8
    219c:	.word	0x200013e6
    21a0:	.word	0x200012b3
    21a4:	.word	0x20001400
    21a8:	.word	0x20201000
    21ac:	.word	0xe000ef70

000021b0 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    21b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	sub	sp, #20
    21b6:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    21b8:	str	r1, [sp, #4]
    21ba:	cmp	r1, #0
    21bc:	beq.w	2304 <usb_serial_write.part.1+0x154>
    21c0:	movs	r3, #0
    21c2:	ldr.w	r8, [pc, #348]	; 2320 <usb_serial_write.part.1+0x170>
    21c6:	ldr.w	r9, [pc, #332]	; 2314 <usb_serial_write.part.1+0x164>
    21ca:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    21cc:	ldr	r6, [pc, #312]	; (2308 <usb_serial_write.part.1+0x158>)
    21ce:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    21d2:	ldr.w	sl, [pc, #336]	; 2324 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    21d6:	ldr.w	fp, [pc, #336]	; 2328 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    21da:	ldr	r2, [pc, #304]	; (230c <usb_serial_write.part.1+0x15c>)
    21dc:	ldrb	r4, [r2, #0]
    21de:	ldr	r2, [pc, #304]	; (2310 <usb_serial_write.part.1+0x160>)
    21e0:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    21e4:	cmp	r3, #0
    21e6:	bne.n	22c6 <usb_serial_write.part.1+0x116>
    21e8:	mov	r5, r3
    21ea:	mov	r4, r3
    21ec:	b.n	2218 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    21ee:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    21f2:	cbnz	r4, 21f6 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    21f4:	ldr	r5, [r6, #0]
    21f6:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    21f8:	cmp	r3, #0
    21fa:	bne.n	22ba <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    21fc:	ldr	r3, [r6, #0]
    21fe:	subs	r3, r3, r5
    2200:	cmp	r3, #120	; 0x78
    2202:	bhi.n	22f8 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2204:	ldrb.w	r3, [sl]
    2208:	cmp	r3, #0
    220a:	beq.n	22ba <usb_serial_write.part.1+0x10a>
			yield();
    220c:	bl	3800 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2210:	ldrh.w	r3, [r8]
    2214:	cmp	r3, #0
    2216:	bne.n	22c2 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2218:	mov	r0, r7
    221a:	bl	3314 <usb_transfer_status>
			if (!(status & 0x80)) {
    221e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2222:	ldr	r2, [pc, #240]	; (2314 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2224:	bne.n	21ee <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2226:	mov.w	r3, #2048	; 0x800
    222a:	ldr	r2, [pc, #224]	; (230c <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    222c:	strb.w	r0, [r9]
    2230:	ldrb	r4, [r2, #0]
    2232:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2234:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2238:	lsls	r4, r4, #11
		if (size >= tx_available) {
    223a:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    223c:	ldr	r1, [pc, #216]	; (2318 <usb_serial_write.part.1+0x168>)
    223e:	add	r0, r4
		if (size >= tx_available) {
    2240:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2242:	add	r0, r1
		if (size >= tx_available) {
    2244:	bcc.n	22ce <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2246:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2248:	ldr	r1, [sp, #8]
    224a:	bl	1e18 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    224e:	movs	r3, #0
    2250:	mov	r1, r4
    2252:	mov.w	r2, #2048	; 0x800
    2256:	mov	r0, r7
    2258:	bl	3298 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    225c:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2260:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    2264:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2268:	str.w	r3, [fp]
		location += 32;
    226c:	adds	r3, #32
	} while (location < end_addr);
    226e:	cmp	r4, r3
    2270:	bhi.n	2268 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    2272:	dsb	sy
	asm("isb");
    2276:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    227a:	movs	r0, #4
    227c:	mov	r1, r7
    227e:	bl	32c8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2282:	ldr	r3, [pc, #136]	; (230c <usb_serial_write.part.1+0x15c>)
    2284:	ldr	r2, [pc, #132]	; (230c <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    2286:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2288:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    228a:	ldr	r0, [pc, #144]	; (231c <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    228c:	adds	r3, #1
    228e:	uxtb	r3, r3
    2290:	cmp	r3, #3
    2292:	it	hi
    2294:	movhi	r3, #0
    2296:	strb	r3, [r2, #0]
			size -= tx_available;
    2298:	ldrh.w	r2, [r8]
			sent += tx_available;
    229c:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    229e:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    22a2:	add	r3, r2
    22a4:	str	r3, [sp, #0]
			data += tx_available;
    22a6:	ldr	r3, [sp, #8]
    22a8:	add	r3, r2
    22aa:	str	r3, [sp, #8]
    22ac:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    22ae:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    22b2:	ldr	r1, [sp, #4]
    22b4:	subs	r2, r1, r2
    22b6:	str	r2, [sp, #4]
    22b8:	bne.n	21da <usb_serial_write.part.1+0x2a>
    22ba:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    22bc:	add	sp, #20
    22be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c2:	ldr	r2, [pc, #72]	; (230c <usb_serial_write.part.1+0x15c>)
    22c4:	ldrb	r4, [r2, #0]
    22c6:	mov	r2, r3
    22c8:	rsb	r0, r3, #2048	; 0x800
    22cc:	b.n	2238 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    22ce:	ldr	r4, [sp, #4]
    22d0:	ldr	r1, [sp, #8]
    22d2:	mov	r2, r4
    22d4:	str	r3, [sp, #12]
    22d6:	bl	1e18 <memcpy>
			tx_available -= size;
    22da:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    22dc:	ldr	r2, [pc, #60]	; (231c <usb_serial_write.part.1+0x16c>)
    22de:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    22e2:	subs	r3, r3, r4
    22e4:	strh.w	r3, [r8]
    22e8:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    22ea:	str.w	r1, [r2, #132]	; 0x84
    22ee:	mov	r0, r3
    22f0:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    22f2:	add	sp, #20
    22f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    22f8:	movs	r3, #1
				return sent;
    22fa:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    22fc:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    22fe:	add	sp, #20
    2300:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2304:	ldr	r0, [sp, #4]
    2306:	b.n	22bc <usb_serial_write.part.1+0x10c>
    2308:	.word	0x200014c4
    230c:	.word	0x200012b3
    2310:	.word	0x20001400
    2314:	.word	0x200013e5
    2318:	.word	0x20201000
    231c:	.word	0x402e0000
    2320:	.word	0x200013e6
    2324:	.word	0x200014b8
    2328:	.word	0xe000ef70

0000232c <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    232c:	bx	lr
    232e:	nop

00002330 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2330:	ldr	r3, [pc, #196]	; (23f8 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    2332:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2336:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2338:	ldr	r7, [pc, #192]	; (23fc <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    233a:	cmp	r3, #0
    233c:	beq.n	23e8 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    233e:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    2342:	ldr.w	r8, [pc, #236]	; 2430 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    2346:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2348:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    234c:	movs	r1, #0
    234e:	movs	r2, #128	; 0x80
    2350:	ldr	r0, [pc, #172]	; (2400 <usb_serial_configure+0xd0>)
	tx_head = 0;
    2352:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2354:	ldr	r6, [pc, #172]	; (2404 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2356:	bl	5d5c <memset>
	tx_head = 0;
    235a:	ldr	r4, [pc, #172]	; (2408 <usb_serial_configure+0xd8>)
	tx_available = 0;
    235c:	ldr	r3, [pc, #172]	; (240c <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    235e:	mov	r1, r5
    2360:	mov.w	r2, #256	; 0x100
    2364:	ldr	r0, [pc, #168]	; (2410 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    2366:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2368:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    236a:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    236c:	bl	5d5c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2370:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2372:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2374:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2376:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2378:	str	r5, [r6, #8]
    237a:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    237c:	ldr	r1, [pc, #148]	; (2414 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    237e:	ldr	r6, [pc, #152]	; (2418 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    2380:	ldr	r0, [pc, #152]	; (241c <usb_serial_configure+0xec>)
	rx_available = 0;
    2382:	ldr.w	lr, [pc, #176]	; 2434 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2386:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2388:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    238a:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    238c:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    238e:	str	r5, [r6, #0]
    2390:	str	r5, [r6, #4]
    2392:	str	r5, [r6, #8]
    2394:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    2396:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    239a:	bl	3230 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    239e:	ldrh.w	r1, [r8]
    23a2:	mov	r2, r5
    23a4:	ldr	r3, [pc, #120]	; (2420 <usb_serial_configure+0xf0>)
    23a6:	movs	r0, #3
    23a8:	bl	31cc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    23ac:	mov	r3, r5
    23ae:	ldrh	r1, [r7, #0]
    23b0:	movs	r2, #1
    23b2:	movs	r0, #4
    23b4:	bl	3230 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    23b8:	mov	r0, r4
    23ba:	adds	r4, #1
    23bc:	bl	1ff8 <rx_queue_transfer>
    23c0:	cmp	r4, #8
    23c2:	bne.n	23b8 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    23c4:	ldr	r3, [pc, #92]	; (2424 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    23c6:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    23c8:	ldr	r0, [pc, #92]	; (2428 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    23ca:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    23cc:	ldr	r4, [pc, #92]	; (242c <usb_serial_configure+0xfc>)
    23ce:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    23d0:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    23d4:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    23d8:	ldr.w	r2, [r3, #328]	; 0x148
    23dc:	orr.w	r2, r2, #16777216	; 0x1000000
    23e0:	str.w	r2, [r3, #328]	; 0x148
    23e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    23e8:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    23ea:	ldr.w	r8, [pc, #68]	; 2430 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    23ee:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    23f0:	strh.w	r3, [r8]
    23f4:	b.n	234c <usb_serial_configure+0x1c>
    23f6:	nop
    23f8:	.word	0x20001490
    23fc:	.word	0x200012b0
    2400:	.word	0x20001400
    2404:	.word	0x200013d0
    2408:	.word	0x200012b3
    240c:	.word	0x200013e6
    2410:	.word	0x200012c0
    2414:	.word	0x200013e4
    2418:	.word	0x200012a0
    241c:	.word	0x200013c0
    2420:	.word	0x00002065
    2424:	.word	0x402e0000
    2428:	.word	0x20001480
    242c:	.word	0x00002119
    2430:	.word	0x200013ce
    2434:	.word	0x200013e0

00002438 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2438:	ldr	r3, [pc, #196]	; (2500 <usb_serial_read+0xc8>)
    243a:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    243e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2442:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2444:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2446:	ldr	r3, [pc, #188]	; (2504 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2448:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    244a:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    244c:	cmp	r1, #0
    244e:	beq.n	24f8 <usb_serial_read+0xc0>
    2450:	ldr	r3, [pc, #180]	; (2508 <usb_serial_read+0xd0>)
    2452:	uxtb	r4, r4
    2454:	ldrb	r3, [r3, #0]
    2456:	cmp	r4, r3
    2458:	beq.n	24fc <usb_serial_read+0xc4>
    245a:	mov	sl, r0
    245c:	movs	r7, #0
    245e:	ldr.w	fp, [pc, #192]	; 2520 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    2462:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2464:	ldr	r3, [pc, #164]	; (250c <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    2466:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    246a:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    246c:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    246e:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    2470:	ldr	r3, [pc, #156]	; (2510 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2472:	it	cs
    2474:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2476:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2478:	ldr	r3, [pc, #144]	; (250c <usb_serial_read+0xd4>)
    247a:	ldrh.w	lr, [r3, r5, lsl #1]
    247e:	ldr	r3, [pc, #148]	; (2514 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2480:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2484:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2488:	ldr	r3, [pc, #140]	; (2518 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    248a:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    248e:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2490:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2492:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    2494:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2496:	bcs.n	24cc <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2498:	add.w	r1, lr, r5, lsl #9
    249c:	mov	r2, r8
    249e:	add	r1, r3
    24a0:	bl	1e18 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    24a4:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    24a6:	ldr.w	r1, [fp]
    24aa:	mov	r0, r9
			rx_index[i] += len;
    24ac:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    24b0:	rsb	r1, r8, r1
			rx_index[i] += len;
    24b4:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    24b6:	str.w	r1, [fp]
			rx_index[i] += len;
    24ba:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    24be:	ldr	r3, [pc, #92]	; (251c <usb_serial_read+0xe4>)
    24c0:	mov.w	r2, #131072	; 0x20000
    24c4:	str	r2, [r3, #0]
	return count;
}
    24c6:	add	sp, #12
    24c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    24cc:	bl	1e18 <memcpy>
			p += avail;
			rx_available -= avail;
    24d0:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    24d4:	uxtb	r3, r4
			rx_queue_transfer(i);
    24d6:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    24d8:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    24da:	add	sl, r6
			rx_available -= avail;
    24dc:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    24e0:	ldr	r2, [pc, #32]	; (2504 <usb_serial_read+0xcc>)
    24e2:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    24e4:	bl	1ff8 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    24e8:	cmp	r9, r7
    24ea:	bls.n	24f4 <usb_serial_read+0xbc>
    24ec:	ldr	r3, [pc, #24]	; (2508 <usb_serial_read+0xd0>)
    24ee:	ldrb	r3, [r3, #0]
    24f0:	cmp	r4, r3
    24f2:	bne.n	2462 <usb_serial_read+0x2a>
    24f4:	mov	r0, r7
    24f6:	b.n	24be <usb_serial_read+0x86>
    24f8:	mov	r0, r1
    24fa:	b.n	24be <usb_serial_read+0x86>
    24fc:	movs	r0, #0
    24fe:	b.n	24be <usb_serial_read+0x86>
    2500:	.word	0xe000e18c
    2504:	.word	0x200013c0
    2508:	.word	0x200013e4
    250c:	.word	0x200012a0
    2510:	.word	0x200013c4
    2514:	.word	0x200013d0
    2518:	.word	0x20200000
    251c:	.word	0xe000e10c
    2520:	.word	0x200013e0

00002524 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2524:	ldr	r3, [pc, #44]	; (2554 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2526:	ldr	r2, [pc, #48]	; (2558 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2528:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    252a:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    252c:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    252e:	cmp	r3, r2
    2530:	beq.n	254e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2532:	adds	r3, #1
	uint32_t i = rx_list[tail];
    2534:	ldr	r0, [pc, #36]	; (255c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2536:	ldr	r2, [pc, #40]	; (2560 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2538:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    253a:	ldr	r1, [pc, #40]	; (2564 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    253c:	it	cs
    253e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2540:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2542:	ldrh.w	r1, [r1, r3, lsl #1]
    2546:	add.w	r3, r2, r3, lsl #9
    254a:	ldrb	r0, [r3, r1]
    254c:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    254e:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    2552:	bx	lr
    2554:	.word	0x200013c0
    2558:	.word	0x200013e4
    255c:	.word	0x200013c4
    2560:	.word	0x20200000
    2564:	.word	0x200012a0

00002568 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    2568:	ldr	r3, [pc, #4]	; (2570 <usb_serial_available+0x8>)
    256a:	ldr	r0, [r3, #0]
}
    256c:	bx	lr
    256e:	nop
    2570:	.word	0x200013e0

00002574 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2574:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2578:	ldr	r6, [pc, #84]	; (25d0 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    257a:	ldr	r5, [pc, #88]	; (25d4 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    257c:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    257e:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2580:	uxtb	r4, r4
	while (tail != rx_head) {
    2582:	cmp	r4, r3
    2584:	beq.n	25ca <usb_serial_flush_input+0x56>
    2586:	ldr.w	r9, [pc, #84]	; 25dc <usb_serial_flush_input+0x68>
    258a:	ldr.w	fp, [pc, #84]	; 25e0 <usb_serial_flush_input+0x6c>
    258e:	ldr.w	r8, [pc, #84]	; 25e4 <usb_serial_flush_input+0x70>
    2592:	ldr	r7, [pc, #68]	; (25d8 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2594:	adds	r4, #1
    2596:	cmp	r4, #8
    2598:	uxtb.w	sl, r4
    259c:	bls.n	25a2 <usb_serial_flush_input+0x2e>
    259e:	movs	r4, #0
    25a0:	mov	sl, r4
		uint32_t i = rx_list[tail];
    25a2:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    25a6:	ldr.w	r2, [fp]
    25aa:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    25ae:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    25b0:	ldrh.w	r1, [r7, r1, lsl #1]
    25b4:	subs	r3, r3, r1
    25b6:	subs	r3, r2, r3
    25b8:	str.w	r3, [fp]
		rx_queue_transfer(i);
    25bc:	bl	1ff8 <rx_queue_transfer>
		rx_tail = tail;
    25c0:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    25c4:	ldrb	r3, [r5, #0]
    25c6:	cmp	r4, r3
    25c8:	bne.n	2594 <usb_serial_flush_input+0x20>
    25ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ce:	nop
    25d0:	.word	0x200013c0
    25d4:	.word	0x200013e4
    25d8:	.word	0x200012a0
    25dc:	.word	0x200013c4
    25e0:	.word	0x200013e0
    25e4:	.word	0x200013d0

000025e8 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    25e8:	push	{lr}
    25ea:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    25ec:	movs	r1, #1
    25ee:	add.w	r0, sp, #7
    25f2:	bl	2438 <usb_serial_read>
    25f6:	cbz	r0, 2602 <usb_serial_getchar+0x1a>
    25f8:	ldrb.w	r0, [sp, #7]
	return -1;
}
    25fc:	add	sp, #12
    25fe:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    2602:	mov.w	r0, #4294967295
    2606:	b.n	25fc <usb_serial_getchar+0x14>

00002608 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2608:	ldr	r3, [pc, #36]	; (2630 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    260a:	push	{lr}
    260c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    260e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2610:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2614:	cbnz	r3, 2620 <usb_serial_putchar+0x18>
    2616:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    261a:	add	sp, #12
    261c:	ldr.w	pc, [sp], #4
    2620:	movs	r1, #1
    2622:	add.w	r0, sp, #7
    2626:	bl	21b0 <usb_serial_write.part.1>
    262a:	add	sp, #12
    262c:	ldr.w	pc, [sp], #4
    2630:	.word	0x200014b8

00002634 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2634:	ldr	r3, [pc, #16]	; (2648 <usb_serial_write+0x14>)
    2636:	ldrb	r3, [r3, #0]
    2638:	and.w	r2, r3, #255	; 0xff
    263c:	cbz	r3, 2642 <usb_serial_write+0xe>
    263e:	b.w	21b0 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2642:	mov	r0, r2
    2644:	bx	lr
    2646:	nop
    2648:	.word	0x200014b8

0000264c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    264c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2650:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2652:	ldr.w	r8, [pc, #64]	; 2694 <usb_serial_write_buffer_free+0x48>
    2656:	movs	r3, #1
    2658:	ldr	r5, [pc, #48]	; (268c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    265a:	mov	r7, r4
    265c:	ldr	r6, [pc, #48]	; (2690 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    265e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2662:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2664:	mov	r0, r5
    2666:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2668:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    266a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    266e:	beq.n	267c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2670:	bl	3314 <usb_transfer_status>
    2674:	lsls	r3, r0, #24
    2676:	it	pl
    2678:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    267c:	cmp	r4, #4
    267e:	bne.n	2662 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2680:	movs	r3, #0
	return sum;
}
    2682:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2684:	strb.w	r3, [r8]
	return sum;
}
    2688:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    268c:	.word	0x20001400
    2690:	.word	0x200012b3
    2694:	.word	0x200012b2

00002698 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2698:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    269c:	ldr	r3, [pc, #124]	; (271c <usb_serial_flush_output+0x84>)
    269e:	ldrb	r3, [r3, #0]
    26a0:	cbz	r3, 26a8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    26a2:	ldr	r5, [pc, #124]	; (2720 <usb_serial_flush_output+0x88>)
    26a4:	ldrh	r2, [r5, #0]
    26a6:	cbnz	r2, 26ac <usb_serial_flush_output+0x14>
    26a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    26ac:	ldr.w	r8, [pc, #132]	; 2734 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    26b0:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    26b4:	ldr	r6, [pc, #108]	; (2724 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    26b6:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    26ba:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    26be:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    26c0:	ldr	r4, [pc, #100]	; (2728 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    26c2:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    26c4:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    26c8:	ldr	r7, [pc, #96]	; (272c <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    26ca:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    26ce:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    26d0:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    26d4:	mov	r1, r4
    26d6:	bl	3298 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    26da:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    26de:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    26e2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    26e6:	ldr	r3, [pc, #72]	; (2730 <usb_serial_flush_output+0x98>)
    26e8:	str	r1, [r3, #0]
		location += 32;
    26ea:	adds	r1, #32
	} while (location < end_addr);
    26ec:	cmp	r2, r1
    26ee:	bhi.n	26e8 <usb_serial_flush_output+0x50>
	asm("dsb");
    26f0:	dsb	sy
	asm("isb");
    26f4:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    26f8:	movs	r0, #4
    26fa:	mov	r1, r6
    26fc:	bl	32c8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2700:	ldrb.w	r3, [r8]
    2704:	ldr	r2, [pc, #44]	; (2734 <usb_serial_flush_output+0x9c>)
    2706:	adds	r3, #1
    2708:	uxtb	r3, r3
    270a:	cmp	r3, #3
    270c:	it	hi
    270e:	movhi	r3, #0
    2710:	strb	r3, [r2, #0]
	tx_available = 0;
    2712:	movs	r3, #0
    2714:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2716:	strb	r3, [r7, #0]
    2718:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    271c:	.word	0x200014b8
    2720:	.word	0x200013e6
    2724:	.word	0x20001400
    2728:	.word	0x20201000
    272c:	.word	0x200012b2
    2730:	.word	0xe000ef70
    2734:	.word	0x200012b3

00002738 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2738:	ldr	r2, [pc, #600]	; (2994 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    273a:	ldr	r3, [pc, #604]	; (2998 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    273c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    273e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    2742:	ldr	r4, [pc, #600]	; (299c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2744:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2748:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    274a:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    274c:	bls.n	2788 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    274e:	ldr	r3, [pc, #592]	; (29a0 <set_arm_clock+0x268>)
    2750:	cmp	r0, r3
    2752:	bls.w	2980 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2756:	ldr	r3, [pc, #588]	; (29a4 <set_arm_clock+0x26c>)
    2758:	movw	r5, #1575	; 0x627
    275c:	ldr	r7, [pc, #584]	; (29a8 <set_arm_clock+0x270>)
    275e:	add	r3, r0
    2760:	ldr	r4, [pc, #584]	; (29ac <set_arm_clock+0x274>)
    2762:	lsrs	r2, r3, #8
    2764:	umull	r3, r2, r7, r2
    2768:	lsrs	r3, r2, #7
    276a:	add.w	r3, r3, r3, lsl #2
    276e:	add.w	r2, r3, r3, lsl #2
    2772:	addw	r3, r2, #1250	; 0x4e2
    2776:	cmp	r3, r5
    2778:	it	cs
    277a:	movcs	r3, r5
    277c:	sub.w	r3, r3, #800	; 0x320
    2780:	umull	r3, r5, r4, r3
    2784:	lsrs	r5, r5, #3
    2786:	b.n	2792 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2788:	ldr	r5, [pc, #548]	; (29b0 <set_arm_clock+0x278>)
    278a:	cmp	r0, r5
    278c:	ite	ls
    278e:	movls	r5, #6
    2790:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2792:	ldr	r2, [pc, #516]	; (2998 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2794:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2798:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    279c:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    279e:	orr.w	r3, r3, #192	; 0xc0
    27a2:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27a6:	bcs.n	27be <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    27a8:	ldr	r3, [pc, #496]	; (299c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    27aa:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    27ae:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    27b0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    27b2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    27b4:	ldr	r3, [r2, #0]
    27b6:	cmp	r3, #0
    27b8:	bge.n	27b4 <set_arm_clock+0x7c>
    27ba:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    27be:	ands.w	r3, lr, #33554432	; 0x2000000
    27c2:	bne.n	2828 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    27c4:	ldr	r4, [pc, #492]	; (29b4 <set_arm_clock+0x27c>)
    27c6:	ldr	r2, [pc, #496]	; (29b8 <set_arm_clock+0x280>)
    27c8:	ldr.w	ip, [r4, #16]
    27cc:	mov	r4, r2
    27ce:	and.w	r2, ip, r2
    27d2:	cmp	r2, r4
    27d4:	itet	eq
    27d6:	moveq.w	r3, #402653184	; 0x18000000
    27da:	movne.w	r2, #4096	; 0x1000
    27de:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    27e0:	eor.w	r4, lr, r3
    27e4:	tst.w	r4, #939524096	; 0x38000000
    27e8:	beq.n	27fc <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    27ea:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    27ee:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    27f2:	ldr	r4, [pc, #420]	; (2998 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    27f4:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    27f8:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    27fc:	eor.w	r3, r1, r2
    2800:	tst.w	r3, #12288	; 0x3000
    2804:	beq.n	2818 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2806:	ldr	r3, [pc, #400]	; (2998 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2808:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    280c:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    280e:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2810:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2812:	ldr	r3, [r2, #72]	; 0x48
    2814:	lsls	r4, r3, #28
    2816:	bmi.n	2812 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2818:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    281c:	ldr	r2, [pc, #376]	; (2998 <set_arm_clock+0x260>)
    281e:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2822:	ldr	r3, [r2, #72]	; 0x48
    2824:	lsls	r1, r3, #26
    2826:	bmi.n	2822 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2828:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    282a:	ldr	r4, [pc, #400]	; (29bc <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    282c:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    282e:	mul.w	r3, r1, r2
    2832:	mul.w	r3, r0, r3
    2836:	cmp	r3, r4
    2838:	bhi.n	284e <set_arm_clock+0x116>
		if (div_arm < 8) {
    283a:	cmp	r2, #7
    283c:	bhi.w	296a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2840:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2842:	mul.w	r3, r1, r2
    2846:	mul.w	r3, r0, r3
    284a:	cmp	r3, r4
    284c:	bls.n	283a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    284e:	ldr	r0, [pc, #368]	; (29c0 <set_arm_clock+0x288>)
    2850:	ldr	r4, [pc, #368]	; (29c4 <set_arm_clock+0x28c>)
    2852:	add	r0, r3
    2854:	umull	r0, r3, r4, r0
    2858:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    285a:	cmp	r3, #108	; 0x6c
    285c:	bhi.w	2976 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2860:	cmp	r3, #53	; 0x35
    2862:	bhi.w	2984 <set_arm_clock+0x24c>
    2866:	ldr.w	r8, [pc, #392]	; 29f0 <set_arm_clock+0x2b8>
    286a:	movs	r3, #54	; 0x36
    286c:	ldr	r0, [pc, #344]	; (29c8 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    286e:	ldr.w	ip, [pc, #324]	; 29b4 <set_arm_clock+0x27c>
    2872:	ldr	r4, [pc, #344]	; (29cc <set_arm_clock+0x294>)
    2874:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2878:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    287c:	and.w	r4, r9, r4
    2880:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2882:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2886:	beq.n	28a0 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2888:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    288c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2890:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2892:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2896:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    289a:	ldr	r3, [r4, #0]
    289c:	cmp	r3, #0
    289e:	bge.n	289a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    28a0:	ldr.w	ip, [pc, #244]	; 2998 <set_arm_clock+0x260>
    28a4:	subs	r2, #1
    28a6:	ldr.w	r3, [ip, #16]
    28aa:	and.w	r3, r3, #7
    28ae:	cmp	r3, r2
    28b0:	beq.n	28c2 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    28b2:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    28b6:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    28b8:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    28bc:	ldr	r3, [r4, #72]	; 0x48
    28be:	lsls	r3, r3, #15
    28c0:	bmi.n	28bc <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    28c2:	subs	r1, #1
    28c4:	lsls	r1, r1, #10
    28c6:	eor.w	r3, lr, r1
    28ca:	tst.w	r3, #7168	; 0x1c00
    28ce:	beq.n	28ea <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    28d0:	ldr	r3, [pc, #196]	; (2998 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    28d2:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    28d6:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    28da:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    28dc:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    28e0:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    28e4:	ldr	r3, [r2, #72]	; 0x48
    28e6:	lsls	r1, r3, #30
    28e8:	bmi.n	28e4 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    28ea:	ldr	r3, [pc, #228]	; (29d0 <set_arm_clock+0x298>)
    28ec:	ldr	r1, [pc, #228]	; (29d4 <set_arm_clock+0x29c>)
    28ee:	add	r3, r0
    28f0:	lsrs	r3, r3, #7
    28f2:	umull	r3, r1, r1, r3
    28f6:	lsrs	r1, r1, #12
    28f8:	cmp	r1, #4
    28fa:	it	cs
    28fc:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    28fe:	subs	r3, r1, #1
    2900:	lsls	r3, r3, #8
    2902:	eor.w	r2, lr, r3
    2906:	tst.w	r2, #768	; 0x300
    290a:	beq.n	291c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    290c:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2910:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2914:	ldr	r2, [pc, #128]	; (2998 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2916:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    291a:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    291c:	ldr	r3, [pc, #120]	; (2998 <set_arm_clock+0x260>)
    291e:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2920:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2922:	bic.w	r4, r4, #33554432	; 0x2000000
    2926:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2928:	ldr	r3, [r2, #72]	; 0x48
    292a:	lsls	r3, r3, #26
    292c:	bmi.n	2928 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    292e:	ldr	r3, [pc, #168]	; (29d8 <set_arm_clock+0x2a0>)
    2930:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2934:	ldr	r4, [pc, #164]	; (29dc <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2936:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2938:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    293c:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    293e:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2942:	ldr	r4, [pc, #156]	; (29e0 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2944:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2948:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    294c:	ldr	r2, [pc, #148]	; (29e4 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    294e:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2950:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2952:	bcs.n	2966 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2954:	ldr	r3, [pc, #68]	; (299c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2956:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    295a:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    295c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    295e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2960:	ldr	r3, [r2, #0]
    2962:	cmp	r3, #0
    2964:	bge.n	2960 <set_arm_clock+0x228>
	}

	return frequency;
}
    2966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    296a:	cmp	r1, #4
    296c:	bhi.w	284e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2970:	adds	r1, #1
				div_arm = 1;
    2972:	movs	r2, #1
    2974:	b.n	282e <set_arm_clock+0xf6>
    2976:	ldr.w	r8, [pc, #124]	; 29f4 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    297a:	movs	r3, #108	; 0x6c
    297c:	ldr	r0, [pc, #104]	; (29e8 <set_arm_clock+0x2b0>)
    297e:	b.n	286e <set_arm_clock+0x136>
    2980:	movs	r5, #18
    2982:	b.n	2792 <set_arm_clock+0x5a>
    2984:	ldr	r0, [pc, #100]	; (29ec <set_arm_clock+0x2b4>)
    2986:	ldr.w	r8, [pc, #112]	; 29f8 <set_arm_clock+0x2c0>
    298a:	mul.w	r0, r0, r3
    298e:	orr.w	r8, r3, r8
    2992:	b.n	286e <set_arm_clock+0x136>
    2994:	.word	0x1f78a400
    2998:	.word	0x400fc000
    299c:	.word	0x40080000
    29a0:	.word	0x23c34600
    29a4:	.word	0xdc3cba00
    29a8:	.word	0x004cb223
    29ac:	.word	0x51eb851f
    29b0:	.word	0x016e3600
    29b4:	.word	0x400d8000
    29b8:	.word	0x80003040
    29bc:	.word	0x269fb1ff
    29c0:	.word	0x005b8d80
    29c4:	.word	0x165e9f81
    29c8:	.word	0x269fb200
    29cc:	.word	0x8001307f
    29d0:	.word	0x08f0d17f
    29d4:	.word	0x00e5109f
    29d8:	.word	0x431bde83
    29dc:	.word	0x200009c4
    29e0:	.word	0x200009c0
    29e4:	.word	0x200014c0
    29e8:	.word	0x4d3f6400
    29ec:	.word	0x00b71b00
    29f0:	.word	0x80002036
    29f4:	.word	0x8000206c
    29f8:	.word	0x80002000

000029fc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    29fc:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    29fe:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2a00:	cbz	r3, 2a0a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2a02:	ldr	r3, [r2, #4]
    2a04:	orr.w	r3, r3, #32768	; 0x8000
    2a08:	str	r3, [r2, #4]
	}
	__disable_irq();
    2a0a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2a0c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2a0e:	cbz	r4, 2a38 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2a10:	ldr	r3, [pc, #64]	; (2a54 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2a12:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2a14:	ldr.w	r4, [r3, #432]	; 0x1b0
    2a18:	tst	r4, r1
    2a1a:	bne.n	2a4c <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2a1c:	ldr.w	r4, [r3, #320]	; 0x140
    2a20:	orr.w	r4, r4, #16384	; 0x4000
    2a24:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2a28:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    2a2c:	ldr.w	r4, [r3, #320]	; 0x140
    2a30:	lsls	r4, r4, #17
    2a32:	bpl.n	2a1c <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2a34:	tst	r1, r5
    2a36:	bne.n	2a4c <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2a38:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    2a3a:	ldr	r4, [pc, #24]	; (2a54 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2a3c:	str	r2, [r0, #8]
	endpoint->status = 0;
    2a3e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2a40:	ldr.w	r3, [r4, #432]	; 0x1b0
    2a44:	orrs	r1, r3
    2a46:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2a4a:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2a4c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2a4e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2a50:	pop	{r4, r5}
    2a52:	bx	lr
    2a54:	.word	0x402e0000

00002a58 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2a58:	push	{r4, r5, r6, lr}
    2a5a:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2a5c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    2a5e:	cbz	r0, 2a86 <run_callbacks+0x2e>
    2a60:	mov	r2, r0
    2a62:	movs	r4, #0
    2a64:	b.n	2a6e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2a66:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2a68:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2a6a:	cmp	r2, #1
    2a6c:	beq.n	2a88 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2a6e:	ldr	r3, [r2, #4]
    2a70:	ands.w	r3, r3, #128	; 0x80
    2a74:	beq.n	2a66 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2a76:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2a78:	cbz	r4, 2a86 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2a7a:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2a7c:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    2a7e:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2a80:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2a82:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2a84:	bne.n	2a7a <run_callbacks+0x22>
    2a86:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    2a88:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    2a8a:	str	r3, [r6, #52]	; 0x34
			break;
    2a8c:	b.n	2a78 <run_callbacks+0x20>
    2a8e:	nop

00002a90 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2a90:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2a92:	cbnz	r1, 2ad2 <endpoint0_transmit.constprop.1+0x42>
    2a94:	ldr	r4, [pc, #136]	; (2b20 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a96:	ldr	r1, [pc, #140]	; (2b24 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a98:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2a9a:	ldr	r3, [pc, #140]	; (2b28 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a9c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a9e:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2aa0:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2aa2:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2aa4:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2aa6:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2aa8:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2aaa:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2aae:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ab0:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2ab4:	ldr	r5, [pc, #116]	; (2b2c <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ab6:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2aba:	ldr.w	r1, [r3, #432]	; 0x1b0
    2abe:	orr.w	r1, r1, #1
    2ac2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2ac6:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2ac8:	ldr.w	r3, [r2, #432]	; 0x1b0
    2acc:	cmp	r3, #0
    2ace:	bne.n	2ac8 <endpoint0_transmit.constprop.1+0x38>
}
    2ad0:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2ad2:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2ad4:	ldr	r3, [pc, #88]	; (2b30 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2ad6:	ldr	r5, [pc, #80]	; (2b28 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2ad8:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2ada:	ldr	r4, [pc, #68]	; (2b20 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2adc:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2ae0:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2ae2:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2ae4:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2ae6:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2aea:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2aec:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2af0:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2af2:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2af6:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2afa:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    2afe:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2b00:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2b02:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2b06:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2b0a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2b0e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2b10:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2b12:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2b16:	ldr.w	r3, [r2, #432]	; 0x1b0
    2b1a:	cmp	r3, #0
    2b1c:	bne.n	2b16 <endpoint0_transmit.constprop.1+0x86>
    2b1e:	b.n	2a96 <endpoint0_transmit.constprop.1+0x6>
    2b20:	.word	0x20003000
    2b24:	.word	0x20002020
    2b28:	.word	0x402e0000
    2b2c:	.word	0x20001494
    2b30:	.word	0x20002000

00002b34 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    2b34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2b38:	ldr	r4, [pc, #752]	; (2e2c <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    2b3a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2b3c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2b40:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2b44:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2b48:	beq.n	2c08 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2b4a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b4e:	cmp	r3, #0
    2b50:	beq.n	2bfe <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2b52:	mov.w	fp, #65537	; 0x10001
    2b56:	ldr.w	r9, [pc, #764]	; 2e54 <isr+0x320>
    2b5a:	ldr	r6, [pc, #724]	; (2e30 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2b5c:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2b5e:	mov	sl, fp
    2b60:	ldr	r0, [r6, #40]	; 0x28
    2b62:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2b64:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2b68:	ldr.w	r3, [r4, #320]	; 0x140
    2b6c:	orr.w	r3, r3, #8192	; 0x2000
    2b70:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2b74:	ldr.w	r3, [r4, #320]	; 0x140
    2b78:	lsls	r7, r3, #18
    2b7a:	bpl.n	2b68 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2b7c:	ldr.w	r3, [r5, #320]	; 0x140
    2b80:	bic.w	r3, r3, #8192	; 0x2000
    2b84:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2b88:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2b8c:	ldr.w	r3, [r4, #436]	; 0x1b4
    2b90:	ands.w	r3, r3, #65537	; 0x10001
    2b94:	bne.n	2b8c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2b96:	uxth	r1, r0
    2b98:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2b9c:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2ba0:	cmp	r1, r7
    2ba2:	bhi.w	2cf0 <isr+0x1bc>
    2ba6:	cmp.w	r1, #1664	; 0x680
    2baa:	bcs.w	2f84 <isr+0x450>
    2bae:	cmp.w	r1, #258	; 0x102
    2bb2:	beq.w	2e8a <isr+0x356>
    2bb6:	bhi.w	2d82 <isr+0x24e>
    2bba:	cmp	r1, #128	; 0x80
    2bbc:	beq.w	2e70 <isr+0x33c>
    2bc0:	cmp	r1, #130	; 0x82
    2bc2:	bne.w	2d72 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2bc6:	uxth	r2, r2
    2bc8:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2bcc:	cmp	r1, #7
    2bce:	bhi.w	2d72 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2bd2:	lsls	r1, r1, #2
    2bd4:	ldr	r0, [pc, #604]	; (2e34 <isr+0x300>)
		reply_buffer[0] = 0;
    2bd6:	ldr	r7, [pc, #608]	; (2e38 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2bd8:	add	r0, r1
    2bda:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2bdc:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    2bde:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    2be0:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2be2:	bpl.w	3002 <isr+0x4ce>
    2be6:	lsls	r2, r1, #15
    2be8:	bpl.n	2bee <isr+0xba>
			reply_buffer[0] = 1;
    2bea:	movs	r3, #1
    2bec:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    2bee:	movs	r1, #2
    2bf0:	ldr	r0, [pc, #580]	; (2e38 <isr+0x304>)
    2bf2:	bl	2a90 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2bf6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2bfa:	cmp	r3, #0
    2bfc:	bne.n	2b60 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2bfe:	ldr	r2, [pc, #556]	; (2e2c <isr+0x2f8>)
    2c00:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2c04:	cmp	r3, #0
    2c06:	bne.n	2caa <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2c08:	tst.w	r8, #64	; 0x40
    2c0c:	beq.n	2c40 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2c0e:	ldr	r3, [pc, #540]	; (2e2c <isr+0x2f8>)
    2c10:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2c14:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2c16:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2c1a:	ldr.w	r1, [r3, #444]	; 0x1bc
    2c1e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2c22:	ldr.w	r4, [r2, #432]	; 0x1b0
    2c26:	ldr	r3, [pc, #516]	; (2e2c <isr+0x2f8>)
    2c28:	cmp	r4, #0
    2c2a:	bne.n	2c22 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2c2c:	mov.w	r2, #4294967295
    2c30:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2c34:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2c38:	bl	232c <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2c3c:	ldr	r3, [pc, #508]	; (2e3c <isr+0x308>)
    2c3e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2c40:	tst.w	r8, #16777216	; 0x1000000
    2c44:	beq.n	2c4e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2c46:	ldr	r3, [pc, #504]	; (2e40 <isr+0x30c>)
    2c48:	ldr	r3, [r3, #0]
    2c4a:	cbz	r3, 2c4e <isr+0x11a>
    2c4c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2c4e:	tst.w	r8, #33554432	; 0x2000000
    2c52:	beq.n	2c5c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2c54:	ldr	r3, [pc, #492]	; (2e44 <isr+0x310>)
    2c56:	ldr	r3, [r3, #0]
    2c58:	cbz	r3, 2c5c <isr+0x128>
    2c5a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2c5c:	tst.w	r8, #4
    2c60:	beq.n	2c74 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2c62:	ldr	r3, [pc, #456]	; (2e2c <isr+0x2f8>)
    2c64:	ldr.w	r3, [r3, #388]	; 0x184
    2c68:	ands.w	r3, r3, #512	; 0x200
    2c6c:	beq.n	2cea <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2c6e:	ldr	r3, [pc, #472]	; (2e48 <isr+0x314>)
    2c70:	movs	r2, #1
    2c72:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2c74:	ldr	r3, [pc, #436]	; (2e2c <isr+0x2f8>)
    2c76:	ldr.w	r2, [r3, #328]	; 0x148
    2c7a:	lsls	r2, r2, #24
    2c7c:	bpl.n	2ca4 <isr+0x170>
    2c7e:	tst.w	r8, #128	; 0x80
    2c82:	beq.n	2ca4 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2c84:	ldr	r1, [pc, #452]	; (2e4c <isr+0x318>)
    2c86:	ldrb	r2, [r1, #0]
    2c88:	cbz	r2, 2ca4 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    2c8a:	subs	r2, #1
    2c8c:	uxtb	r2, r2
    2c8e:	strb	r2, [r1, #0]
    2c90:	cbnz	r2, 2ca4 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    2c92:	ldr	r1, [pc, #444]	; (2e50 <isr+0x31c>)
    2c94:	ldrb	r2, [r1, #0]
    2c96:	and.w	r2, r2, #251	; 0xfb
    2c9a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2c9c:	cmp	r2, #0
    2c9e:	beq.w	3106 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    2ca2:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2ca4:	add	sp, #12
    2ca6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2caa:	ldr	r1, [pc, #424]	; (2e54 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2cac:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2cb0:	ldr	r0, [r1, #0]
    2cb2:	tst	r3, r0
    2cb4:	bne.w	308e <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2cb8:	ldr	r2, [pc, #384]	; (2e3c <isr+0x308>)
    2cba:	ldr	r4, [r2, #0]
			if (completestatus) {
    2cbc:	ands	r4, r3
    2cbe:	beq.n	2c08 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2cc0:	lsls	r3, r4, #29
    2cc2:	bmi.w	3124 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2cc6:	lsls	r7, r4, #13
    2cc8:	bmi.w	311c <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2ccc:	lsls	r6, r4, #28
    2cce:	bmi.w	3134 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2cd2:	lsls	r5, r4, #12
    2cd4:	bmi.w	312c <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2cd8:	lsls	r0, r4, #27
    2cda:	bmi.w	3114 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2cde:	lsls	r1, r4, #11
    2ce0:	bpl.n	2c08 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    2ce2:	ldr	r0, [pc, #372]	; (2e58 <isr+0x324>)
    2ce4:	bl	2a58 <run_callbacks>
    2ce8:	b.n	2c08 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2cea:	ldr	r2, [pc, #348]	; (2e48 <isr+0x314>)
    2cec:	strb	r3, [r2, #0]
    2cee:	b.n	2c74 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2cf0:	movw	r7, #8225	; 0x2021
    2cf4:	cmp	r1, r7
    2cf6:	beq.n	2d6a <isr+0x236>
    2cf8:	bhi.n	2dda <isr+0x2a6>
    2cfa:	cmp.w	r1, #2176	; 0x880
    2cfe:	beq.w	2f68 <isr+0x434>
    2d02:	cmp.w	r1, #2304	; 0x900
    2d06:	bne.n	2d72 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2d08:	ubfx	r0, r0, #16, #8
    2d0c:	ldr	r2, [pc, #332]	; (2e5c <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2d0e:	ldr	r1, [pc, #336]	; (2e60 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2d10:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2d12:	ldr	r7, [pc, #336]	; (2e64 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2d14:	ldr	r2, [pc, #336]	; (2e68 <isr+0x334>)
    2d16:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2d18:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2d1c:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2d20:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2d24:	bl	2330 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d28:	ldr	r2, [pc, #320]	; (2e6c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2d2a:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d2c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d2e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2d30:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d32:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d34:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d36:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2d3a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d3c:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2d40:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d42:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2d46:	ldr.w	r2, [r5, #432]	; 0x1b0
    2d4a:	orr.w	r2, r2, #65536	; 0x10000
    2d4e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2d52:	ldr	r2, [pc, #256]	; (2e54 <isr+0x320>)
    2d54:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    2d56:	ldr.w	r3, [r4, #432]	; 0x1b0
    2d5a:	cmp	r3, #0
    2d5c:	bne.n	2d56 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2d5e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2d62:	cmp	r3, #0
    2d64:	bne.w	2b60 <isr+0x2c>
    2d68:	b.n	2bfe <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    2d6a:	lsrs	r1, r2, #16
    2d6c:	cmp	r1, #7
    2d6e:	beq.w	300a <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2d72:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2d76:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2d7a:	cmp	r3, #0
    2d7c:	bne.w	2b60 <isr+0x2c>
    2d80:	b.n	2bfe <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2d82:	movw	r7, #770	; 0x302
    2d86:	cmp	r1, r7
    2d88:	beq.w	2f02 <isr+0x3ce>
    2d8c:	cmp.w	r1, #1280	; 0x500
    2d90:	bne.n	2d72 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d92:	ldr	r2, [pc, #216]	; (2e6c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d94:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d96:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2d98:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d9a:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d9c:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d9e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2da2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2da4:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2da8:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2daa:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2dae:	ldr.w	r3, [r5, #432]	; 0x1b0
    2db2:	orr.w	r3, r3, #65536	; 0x10000
    2db6:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2dba:	ldr.w	r3, [r4, #432]	; 0x1b0
    2dbe:	cmp	r3, #0
    2dc0:	bne.n	2dba <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2dc2:	lsrs	r3, r0, #16
    2dc4:	lsls	r3, r3, #25
    2dc6:	orr.w	r3, r3, #16777216	; 0x1000000
    2dca:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2dce:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2dd2:	cmp	r3, #0
    2dd4:	bne.w	2b60 <isr+0x2c>
    2dd8:	b.n	2bfe <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2dda:	movw	r3, #8737	; 0x2221
    2dde:	cmp	r1, r3
    2de0:	beq.w	2ef0 <isr+0x3bc>
    2de4:	movw	r3, #8993	; 0x2321
    2de8:	cmp	r1, r3
    2dea:	bne.n	2d72 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2dec:	ldr	r3, [pc, #124]	; (2e6c <isr+0x338>)
    2dee:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2df0:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2df2:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2df4:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2df6:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2df8:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2dfc:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2dfe:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2e02:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2e04:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2e06:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2e0a:	ldr.w	r3, [r4, #432]	; 0x1b0
    2e0e:	orr.w	r3, r3, #65536	; 0x10000
    2e12:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2e16:	ldr.w	r3, [r4, #432]	; 0x1b0
    2e1a:	cmp	r3, #0
    2e1c:	bne.n	2e16 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e1e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e22:	cmp	r3, #0
    2e24:	bne.w	2b60 <isr+0x2c>
    2e28:	b.n	2bfe <isr+0xca>
    2e2a:	nop
    2e2c:	.word	0x402e0000
    2e30:	.word	0x20003000
    2e34:	.word	0x402e01c0
    2e38:	.word	0x200014a8
    2e3c:	.word	0x20001484
    2e40:	.word	0x20001480
    2e44:	.word	0x2000148c
    2e48:	.word	0x20001490
    2e4c:	.word	0x20001498
    2e50:	.word	0x20001488
    2e54:	.word	0x20001494
    2e58:	.word	0x20003240
    2e5c:	.word	0x200014b8
    2e60:	.word	0x000200c8
    2e64:	.word	0x00cc0002
    2e68:	.word	0x00c80002
    2e6c:	.word	0x20002020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e70:	ldr	r2, [pc, #744]	; (315c <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2e72:	movs	r1, #2
    2e74:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e76:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2e78:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2e7a:	bl	2a90 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e7e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e82:	cmp	r3, #0
    2e84:	bne.w	2b60 <isr+0x2c>
    2e88:	b.n	2bfe <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2e8a:	uxth	r2, r2
    2e8c:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2e90:	cmp	r3, #7
    2e92:	bhi.w	2d72 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2e96:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2e9a:	mov.w	r3, r3, lsl #2
    2e9e:	ldr	r2, [pc, #704]	; (3160 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ea0:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2ea4:	add	r2, r3
    2ea6:	ldr	r3, [r2, #0]
    2ea8:	ite	ne
    2eaa:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2eae:	biceq.w	r3, r3, #1
    2eb2:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2eb4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2eb6:	ldr	r3, [pc, #684]	; (3164 <isr+0x630>)
    2eb8:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2eba:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ebc:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ebe:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ec2:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ec4:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ec8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2eca:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ecc:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ed0:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ed4:	orr.w	r3, r3, #65536	; 0x10000
    2ed8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2edc:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ee0:	cmp	r3, #0
    2ee2:	bne.n	2edc <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ee4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ee8:	cmp	r3, #0
    2eea:	bne.w	2b60 <isr+0x2c>
    2eee:	b.n	2bfe <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2ef0:	ldr	r3, [pc, #628]	; (3168 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2ef2:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2ef6:	ldr	r2, [pc, #628]	; (316c <isr+0x638>)
    2ef8:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2efa:	ldr	r3, [pc, #628]	; (3170 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2efc:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2efe:	strb	r0, [r3, #0]
    2f00:	b.n	2dec <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2f02:	uxth	r2, r2
    2f04:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2f08:	cmp	r3, #7
    2f0a:	bhi.w	2d72 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2f0e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2f12:	mov.w	r3, r3, lsl #2
    2f16:	ldr	r2, [pc, #584]	; (3160 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f18:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2f1c:	add	r2, r3
    2f1e:	ldr	r3, [r2, #0]
    2f20:	ite	ne
    2f22:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2f26:	orreq.w	r3, r3, #1
    2f2a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f2c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f2e:	ldr	r3, [pc, #564]	; (3164 <isr+0x630>)
    2f30:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f32:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f34:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f36:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2f3a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f3c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f40:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2f42:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f44:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2f48:	ldr.w	r3, [r4, #432]	; 0x1b0
    2f4c:	orr.w	r3, r3, #65536	; 0x10000
    2f50:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2f54:	ldr.w	r3, [r4, #432]	; 0x1b0
    2f58:	cmp	r3, #0
    2f5a:	bne.n	2f54 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f5c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f60:	cmp	r3, #0
    2f62:	bne.w	2b60 <isr+0x2c>
    2f66:	b.n	2bfe <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f68:	ldr	r2, [pc, #520]	; (3174 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2f6a:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f6c:	ldr	r3, [pc, #492]	; (315c <isr+0x628>)
    2f6e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2f70:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f72:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2f74:	bl	2a90 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f78:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f7c:	cmp	r3, #0
    2f7e:	bne.w	2b60 <isr+0x2c>
    2f82:	b.n	2bfe <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2f84:	ldr	r3, [pc, #496]	; (3178 <isr+0x644>)
    2f86:	ldr	r1, [r3, #4]
    2f88:	cmp	r1, #0
    2f8a:	beq.w	2d72 <isr+0x23e>
    2f8e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2f90:	uxth.w	lr, r2
    2f94:	b.n	2fa0 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2f96:	adds	r3, #12
    2f98:	ldr	r1, [r3, #4]
    2f9a:	cmp	r1, #0
    2f9c:	beq.w	2d72 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2fa0:	ldrh	r7, [r3, #0]
    2fa2:	cmp	r7, r0
    2fa4:	bne.n	2f96 <isr+0x462>
    2fa6:	ldrh	r7, [r3, #2]
    2fa8:	cmp	r7, lr
    2faa:	bne.n	2f96 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2fac:	lsrs	r7, r0, #8
    2fae:	cmp	r7, #3
    2fb0:	beq.w	31c0 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    2fb4:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2fb6:	lsrs	r2, r2, #16
    2fb8:	cmp	r3, r2
    2fba:	it	cs
    2fbc:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2fbe:	cmp.w	r0, #512	; 0x200
    2fc2:	beq.w	313c <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    2fc6:	cmp.w	r0, #1792	; 0x700
    2fca:	beq.w	30e0 <isr+0x5ac>
    2fce:	ldr	r7, [pc, #428]	; (317c <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2fd0:	mov	r2, r3
    2fd2:	str	r3, [sp, #4]
    2fd4:	mov	r0, r7
    2fd6:	bl	1e18 <memcpy>
    2fda:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2fdc:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2fe0:	add	r7, r3
	asm("dsb");
    2fe2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2fe6:	ldr	r1, [pc, #408]	; (3180 <isr+0x64c>)
    2fe8:	str	r2, [r1, #0]
		location += 32;
    2fea:	adds	r2, #32
	} while (location < end_addr);
    2fec:	cmp	r7, r2
    2fee:	bhi.n	2fe6 <isr+0x4b2>
	asm("dsb");
    2ff0:	dsb	sy
	asm("isb");
    2ff4:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2ff8:	ldr	r0, [pc, #384]	; (317c <isr+0x648>)
    2ffa:	mov	r1, r3
    2ffc:	bl	2a90 <endpoint0_transmit.constprop.1>
    3000:	b.n	2bf6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3002:	lsls	r3, r1, #31
    3004:	bpl.w	2bee <isr+0xba>
    3008:	b.n	2bea <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    300a:	ldr	r7, [pc, #376]	; (3184 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    300c:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    3010:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3012:	ldr	r1, [pc, #372]	; (3188 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3014:	ldr	r3, [pc, #372]	; (318c <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3016:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3018:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    301c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    301e:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    3022:	ldr	r1, [pc, #364]	; (3190 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3024:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3026:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    302a:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    302e:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3032:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3034:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3038:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    303c:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3040:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3042:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3044:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3048:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    304a:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    304c:	ldr.w	r3, [r4, #432]	; 0x1b0
    3050:	cmp	r3, #0
    3052:	bne.n	304c <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    3054:	ldr	r2, [pc, #268]	; (3164 <isr+0x630>)
    3056:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3058:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    305c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    305e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3060:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3064:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3066:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    306a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    306c:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3070:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3072:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3076:	ldr.w	r3, [r5, #432]	; 0x1b0
    307a:	orrs	r3, r0
    307c:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3080:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3084:	ldr.w	r3, [r4, #432]	; 0x1b0
    3088:	cmp	r3, #0
    308a:	bne.n	3084 <isr+0x550>
    308c:	b.n	2bf6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    308e:	ldr	r4, [pc, #244]	; (3184 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3090:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3094:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3096:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3098:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    309a:	cmp	r4, r0
    309c:	bne.w	2cb8 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    30a0:	ldr	r1, [pc, #236]	; (3190 <isr+0x65c>)
    30a2:	ldr	r4, [pc, #240]	; (3194 <isr+0x660>)
    30a4:	ldmia	r1, {r0, r1}
    30a6:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    30a8:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    30aa:	str	r0, [r4, #0]
    30ac:	strh	r1, [r4, #4]
    30ae:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    30b0:	bne.w	2cb8 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    30b4:	cpsid	i
	sof_usage |= (1 << interface);
    30b6:	ldr	r0, [pc, #224]	; (3198 <isr+0x664>)
    30b8:	ldrb	r1, [r0, #0]
    30ba:	orr.w	r1, r1, #4
    30be:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    30c0:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    30c4:	lsls	r0, r1, #24
    30c6:	bmi.n	30d6 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    30c8:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    30cc:	movs	r0, #128	; 0x80
    30ce:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    30d2:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    30d6:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    30d8:	ldr	r2, [pc, #192]	; (319c <isr+0x668>)
    30da:	movs	r1, #80	; 0x50
    30dc:	strb	r1, [r2, #0]
    30de:	b.n	2cb8 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    30e0:	ldr	r0, [pc, #188]	; (31a0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    30e2:	mov	r2, r3
    30e4:	ldr	r7, [pc, #148]	; (317c <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    30e6:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    30ea:	ldr	r1, [pc, #184]	; (31a4 <isr+0x670>)
    30ec:	ldr	r0, [pc, #184]	; (31a8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    30ee:	str	r3, [sp, #4]
    30f0:	cmp.w	lr, #0
    30f4:	it	eq
    30f6:	moveq	r1, r0
    30f8:	mov	r0, r7
    30fa:	bl	1e18 <memcpy>
					usb_descriptor_buffer[1] = 7;
    30fe:	movs	r2, #7
    3100:	ldr	r3, [sp, #4]
    3102:	strb	r2, [r7, #1]
    3104:	b.n	2fdc <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3106:	ldr.w	r2, [r3, #328]	; 0x148
    310a:	bic.w	r2, r2, #128	; 0x80
    310e:	str.w	r2, [r3, #328]	; 0x148
    3112:	b.n	2ca2 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3114:	ldr	r0, [pc, #148]	; (31ac <isr+0x678>)
    3116:	bl	2a58 <run_callbacks>
    311a:	b.n	2cde <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    311c:	ldr	r0, [pc, #144]	; (31b0 <isr+0x67c>)
    311e:	bl	2a58 <run_callbacks>
    3122:	b.n	2ccc <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3124:	ldr	r0, [pc, #140]	; (31b4 <isr+0x680>)
    3126:	bl	2a58 <run_callbacks>
    312a:	b.n	2cc6 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    312c:	ldr	r0, [pc, #136]	; (31b8 <isr+0x684>)
    312e:	bl	2a58 <run_callbacks>
    3132:	b.n	2cd8 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3134:	ldr	r0, [pc, #132]	; (31bc <isr+0x688>)
    3136:	bl	2a58 <run_callbacks>
    313a:	b.n	2cd2 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    313c:	ldr	r0, [pc, #96]	; (31a0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    313e:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3140:	ldr	r1, [pc, #100]	; (31a8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    3142:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3144:	ldr	r0, [pc, #92]	; (31a4 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    3146:	str	r3, [sp, #4]
    3148:	cmp	r7, #0
    314a:	it	eq
    314c:	moveq	r1, r0
    314e:	ldr	r0, [pc, #44]	; (317c <isr+0x648>)
    3150:	bl	1e18 <memcpy>
    3154:	ldr	r7, [pc, #36]	; (317c <isr+0x648>)
    3156:	ldr	r3, [sp, #4]
    3158:	b.n	2fdc <isr+0x4a8>
    315a:	nop
    315c:	.word	0x200014a8
    3160:	.word	0x402e01c0
    3164:	.word	0x20002020
    3168:	.word	0x200014c4
    316c:	.word	0x20001ac8
    3170:	.word	0x200013e8
    3174:	.word	0x200014b8
    3178:	.word	0x200004a0
    317c:	.word	0x20203000
    3180:	.word	0xe000ef70
    3184:	.word	0x200014a0
    3188:	.word	0x00070080
    318c:	.word	0x20002000
    3190:	.word	0x200014b0
    3194:	.word	0x20001ac0
    3198:	.word	0x20001488
    319c:	.word	0x20001498
    31a0:	.word	0x20001490
    31a4:	.word	0x60001738
    31a8:	.word	0x6000177c
    31ac:	.word	0x20003200
    31b0:	.word	0x20003140
    31b4:	.word	0x20003100
    31b8:	.word	0x200031c0
    31bc:	.word	0x20003180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    31c0:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    31c2:	ldrb	r3, [r1, #0]
    31c4:	cmp	r3, r2
    31c6:	it	cs
    31c8:	movcs	r3, r2
    31ca:	b.n	2fc6 <isr+0x492>

000031cc <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    31cc:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    31ce:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    31d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    31d6:	ite	ne
    31d8:	movne	r7, #0
    31da:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    31de:	cmp	r2, #2
    31e0:	bls.n	31e6 <usb_config_rx+0x1a>
    31e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    31e6:	mov.w	sl, r0, lsl #7
    31ea:	ldr.w	r9, [pc, #64]	; 322c <usb_config_rx+0x60>
    31ee:	mov	r5, r1
    31f0:	mov	r4, r0
    31f2:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    31f6:	movs	r1, #0
    31f8:	movs	r2, #64	; 0x40
    31fa:	mov	r8, r3
    31fc:	mov	r0, r6
    31fe:	bl	5d5c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3202:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3204:	orr.w	r1, r7, r5, lsl #16
    3208:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    320c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3210:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    3212:	cmp.w	r8, #0
    3216:	beq.n	31e2 <usb_config_rx+0x16>
    3218:	ldr	r3, [pc, #12]	; (3228 <usb_config_rx+0x5c>)
    321a:	lsls	r0, r4
    321c:	ldr	r4, [r3, #0]
    321e:	orrs	r0, r4
    3220:	str	r0, [r3, #0]
    3222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3226:	nop
    3228:	.word	0x20001484
    322c:	.word	0x20003000

00003230 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3230:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3232:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    3236:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    323a:	ite	ne
    323c:	movne	r7, #0
    323e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3242:	cmp	r2, #2
    3244:	bls.n	324a <usb_config_tx+0x1a>
    3246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    324a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    324c:	lsls	r5, r0, #7
    324e:	ldr.w	r9, [pc, #68]	; 3294 <usb_config_tx+0x64>
    3252:	mov	r8, r1
    3254:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3256:	movs	r1, #0
    3258:	mov	r4, r0
    325a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    325c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3260:	mov	r0, sl
    3262:	bl	5d5c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3266:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3268:	orr.w	r1, r7, r8, lsl #16
    326c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3270:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3274:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3278:	cmp	r6, #0
    327a:	beq.n	3246 <usb_config_tx+0x16>
    327c:	add.w	r0, r4, #16
    3280:	ldr	r3, [pc, #12]	; (3290 <usb_config_tx+0x60>)
    3282:	lsls	r2, r0
    3284:	ldr	r0, [r3, #0]
    3286:	orrs	r2, r0
    3288:	str	r2, [r3, #0]
    328a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    328e:	nop
    3290:	.word	0x20001484
    3294:	.word	0x20003000

00003298 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3298:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    329a:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    329c:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    329e:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    32a2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    32a4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    32a6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    32a8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    32ac:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    32b0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    32b4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    32b8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    32ba:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    32bc:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    32be:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    32c0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    32c2:	pop	{r4, r5, r6, r7}
    32c4:	bx	lr
    32c6:	nop

000032c8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    32c8:	subs	r3, r0, #2
    32ca:	cmp	r3, #2
    32cc:	bls.n	32d0 <usb_transmit+0x8>
    32ce:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    32d0:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    32d2:	ldr	r3, [pc, #24]	; (32ec <usb_transmit+0x24>)
    32d4:	add.w	r4, r0, #16
    32d8:	movs	r5, #1
    32da:	mov	r2, r1
    32dc:	add.w	r0, r3, r0, lsl #7
    32e0:	lsl.w	r1, r5, r4
}
    32e4:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    32e6:	b.w	29fc <schedule_transfer>
    32ea:	nop
    32ec:	.word	0x20003040

000032f0 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    32f0:	subs	r3, r0, #2
    32f2:	cmp	r3, #2
    32f4:	bls.n	32f8 <usb_receive+0x8>
    32f6:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    32f8:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    32fa:	ldr	r3, [pc, #20]	; (3310 <usb_receive+0x20>)
    32fc:	movs	r4, #1
    32fe:	mov	r2, r1
    3300:	lsl.w	r1, r4, r0
    3304:	add.w	r0, r3, r0, lsl #7
}
    3308:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    330c:	b.w	29fc <schedule_transfer>
    3310:	.word	0x20003000

00003314 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    3314:	ldr	r0, [r0, #4]
#endif
}
    3316:	bx	lr

00003318 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3318:	cmp	r0, #0
    331a:	beq.n	33cc <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    331c:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    331e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3322:	sub	sp, #20
    3324:	mov	fp, r0
    3326:	ldr	r4, [pc, #168]	; (33d0 <delay+0xb8>)
    3328:	ldr	r5, [pc, #168]	; (33d4 <delay+0xbc>)
    332a:	ldr	r6, [pc, #172]	; (33d8 <delay+0xc0>)
    332c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3330:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3334:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    3336:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3338:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    333c:	cmp	r1, #0
    333e:	bne.n	3330 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3340:	ldr	r7, [pc, #152]	; (33dc <delay+0xc4>)
    3342:	strd	r8, r9, [sp, #8]
    3346:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3348:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    334a:	ldr	r2, [pc, #148]	; (33e0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    334c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3350:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3352:	ldr	r2, [r2, #0]
    3354:	movs	r7, #1
    3356:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    335a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    335e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    3360:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3362:	cmp	r3, r1
    3364:	it	eq
    3366:	cmpeq	r2, r8
    3368:	ite	cs
    336a:	movcs	sl, r8
    336c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    336e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3372:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3376:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3378:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    337a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    337e:	cmp	r3, #0
    3380:	bne.n	3372 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3382:	ldr	r0, [sp, #4]
    3384:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3386:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3388:	ldr	r0, [pc, #84]	; (33e0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    338a:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    338e:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3390:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3394:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    3398:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    339c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33a0:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    33a2:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33a4:	cmp	r1, r3
    33a6:	it	eq
    33a8:	cmpeq	r0, r8
    33aa:	ite	cs
    33ac:	movcs	r3, r8
    33ae:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    33b0:	add	r2, r3
    33b2:	cmp	r2, lr
    33b4:	bcc.n	33c6 <delay+0xae>
			if (--msec == 0) return;
    33b6:	subs.w	fp, fp, #1
			start += 1000;
    33ba:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    33be:	bne.n	3372 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    33c0:	add	sp, #20
    33c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    33c6:	bl	3800 <yield>
	}
    33ca:	b.n	3372 <delay+0x5a>
    33cc:	bx	lr
    33ce:	nop
    33d0:	.word	0x20003280
    33d4:	.word	0x200014c4
    33d8:	.word	0x200014bc
    33dc:	.word	0xe0001004
    33e0:	.word	0x200014c0

000033e4 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    33e4:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    33e6:	ldr	r2, [pc, #24]	; (3400 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    33e8:	movs	r1, #7
    33ea:	ldr	r3, [pc, #24]	; (3404 <Panic_Temp_isr+0x20>)
    33ec:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    33ee:	ldr	r3, [r2, #56]	; 0x38
    33f0:	orr.w	r3, r3, #64	; 0x40
    33f4:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    33f6:	dsb	sy
  while (1) asm ("wfi");
    33fa:	wfi
    33fc:	b.n	33fa <Panic_Temp_isr+0x16>
    33fe:	nop
    3400:	.word	0x400d4000
    3404:	.word	0x400ac000

00003408 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3408:	ldr	r0, [pc, #656]	; (369c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    340a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    340e:	ldr	r3, [pc, #656]	; (36a0 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3410:	ldr	r2, [r0, #120]	; 0x78
    3412:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    3416:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3418:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    341a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    341c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3420:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3424:	ldr	r4, [pc, #636]	; (36a4 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3426:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    342a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    342c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3430:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3432:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3434:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3438:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    343c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3440:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3444:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3448:	ldrh.w	r0, [r3, #392]	; 0x188
    344c:	uxth	r0, r0
    344e:	orr.w	r0, r0, #240	; 0xf0
    3452:	strh.w	r0, [r3, #392]	; 0x188
    3456:	add.w	r0, r1, r1, lsl #1
    345a:	ldr	r3, [pc, #580]	; (36a0 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    345c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    345e:	movs	r5, #0
    3460:	lsls	r0, r0, #5
    3462:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3464:	cmp	r1, #4
    3466:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3468:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    346c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    346e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3470:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3472:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3474:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3476:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3478:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    347a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    347c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    347e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3480:	bne.n	3456 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3482:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3486:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    348a:	ldr	r3, [pc, #540]	; (36a8 <pwm_init+0x2a0>)
    348c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3490:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3492:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3494:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3498:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    349a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    349e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    34a2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    34a6:	ldrh.w	r0, [r4, #392]	; 0x188
    34aa:	uxth	r0, r0
    34ac:	orr.w	r0, r0, #3840	; 0xf00
    34b0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    34b4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    34b8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    34bc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    34c0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    34c4:	ldrh.w	r0, [r3, #392]	; 0x188
    34c8:	uxth	r0, r0
    34ca:	orr.w	r0, r0, #240	; 0xf0
    34ce:	strh.w	r0, [r3, #392]	; 0x188
    34d2:	add.w	r0, r1, r1, lsl #1
    34d6:	ldr	r3, [pc, #464]	; (36a8 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    34d8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    34da:	movs	r5, #0
    34dc:	lsls	r0, r0, #5
    34de:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    34e0:	cmp	r1, #4
    34e2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    34e4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    34e6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    34ea:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    34ec:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    34ee:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    34f0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    34f2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    34f4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    34f6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    34f8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    34fa:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    34fc:	bne.n	34d2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    34fe:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3502:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3506:	ldr	r3, [pc, #420]	; (36ac <pwm_init+0x2a4>)
    3508:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    350c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    350e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3510:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3514:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3516:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    351a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    351e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3522:	ldrh.w	r0, [r4, #392]	; 0x188
    3526:	uxth	r0, r0
    3528:	orr.w	r0, r0, #3840	; 0xf00
    352c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3530:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3534:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3538:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    353c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3540:	ldrh.w	r0, [r3, #392]	; 0x188
    3544:	uxth	r0, r0
    3546:	orr.w	r0, r0, #240	; 0xf0
    354a:	strh.w	r0, [r3, #392]	; 0x188
    354e:	add.w	r0, r1, r1, lsl #1
    3552:	ldr	r3, [pc, #344]	; (36ac <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3554:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3556:	movs	r5, #0
    3558:	lsls	r0, r0, #5
    355a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    355c:	cmp	r1, #4
    355e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3560:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3562:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3566:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3568:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    356a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    356c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    356e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3570:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3572:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3574:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3576:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3578:	bne.n	354e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    357a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    357e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3582:	ldr	r3, [pc, #300]	; (36b0 <pwm_init+0x2a8>)
    3584:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3588:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    358a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    358c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3590:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3592:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3596:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    359a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    359e:	ldrh.w	r0, [r4, #392]	; 0x188
    35a2:	uxth	r0, r0
    35a4:	orr.w	r0, r0, #3840	; 0xf00
    35a8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    35ac:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    35b0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    35b4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    35b8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    35bc:	ldrh.w	r0, [r3, #392]	; 0x188
    35c0:	uxth	r0, r0
    35c2:	orr.w	r0, r0, #240	; 0xf0
    35c6:	strh.w	r0, [r3, #392]	; 0x188
    35ca:	add.w	r0, r1, r1, lsl #1
    35ce:	ldr	r3, [pc, #224]	; (36b0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    35d0:	adds	r1, #1
    35d2:	lsls	r0, r0, #5
    35d4:	mov	r4, r3
    35d6:	cmp	r1, #4
    35d8:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    35da:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    35dc:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    35e0:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    35e2:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    35e4:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    35e6:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    35e8:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    35ea:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    35ec:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    35ee:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    35f0:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    35f2:	bne.n	35ca <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    35f4:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    35f8:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35fa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    35fc:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3600:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3602:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3606:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3608:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    360c:	orrs	r3, r7
    360e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3612:	ldrh.w	r3, [r4, #392]	; 0x188
    3616:	uxth	r3, r3
    3618:	orr.w	r3, r3, #3840	; 0xf00
    361c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3620:	lsls	r0, r2, #5
    3622:	ldr	r3, [pc, #144]	; (36b4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3624:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3626:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3628:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    362a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    362c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    362e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3630:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3632:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3636:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3638:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    363a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    363c:	bne.n	3620 <pwm_init+0x218>
    363e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3640:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3642:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3646:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    364a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    364c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3650:	lsls	r0, r2, #5
    3652:	ldr	r3, [pc, #100]	; (36b8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3654:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3656:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3658:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    365a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    365c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    365e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3660:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3662:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3664:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3666:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3668:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    366a:	bne.n	3650 <pwm_init+0x248>
    366c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    366e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3670:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3674:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3678:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    367a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    367e:	lsls	r0, r2, #5
    3680:	ldr	r3, [pc, #56]	; (36bc <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3682:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3684:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3686:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3688:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    368a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    368c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    368e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3690:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3692:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3694:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3696:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3698:	bne.n	367e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    369a:	pop	{r4, r5, r6, r7, pc}
    369c:	.word	0x400fc000
    36a0:	.word	0x403dc000
    36a4:	.word	0xfc030000
    36a8:	.word	0x403e0000
    36ac:	.word	0x403e4000
    36b0:	.word	0x403e8000
    36b4:	.word	0x401dc000
    36b8:	.word	0x401e0000
    36bc:	.word	0x401e4000

000036c0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    36c0:	lsls	r0, r0, #4
    36c2:	ldr	r3, [pc, #28]	; (36e0 <digitalWrite.part.0+0x20>)
    36c4:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    36c6:	ldr	r3, [r3, r0]
	mask = p->mask;
    36c8:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    36ca:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    36cc:	tst	r0, r2
    36ce:	beq.n	36d6 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    36d0:	cbnz	r1, 36d8 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    36d2:	str.w	r2, [r3, #136]	; 0x88
    36d6:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    36d8:	str.w	r2, [r3, #132]	; 0x84
    36dc:	bx	lr
    36de:	nop
    36e0:	.word	0x20000220

000036e4 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    36e4:	lsls	r0, r0, #4
    36e6:	ldr	r3, [pc, #20]	; (36fc <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    36e8:	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    36ea:	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    36ec:	ldr	r2, [r2, #8]
    36ee:	ldr	r3, [r1, #12]
    36f0:	tst	r2, r3
}
    36f2:	ite	ne
    36f4:	movne	r0, #1
    36f6:	moveq	r0, #0
    36f8:	bx	lr
    36fa:	nop
    36fc:	.word	0x20000220

00003700 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3700:	cmp	r0, #39	; 0x27
    3702:	bhi.n	3708 <digitalWrite+0x8>
    3704:	b.w	36c0 <digitalWrite.part.0>
    3708:	bx	lr
    370a:	nop

0000370c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    370c:	cmp	r0, #39	; 0x27
    370e:	bhi.n	3714 <digitalRead+0x8>
    3710:	b.w	36e4 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    3714:	movs	r0, #0
    3716:	bx	lr

00003718 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3718:	cmp	r0, #39	; 0x27
    371a:	bhi.n	3756 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    371c:	lsls	r0, r0, #4
    371e:	ldr	r2, [pc, #104]	; (3788 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3720:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3722:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3726:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    3728:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    372a:	beq.n	3758 <pinMode+0x40>
    372c:	cmp	r1, #4
    372e:	beq.n	3758 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3730:	ldr	r4, [r3, #12]
    3732:	ldr	r2, [r0, #4]
    3734:	bic.w	r2, r2, r4
    3738:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    373a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    373c:	cbz	r1, 377a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    373e:	cmp	r1, #2
    3740:	beq.n	3780 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3742:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3744:	ldr	r3, [r3, #4]
}
    3746:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    374a:	ite	eq
    374c:	ldreq	r1, [pc, #60]	; (378c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    374e:	ldrne	r1, [pc, #64]	; (3790 <pinMode+0x78>)
    3750:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3752:	movs	r2, #21
    3754:	str	r2, [r3, #0]
}
    3756:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3758:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    375a:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    375c:	ldr	r4, [r0, #4]
    375e:	orr.w	r2, r2, r4
    3762:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3764:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    3766:	beq.n	377a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3768:	movw	r1, #2104	; 0x838
    376c:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    376e:	ldr	r3, [r3, #4]
    3770:	movs	r2, #21
}
    3772:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3776:	str	r2, [r3, #0]
}
    3778:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    377a:	movs	r1, #56	; 0x38
    377c:	str	r1, [r2, #0]
    377e:	b.n	376e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3780:	ldr	r1, [pc, #16]	; (3794 <pinMode+0x7c>)
    3782:	str	r1, [r2, #0]
    3784:	b.n	376e <pinMode+0x56>
    3786:	nop
    3788:	.word	0x20000220
    378c:	.word	0x00013038
    3790:	.word	0x00010038
    3794:	.word	0x0001f038

00003798 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3798:	ldr	r2, [pc, #72]	; (37e4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    379a:	ldr	r3, [pc, #76]	; (37e8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    379c:	ldr.w	r0, [r2, #544]	; 0x220
    37a0:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    37a4:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    37a6:	push	{r4, lr}
    37a8:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    37aa:	bhi.n	37b2 <usb_init_serialnumber+0x1a>
    37ac:	add.w	r0, r0, r0, lsl #2
    37b0:	lsls	r0, r0, #1
    37b2:	ldr	r4, [pc, #56]	; (37ec <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    37b4:	add	r1, sp, #4
    37b6:	movs	r2, #10
    37b8:	bl	3cec <ultoa>
    37bc:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    37be:	movs	r3, #0
    37c0:	mov	r0, r4
		char c = buf[i];
    37c2:	ldrb.w	r2, [r1], #1
    37c6:	adds	r3, #1
		if (!c) break;
    37c8:	cbz	r2, 37da <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    37ca:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    37cc:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    37d0:	bne.n	37c2 <usb_init_serialnumber+0x2a>
    37d2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    37d4:	strb	r3, [r4, #0]
}
    37d6:	add	sp, #16
    37d8:	pop	{r4, pc}
    37da:	lsls	r3, r3, #1
    37dc:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    37de:	strb	r3, [r4, #0]
}
    37e0:	add	sp, #16
    37e2:	pop	{r4, pc}
    37e4:	.word	0x401f4400
    37e8:	.word	0x0098967f
    37ec:	.word	0x200009dc

000037f0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    37f0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    37f2:	bl	7c <setup>
	while (1) {
		loop();
    37f6:	bl	114 <loop>
		yield();
    37fa:	bl	3800 <yield>
    37fe:	b.n	37f6 <main+0x6>

00003800 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3800:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3802:	ldr	r4, [pc, #132]	; (3888 <yield+0x88>)
    3804:	ldrb	r3, [r4, #0]
    3806:	cbnz	r3, 382a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3808:	ldr	r3, [pc, #128]	; (388c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    380a:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    380c:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    380e:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3810:	cbnz	r3, 385a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    3812:	ldr	r3, [pc, #124]	; (3890 <yield+0x90>)
    3814:	ldrb	r3, [r3, #0]
    3816:	cmp	r3, #0
    3818:	bne.n	386e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    381a:	ldr	r3, [pc, #120]	; (3894 <yield+0x94>)

	running = 0;
    381c:	movs	r1, #0
    381e:	ldr	r2, [r3, #0]
    3820:	strb	r1, [r4, #0]
    3822:	cbz	r2, 382a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3824:	mrs	r2, IPSR
		if (ipsr != 0) return;
    3828:	cbz	r2, 382c <yield+0x2c>
    382a:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    382c:	mrs	r0, PRIMASK
		__disable_irq();
    3830:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3832:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    3834:	cbz	r2, 3874 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3836:	ldr	r4, [pc, #96]	; (3898 <yield+0x98>)
    3838:	ldrb	r1, [r4, #0]
    383a:	cbnz	r1, 3874 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    383c:	movs	r6, #1
		firstYield = first->_next;
    383e:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3840:	strb	r6, [r4, #0]
		firstYield = first->_next;
    3842:	str	r5, [r3, #0]
		if (firstYield) {
    3844:	cbz	r5, 387c <yield+0x7c>
			firstYield->_prev = nullptr;
    3846:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3848:	cbnz	r0, 384c <yield+0x4c>
    384a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    384c:	movs	r5, #0
		(*(first->_function))(*first);
    384e:	ldr	r3, [r2, #8]
    3850:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3852:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3854:	blx	r3
		runningFromYield = false;
    3856:	strb	r5, [r4, #0]
    3858:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    385a:	bl	2568 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    385e:	cmp	r0, #0
    3860:	beq.n	3812 <yield+0x12>
    3862:	bl	3ab0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    3866:	ldr	r3, [pc, #40]	; (3890 <yield+0x90>)
    3868:	ldrb	r3, [r3, #0]
    386a:	cmp	r3, #0
    386c:	beq.n	381a <yield+0x1a>
    386e:	bl	3d3c <HardwareSerial::processSerialEvents()>
    3872:	b.n	381a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3874:	cmp	r0, #0
    3876:	bne.n	382a <yield+0x2a>
    3878:	cpsie	i
    387a:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    387c:	ldr	r3, [pc, #28]	; (389c <yield+0x9c>)
    387e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3880:	cmp	r0, #0
    3882:	bne.n	384c <yield+0x4c>
    3884:	b.n	384a <yield+0x4a>
    3886:	nop
    3888:	.word	0x200014dc
    388c:	.word	0x200009f2
    3890:	.word	0x20001518
    3894:	.word	0x200014f0
    3898:	.word	0x200014f4
    389c:	.word	0x200014ec

000038a0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    38a0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    38a2:	mrs	r2, PRIMASK
		__disable_irq();
    38a6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    38a8:	ldrb	r3, [r0, #29]
    38aa:	cbnz	r3, 38ba <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    38ac:	ldrb	r1, [r0, #28]
    38ae:	cmp	r1, #1
    38b0:	beq.n	38c4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    38b2:	cmp	r1, #3
    38b4:	beq.n	38d8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    38b6:	movs	r3, #1
    38b8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    38ba:	cbnz	r2, 38be <EventResponder::triggerEventNotImmediate()+0x1e>
    38bc:	cpsie	i
	}
	enableInterrupts(irq);
}
    38be:	ldr.w	r4, [sp], #4
    38c2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    38c4:	ldr	r4, [pc, #68]	; (390c <EventResponder::triggerEventNotImmediate()+0x6c>)
    38c6:	ldr	r1, [r4, #0]
    38c8:	cbz	r1, 38f4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    38ca:	ldr	r1, [pc, #68]	; (3910 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    38cc:	str	r3, [r0, #20]
				_prev = lastYield;
    38ce:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    38d0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    38d2:	str	r3, [r0, #24]
				_prev->_next = this;
    38d4:	str	r0, [r3, #20]
    38d6:	b.n	38b6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    38d8:	ldr	r4, [pc, #56]	; (3914 <EventResponder::triggerEventNotImmediate()+0x74>)
    38da:	ldr	r1, [r4, #0]
    38dc:	cbz	r1, 3900 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    38de:	ldr	r1, [pc, #56]	; (3918 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    38e0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    38e2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    38e4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    38e6:	str	r3, [r0, #24]
				_prev->_next = this;
    38e8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    38ea:	ldr	r3, [pc, #48]	; (391c <EventResponder::triggerEventNotImmediate()+0x7c>)
    38ec:	mov.w	r1, #268435456	; 0x10000000
    38f0:	str	r1, [r3, #0]
    38f2:	b.n	38b6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    38f4:	ldr	r3, [pc, #24]	; (3910 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    38f6:	str	r1, [r0, #20]
				_prev = nullptr;
    38f8:	str	r1, [r0, #24]
				firstYield = this;
    38fa:	str	r0, [r4, #0]
				lastYield = this;
    38fc:	str	r0, [r3, #0]
    38fe:	b.n	38b6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3900:	ldr	r3, [pc, #20]	; (3918 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3902:	str	r1, [r0, #20]
				_prev = nullptr;
    3904:	str	r1, [r0, #24]
				firstInterrupt = this;
    3906:	str	r0, [r4, #0]
				lastInterrupt = this;
    3908:	str	r0, [r3, #0]
    390a:	b.n	38ea <EventResponder::triggerEventNotImmediate()+0x4a>
    390c:	.word	0x200014f0
    3910:	.word	0x200014ec
    3914:	.word	0x200014e0
    3918:	.word	0x200014e4
    391c:	.word	0xe000ed04

00003920 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3920:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3922:	mrs	r1, PRIMASK
		__disable_irq();
    3926:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3928:	ldr	r4, [pc, #48]	; (395c <EventResponder::runFromInterrupt()+0x3c>)
    392a:	ldr	r3, [r4, #0]
		if (first) {
    392c:	cbz	r3, 3952 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    392e:	ldr	r6, [pc, #48]	; (3960 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3930:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3932:	ldr	r2, [r3, #20]
    3934:	str	r2, [r4, #0]
			if (firstInterrupt) {
    3936:	cbz	r2, 3958 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3938:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    393a:	cbnz	r1, 393e <EventResponder::runFromInterrupt()+0x1e>
    393c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    393e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3940:	mov	r0, r3
    3942:	ldr	r3, [r3, #8]
    3944:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3946:	mrs	r1, PRIMASK
		__disable_irq();
    394a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    394c:	ldr	r3, [r4, #0]
		if (first) {
    394e:	cmp	r3, #0
    3950:	bne.n	3932 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3952:	cbnz	r1, 3956 <EventResponder::runFromInterrupt()+0x36>
    3954:	cpsie	i
    3956:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3958:	str	r2, [r6, #0]
    395a:	b.n	393a <EventResponder::runFromInterrupt()+0x1a>
    395c:	.word	0x200014e0
    3960:	.word	0x200014e4

00003964 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3964:	b.w	3920 <EventResponder::runFromInterrupt()>

00003968 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3968:	ldr	r2, [pc, #96]	; (39cc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    396a:	push	{r4, r5}
	if (listActive == nullptr) {
    396c:	ldr	r4, [r2, #0]
    396e:	cmp	r4, #0
    3970:	beq.n	39c4 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3972:	ldr	r3, [r0, #0]
    3974:	ldr	r1, [r4, #0]
    3976:	cmp	r3, r1
    3978:	bcs.n	399a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    397a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    397c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    397e:	str	r4, [r0, #8]
		_prev = nullptr;
    3980:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3982:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3984:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3986:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3988:	movs	r3, #2
}
    398a:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    398c:	strb	r3, [r0, #20]
}
    398e:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    3990:	str	r3, [r0, #0]
    3992:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3994:	ldr	r1, [r2, #0]
    3996:	cmp	r3, r1
    3998:	bcc.n	39ac <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    399a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    399c:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    399e:	cmp	r2, #0
    39a0:	bne.n	3990 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    39a2:	str	r2, [r0, #8]
		_prev = timer;
    39a4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    39a6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    39a8:	str	r0, [r4, #8]
    39aa:	b.n	3988 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    39ac:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    39ae:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    39b0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    39b2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    39b4:	str	r5, [r0, #12]
				timer->_prev = this;
    39b6:	str	r0, [r4, #12]
				_prev->_next = this;
    39b8:	ldr	r1, [r0, #12]
    39ba:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    39bc:	str	r3, [r4, #0]
				_state = TimerActive;
    39be:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    39c0:	pop	{r4, r5}
    39c2:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    39c4:	str	r4, [r0, #8]
		_prev = nullptr;
    39c6:	str	r4, [r0, #12]
		listActive = this;
    39c8:	str	r0, [r2, #0]
    39ca:	b.n	3988 <MillisTimer::addToActiveList()+0x20>
    39cc:	.word	0x200014e8

000039d0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    39d0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    39d2:	ldr	r6, [pc, #136]	; (3a5c <MillisTimer::runFromTimer()+0x8c>)
    39d4:	ldr	r4, [r6, #0]
	while (timer) {
    39d6:	cbz	r4, 3a24 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    39d8:	ldr	r3, [r4, #0]
    39da:	cmp	r3, #0
    39dc:	bne.n	3a54 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    39de:	mov	r5, r3
    39e0:	ldr	r7, [pc, #124]	; (3a60 <MillisTimer::runFromTimer()+0x90>)
    39e2:	b.n	39ee <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    39e4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    39e6:	cbz	r4, 3a24 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    39e8:	ldr	r3, [r4, #0]
    39ea:	cmp	r3, #0
    39ec:	bne.n	3a54 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    39ee:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    39f0:	cbz	r3, 39f4 <MillisTimer::runFromTimer()+0x24>
    39f2:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    39f4:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    39f6:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    39f8:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    39fa:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    39fc:	ldr	r3, [r3, #0]
    39fe:	cmp	r3, r7
    3a00:	bne.n	3a46 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3a02:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3a04:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3a06:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a08:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a0a:	beq.n	3a4e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a0c:	bl	38a0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3a10:	ldr	r3, [r4, #4]
    3a12:	cmp	r3, #0
    3a14:	beq.n	39e4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3a16:	str	r3, [r4, #0]
				timer->addToActiveList();
    3a18:	mov	r0, r4
    3a1a:	bl	3968 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3a1e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3a20:	cmp	r4, #0
    3a22:	bne.n	39e8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a24:	mrs	r3, PRIMASK
		__disable_irq();
    3a28:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3a2a:	ldr	r2, [pc, #56]	; (3a64 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3a2c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3a2e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3a30:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3a32:	cbnz	r3, 3a36 <MillisTimer::runFromTimer()+0x66>
    3a34:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3a36:	cbz	r0, 3a44 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3a38:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3a3a:	bl	3968 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3a3e:	mov	r0, r4
    3a40:	cmp	r0, #0
    3a42:	bne.n	3a38 <MillisTimer::runFromTimer()+0x68>
    3a44:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3a46:	mov	r2, r4
    3a48:	movs	r1, #0
    3a4a:	blx	r3
    3a4c:	b.n	3a10 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a4e:	ldr	r3, [r0, #8]
    3a50:	blx	r3
    3a52:	b.n	3a10 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3a54:	subs	r3, #1
    3a56:	str	r3, [r4, #0]
			break;
    3a58:	b.n	3a24 <MillisTimer::runFromTimer()+0x54>
    3a5a:	nop
    3a5c:	.word	0x200014e8
    3a60:	.word	0x00001dfd
    3a64:	.word	0x200014f8

00003a68 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3a68:	ldr	r2, [pc, #16]	; (3a7c <systick_isr+0x14>)
    3a6a:	ldr	r3, [pc, #20]	; (3a80 <systick_isr+0x18>)
    3a6c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    3a6e:	ldr	r2, [pc, #20]	; (3a84 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3a70:	str	r1, [r3, #0]
	systick_millis_count++;
    3a72:	ldr	r3, [r2, #0]
    3a74:	adds	r3, #1
    3a76:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3a78:	b.w	39d0 <MillisTimer::runFromTimer()>
    3a7c:	.word	0xe0001004
    3a80:	.word	0x200014bc
    3a84:	.word	0x200014c4

00003a88 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3a88:	b.w	2574 <usb_serial_flush_input>

00003a8c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3a8c:	b.w	2524 <usb_serial_peekchar>

00003a90 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3a90:	b.w	25e8 <usb_serial_getchar>

00003a94 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3a94:	b.w	2568 <usb_serial_available>

00003a98 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3a98:	b.w	2698 <usb_serial_flush_output>

00003a9c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3a9c:	b.w	264c <usb_serial_write_buffer_free>

00003aa0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3aa0:	mov	r0, r1
    3aa2:	mov	r1, r2
    3aa4:	b.w	2634 <usb_serial_write>

00003aa8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3aa8:	mov	r0, r1
    3aaa:	b.w	2608 <usb_serial_putchar>
    3aae:	nop

00003ab0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    3ab0:	ldr	r3, [pc, #4]	; (3ab8 <serialEvent()+0x8>)
    3ab2:	movs	r2, #0
    3ab4:	strb	r2, [r3, #0]
    3ab6:	bx	lr
    3ab8:	.word	0x200009f2

00003abc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3abc:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3abe:	ldr	r4, [pc, #24]	; (3ad8 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3ac0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3ac2:	ldr	r3, [r0, #0]
    3ac4:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3ac6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3ac8:	add	r1, sp, #4
    3aca:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3acc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3ad0:	blx	r3
}
    3ad2:	add	sp, #8
    3ad4:	pop	{r4, pc}
    3ad6:	nop
    3ad8:	.word	0x20000534

00003adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3adc:	push	{r4, r5, r6, r7, lr}
    3ade:	mov	r6, r0
    3ae0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3ae2:	cmp	r2, #0
    3ae4:	beq.n	3b4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3ae6:	cmp	r2, #1
    3ae8:	it	eq
    3aea:	moveq	r2, #10
	}


	if (n == 0) {
    3aec:	cbz	r1, 3b44 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3aee:	movs	r5, #33	; 0x21
    3af0:	b.n	3af4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3af2:	uxtb	r5, r7
    3af4:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3af6:	udiv	r4, r1, r2
    3afa:	mls	r1, r2, r4, r1
    3afe:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b00:	cmp	r1, #9
    3b02:	add.w	r1, r0, #55	; 0x37
    3b06:	add.w	r0, r0, #48	; 0x30
    3b0a:	it	hi
    3b0c:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3b0e:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b10:	add	r4, sp, #40	; 0x28
    3b12:	it	ls
    3b14:	uxtbls	r0, r0
    3b16:	add	r4, r5
    3b18:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3b1c:	cmp	r1, #0
    3b1e:	bne.n	3af2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3b20:	cbz	r3, 3b30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3b22:	subs	r5, #1
		buf[i] = '-';
    3b24:	add	r3, sp, #40	; 0x28
    3b26:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3b28:	uxtb	r5, r5
		buf[i] = '-';
    3b2a:	add	r3, r5
    3b2c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3b30:	ldr	r3, [r6, #0]
    3b32:	add	r1, sp, #4
    3b34:	rsb	r2, r5, #34	; 0x22
    3b38:	mov	r0, r6
    3b3a:	add	r1, r5
    3b3c:	ldr	r3, [r3, #4]
    3b3e:	blx	r3
}
    3b40:	add	sp, #44	; 0x2c
    3b42:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3b44:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3b46:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3b48:	strb.w	r2, [sp, #37]	; 0x25
    3b4c:	b.n	3b20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3b4e:	ldr	r3, [r0, #0]
    3b50:	uxtb	r1, r1
    3b52:	ldr	r3, [r3, #0]
    3b54:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3b56:	add	sp, #44	; 0x2c
    3b58:	pop	{r4, r5, r6, r7, pc}
    3b5a:	nop

00003b5c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3b5c:	cmp	r1, #0
    3b5e:	blt.n	3b68 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    3b60:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    3b62:	movs	r2, #10
    3b64:	b.w	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    3b68:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3b6a:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    3b6c:	movs	r2, #10
    3b6e:	b.w	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b72:	nop
    3b74:	movs	r0, r0
	...

00003b78 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3b78:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    3b7c:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3b7e:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    3b82:	mov	r5, r0
    3b84:	vpush	{d8}
    3b88:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3b8a:	bvs.w	3cb0 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    3b8e:	vabs.f64	d7, d0
    3b92:	vldr	d6, [pc, #300]	; 3cc0 <Print::printFloat(double, unsigned char)+0x148>
    3b96:	vcmp.f64	d7, d6
    3b9a:	vmrs	APSR_nzcv, fpscr
    3b9e:	ble.n	3bb6 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3ba0:	ldr	r3, [r0, #0]
    3ba2:	movs	r2, #3
    3ba4:	ldr	r1, [pc, #312]	; (3ce0 <Print::printFloat(double, unsigned char)+0x168>)
    3ba6:	ldr	r3, [r3, #4]
    3ba8:	blx	r3
    3baa:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    3bac:	mov	r0, r6
    3bae:	add	sp, #24
    3bb0:	vpop	{d8}
    3bb4:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    3bb6:	vldr	d7, [pc, #272]	; 3cc8 <Print::printFloat(double, unsigned char)+0x150>
    3bba:	vcmpe.f64	d0, d7
    3bbe:	vmrs	APSR_nzcv, fpscr
    3bc2:	bgt.n	3c76 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    3bc4:	vldr	d7, [pc, #264]	; 3cd0 <Print::printFloat(double, unsigned char)+0x158>
    3bc8:	vcmpe.f64	d0, d7
    3bcc:	vmrs	APSR_nzcv, fpscr
    3bd0:	bmi.n	3c76 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    3bd2:	vcmpe.f64	d0, #0.0
    3bd6:	mov	r4, r1
    3bd8:	vmrs	APSR_nzcv, fpscr
    3bdc:	bmi.n	3c8c <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    3bde:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3be0:	cmp	r4, #0
    3be2:	beq.n	3c94 <Print::printFloat(double, unsigned char)+0x11c>
    3be4:	vmov.f64	d8, #96	; 0x3f000000  0.5
    3be8:	movs	r2, #0
		rounding *= 0.1;
    3bea:	vldr	d7, [pc, #236]	; 3cd8 <Print::printFloat(double, unsigned char)+0x160>
    3bee:	adds	r2, #1
    3bf0:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3bf4:	uxtb	r1, r2
    3bf6:	cmp	r4, r1
    3bf8:	bhi.n	3bee <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    3bfa:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3bfe:	movs	r2, #10
    3c00:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    3c02:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    3c06:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    3c0a:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    3c0e:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    3c12:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3c16:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3c18:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3c1c:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3c20:	mov.w	r3, #46	; 0x2e
    3c24:	it	cs
    3c26:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3c28:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3c2a:	strb.w	r3, [sp, #8]
    3c2e:	add	r4, r2
    3c30:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3c32:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3c36:	adds	r3, r2, #1
    3c38:	add	r1, sp, #24
    3c3a:	add	r1, r2
    3c3c:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3c3e:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    3c40:	vcvt.u32.f64	s13, d0
    3c44:	vstr	s13, [sp, #4]
    3c48:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    3c4c:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3c50:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    3c54:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3c58:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    3c5c:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3c60:	bne.n	3c32 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    3c62:	ldr	r3, [r5, #0]
    3c64:	mov	r0, r5
    3c66:	add	r1, sp, #8
    3c68:	ldr	r3, [r3, #4]
    3c6a:	blx	r3
	}
	return count;
}
    3c6c:	mov	r0, r6
    3c6e:	add	sp, #24
    3c70:	vpop	{d8}
    3c74:	pop	{r4, r5, r6, pc}
    3c76:	ldr	r3, [r5, #0]
    3c78:	movs	r2, #3
    3c7a:	ldr	r1, [pc, #104]	; (3ce4 <Print::printFloat(double, unsigned char)+0x16c>)
    3c7c:	ldr	r3, [r3, #4]
    3c7e:	blx	r3
    3c80:	mov	r6, r0
    3c82:	mov	r0, r6
    3c84:	add	sp, #24
    3c86:	vpop	{d8}
    3c8a:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    3c8c:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    3c90:	movs	r3, #1
    3c92:	b.n	3be0 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3c94:	vmov.f64	d7, #96	; 0x3f000000  0.5
    3c98:	mov	r0, r5
    3c9a:	movs	r2, #10
    3c9c:	vadd.f64	d0, d0, d7
    3ca0:	vcvt.u32.f64	s15, d0
    3ca4:	vmov	r1, s15
    3ca8:	bl	3adc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3cac:	mov	r6, r0
    3cae:	b.n	3bac <Print::printFloat(double, unsigned char)+0x34>
    3cb0:	ldr	r3, [r0, #0]
    3cb2:	movs	r2, #3
    3cb4:	ldr	r1, [pc, #48]	; (3ce8 <Print::printFloat(double, unsigned char)+0x170>)
    3cb6:	ldr	r3, [r3, #4]
    3cb8:	blx	r3
    3cba:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3cbc:	b.n	3bac <Print::printFloat(double, unsigned char)+0x34>
    3cbe:	nop
    3cc0:	.word	0xffffffff
    3cc4:	.word	0x7fefffff
    3cc8:	.word	0xe0000000
    3ccc:	.word	0x41efffff
    3cd0:	.word	0xe0000000
    3cd4:	.word	0xc1efffff
    3cd8:	.word	0x9999999a
    3cdc:	.word	0x3fb99999
    3ce0:	.word	0x20000540
    3ce4:	.word	0x2000053c
    3ce8:	.word	0x20000538

00003cec <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3cec:	push	{r4, r5, r6, r7}
    3cee:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3cf0:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3cf2:	mov	r7, r6
    3cf4:	b.n	3cf8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3cf6:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3cf8:	udiv	r3, r0, r2
    3cfc:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3d00:	add.w	r4, r0, #55	; 0x37
    3d04:	cmp	r0, #9
    3d06:	add.w	r0, r0, #48	; 0x30
    3d0a:	uxtb	r4, r4
    3d0c:	it	ls
    3d0e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3d10:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3d12:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3d16:	cmp	r3, #0
    3d18:	bne.n	3cf6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3d1a:	adds	r2, r1, r5
    3d1c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3d1e:	cbz	r5, 3d34 <ultoa+0x48>
    3d20:	adds	r3, #1
		t = buf[j];
    3d22:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3d26:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3d28:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3d2a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3d2c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3d2e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3d32:	blt.n	3d20 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3d34:	mov	r0, r1
    3d36:	pop	{r4, r5, r6, r7}
    3d38:	bx	lr
    3d3a:	nop

00003d3c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    3d3c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    3d3e:	ldr	r3, [pc, #28]	; (3d5c <HardwareSerial::processSerialEvents()+0x20>)
    3d40:	ldrb	r4, [r3, #0]
    3d42:	cbz	r4, 3d58 <HardwareSerial::processSerialEvents()+0x1c>
    3d44:	ldr	r5, [pc, #24]	; (3d60 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    3d46:	ldr.w	r3, [r5, #4]!
    3d4a:	cmp	r3, #0
    3d4c:	beq.n	3d46 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    3d4e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    3d50:	subs	r3, r4, #1
    3d52:	ands.w	r4, r3, #255	; 0xff
    3d56:	bne.n	3d46 <HardwareSerial::processSerialEvents()+0xa>
    3d58:	pop	{r3, r4, r5, pc}
    3d5a:	nop
    3d5c:	.word	0x20001518
    3d60:	.word	0x200014f8

00003d64 <cosf>:
    3d64:	push	{lr}
    3d66:	vmov	r3, s0
    3d6a:	ldr	r2, [pc, #128]	; (3dec <cosf+0x88>)
    3d6c:	bic.w	r3, r3, #2147483648	; 0x80000000
    3d70:	cmp	r3, r2
    3d72:	sub	sp, #12
    3d74:	ble.n	3daa <cosf+0x46>
    3d76:	cmp.w	r3, #2139095040	; 0x7f800000
    3d7a:	blt.n	3d86 <cosf+0x22>
    3d7c:	vsub.f32	s0, s0, s0
    3d80:	add	sp, #12
    3d82:	ldr.w	pc, [sp], #4
    3d86:	mov	r0, sp
    3d88:	bl	4c34 <__ieee754_rem_pio2f>
    3d8c:	and.w	r0, r0, #3
    3d90:	cmp	r0, #1
    3d92:	beq.n	3dca <cosf+0x66>
    3d94:	cmp	r0, #2
    3d96:	beq.n	3db8 <cosf+0x54>
    3d98:	cbz	r0, 3ddc <cosf+0x78>
    3d9a:	movs	r0, #1
    3d9c:	vldr	s1, [sp, #4]
    3da0:	vldr	s0, [sp]
    3da4:	bl	56a4 <__kernel_sinf>
    3da8:	b.n	3d80 <cosf+0x1c>
    3daa:	vldr	s1, [pc, #68]	; 3df0 <cosf+0x8c>
    3dae:	bl	4f70 <__kernel_cosf>
    3db2:	add	sp, #12
    3db4:	ldr.w	pc, [sp], #4
    3db8:	vldr	s1, [sp, #4]
    3dbc:	vldr	s0, [sp]
    3dc0:	bl	4f70 <__kernel_cosf>
    3dc4:	vneg.f32	s0, s0
    3dc8:	b.n	3d80 <cosf+0x1c>
    3dca:	vldr	s1, [sp, #4]
    3dce:	vldr	s0, [sp]
    3dd2:	bl	56a4 <__kernel_sinf>
    3dd6:	vneg.f32	s0, s0
    3dda:	b.n	3d80 <cosf+0x1c>
    3ddc:	vldr	s1, [sp, #4]
    3de0:	vldr	s0, [sp]
    3de4:	bl	4f70 <__kernel_cosf>
    3de8:	b.n	3d80 <cosf+0x1c>
    3dea:	nop
    3dec:	.word	0x3f490fd8
    3df0:	.word	0x00000000

00003df4 <sinf>:
    3df4:	push	{lr}
    3df6:	vmov	r3, s0
    3dfa:	ldr	r2, [pc, #132]	; (3e80 <sinf+0x8c>)
    3dfc:	bic.w	r3, r3, #2147483648	; 0x80000000
    3e00:	cmp	r3, r2
    3e02:	sub	sp, #12
    3e04:	ble.n	3e3c <sinf+0x48>
    3e06:	cmp.w	r3, #2139095040	; 0x7f800000
    3e0a:	blt.n	3e16 <sinf+0x22>
    3e0c:	vsub.f32	s0, s0, s0
    3e10:	add	sp, #12
    3e12:	ldr.w	pc, [sp], #4
    3e16:	mov	r0, sp
    3e18:	bl	4c34 <__ieee754_rem_pio2f>
    3e1c:	and.w	r0, r0, #3
    3e20:	cmp	r0, #1
    3e22:	beq.n	3e60 <sinf+0x6c>
    3e24:	cmp	r0, #2
    3e26:	beq.n	3e4c <sinf+0x58>
    3e28:	cbz	r0, 3e6e <sinf+0x7a>
    3e2a:	vldr	s1, [sp, #4]
    3e2e:	vldr	s0, [sp]
    3e32:	bl	4f70 <__kernel_cosf>
    3e36:	vneg.f32	s0, s0
    3e3a:	b.n	3e10 <sinf+0x1c>
    3e3c:	movs	r0, #0
    3e3e:	vldr	s1, [pc, #68]	; 3e84 <sinf+0x90>
    3e42:	bl	56a4 <__kernel_sinf>
    3e46:	add	sp, #12
    3e48:	ldr.w	pc, [sp], #4
    3e4c:	movs	r0, #1
    3e4e:	vldr	s1, [sp, #4]
    3e52:	vldr	s0, [sp]
    3e56:	bl	56a4 <__kernel_sinf>
    3e5a:	vneg.f32	s0, s0
    3e5e:	b.n	3e10 <sinf+0x1c>
    3e60:	vldr	s1, [sp, #4]
    3e64:	vldr	s0, [sp]
    3e68:	bl	4f70 <__kernel_cosf>
    3e6c:	b.n	3e10 <sinf+0x1c>
    3e6e:	movs	r0, #1
    3e70:	vldr	s1, [sp, #4]
    3e74:	vldr	s0, [sp]
    3e78:	bl	56a4 <__kernel_sinf>
    3e7c:	b.n	3e10 <sinf+0x1c>
    3e7e:	nop
    3e80:	.word	0x3f490fd8
    3e84:	.word	0x00000000

00003e88 <pow>:
    3e88:	push	{r4, r5, r6, r7, lr}
    3e8a:	vpush	{d8-d11}
    3e8e:	vmov.f64	d10, d0
    3e92:	vmov.f64	d9, d1
    3e96:	ldr	r4, [pc, #600]	; (40f0 <pow+0x268>)
    3e98:	sub	sp, #44	; 0x2c
    3e9a:	bl	41c0 <__ieee754_pow>
    3e9e:	ldrsb.w	r3, [r4]
    3ea2:	vmov.f64	d8, d0
    3ea6:	adds	r2, r3, #1
    3ea8:	beq.n	3f14 <pow+0x8c>
    3eaa:	vcmp.f64	d9, d9
    3eae:	vmrs	APSR_nzcv, fpscr
    3eb2:	bvs.n	3f14 <pow+0x8c>
    3eb4:	vcmp.f64	d10, d10
    3eb8:	vmrs	APSR_nzcv, fpscr
    3ebc:	bvs.n	3fac <pow+0x124>
    3ebe:	vldr	d11, [pc, #552]	; 40e8 <pow+0x260>
    3ec2:	vcmp.f64	d10, d11
    3ec6:	vmrs	APSR_nzcv, fpscr
    3eca:	bne.n	3f20 <pow+0x98>
    3ecc:	vcmp.f64	d9, d11
    3ed0:	vmrs	APSR_nzcv, fpscr
    3ed4:	bne.n	3efe <pow+0x76>
    3ed6:	movs	r2, #1
    3ed8:	ldr	r1, [pc, #536]	; (40f4 <pow+0x26c>)
    3eda:	str	r2, [sp, #0]
    3edc:	movs	r2, #0
    3ede:	vstr	d10, [sp, #8]
    3ee2:	vstr	d9, [sp, #16]
    3ee6:	vstr	d11, [sp, #24]
    3eea:	str	r1, [sp, #4]
    3eec:	str	r2, [sp, #32]
    3eee:	cmp	r3, #0
    3ef0:	beq.n	3f8a <pow+0x102>
    3ef2:	vmov.f64	d0, #112	; 0x3f800000  1.0
    3ef6:	add	sp, #44	; 0x2c
    3ef8:	vpop	{d8-d11}
    3efc:	pop	{r4, r5, r6, r7, pc}
    3efe:	vmov.f64	d0, d9
    3f02:	bl	5744 <finite>
    3f06:	cbz	r0, 3f14 <pow+0x8c>
    3f08:	vcmpe.f64	d9, #0.0
    3f0c:	vmrs	APSR_nzcv, fpscr
    3f10:	bmi.w	4054 <pow+0x1cc>
    3f14:	vmov.f64	d0, d8
    3f18:	add	sp, #44	; 0x2c
    3f1a:	vpop	{d8-d11}
    3f1e:	pop	{r4, r5, r6, r7, pc}
    3f20:	bl	5744 <finite>
    3f24:	mov	r5, r0
    3f26:	cmp	r0, #0
    3f28:	beq.n	3fda <pow+0x152>
    3f2a:	vcmp.f64	d8, #0.0
    3f2e:	vmrs	APSR_nzcv, fpscr
    3f32:	mov.w	r6, #0
    3f36:	mov.w	r7, #0
    3f3a:	bne.n	3f14 <pow+0x8c>
    3f3c:	vmov.f64	d0, d10
    3f40:	bl	5744 <finite>
    3f44:	cmp	r0, #0
    3f46:	beq.n	3f14 <pow+0x8c>
    3f48:	vmov.f64	d0, d9
    3f4c:	bl	5744 <finite>
    3f50:	cmp	r0, #0
    3f52:	beq.n	3f14 <pow+0x8c>
    3f54:	ldr	r2, [pc, #412]	; (40f4 <pow+0x26c>)
    3f56:	str	r2, [sp, #4]
    3f58:	vstr	d10, [sp, #8]
    3f5c:	vstr	d9, [sp, #16]
    3f60:	strd	r6, r7, [sp, #24]
    3f64:	movs	r1, #4
    3f66:	movs	r2, #0
    3f68:	ldrsb.w	r3, [r4]
    3f6c:	str	r1, [sp, #0]
    3f6e:	str	r2, [sp, #32]
    3f70:	cmp	r3, #2
    3f72:	beq.n	3f7c <pow+0xf4>
    3f74:	mov	r0, sp
    3f76:	bl	5754 <matherr>
    3f7a:	cbnz	r0, 3f94 <pow+0x10c>
    3f7c:	bl	5d00 <__errno>
    3f80:	movs	r3, #34	; 0x22
    3f82:	str	r3, [r0, #0]
    3f84:	b.n	3f94 <pow+0x10c>
    3f86:	vstr	d11, [sp, #24]
    3f8a:	mov	r0, sp
    3f8c:	bl	5754 <matherr>
    3f90:	cmp	r0, #0
    3f92:	beq.n	407c <pow+0x1f4>
    3f94:	ldr	r3, [sp, #32]
    3f96:	cbz	r3, 3fa0 <pow+0x118>
    3f98:	bl	5d00 <__errno>
    3f9c:	ldr	r3, [sp, #32]
    3f9e:	str	r3, [r0, #0]
    3fa0:	vldr	d0, [sp, #24]
    3fa4:	add	sp, #44	; 0x2c
    3fa6:	vpop	{d8-d11}
    3faa:	pop	{r4, r5, r6, r7, pc}
    3fac:	vcmp.f64	d9, #0.0
    3fb0:	vmrs	APSR_nzcv, fpscr
    3fb4:	bne.n	3f14 <pow+0x8c>
    3fb6:	vmov.f64	d0, #112	; 0x3f800000  1.0
    3fba:	movs	r2, #1
    3fbc:	ldr	r1, [pc, #308]	; (40f4 <pow+0x26c>)
    3fbe:	str	r2, [sp, #0]
    3fc0:	cmp	r3, #2
    3fc2:	mov.w	r2, #0
    3fc6:	vstr	d10, [sp, #8]
    3fca:	vstr	d9, [sp, #16]
    3fce:	str	r1, [sp, #4]
    3fd0:	str	r2, [sp, #32]
    3fd2:	vstr	d0, [sp, #24]
    3fd6:	bne.n	3f8a <pow+0x102>
    3fd8:	b.n	3f18 <pow+0x90>
    3fda:	vmov.f64	d0, d10
    3fde:	bl	5744 <finite>
    3fe2:	cmp	r0, #0
    3fe4:	beq.n	3f2a <pow+0xa2>
    3fe6:	vmov.f64	d0, d9
    3fea:	bl	5744 <finite>
    3fee:	cmp	r0, #0
    3ff0:	beq.n	3f2a <pow+0xa2>
    3ff2:	vcmp.f64	d8, d8
    3ff6:	vmrs	APSR_nzcv, fpscr
    3ffa:	ldrsb.w	r3, [r4]
    3ffe:	ldr	r2, [pc, #244]	; (40f4 <pow+0x26c>)
    4000:	str	r5, [sp, #32]
    4002:	bvs.n	40c2 <pow+0x23a>
    4004:	movs	r1, #3
    4006:	vstr	d10, [sp, #8]
    400a:	vstr	d9, [sp, #16]
    400e:	stmia.w	sp, {r1, r2}
    4012:	cmp	r3, #0
    4014:	bne.n	4086 <pow+0x1fe>
    4016:	vcmpe.f64	d10, #0.0
    401a:	ldr	r3, [pc, #220]	; (40f8 <pow+0x270>)
    401c:	mov.w	r2, #3758096384	; 0xe0000000
    4020:	vmrs	APSR_nzcv, fpscr
    4024:	strd	r2, r3, [sp, #24]
    4028:	bpl.n	3f74 <pow+0xec>
    402a:	vmov.f64	d7, #96	; 0x3f000000  0.5
    402e:	vmul.f64	d9, d9, d7
    4032:	vmov.f64	d0, d9
    4036:	bl	5768 <rint>
    403a:	vcmp.f64	d9, d0
    403e:	vmrs	APSR_nzcv, fpscr
    4042:	beq.n	40bc <pow+0x234>
    4044:	ldr	r1, [pc, #180]	; (40fc <pow+0x274>)
    4046:	ldrsb.w	r3, [r4]
    404a:	mov.w	r0, #3758096384	; 0xe0000000
    404e:	strd	r0, r1, [sp, #24]
    4052:	b.n	3f70 <pow+0xe8>
    4054:	ldr	r2, [pc, #156]	; (40f4 <pow+0x26c>)
    4056:	ldrsb.w	r3, [r4]
    405a:	str	r2, [sp, #4]
    405c:	movs	r1, #1
    405e:	movs	r2, #0
    4060:	vstr	d10, [sp, #8]
    4064:	vstr	d9, [sp, #16]
    4068:	str	r1, [sp, #0]
    406a:	str	r2, [sp, #32]
    406c:	cmp	r3, #0
    406e:	beq.n	3f86 <pow+0xfe>
    4070:	ldr	r1, [pc, #140]	; (4100 <pow+0x278>)
    4072:	movs	r0, #0
    4074:	cmp	r3, #2
    4076:	strd	r0, r1, [sp, #24]
    407a:	bne.n	3f8a <pow+0x102>
    407c:	bl	5d00 <__errno>
    4080:	movs	r3, #33	; 0x21
    4082:	str	r3, [r0, #0]
    4084:	b.n	3f94 <pow+0x10c>
    4086:	ldr	r1, [pc, #124]	; (4104 <pow+0x27c>)
    4088:	vcmpe.f64	d10, #0.0
    408c:	movs	r0, #0
    408e:	vmrs	APSR_nzcv, fpscr
    4092:	strd	r0, r1, [sp, #24]
    4096:	bpl.w	3f70 <pow+0xe8>
    409a:	vmov.f64	d7, #96	; 0x3f000000  0.5
    409e:	vmul.f64	d9, d9, d7
    40a2:	vmov.f64	d0, d9
    40a6:	bl	5768 <rint>
    40aa:	vcmp.f64	d9, d0
    40ae:	vmrs	APSR_nzcv, fpscr
    40b2:	beq.n	40bc <pow+0x234>
    40b4:	ldr	r3, [pc, #72]	; (4100 <pow+0x278>)
    40b6:	movs	r2, #0
    40b8:	strd	r2, r3, [sp, #24]
    40bc:	ldrsb.w	r3, [r4]
    40c0:	b.n	3f70 <pow+0xe8>
    40c2:	movs	r1, #1
    40c4:	vstr	d10, [sp, #8]
    40c8:	vstr	d9, [sp, #16]
    40cc:	stmia.w	sp, {r1, r2}
    40d0:	cmp	r3, #0
    40d2:	beq.w	3f86 <pow+0xfe>
    40d6:	vdiv.f64	d7, d11, d11
    40da:	cmp	r3, #2
    40dc:	vstr	d7, [sp, #24]
    40e0:	beq.n	407c <pow+0x1f4>
    40e2:	b.n	3f8a <pow+0x102>
    40e4:	nop.w
	...
    40f0:	.word	0x20000a04
    40f4:	.word	0x20000544
    40f8:	.word	0x47efffff
    40fc:	.word	0xc7efffff
    4100:	.word	0xfff00000
    4104:	.word	0x7ff00000

00004108 <atan2f>:
    4108:	b.w	4ac8 <__ieee754_atan2f>
    410c:	movs	r0, r0
	...

00004110 <sqrtf>:
    4110:	push	{lr}
    4112:	vpush	{d8}
    4116:	sub	sp, #44	; 0x2c
    4118:	vmov.f32	s16, s0
    411c:	bl	4ecc <__ieee754_sqrtf>
    4120:	ldr	r3, [pc, #148]	; (41b8 <sqrtf+0xa8>)
    4122:	ldrsb.w	r3, [r3]
    4126:	adds	r2, r3, #1
    4128:	beq.n	413e <sqrtf+0x2e>
    412a:	vcmp.f32	s16, s16
    412e:	vmrs	APSR_nzcv, fpscr
    4132:	bvs.n	413e <sqrtf+0x2e>
    4134:	vcmpe.f32	s16, #0.0
    4138:	vmrs	APSR_nzcv, fpscr
    413c:	bmi.n	4148 <sqrtf+0x38>
    413e:	add	sp, #44	; 0x2c
    4140:	vpop	{d8}
    4144:	ldr.w	pc, [sp], #4
    4148:	vcvt.f64.f32	d0, s16
    414c:	movs	r2, #1
    414e:	ldr	r1, [pc, #108]	; (41bc <sqrtf+0xac>)
    4150:	str	r2, [sp, #0]
    4152:	movs	r2, #0
    4154:	vstr	d0, [sp, #16]
    4158:	vstr	d0, [sp, #8]
    415c:	str	r1, [sp, #4]
    415e:	str	r2, [sp, #32]
    4160:	cbz	r3, 4190 <sqrtf+0x80>
    4162:	vldr	d7, [pc, #76]	; 41b0 <sqrtf+0xa0>
    4166:	cmp	r3, #2
    4168:	vdiv.f64	d6, d7, d7
    416c:	vstr	d6, [sp, #24]
    4170:	bne.n	4198 <sqrtf+0x88>
    4172:	bl	5d00 <__errno>
    4176:	movs	r3, #33	; 0x21
    4178:	str	r3, [r0, #0]
    417a:	ldr	r3, [sp, #32]
    417c:	cbnz	r3, 41a4 <sqrtf+0x94>
    417e:	vldr	d0, [sp, #24]
    4182:	vcvt.f32.f64	s0, d0
    4186:	add	sp, #44	; 0x2c
    4188:	vpop	{d8}
    418c:	ldr.w	pc, [sp], #4
    4190:	movs	r2, #0
    4192:	movs	r3, #0
    4194:	strd	r2, r3, [sp, #24]
    4198:	mov	r0, sp
    419a:	bl	5754 <matherr>
    419e:	cmp	r0, #0
    41a0:	bne.n	417a <sqrtf+0x6a>
    41a2:	b.n	4172 <sqrtf+0x62>
    41a4:	bl	5d00 <__errno>
    41a8:	ldr	r3, [sp, #32]
    41aa:	str	r3, [r0, #0]
    41ac:	b.n	417e <sqrtf+0x6e>
    41ae:	nop
	...
    41b8:	.word	0x20000a04
    41bc:	.word	0x20000548

000041c0 <__ieee754_pow>:
    41c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41c4:	vmov	r0, r1, d1
    41c8:	vpush	{d8-d11}
    41cc:	bic.w	r5, r1, #2147483648	; 0x80000000
    41d0:	orrs.w	r4, r5, r0
    41d4:	sub	sp, #28
    41d6:	beq.n	424e <__ieee754_pow+0x8e>
    41d8:	vmov	r2, r3, d0
    41dc:	ldr	r7, [pc, #424]	; (4388 <__ieee754_pow+0x1c8>)
    41de:	bic.w	r4, r3, #2147483648	; 0x80000000
    41e2:	cmp	r4, r7
    41e4:	vmov	sl, s0
    41e8:	mov	r9, r3
    41ea:	bgt.n	4240 <__ieee754_pow+0x80>
    41ec:	mov	r8, r1
    41ee:	vmov	r6, s2
    41f2:	beq.n	423e <__ieee754_pow+0x7e>
    41f4:	cmp	r5, r7
    41f6:	bgt.n	4240 <__ieee754_pow+0x80>
    41f8:	ldr	r7, [pc, #396]	; (4388 <__ieee754_pow+0x1c8>)
    41fa:	cmp	r5, r7
    41fc:	beq.n	42f4 <__ieee754_pow+0x134>
    41fe:	cmp.w	r9, #0
    4202:	blt.n	42fa <__ieee754_pow+0x13a>
    4204:	mov.w	fp, #0
    4208:	cbnz	r6, 4274 <__ieee754_pow+0xb4>
    420a:	ldr	r6, [pc, #380]	; (4388 <__ieee754_pow+0x1c8>)
    420c:	cmp	r5, r6
    420e:	beq.w	4332 <__ieee754_pow+0x172>
    4212:	ldr	r6, [pc, #376]	; (438c <__ieee754_pow+0x1cc>)
    4214:	cmp	r5, r6
    4216:	beq.n	42e6 <__ieee754_pow+0x126>
    4218:	cmp.w	r8, #1073741824	; 0x40000000
    421c:	beq.w	46ce <__ieee754_pow+0x50e>
    4220:	ldr	r6, [pc, #364]	; (4390 <__ieee754_pow+0x1d0>)
    4222:	cmp	r8, r6
    4224:	bne.n	4274 <__ieee754_pow+0xb4>
    4226:	cmp.w	r9, #0
    422a:	blt.n	4274 <__ieee754_pow+0xb4>
    422c:	vmov	d0, r2, r3
    4230:	add	sp, #28
    4232:	vpop	{d8-d11}
    4236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    423a:	b.w	4944 <__ieee754_sqrt>
    423e:	cbz	r2, 425c <__ieee754_pow+0x9c>
    4240:	add.w	r4, r4, #3221225472	; 0xc0000000
    4244:	add.w	r4, r4, #1048576	; 0x100000
    4248:	orrs.w	r3, r4, sl
    424c:	bne.n	4260 <__ieee754_pow+0xa0>
    424e:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4252:	add	sp, #28
    4254:	vpop	{d8-d11}
    4258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    425c:	cmp	r5, r4
    425e:	ble.n	41f8 <__ieee754_pow+0x38>
    4260:	ldr	r0, [pc, #304]	; (4394 <__ieee754_pow+0x1d4>)
    4262:	add	sp, #28
    4264:	vpop	{d8-d11}
    4268:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    426c:	b.w	5758 <nan>
    4270:	mov.w	fp, #0
    4274:	mov	r6, r2
    4276:	mov	r7, r3
    4278:	vmov	d0, r6, r7
    427c:	strd	r0, r1, [sp, #8]
    4280:	bl	5734 <fabs>
    4284:	vstr	d0, [sp]
    4288:	cmp.w	sl, #0
    428c:	beq.n	42c4 <__ieee754_pow+0x104>
    428e:	mov.w	r9, r9, lsr #31
    4292:	add.w	r9, r9, #4294967295
    4296:	orrs.w	r3, fp, r9
    429a:	beq.n	435a <__ieee754_pow+0x19a>
    429c:	ldr	r3, [pc, #248]	; (4398 <__ieee754_pow+0x1d8>)
    429e:	cmp	r5, r3
    42a0:	ble.w	43a4 <__ieee754_pow+0x1e4>
    42a4:	add.w	r3, r3, #34603008	; 0x2100000
    42a8:	cmp	r5, r3
    42aa:	ble.w	47e2 <__ieee754_pow+0x622>
    42ae:	ldr	r3, [pc, #236]	; (439c <__ieee754_pow+0x1dc>)
    42b0:	cmp	r4, r3
    42b2:	ble.n	4368 <__ieee754_pow+0x1a8>
    42b4:	cmp.w	r8, #0
    42b8:	ble.n	436e <__ieee754_pow+0x1ae>
    42ba:	vldr	d0, [pc, #188]	; 4378 <__ieee754_pow+0x1b8>
    42be:	vmul.f64	d0, d0, d0
    42c2:	b.n	4252 <__ieee754_pow+0x92>
    42c4:	cbz	r4, 42d0 <__ieee754_pow+0x110>
    42c6:	ldr	r3, [pc, #196]	; (438c <__ieee754_pow+0x1cc>)
    42c8:	bic.w	r2, r9, #3221225472	; 0xc0000000
    42cc:	cmp	r2, r3
    42ce:	bne.n	428e <__ieee754_pow+0xce>
    42d0:	cmp.w	r8, #0
    42d4:	blt.w	47d0 <__ieee754_pow+0x610>
    42d8:	cmp.w	r9, #0
    42dc:	blt.w	46ac <__ieee754_pow+0x4ec>
    42e0:	vldr	d0, [sp]
    42e4:	b.n	4252 <__ieee754_pow+0x92>
    42e6:	cmp.w	r8, #0
    42ea:	blt.w	4866 <__ieee754_pow+0x6a6>
    42ee:	vmov	d0, r2, r3
    42f2:	b.n	4252 <__ieee754_pow+0x92>
    42f4:	cmp	r6, #0
    42f6:	beq.n	41fe <__ieee754_pow+0x3e>
    42f8:	b.n	4240 <__ieee754_pow+0x80>
    42fa:	ldr	r7, [pc, #164]	; (43a0 <__ieee754_pow+0x1e0>)
    42fc:	cmp	r5, r7
    42fe:	bgt.n	4354 <__ieee754_pow+0x194>
    4300:	sub.w	r7, r7, #55574528	; 0x3500000
    4304:	cmp	r5, r7
    4306:	ble.w	4204 <__ieee754_pow+0x44>
    430a:	asrs	r7, r5, #20
    430c:	subw	r7, r7, #1023	; 0x3ff
    4310:	cmp	r7, #20
    4312:	ble.w	4882 <__ieee754_pow+0x6c2>
    4316:	rsb	r7, r7, #52	; 0x34
    431a:	lsr.w	lr, r6, r7
    431e:	lsl.w	r7, lr, r7
    4322:	cmp	r6, r7
    4324:	bne.w	4204 <__ieee754_pow+0x44>
    4328:	and.w	lr, lr, #1
    432c:	rsb	fp, lr, #2
    4330:	b.n	4208 <__ieee754_pow+0x48>
    4332:	add.w	r3, r4, #3221225472	; 0xc0000000
    4336:	add.w	r3, r3, #1048576	; 0x100000
    433a:	orrs.w	r3, r3, sl
    433e:	beq.n	424e <__ieee754_pow+0x8e>
    4340:	ldr	r3, [pc, #88]	; (439c <__ieee754_pow+0x1dc>)
    4342:	cmp	r4, r3
    4344:	ble.w	47be <__ieee754_pow+0x5fe>
    4348:	cmp.w	r8, #0
    434c:	blt.n	436e <__ieee754_pow+0x1ae>
    434e:	vmov	d0, r0, r1
    4352:	b.n	4252 <__ieee754_pow+0x92>
    4354:	mov.w	fp, #2
    4358:	b.n	4208 <__ieee754_pow+0x48>
    435a:	vmov	d7, r6, r7
    435e:	vsub.f64	d7, d7, d7
    4362:	vdiv.f64	d0, d7, d7
    4366:	b.n	4252 <__ieee754_pow+0x92>
    4368:	cmp.w	r8, #0
    436c:	blt.n	42ba <__ieee754_pow+0xfa>
    436e:	vldr	d0, [pc, #16]	; 4380 <__ieee754_pow+0x1c0>
    4372:	b.n	4252 <__ieee754_pow+0x92>
    4374:	nop.w
    4378:	.word	0x8800759c
    437c:	.word	0x7e37e43c
	...
    4388:	.word	0x7ff00000
    438c:	.word	0x3ff00000
    4390:	.word	0x3fe00000
    4394:	.word	0x200000c0
    4398:	.word	0x41e00000
    439c:	.word	0x3fefffff
    43a0:	.word	0x433fffff
    43a4:	cmp.w	r4, #1048576	; 0x100000
    43a8:	bge.w	4862 <__ieee754_pow+0x6a2>
    43ac:	vldr	d6, [sp]
    43b0:	vldr	d7, [pc, #804]	; 46d8 <__ieee754_pow+0x518>
    43b4:	vmul.f64	d7, d6, d7
    43b8:	vstr	d7, [sp]
    43bc:	ldr	r4, [sp, #4]
    43be:	mvn.w	r6, #52	; 0x34
    43c2:	ldr	r2, [pc, #948]	; (4778 <__ieee754_pow+0x5b8>)
    43c4:	asrs	r3, r4, #20
    43c6:	ubfx	r4, r4, #0, #20
    43ca:	subw	r3, r3, #1023	; 0x3ff
    43ce:	orr.w	r1, r4, #1069547520	; 0x3fc00000
    43d2:	cmp	r4, r2
    43d4:	add	r6, r3
    43d6:	orr.w	r1, r1, #3145728	; 0x300000
    43da:	ble.w	4852 <__ieee754_pow+0x692>
    43de:	ldr	r3, [pc, #924]	; (477c <__ieee754_pow+0x5bc>)
    43e0:	cmp	r4, r3
    43e2:	ble.w	48be <__ieee754_pow+0x6fe>
    43e6:	vmov.f64	d7, #112	; 0x3f800000  1.0
    43ea:	vldr	d3, [pc, #756]	; 46e0 <__ieee754_pow+0x520>
    43ee:	adds	r6, #1
    43f0:	sub.w	r1, r1, #1048576	; 0x100000
    43f4:	movs	r5, #0
    43f6:	vmov.f64	d0, d3
    43fa:	ldrd	r2, r3, [sp]
    43fe:	vmov.f64	d4, #112	; 0x3f800000  1.0
    4402:	mov	r3, r1
    4404:	vmov	d1, r2, r3
    4408:	asrs	r4, r1, #1
    440a:	vadd.f64	d6, d1, d7
    440e:	vsub.f64	d2, d1, d7
    4412:	vdiv.f64	d5, d4, d6
    4416:	vmul.f64	d6, d2, d5
    441a:	vstr	d6, [sp]
    441e:	ldrd	r2, r3, [sp]
    4422:	orr.w	r4, r4, #536870912	; 0x20000000
    4426:	add.w	r4, r4, #524288	; 0x80000
    442a:	movs	r2, #0
    442c:	movs	r0, #0
    442e:	adds	r1, r4, r5
    4430:	vmov	d4, r2, r3
    4434:	vmov	d6, r0, r1
    4438:	vneg.f64	d10, d4
    443c:	vsub.f64	d7, d6, d7
    4440:	vfma.f64	d2, d10, d6
    4444:	vsub.f64	d7, d1, d7
    4448:	vmov.f64	d6, d2
    444c:	vfma.f64	d6, d10, d7
    4450:	vldr	d7, [sp]
    4454:	vmul.f64	d2, d6, d5
    4458:	vldr	d6, [sp]
    445c:	vadd.f64	d7, d7, d4
    4460:	vmul.f64	d11, d6, d6
    4464:	vldr	d9, [pc, #640]	; 46e8 <__ieee754_pow+0x528>
    4468:	vmul.f64	d6, d7, d2
    446c:	vldr	d8, [pc, #640]	; 46f0 <__ieee754_pow+0x530>
    4470:	vldr	d1, [pc, #644]	; 46f8 <__ieee754_pow+0x538>
    4474:	vfma.f64	d8, d11, d9
    4478:	vldr	d7, [pc, #644]	; 4700 <__ieee754_pow+0x540>
    447c:	vfma.f64	d1, d11, d8
    4480:	vmul.f64	d8, d11, d11
    4484:	vldr	d5, [pc, #640]	; 4708 <__ieee754_pow+0x548>
    4488:	vfma.f64	d7, d11, d1
    448c:	vfma.f64	d5, d11, d7
    4490:	vldr	d7, [pc, #636]	; 4710 <__ieee754_pow+0x550>
    4494:	vfma.f64	d7, d11, d5
    4498:	vmov.f64	d5, #8	; 0x40400000  3.0
    449c:	vfma.f64	d6, d8, d7
    44a0:	vmov.f64	d7, d5
    44a4:	vfma.f64	d7, d4, d4
    44a8:	vadd.f64	d7, d7, d6
    44ac:	vstr	d7, [sp, #16]
    44b0:	str	r2, [sp, #16]
    44b2:	vldr	d9, [sp, #16]
    44b6:	vsub.f64	d5, d9, d5
    44ba:	vfma.f64	d5, d10, d4
    44be:	vsub.f64	d5, d6, d5
    44c2:	vldr	d6, [sp]
    44c6:	vmul.f64	d6, d5, d6
    44ca:	vfma.f64	d6, d2, d9
    44ce:	vmov.f64	d5, d6
    44d2:	vfma.f64	d5, d4, d9
    44d6:	vstr	d5, [sp]
    44da:	str	r2, [sp, #0]
    44dc:	vldr	d4, [sp]
    44e0:	vldr	d2, [pc, #564]	; 4718 <__ieee754_pow+0x558>
    44e4:	vmov.f64	d5, d4
    44e8:	vfma.f64	d5, d10, d9
    44ec:	vldr	d7, [pc, #560]	; 4720 <__ieee754_pow+0x560>
    44f0:	vsub.f64	d6, d6, d5
    44f4:	vldr	d8, [pc, #560]	; 4728 <__ieee754_pow+0x568>
    44f8:	vmul.f64	d7, d6, d7
    44fc:	vmov	s3, r6
    4500:	vfma.f64	d7, d4, d8
    4504:	vcvt.f64.s32	d1, s3
    4508:	vadd.f64	d7, d7, d0
    450c:	vmov.f64	d6, d7
    4510:	vfma.f64	d6, d4, d2
    4514:	vadd.f64	d6, d6, d3
    4518:	vadd.f64	d6, d6, d1
    451c:	vstr	d6, [sp]
    4520:	str	r2, [sp, #0]
    4522:	vldr	d5, [sp]
    4526:	vsub.f64	d6, d5, d1
    452a:	vsub.f64	d6, d6, d3
    452e:	vfms.f64	d6, d4, d2
    4532:	vsub.f64	d6, d7, d6
    4536:	ldrd	r3, r4, [sp, #8]
    453a:	vmov.f64	d0, #240	; 0xbf800000 -1.0
    453e:	mov	r1, r4
    4540:	movs	r0, #0
    4542:	vmov	d7, r3, r4
    4546:	vmov	d4, r0, r1
    454a:	vmul.f64	d6, d6, d7
    454e:	vsub.f64	d7, d7, d4
    4552:	vfma.f64	d6, d5, d7
    4556:	vmul.f64	d5, d5, d4
    455a:	vadd.f64	d7, d6, d5
    455e:	vstr	d7, [sp]
    4562:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4566:	ldr	r3, [pc, #536]	; (4780 <__ieee754_pow+0x5c0>)
    4568:	ldr	r2, [sp, #4]
    456a:	add.w	fp, fp, #4294967295
    456e:	orrs.w	r4, fp, r9
    4572:	ite	ne
    4574:	vmovne.f64	d8, d7
    4578:	vmoveq.f64	d8, d0
    457c:	cmp	r2, r3
    457e:	ldr	r4, [sp, #0]
    4580:	ble.w	4788 <__ieee754_pow+0x5c8>
    4584:	add.w	r3, r2, #3204448256	; 0xbf000000
    4588:	add.w	r3, r3, #7340032	; 0x700000
    458c:	orrs	r3, r4
    458e:	bne.w	4874 <__ieee754_pow+0x6b4>
    4592:	vadd.f64	d4, d6, d5
    4596:	vsub.f64	d4, d4, d5
    459a:	vldr	d7, [pc, #404]	; 4730 <__ieee754_pow+0x570>
    459e:	vadd.f64	d7, d6, d7
    45a2:	vcmpe.f64	d7, d4
    45a6:	vmrs	APSR_nzcv, fpscr
    45aa:	bgt.w	4874 <__ieee754_pow+0x6b4>
    45ae:	mov	r3, r2
    45b0:	asrs	r3, r3, #20
    45b2:	mov.w	r1, #1048576	; 0x100000
    45b6:	subw	r3, r3, #1022	; 0x3fe
    45ba:	asr.w	r3, r1, r3
    45be:	adds	r1, r3, r2
    45c0:	ubfx	r0, r1, #20, #11
    45c4:	ldr	r6, [pc, #444]	; (4784 <__ieee754_pow+0x5c4>)
    45c6:	subw	r0, r0, #1023	; 0x3ff
    45ca:	asrs	r6, r0
    45cc:	bic.w	r5, r1, r6
    45d0:	movs	r4, #0
    45d2:	ubfx	r3, r1, #0, #20
    45d6:	vmov	d7, r4, r5
    45da:	rsb	r0, r0, #20
    45de:	orr.w	r3, r3, #1048576	; 0x100000
    45e2:	asr.w	r0, r3, r0
    45e6:	cmp	r2, #0
    45e8:	vsub.f64	d5, d5, d7
    45ec:	vadd.f64	d7, d6, d5
    45f0:	vstr	d7, [sp]
    45f4:	it	lt
    45f6:	neglt	r0, r0
    45f8:	lsls	r1, r0, #20
    45fa:	ldrd	r2, r3, [sp]
    45fe:	vmov.f64	d2, #0	; 0x40000000  2.0
    4602:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4606:	vldr	d1, [pc, #304]	; 4738 <__ieee754_pow+0x578>
    460a:	vldr	d0, [pc, #308]	; 4740 <__ieee754_pow+0x580>
    460e:	movs	r2, #0
    4610:	vldr	d4, [pc, #308]	; 4748 <__ieee754_pow+0x588>
    4614:	vmov	d3, r2, r3
    4618:	vldr	d9, [pc, #308]	; 4750 <__ieee754_pow+0x590>
    461c:	vmul.f64	d4, d3, d4
    4620:	vsub.f64	d5, d3, d5
    4624:	vsub.f64	d5, d6, d5
    4628:	vmov.f64	d6, d4
    462c:	vfma.f64	d6, d5, d0
    4630:	vldr	d5, [pc, #292]	; 4758 <__ieee754_pow+0x598>
    4634:	vmov.f64	d4, d6
    4638:	vfma.f64	d4, d3, d1
    463c:	vmov.f64	d0, d4
    4640:	vfms.f64	d0, d3, d1
    4644:	vsub.f64	d6, d6, d0
    4648:	vldr	d0, [pc, #276]	; 4760 <__ieee754_pow+0x5a0>
    464c:	vmul.f64	d3, d4, d4
    4650:	vfma.f64	d5, d3, d9
    4654:	vldr	d1, [pc, #272]	; 4768 <__ieee754_pow+0x5a8>
    4658:	vfma.f64	d0, d3, d5
    465c:	vfma.f64	d6, d4, d6
    4660:	vldr	d5, [pc, #268]	; 4770 <__ieee754_pow+0x5b0>
    4664:	vfma.f64	d1, d3, d0
    4668:	vfma.f64	d5, d3, d1
    466c:	vmov.f64	d1, d4
    4670:	vfms.f64	d1, d3, d5
    4674:	vmul.f64	d3, d4, d1
    4678:	vsub.f64	d2, d1, d2
    467c:	vdiv.f64	d5, d3, d2
    4680:	vsub.f64	d6, d5, d6
    4684:	vsub.f64	d6, d6, d4
    4688:	vsub.f64	d7, d7, d6
    468c:	vstr	d7, [sp]
    4690:	ldr	r3, [sp, #4]
    4692:	add	r1, r3
    4694:	cmp.w	r1, #1048576	; 0x100000
    4698:	blt.w	48d0 <__ieee754_pow+0x710>
    469c:	ldrd	r2, r3, [sp]
    46a0:	mov	r3, r1
    46a2:	vmov	d0, r2, r3
    46a6:	vmul.f64	d0, d0, d8
    46aa:	b.n	4252 <__ieee754_pow+0x92>
    46ac:	add.w	r4, r4, #3221225472	; 0xc0000000
    46b0:	add.w	r4, r4, #1048576	; 0x100000
    46b4:	orrs.w	r3, r4, fp
    46b8:	beq.w	48b0 <__ieee754_pow+0x6f0>
    46bc:	cmp.w	fp, #1
    46c0:	bne.w	42e0 <__ieee754_pow+0x120>
    46c4:	vldr	d7, [sp]
    46c8:	vneg.f64	d0, d7
    46cc:	b.n	4252 <__ieee754_pow+0x92>
    46ce:	vmov	d7, r2, r3
    46d2:	vmul.f64	d0, d7, d7
    46d6:	b.n	4252 <__ieee754_pow+0x92>
    46d8:	.word	0x00000000
    46dc:	.word	0x43400000
	...
    46e8:	.word	0x4a454eef
    46ec:	.word	0x3fca7e28
    46f0:	.word	0x93c9db65
    46f4:	.word	0x3fcd864a
    46f8:	.word	0xa91d4101
    46fc:	.word	0x3fd17460
    4700:	.word	0x518f264d
    4704:	.word	0x3fd55555
    4708:	.word	0xdb6fabff
    470c:	.word	0x3fdb6db6
    4710:	.word	0x33333303
    4714:	.word	0x3fe33333
    4718:	.word	0xe0000000
    471c:	.word	0x3feec709
    4720:	.word	0xdc3a03fd
    4724:	.word	0x3feec709
    4728:	.word	0x145b01f5
    472c:	.word	0xbe3e2fe0
    4730:	.word	0x652b82fe
    4734:	.word	0x3c971547
    4738:	.word	0x00000000
    473c:	.word	0x3fe62e43
    4740:	.word	0xfefa39ef
    4744:	.word	0x3fe62e42
    4748:	.word	0x0ca86c39
    474c:	.word	0xbe205c61
    4750:	.word	0x72bea4d0
    4754:	.word	0x3e663769
    4758:	.word	0xc5d26bf1
    475c:	.word	0xbebbbd41
    4760:	.word	0xaf25de2c
    4764:	.word	0x3f11566a
    4768:	.word	0x16bebd93
    476c:	.word	0xbf66c16c
    4770:	.word	0x5555553e
    4774:	.word	0x3fc55555
    4778:	.word	0x0003988e
    477c:	.word	0x000bb679
    4780:	.word	0x408fffff
    4784:	.word	0x000fffff
    4788:	ldr	r5, [pc, #420]	; (4930 <__ieee754_pow+0x770>)
    478a:	bic.w	r3, r2, #2147483648	; 0x80000000
    478e:	cmp	r3, r5
    4790:	ble.w	489c <__ieee754_pow+0x6dc>
    4794:	ldr	r1, [pc, #412]	; (4934 <__ieee754_pow+0x774>)
    4796:	add	r1, r2
    4798:	orrs	r1, r4
    479a:	bne.n	47b0 <__ieee754_pow+0x5f0>
    479c:	vadd.f64	d7, d6, d5
    47a0:	vsub.f64	d7, d7, d5
    47a4:	vcmpe.f64	d6, d7
    47a8:	vmrs	APSR_nzcv, fpscr
    47ac:	bhi.w	45b0 <__ieee754_pow+0x3f0>
    47b0:	vldr	d0, [pc, #308]	; 48e8 <__ieee754_pow+0x728>
    47b4:	vmul.f64	d7, d8, d0
    47b8:	vmul.f64	d0, d7, d0
    47bc:	b.n	4252 <__ieee754_pow+0x92>
    47be:	cmp.w	r8, #0
    47c2:	bge.w	436e <__ieee754_pow+0x1ae>
    47c6:	vmov	d7, r0, r1
    47ca:	vneg.f64	d0, d7
    47ce:	b.n	4252 <__ieee754_pow+0x92>
    47d0:	vldr	d5, [sp]
    47d4:	vmov.f64	d7, #112	; 0x3f800000  1.0
    47d8:	vdiv.f64	d6, d7, d5
    47dc:	vstr	d6, [sp]
    47e0:	b.n	42d8 <__ieee754_pow+0x118>
    47e2:	ldr	r3, [pc, #340]	; (4938 <__ieee754_pow+0x778>)
    47e4:	cmp	r4, r3
    47e6:	ble.w	4368 <__ieee754_pow+0x1a8>
    47ea:	ldr	r3, [pc, #336]	; (493c <__ieee754_pow+0x77c>)
    47ec:	cmp	r4, r3
    47ee:	bgt.w	42b4 <__ieee754_pow+0xf4>
    47f2:	vmov.f64	d7, #112	; 0x3f800000  1.0
    47f6:	vmov.f64	d8, #80	; 0x3e800000  0.250
    47fa:	vldr	d5, [sp]
    47fe:	vldr	d2, [pc, #240]	; 48f0 <__ieee754_pow+0x730>
    4802:	vsub.f64	d7, d5, d7
    4806:	vmov.f64	d5, #96	; 0x3f000000  0.5
    480a:	vldr	d3, [pc, #236]	; 48f8 <__ieee754_pow+0x738>
    480e:	vneg.f64	d4, d7
    4812:	vmul.f64	d0, d7, d7
    4816:	vldr	d6, [pc, #232]	; 4900 <__ieee754_pow+0x740>
    481a:	vfma.f64	d3, d4, d8
    481e:	vfma.f64	d5, d4, d3
    4822:	vldr	d1, [pc, #228]	; 4908 <__ieee754_pow+0x748>
    4826:	vmul.f64	d5, d5, d0
    482a:	vnmul.f64	d6, d6, d5
    482e:	vfma.f64	d6, d7, d1
    4832:	vmov.f64	d5, d6
    4836:	vfma.f64	d5, d7, d2
    483a:	vmov	r2, r3, d5
    483e:	movs	r2, #0
    4840:	vmov	d5, r2, r3
    4844:	vmov.f64	d7, d5
    4848:	vfma.f64	d7, d4, d2
    484c:	vsub.f64	d6, d6, d7
    4850:	b.n	4536 <__ieee754_pow+0x376>
    4852:	vldr	d3, [pc, #188]	; 4910 <__ieee754_pow+0x750>
    4856:	vmov.f64	d7, #112	; 0x3f800000  1.0
    485a:	vmov.f64	d0, d3
    485e:	movs	r5, #0
    4860:	b.n	43fa <__ieee754_pow+0x23a>
    4862:	movs	r6, #0
    4864:	b.n	43c2 <__ieee754_pow+0x202>
    4866:	vmov	d6, r2, r3
    486a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    486e:	vdiv.f64	d0, d7, d6
    4872:	b.n	4252 <__ieee754_pow+0x92>
    4874:	vldr	d0, [pc, #160]	; 4918 <__ieee754_pow+0x758>
    4878:	vmul.f64	d7, d8, d0
    487c:	vmul.f64	d0, d7, d0
    4880:	b.n	4252 <__ieee754_pow+0x92>
    4882:	cmp	r6, #0
    4884:	bne.w	4270 <__ieee754_pow+0xb0>
    4888:	rsb	r7, r7, #20
    488c:	asr.w	lr, r5, r7
    4890:	lsl.w	r7, lr, r7
    4894:	cmp	r5, r7
    4896:	beq.n	48da <__ieee754_pow+0x71a>
    4898:	mov	fp, r6
    489a:	b.n	4212 <__ieee754_pow+0x52>
    489c:	ldr	r4, [pc, #160]	; (4940 <__ieee754_pow+0x780>)
    489e:	cmp	r3, r4
    48a0:	bgt.w	45b0 <__ieee754_pow+0x3f0>
    48a4:	vadd.f64	d7, d6, d5
    48a8:	mov	r1, r0
    48aa:	vstr	d7, [sp]
    48ae:	b.n	45fa <__ieee754_pow+0x43a>
    48b0:	vldr	d7, [sp]
    48b4:	vsub.f64	d7, d7, d7
    48b8:	vdiv.f64	d0, d7, d7
    48bc:	b.n	4252 <__ieee754_pow+0x92>
    48be:	vldr	d3, [pc, #96]	; 4920 <__ieee754_pow+0x760>
    48c2:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    48c6:	vldr	d0, [pc, #96]	; 4928 <__ieee754_pow+0x768>
    48ca:	mov.w	r5, #262144	; 0x40000
    48ce:	b.n	43fa <__ieee754_pow+0x23a>
    48d0:	vmov.f64	d0, d7
    48d4:	bl	5888 <scalbn>
    48d8:	b.n	46a6 <__ieee754_pow+0x4e6>
    48da:	and.w	lr, lr, #1
    48de:	rsb	fp, lr, #2
    48e2:	b.n	4212 <__ieee754_pow+0x52>
    48e4:	nop.w
    48e8:	.word	0xc2f8f359
    48ec:	.word	0x01a56e1f
    48f0:	.word	0x60000000
    48f4:	.word	0x3ff71547
    48f8:	.word	0x55555555
    48fc:	.word	0x3fd55555
    4900:	.word	0x652b82fe
    4904:	.word	0x3ff71547
    4908:	.word	0xf85ddf44
    490c:	.word	0x3e54ae0b
	...
    4918:	.word	0x8800759c
    491c:	.word	0x7e37e43c
    4920:	.word	0x40000000
    4924:	.word	0x3fe2b803
    4928:	.word	0x43cfd006
    492c:	.word	0x3e4cfdeb
    4930:	.word	0x4090cbff
    4934:	.word	0x3f6f3400
    4938:	.word	0x3feffffe
    493c:	.word	0x3ff00000
    4940:	.word	0x3fe00000

00004944 <__ieee754_sqrt>:
    4944:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4948:	sub	sp, #8
    494a:	vstr	d0, [sp]
    494e:	ldr	r1, [pc, #372]	; (4ac4 <__ieee754_sqrt+0x180>)
    4950:	ldr	r3, [sp, #4]
    4952:	ldr	r0, [sp, #0]
    4954:	mov	r4, r1
    4956:	ands	r1, r3
    4958:	cmp	r1, r4
    495a:	beq.w	4a8e <__ieee754_sqrt+0x14a>
    495e:	cmp	r3, #0
    4960:	mov	r2, r0
    4962:	ble.n	4a54 <__ieee754_sqrt+0x110>
    4964:	asrs	r7, r3, #20
    4966:	beq.w	4a6e <__ieee754_sqrt+0x12a>
    496a:	subw	r7, r7, #1023	; 0x3ff
    496e:	ubfx	r3, r3, #0, #20
    4972:	lsls	r1, r7, #31
    4974:	orr.w	r3, r3, #1048576	; 0x100000
    4978:	bmi.n	4a4a <__ieee754_sqrt+0x106>
    497a:	add.w	r1, r3, r2, lsr #31
    497e:	movs	r6, #0
    4980:	add	r3, r1
    4982:	asrs	r7, r7, #1
    4984:	lsls	r2, r2, #1
    4986:	mov	lr, r6
    4988:	movs	r0, #22
    498a:	mov.w	r1, #2097152	; 0x200000
    498e:	add.w	r4, lr, r1
    4992:	cmp	r4, r3
    4994:	mov.w	r5, r2, lsr #31
    4998:	mov.w	r2, r2, lsl #1
    499c:	bgt.n	49a6 <__ieee754_sqrt+0x62>
    499e:	subs	r3, r3, r4
    49a0:	add.w	lr, r4, r1
    49a4:	add	r6, r1
    49a6:	subs	r0, #1
    49a8:	add.w	r3, r5, r3, lsl #1
    49ac:	mov.w	r1, r1, lsr #1
    49b0:	bne.n	498e <__ieee754_sqrt+0x4a>
    49b2:	mov	ip, r0
    49b4:	movs	r4, #32
    49b6:	mov.w	r1, #2147483648	; 0x80000000
    49ba:	b.n	49d0 <__ieee754_sqrt+0x8c>
    49bc:	beq.n	4a00 <__ieee754_sqrt+0xbc>
    49be:	add.w	r5, r3, r2, lsr #31
    49c2:	subs	r4, #1
    49c4:	mov.w	r1, r1, lsr #1
    49c8:	add	r3, r5
    49ca:	mov.w	r2, r2, lsl #1
    49ce:	beq.n	4a12 <__ieee754_sqrt+0xce>
    49d0:	cmp	lr, r3
    49d2:	add.w	r5, r1, ip
    49d6:	bge.n	49bc <__ieee754_sqrt+0x78>
    49d8:	cmp	r5, #0
    49da:	add.w	ip, r5, r1
    49de:	blt.n	49f4 <__ieee754_sqrt+0xb0>
    49e0:	mov	r8, lr
    49e2:	cmp	r5, r2
    49e4:	rsb	r3, lr, r3
    49e8:	bls.n	49ec <__ieee754_sqrt+0xa8>
    49ea:	subs	r3, #1
    49ec:	subs	r2, r2, r5
    49ee:	add	r0, r1
    49f0:	mov	lr, r8
    49f2:	b.n	49be <__ieee754_sqrt+0x7a>
    49f4:	cmp.w	ip, #0
    49f8:	blt.n	49e0 <__ieee754_sqrt+0x9c>
    49fa:	add.w	r8, lr, #1
    49fe:	b.n	49e2 <__ieee754_sqrt+0x9e>
    4a00:	cmp	r5, r2
    4a02:	bhi.n	4a3a <__ieee754_sqrt+0xf6>
    4a04:	cmp	r5, #0
    4a06:	add.w	ip, r5, r1
    4a0a:	blt.n	4a9e <__ieee754_sqrt+0x15a>
    4a0c:	mov	r8, r3
    4a0e:	movs	r3, #0
    4a10:	b.n	49ec <__ieee754_sqrt+0xa8>
    4a12:	orrs	r3, r2
    4a14:	bne.n	4a3e <__ieee754_sqrt+0xfa>
    4a16:	lsrs	r0, r0, #1
    4a18:	asrs	r1, r6, #1
    4a1a:	lsls	r3, r6, #31
    4a1c:	add.w	r1, r1, #1069547520	; 0x3fc00000
    4a20:	add.w	r1, r1, #2097152	; 0x200000
    4a24:	it	mi
    4a26:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    4a2a:	add.w	r3, r1, r7, lsl #20
    4a2e:	mov	r2, r0
    4a30:	vmov	d0, r2, r3
    4a34:	add	sp, #8
    4a36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a3a:	mov	r3, lr
    4a3c:	b.n	49be <__ieee754_sqrt+0x7a>
    4a3e:	adds	r2, r0, #1
    4a40:	beq.n	4aa6 <__ieee754_sqrt+0x162>
    4a42:	and.w	r3, r0, #1
    4a46:	add	r0, r3
    4a48:	b.n	4a16 <__ieee754_sqrt+0xd2>
    4a4a:	lsls	r3, r3, #1
    4a4c:	add.w	r3, r3, r2, lsr #31
    4a50:	lsls	r2, r2, #1
    4a52:	b.n	497a <__ieee754_sqrt+0x36>
    4a54:	bic.w	r1, r3, #2147483648	; 0x80000000
    4a58:	orrs	r1, r0
    4a5a:	beq.n	4a98 <__ieee754_sqrt+0x154>
    4a5c:	cbnz	r3, 4ab6 <__ieee754_sqrt+0x172>
    4a5e:	mov	r7, r3
    4a60:	lsrs	r3, r2, #11
    4a62:	subs	r7, #21
    4a64:	lsls	r2, r2, #21
    4a66:	cmp	r3, #0
    4a68:	beq.n	4a60 <__ieee754_sqrt+0x11c>
    4a6a:	lsls	r5, r3, #11
    4a6c:	bmi.n	4aac <__ieee754_sqrt+0x168>
    4a6e:	movs	r1, #0
    4a70:	b.n	4a74 <__ieee754_sqrt+0x130>
    4a72:	mov	r1, r0
    4a74:	lsls	r3, r3, #1
    4a76:	lsls	r4, r3, #11
    4a78:	add.w	r0, r1, #1
    4a7c:	bpl.n	4a72 <__ieee754_sqrt+0x12e>
    4a7e:	rsb	r4, r0, #32
    4a82:	lsr.w	r4, r2, r4
    4a86:	orrs	r3, r4
    4a88:	subs	r7, r7, r1
    4a8a:	lsls	r2, r0
    4a8c:	b.n	496a <__ieee754_sqrt+0x26>
    4a8e:	vfma.f64	d0, d0, d0
    4a92:	add	sp, #8
    4a94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a98:	vldr	d0, [sp]
    4a9c:	b.n	4a34 <__ieee754_sqrt+0xf0>
    4a9e:	cmp.w	ip, #0
    4aa2:	bge.n	49fa <__ieee754_sqrt+0xb6>
    4aa4:	b.n	4a0c <__ieee754_sqrt+0xc8>
    4aa6:	adds	r6, #1
    4aa8:	mov	r0, r4
    4aaa:	b.n	4a18 <__ieee754_sqrt+0xd4>
    4aac:	movs	r4, #32
    4aae:	mov.w	r1, #4294967295
    4ab2:	movs	r0, #0
    4ab4:	b.n	4a82 <__ieee754_sqrt+0x13e>
    4ab6:	vldr	d7, [sp]
    4aba:	vsub.f64	d7, d7, d7
    4abe:	vdiv.f64	d0, d7, d7
    4ac2:	b.n	4a34 <__ieee754_sqrt+0xf0>
    4ac4:	.word	0x7ff00000

00004ac8 <__ieee754_atan2f>:
    4ac8:	push	{r4, lr}
    4aca:	sub	sp, #8
    4acc:	vstr	s1, [sp, #4]
    4ad0:	ldr	r3, [sp, #4]
    4ad2:	bic.w	r2, r3, #2147483648	; 0x80000000
    4ad6:	cmp.w	r2, #2139095040	; 0x7f800000
    4ada:	vmov.f32	s15, s0
    4ade:	bgt.n	4b14 <__ieee754_atan2f+0x4c>
    4ae0:	vmov	r0, s0
    4ae4:	bic.w	r1, r0, #2147483648	; 0x80000000
    4ae8:	cmp.w	r1, #2139095040	; 0x7f800000
    4aec:	bgt.n	4b14 <__ieee754_atan2f+0x4c>
    4aee:	cmp.w	r3, #1065353216	; 0x3f800000
    4af2:	beq.n	4b88 <__ieee754_atan2f+0xc0>
    4af4:	asrs	r4, r3, #30
    4af6:	and.w	r4, r4, #2
    4afa:	orr.w	r4, r4, r0, lsr #31
    4afe:	cbnz	r1, 4b20 <__ieee754_atan2f+0x58>
    4b00:	cmp	r4, #2
    4b02:	beq.n	4b82 <__ieee754_atan2f+0xba>
    4b04:	vldr	s0, [pc, #256]	; 4c08 <__ieee754_atan2f+0x140>
    4b08:	cmp	r4, #3
    4b0a:	it	ne
    4b0c:	vmovne.f32	s0, s15
    4b10:	add	sp, #8
    4b12:	pop	{r4, pc}
    4b14:	vldr	s14, [sp, #4]
    4b18:	vadd.f32	s0, s14, s15
    4b1c:	add	sp, #8
    4b1e:	pop	{r4, pc}
    4b20:	cbz	r2, 4b68 <__ieee754_atan2f+0xa0>
    4b22:	cmp.w	r2, #2139095040	; 0x7f800000
    4b26:	beq.n	4b92 <__ieee754_atan2f+0xca>
    4b28:	cmp.w	r1, #2139095040	; 0x7f800000
    4b2c:	beq.n	4b68 <__ieee754_atan2f+0xa0>
    4b2e:	subs	r2, r1, r2
    4b30:	asrs	r2, r2, #23
    4b32:	cmp	r2, #60	; 0x3c
    4b34:	bgt.n	4b7c <__ieee754_atan2f+0xb4>
    4b36:	cmp	r3, #0
    4b38:	blt.n	4bd2 <__ieee754_atan2f+0x10a>
    4b3a:	vldr	s0, [sp, #4]
    4b3e:	vdiv.f32	s0, s15, s0
    4b42:	bl	5b5c <fabsf>
    4b46:	bl	59a4 <atanf>
    4b4a:	cmp	r4, #1
    4b4c:	beq.n	4bc4 <__ieee754_atan2f+0xfc>
    4b4e:	cmp	r4, #2
    4b50:	beq.n	4bb2 <__ieee754_atan2f+0xea>
    4b52:	cmp	r4, #0
    4b54:	beq.n	4b1c <__ieee754_atan2f+0x54>
    4b56:	vldr	s14, [pc, #180]	; 4c0c <__ieee754_atan2f+0x144>
    4b5a:	vldr	s15, [pc, #180]	; 4c10 <__ieee754_atan2f+0x148>
    4b5e:	vadd.f32	s0, s0, s14
    4b62:	vsub.f32	s0, s0, s15
    4b66:	b.n	4b1c <__ieee754_atan2f+0x54>
    4b68:	vldr	s15, [pc, #168]	; 4c14 <__ieee754_atan2f+0x14c>
    4b6c:	vldr	s0, [pc, #168]	; 4c18 <__ieee754_atan2f+0x150>
    4b70:	cmp	r0, #0
    4b72:	it	ge
    4b74:	vmovge.f32	s0, s15
    4b78:	add	sp, #8
    4b7a:	pop	{r4, pc}
    4b7c:	vldr	s0, [pc, #148]	; 4c14 <__ieee754_atan2f+0x14c>
    4b80:	b.n	4b4a <__ieee754_atan2f+0x82>
    4b82:	vldr	s0, [pc, #140]	; 4c10 <__ieee754_atan2f+0x148>
    4b86:	b.n	4b1c <__ieee754_atan2f+0x54>
    4b88:	add	sp, #8
    4b8a:	ldmia.w	sp!, {r4, lr}
    4b8e:	b.w	59a4 <atanf>
    4b92:	cmp.w	r1, #2139095040	; 0x7f800000
    4b96:	beq.n	4bdc <__ieee754_atan2f+0x114>
    4b98:	cmp	r4, #2
    4b9a:	beq.n	4b82 <__ieee754_atan2f+0xba>
    4b9c:	cmp	r4, #3
    4b9e:	beq.n	4bf6 <__ieee754_atan2f+0x12e>
    4ba0:	vldr	s15, [pc, #120]	; 4c1c <__ieee754_atan2f+0x154>
    4ba4:	vldr	s0, [pc, #120]	; 4c20 <__ieee754_atan2f+0x158>
    4ba8:	cmp	r4, #1
    4baa:	it	eq
    4bac:	vmoveq.f32	s0, s15
    4bb0:	b.n	4b1c <__ieee754_atan2f+0x54>
    4bb2:	vldr	s14, [pc, #88]	; 4c0c <__ieee754_atan2f+0x144>
    4bb6:	vldr	s15, [pc, #88]	; 4c10 <__ieee754_atan2f+0x148>
    4bba:	vadd.f32	s0, s0, s14
    4bbe:	vsub.f32	s0, s15, s0
    4bc2:	b.n	4b1c <__ieee754_atan2f+0x54>
    4bc4:	vmov	r3, s0
    4bc8:	add.w	r3, r3, #2147483648	; 0x80000000
    4bcc:	vmov	s0, r3
    4bd0:	b.n	4b1c <__ieee754_atan2f+0x54>
    4bd2:	adds	r2, #60	; 0x3c
    4bd4:	bge.n	4b3a <__ieee754_atan2f+0x72>
    4bd6:	vldr	s0, [pc, #72]	; 4c20 <__ieee754_atan2f+0x158>
    4bda:	b.n	4b4a <__ieee754_atan2f+0x82>
    4bdc:	cmp	r4, #2
    4bde:	beq.n	4c02 <__ieee754_atan2f+0x13a>
    4be0:	cmp	r4, #3
    4be2:	beq.n	4bfc <__ieee754_atan2f+0x134>
    4be4:	vldr	s15, [pc, #60]	; 4c24 <__ieee754_atan2f+0x15c>
    4be8:	vldr	s0, [pc, #60]	; 4c28 <__ieee754_atan2f+0x160>
    4bec:	cmp	r4, #1
    4bee:	it	eq
    4bf0:	vmoveq.f32	s0, s15
    4bf4:	b.n	4b1c <__ieee754_atan2f+0x54>
    4bf6:	vldr	s0, [pc, #16]	; 4c08 <__ieee754_atan2f+0x140>
    4bfa:	b.n	4b1c <__ieee754_atan2f+0x54>
    4bfc:	vldr	s0, [pc, #44]	; 4c2c <__ieee754_atan2f+0x164>
    4c00:	b.n	4b1c <__ieee754_atan2f+0x54>
    4c02:	vldr	s0, [pc, #44]	; 4c30 <__ieee754_atan2f+0x168>
    4c06:	b.n	4b1c <__ieee754_atan2f+0x54>
    4c08:	.word	0xc0490fdb
    4c0c:	.word	0x33bbbd2e
    4c10:	.word	0x40490fdb
    4c14:	.word	0x3fc90fdb
    4c18:	.word	0xbfc90fdb
    4c1c:	.word	0x80000000
    4c20:	.word	0x00000000
    4c24:	.word	0xbf490fdb
    4c28:	.word	0x3f490fdb
    4c2c:	.word	0xc016cbe4
    4c30:	.word	0x4016cbe4

00004c34 <__ieee754_rem_pio2f>:
    4c34:	push	{r4, r5, r6, lr}
    4c36:	vmov	r3, s0
    4c3a:	ldr	r2, [pc, #600]	; (4e94 <__ieee754_rem_pio2f+0x260>)
    4c3c:	bic.w	r4, r3, #2147483648	; 0x80000000
    4c40:	cmp	r4, r2
    4c42:	sub	sp, #24
    4c44:	ble.n	4d06 <__ieee754_rem_pio2f+0xd2>
    4c46:	ldr	r2, [pc, #592]	; (4e98 <__ieee754_rem_pio2f+0x264>)
    4c48:	cmp	r4, r2
    4c4a:	vmov	r6, s0
    4c4e:	bgt.n	4c88 <__ieee754_rem_pio2f+0x54>
    4c50:	cmp	r3, #0
    4c52:	vldr	s15, [pc, #584]	; 4e9c <__ieee754_rem_pio2f+0x268>
    4c56:	ldr	r2, [pc, #584]	; (4ea0 <__ieee754_rem_pio2f+0x26c>)
    4c58:	bic.w	r4, r4, #15
    4c5c:	ble.w	4e0a <__ieee754_rem_pio2f+0x1d6>
    4c60:	cmp	r4, r2
    4c62:	vsub.f32	s15, s0, s15
    4c66:	beq.n	4d26 <__ieee754_rem_pio2f+0xf2>
    4c68:	vldr	s14, [pc, #568]	; 4ea4 <__ieee754_rem_pio2f+0x270>
    4c6c:	vsub.f32	s13, s15, s14
    4c70:	movs	r3, #1
    4c72:	vsub.f32	s15, s15, s13
    4c76:	vstr	s13, [r0]
    4c7a:	vsub.f32	s15, s15, s14
    4c7e:	vstr	s15, [r0, #4]
    4c82:	mov	r0, r3
    4c84:	add	sp, #24
    4c86:	pop	{r4, r5, r6, pc}
    4c88:	ldr	r2, [pc, #540]	; (4ea8 <__ieee754_rem_pio2f+0x274>)
    4c8a:	cmp	r4, r2
    4c8c:	mov	r5, r0
    4c8e:	ble.n	4d4a <__ieee754_rem_pio2f+0x116>
    4c90:	cmp.w	r4, #2139095040	; 0x7f800000
    4c94:	bge.n	4d16 <__ieee754_rem_pio2f+0xe2>
    4c96:	asrs	r2, r4, #23
    4c98:	subs	r2, #134	; 0x86
    4c9a:	sub.w	r3, r4, r2, lsl #23
    4c9e:	vmov	s14, r3
    4ca2:	vcvt.s32.f32	s13, s14
    4ca6:	vldr	s15, [pc, #516]	; 4eac <__ieee754_rem_pio2f+0x278>
    4caa:	vcvt.f32.s32	s13, s13
    4cae:	vsub.f32	s14, s14, s13
    4cb2:	vstr	s13, [sp, #12]
    4cb6:	vmul.f32	s14, s14, s15
    4cba:	vcvt.s32.f32	s13, s14
    4cbe:	vcvt.f32.s32	s13, s13
    4cc2:	vsub.f32	s14, s14, s13
    4cc6:	vstr	s13, [sp, #16]
    4cca:	vmul.f32	s15, s14, s15
    4cce:	vcmp.f32	s15, #0.0
    4cd2:	vmrs	APSR_nzcv, fpscr
    4cd6:	vstr	s15, [sp, #20]
    4cda:	bne.w	4e4c <__ieee754_rem_pio2f+0x218>
    4cde:	vcmp.f32	s13, #0.0
    4ce2:	vmrs	APSR_nzcv, fpscr
    4ce6:	ite	eq
    4ce8:	moveq	r3, #1
    4cea:	movne	r3, #2
    4cec:	ldr	r1, [pc, #448]	; (4eb0 <__ieee754_rem_pio2f+0x27c>)
    4cee:	str	r1, [sp, #4]
    4cf0:	movs	r1, #2
    4cf2:	str	r1, [sp, #0]
    4cf4:	add	r0, sp, #12
    4cf6:	mov	r1, r5
    4cf8:	bl	5074 <__kernel_rem_pio2f>
    4cfc:	cmp	r6, #0
    4cfe:	blt.w	4e30 <__ieee754_rem_pio2f+0x1fc>
    4d02:	mov	r3, r0
    4d04:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4d06:	movs	r2, #0
    4d08:	vstr	s0, [r0]
    4d0c:	str	r2, [r0, #4]
    4d0e:	movs	r3, #0
    4d10:	mov	r0, r3
    4d12:	add	sp, #24
    4d14:	pop	{r4, r5, r6, pc}
    4d16:	vsub.f32	s15, s0, s0
    4d1a:	movs	r3, #0
    4d1c:	vstr	s15, [r0, #4]
    4d20:	vstr	s15, [r0]
    4d24:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4d26:	vldr	s13, [pc, #396]	; 4eb4 <__ieee754_rem_pio2f+0x280>
    4d2a:	vldr	s14, [pc, #396]	; 4eb8 <__ieee754_rem_pio2f+0x284>
    4d2e:	vsub.f32	s15, s15, s13
    4d32:	movs	r3, #1
    4d34:	vsub.f32	s13, s15, s14
    4d38:	vsub.f32	s15, s15, s13
    4d3c:	vstr	s13, [r0]
    4d40:	vsub.f32	s15, s15, s14
    4d44:	vstr	s15, [r0, #4]
    4d48:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4d4a:	bl	5b5c <fabsf>
    4d4e:	vldr	s13, [pc, #364]	; 4ebc <__ieee754_rem_pio2f+0x288>
    4d52:	vldr	s11, [pc, #328]	; 4e9c <__ieee754_rem_pio2f+0x268>
    4d56:	vldr	s14, [pc, #332]	; 4ea4 <__ieee754_rem_pio2f+0x270>
    4d5a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    4d5e:	vfma.f32	s15, s0, s13
    4d62:	vcvt.s32.f32	s15, s15
    4d66:	vmov	r3, s15
    4d6a:	vcvt.f32.s32	s13, s15
    4d6e:	cmp	r3, #31
    4d70:	vneg.f32	s12, s13
    4d74:	vfma.f32	s0, s12, s11
    4d78:	vmul.f32	s15, s13, s14
    4d7c:	bgt.n	4dba <__ieee754_rem_pio2f+0x186>
    4d7e:	ldr	r1, [pc, #320]	; (4ec0 <__ieee754_rem_pio2f+0x28c>)
    4d80:	subs	r0, r3, #1
    4d82:	bic.w	r2, r4, #255	; 0xff
    4d86:	ldr.w	r1, [r1, r0, lsl #2]
    4d8a:	cmp	r2, r1
    4d8c:	beq.n	4dba <__ieee754_rem_pio2f+0x186>
    4d8e:	vsub.f32	s14, s0, s15
    4d92:	vstr	s14, [r5]
    4d96:	vsub.f32	s0, s0, s14
    4d9a:	cmp	r6, #0
    4d9c:	vsub.f32	s0, s0, s15
    4da0:	vstr	s0, [r5, #4]
    4da4:	bge.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4da6:	vneg.f32	s14, s14
    4daa:	vneg.f32	s0, s0
    4dae:	vstr	s14, [r5]
    4db2:	vstr	s0, [r5, #4]
    4db6:	negs	r3, r3
    4db8:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4dba:	vsub.f32	s14, s0, s15
    4dbe:	asrs	r4, r4, #23
    4dc0:	vmov	r2, s14
    4dc4:	ubfx	r2, r2, #23, #8
    4dc8:	subs	r2, r4, r2
    4dca:	cmp	r2, #8
    4dcc:	ble.n	4d92 <__ieee754_rem_pio2f+0x15e>
    4dce:	vldr	s15, [pc, #228]	; 4eb4 <__ieee754_rem_pio2f+0x280>
    4dd2:	vldr	s14, [pc, #228]	; 4eb8 <__ieee754_rem_pio2f+0x284>
    4dd6:	vmov.f32	s11, s0
    4dda:	vfma.f32	s11, s12, s15
    4dde:	vsub.f32	s0, s0, s11
    4de2:	vfma.f32	s0, s12, s15
    4de6:	vmov.f32	s15, s0
    4dea:	vfnms.f32	s15, s13, s14
    4dee:	vsub.f32	s14, s11, s15
    4df2:	vmov	r2, s14
    4df6:	ubfx	r2, r2, #23, #8
    4dfa:	subs	r4, r4, r2
    4dfc:	cmp	r4, #25
    4dfe:	bgt.n	4e76 <__ieee754_rem_pio2f+0x242>
    4e00:	vstr	s14, [r5]
    4e04:	vmov.f32	s0, s11
    4e08:	b.n	4d96 <__ieee754_rem_pio2f+0x162>
    4e0a:	cmp	r4, r2
    4e0c:	vadd.f32	s15, s0, s15
    4e10:	beq.n	4e50 <__ieee754_rem_pio2f+0x21c>
    4e12:	vldr	s14, [pc, #144]	; 4ea4 <__ieee754_rem_pio2f+0x270>
    4e16:	vadd.f32	s13, s15, s14
    4e1a:	mov.w	r3, #4294967295
    4e1e:	vsub.f32	s15, s15, s13
    4e22:	vstr	s13, [r0]
    4e26:	vadd.f32	s15, s15, s14
    4e2a:	vstr	s15, [r0, #4]
    4e2e:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4e30:	vldr	s14, [r5]
    4e34:	vldr	s15, [r5, #4]
    4e38:	vneg.f32	s14, s14
    4e3c:	vneg.f32	s15, s15
    4e40:	negs	r3, r0
    4e42:	vstr	s14, [r5]
    4e46:	vstr	s15, [r5, #4]
    4e4a:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4e4c:	movs	r3, #3
    4e4e:	b.n	4cec <__ieee754_rem_pio2f+0xb8>
    4e50:	vldr	s13, [pc, #96]	; 4eb4 <__ieee754_rem_pio2f+0x280>
    4e54:	vldr	s14, [pc, #96]	; 4eb8 <__ieee754_rem_pio2f+0x284>
    4e58:	vadd.f32	s15, s15, s13
    4e5c:	mov.w	r3, #4294967295
    4e60:	vadd.f32	s13, s15, s14
    4e64:	vsub.f32	s15, s15, s13
    4e68:	vstr	s13, [r0]
    4e6c:	vadd.f32	s15, s15, s14
    4e70:	vstr	s15, [r0, #4]
    4e74:	b.n	4d10 <__ieee754_rem_pio2f+0xdc>
    4e76:	vldr	s14, [pc, #76]	; 4ec4 <__ieee754_rem_pio2f+0x290>
    4e7a:	vldr	s10, [pc, #76]	; 4ec8 <__ieee754_rem_pio2f+0x294>
    4e7e:	vmov.f32	s0, s11
    4e82:	vfma.f32	s0, s12, s14
    4e86:	vsub.f32	s15, s11, s0
    4e8a:	vfma.f32	s15, s12, s14
    4e8e:	vfnms.f32	s15, s13, s10
    4e92:	b.n	4d8e <__ieee754_rem_pio2f+0x15a>
    4e94:	.word	0x3f490fd8
    4e98:	.word	0x4016cbe3
    4e9c:	.word	0x3fc90f80
    4ea0:	.word	0x3fc90fd0
    4ea4:	.word	0x37354443
    4ea8:	.word	0x43490f80
    4eac:	.word	0x43800000
    4eb0:	.word	0x200005d0
    4eb4:	.word	0x37354400
    4eb8:	.word	0x2e85a308
    4ebc:	.word	0x3f22f984
    4ec0:	.word	0x20000550
    4ec4:	.word	0x2e85a300
    4ec8:	.word	0x248d3132

00004ecc <__ieee754_sqrtf>:
    4ecc:	vmov	r3, s0
    4ed0:	bic.w	r2, r3, #2147483648	; 0x80000000
    4ed4:	cmp.w	r2, #2139095040	; 0x7f800000
    4ed8:	push	{r4, r5, r6}
    4eda:	bcs.n	4f3e <__ieee754_sqrtf+0x72>
    4edc:	cbz	r2, 4f3a <__ieee754_sqrtf+0x6e>
    4ede:	cmp	r3, #0
    4ee0:	blt.n	4f5e <__ieee754_sqrtf+0x92>
    4ee2:	cmp.w	r2, #8388608	; 0x800000
    4ee6:	mov.w	r0, r3, asr #23
    4eea:	bcc.n	4f46 <__ieee754_sqrtf+0x7a>
    4eec:	sub.w	r2, r0, #127	; 0x7f
    4ef0:	ubfx	r3, r3, #0, #23
    4ef4:	lsls	r1, r2, #31
    4ef6:	orr.w	r3, r3, #8388608	; 0x800000
    4efa:	it	mi
    4efc:	lslmi	r3, r3, #1
    4efe:	movs	r4, #0
    4f00:	asrs	r6, r2, #1
    4f02:	lsls	r3, r3, #1
    4f04:	mov	r5, r4
    4f06:	movs	r1, #25
    4f08:	mov.w	r2, #16777216	; 0x1000000
    4f0c:	adds	r0, r5, r2
    4f0e:	cmp	r0, r3
    4f10:	bgt.n	4f18 <__ieee754_sqrtf+0x4c>
    4f12:	subs	r3, r3, r0
    4f14:	adds	r5, r0, r2
    4f16:	add	r4, r2
    4f18:	subs	r1, #1
    4f1a:	mov.w	r3, r3, lsl #1
    4f1e:	mov.w	r2, r2, lsr #1
    4f22:	bne.n	4f0c <__ieee754_sqrtf+0x40>
    4f24:	cbz	r3, 4f2c <__ieee754_sqrtf+0x60>
    4f26:	and.w	r3, r4, #1
    4f2a:	add	r4, r3
    4f2c:	asrs	r4, r4, #1
    4f2e:	add.w	r4, r4, #1056964608	; 0x3f000000
    4f32:	add.w	r3, r4, r6, lsl #23
    4f36:	vmov	s0, r3
    4f3a:	pop	{r4, r5, r6}
    4f3c:	bx	lr
    4f3e:	vfma.f32	s0, s0, s0
    4f42:	pop	{r4, r5, r6}
    4f44:	bx	lr
    4f46:	ands.w	r2, r3, #8388608	; 0x800000
    4f4a:	beq.n	4f50 <__ieee754_sqrtf+0x84>
    4f4c:	b.n	4f68 <__ieee754_sqrtf+0x9c>
    4f4e:	mov	r2, r1
    4f50:	lsls	r3, r3, #1
    4f52:	lsls	r4, r3, #8
    4f54:	add.w	r1, r2, #1
    4f58:	bpl.n	4f4e <__ieee754_sqrtf+0x82>
    4f5a:	subs	r0, r0, r2
    4f5c:	b.n	4eec <__ieee754_sqrtf+0x20>
    4f5e:	vsub.f32	s15, s0, s0
    4f62:	vdiv.f32	s0, s15, s15
    4f66:	b.n	4f3a <__ieee754_sqrtf+0x6e>
    4f68:	mov.w	r2, #4294967295
    4f6c:	b.n	4f5a <__ieee754_sqrtf+0x8e>
    4f6e:	nop

00004f70 <__kernel_cosf>:
    4f70:	vmov	r3, s0
    4f74:	bic.w	r3, r3, #2147483648	; 0x80000000
    4f78:	cmp.w	r3, #838860800	; 0x32000000
    4f7c:	bge.n	4fd8 <__kernel_cosf+0x68>
    4f7e:	vcvt.s32.f32	s15, s0
    4f82:	vmov	r3, s15
    4f86:	cmp	r3, #0
    4f88:	beq.n	504c <__kernel_cosf+0xdc>
    4f8a:	vmul.f32	s14, s0, s0
    4f8e:	vldr	s9, [pc, #196]	; 5054 <__kernel_cosf+0xe4>
    4f92:	vldr	s10, [pc, #196]	; 5058 <__kernel_cosf+0xe8>
    4f96:	vldr	s11, [pc, #196]	; 505c <__kernel_cosf+0xec>
    4f9a:	vldr	s12, [pc, #196]	; 5060 <__kernel_cosf+0xf0>
    4f9e:	vldr	s15, [pc, #196]	; 5064 <__kernel_cosf+0xf4>
    4fa2:	vldr	s13, [pc, #196]	; 5068 <__kernel_cosf+0xf8>
    4fa6:	vfma.f32	s10, s14, s9
    4faa:	vfma.f32	s11, s14, s10
    4fae:	vfma.f32	s12, s14, s11
    4fb2:	vfma.f32	s15, s14, s12
    4fb6:	vfma.f32	s13, s14, s15
    4fba:	vmul.f32	s13, s13, s14
    4fbe:	vnmul.f32	s1, s1, s0
    4fc2:	vmov.f32	s12, #96	; 0x3f000000  0.5
    4fc6:	vfma.f32	s1, s14, s13
    4fca:	vmov.f32	s15, #112	; 0x3f800000  1.0
    4fce:	vfnms.f32	s1, s14, s12
    4fd2:	vsub.f32	s0, s15, s1
    4fd6:	bx	lr
    4fd8:	vmul.f32	s14, s0, s0
    4fdc:	vldr	s9, [pc, #116]	; 5054 <__kernel_cosf+0xe4>
    4fe0:	vldr	s10, [pc, #116]	; 5058 <__kernel_cosf+0xe8>
    4fe4:	vldr	s11, [pc, #116]	; 505c <__kernel_cosf+0xec>
    4fe8:	vldr	s12, [pc, #116]	; 5060 <__kernel_cosf+0xf0>
    4fec:	vldr	s15, [pc, #116]	; 5064 <__kernel_cosf+0xf4>
    4ff0:	vldr	s13, [pc, #116]	; 5068 <__kernel_cosf+0xf8>
    4ff4:	ldr	r2, [pc, #116]	; (506c <__kernel_cosf+0xfc>)
    4ff6:	vfma.f32	s10, s14, s9
    4ffa:	cmp	r3, r2
    4ffc:	vfma.f32	s11, s14, s10
    5000:	vfma.f32	s12, s14, s11
    5004:	vfma.f32	s15, s14, s12
    5008:	vfma.f32	s13, s14, s15
    500c:	vmul.f32	s13, s13, s14
    5010:	ble.n	4fbe <__kernel_cosf+0x4e>
    5012:	ldr	r2, [pc, #92]	; (5070 <__kernel_cosf+0x100>)
    5014:	cmp	r3, r2
    5016:	bgt.n	5042 <__kernel_cosf+0xd2>
    5018:	add.w	r3, r3, #4278190080	; 0xff000000
    501c:	vmov	s15, r3
    5020:	vmov.f32	s12, #112	; 0x3f800000  1.0
    5024:	vsub.f32	s12, s12, s15
    5028:	vnmul.f32	s1, s1, s0
    502c:	vmov.f32	s11, #96	; 0x3f000000  0.5
    5030:	vfma.f32	s1, s14, s13
    5034:	vfnms.f32	s15, s14, s11
    5038:	vsub.f32	s15, s15, s1
    503c:	vsub.f32	s0, s12, s15
    5040:	bx	lr
    5042:	vmov.f32	s12, #103	; 0x3f380000  0.7187500
    5046:	vmov.f32	s15, #82	; 0x3e900000  0.2812500
    504a:	b.n	5028 <__kernel_cosf+0xb8>
    504c:	vmov.f32	s0, #112	; 0x3f800000  1.0
    5050:	bx	lr
    5052:	nop
    5054:	.word	0xad47d74e
    5058:	.word	0x310f74f6
    505c:	.word	0xb493f27c
    5060:	.word	0x37d00d01
    5064:	.word	0xbab60b61
    5068:	.word	0x3d2aaaab
    506c:	.word	0x3e999999
    5070:	.word	0x3f480000

00005074 <__kernel_rem_pio2f>:
    5074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5078:	vpush	{d8-d9}
    507c:	sub	sp, #348	; 0x15c
    507e:	subs	r7, r3, #1
    5080:	ldr	r4, [pc, #656]	; (5314 <__kernel_rem_pio2f+0x2a0>)
    5082:	ldr	r5, [sp, #400]	; 0x190
    5084:	str	r3, [sp, #4]
    5086:	subs	r3, r2, #3
    5088:	it	mi
    508a:	addmi	r3, r2, #4
    508c:	ldr.w	r6, [r4, r5, lsl #2]
    5090:	asrs	r3, r3, #3
    5092:	bic.w	r3, r3, r3, asr #31
    5096:	add.w	sl, r3, #1
    509a:	mov	fp, r1
    509c:	adds	r1, r6, r7
    509e:	str	r3, [sp, #8]
    50a0:	mov	r9, r0
    50a2:	sub.w	sl, r2, sl, lsl #3
    50a6:	sub.w	r3, r3, r7
    50aa:	bmi.n	50d6 <__kernel_rem_pio2f+0x62>
    50ac:	add	r1, r3
    50ae:	ldr	r0, [sp, #404]	; 0x194
    50b0:	adds	r1, #1
    50b2:	add	r2, sp, #104	; 0x68
    50b4:	cmp	r3, #0
    50b6:	itet	ge
    50b8:	ldrge.w	r4, [r0, r3, lsl #2]
    50bc:	vldrlt	s15, [pc, #600]	; 5318 <__kernel_rem_pio2f+0x2a4>
    50c0:	vmovge	s15, r4
    50c4:	add.w	r3, r3, #1
    50c8:	it	ge
    50ca:	vcvtge.f32.s32	s15, s15
    50ce:	cmp	r3, r1
    50d0:	vstmia	r2!, {s15}
    50d4:	bne.n	50b4 <__kernel_rem_pio2f+0x40>
    50d6:	cmp	r6, #0
    50d8:	blt.w	5684 <__kernel_rem_pio2f+0x610>
    50dc:	ldr	r3, [sp, #4]
    50de:	add	r0, sp, #264	; 0x108
    50e0:	add.w	lr, r6, #1
    50e4:	lsls	r4, r3, #2
    50e6:	add.w	lr, r0, lr, lsl #2
    50ea:	add.w	r1, r9, r4
    50ee:	mov	r5, r7
    50f0:	cmp	r7, #0
    50f2:	blt.w	5474 <__kernel_rem_pio2f+0x400>
    50f6:	add	r3, sp, #104	; 0x68
    50f8:	add.w	r2, r3, r5, lsl #2
    50fc:	vldr	s15, [pc, #536]	; 5318 <__kernel_rem_pio2f+0x2a4>
    5100:	adds	r2, #4
    5102:	mov	r3, r9
    5104:	vldmia	r3!, {s13}
    5108:	vldmdb	r2!, {s14}
    510c:	cmp	r3, r1
    510e:	vfma.f32	s15, s13, s14
    5112:	bne.n	5104 <__kernel_rem_pio2f+0x90>
    5114:	vstmia	r0!, {s15}
    5118:	cmp	r0, lr
    511a:	add.w	r5, r5, #1
    511e:	bne.n	50f0 <__kernel_rem_pio2f+0x7c>
    5120:	add.w	r3, r6, #1073741824	; 0x40000000
    5124:	subs	r3, #2
    5126:	lsls	r3, r3, #2
    5128:	add	r2, sp, #24
    512a:	add.w	r8, r3, #4
    512e:	vldr	s17, [pc, #496]	; 5320 <__kernel_rem_pio2f+0x2ac>
    5132:	vldr	s16, [pc, #488]	; 531c <__kernel_rem_pio2f+0x2a8>
    5136:	str.w	fp, [sp, #16]
    513a:	add	r3, r2
    513c:	add	r4, r9
    513e:	add	r8, r2
    5140:	str	r3, [sp, #12]
    5142:	mov	r5, r6
    5144:	add	r3, sp, #344	; 0x158
    5146:	add.w	r3, r3, r5, lsl #2
    514a:	cmp	r5, #0
    514c:	vldr	s0, [r3, #-80]	; 0xffffffb0
    5150:	ble.n	5186 <__kernel_rem_pio2f+0x112>
    5152:	add	r1, sp, #264	; 0x108
    5154:	add.w	r3, r1, r5, lsl #2
    5158:	add	r2, sp, #20
    515a:	vmul.f32	s15, s0, s17
    515e:	vmov.f32	s14, s0
    5162:	vcvt.s32.f32	s15, s15
    5166:	vldmdb	r3!, {s13}
    516a:	vcvt.f32.s32	s15, s15
    516e:	cmp	r3, r1
    5170:	vfms.f32	s14, s15, s16
    5174:	vadd.f32	s0, s15, s13
    5178:	vcvt.s32.f32	s14, s14
    517c:	vmov	r0, s14
    5180:	str.w	r0, [r2, #4]!
    5184:	bne.n	515a <__kernel_rem_pio2f+0xe6>
    5186:	mov	r0, sl
    5188:	bl	5bfc <scalbnf>
    518c:	vmov.f32	s18, s0
    5190:	vmov.f32	s0, #64	; 0x3e000000  0.125
    5194:	vmul.f32	s0, s18, s0
    5198:	bl	5b6c <floorf>
    519c:	vmov.f32	s15, #32	; 0x41000000  8.0
    51a0:	vfms.f32	s18, s0, s15
    51a4:	cmp.w	sl, #0
    51a8:	vcvt.s32.f32	s15, s18
    51ac:	vmov	fp, s15
    51b0:	vcvt.f32.s32	s15, s15
    51b4:	vsub.f32	s18, s18, s15
    51b8:	ble.w	543e <__kernel_rem_pio2f+0x3ca>
    51bc:	add.w	lr, r5, #4294967295
    51c0:	add	r3, sp, #24
    51c2:	rsb	r2, sl, #8
    51c6:	ldr.w	r3, [r3, lr, lsl #2]
    51ca:	asr.w	r0, r3, r2
    51ce:	lsl.w	r2, r0, r2
    51d2:	add	r1, sp, #24
    51d4:	subs	r3, r3, r2
    51d6:	rsb	r2, sl, #7
    51da:	str.w	r3, [r1, lr, lsl #2]
    51de:	add	fp, r0
    51e0:	asr.w	r1, r3, r2
    51e4:	cmp	r1, #0
    51e6:	ble.n	5258 <__kernel_rem_pio2f+0x1e4>
    51e8:	cmp	r5, #0
    51ea:	add.w	fp, fp, #1
    51ee:	ble.w	563a <__kernel_rem_pio2f+0x5c6>
    51f2:	movs	r2, #0
    51f4:	mov	r0, r2
    51f6:	add.w	lr, sp, #20
    51fa:	mov	ip, r1
    51fc:	b.n	5210 <__kernel_rem_pio2f+0x19c>
    51fe:	rsb	r1, r3, #256	; 0x100
    5202:	cbz	r3, 520a <__kernel_rem_pio2f+0x196>
    5204:	str.w	r1, [lr]
    5208:	movs	r0, #1
    520a:	adds	r2, #1
    520c:	cmp	r5, r2
    520e:	ble.n	522a <__kernel_rem_pio2f+0x1b6>
    5210:	ldr.w	r3, [lr, #4]!
    5214:	cmp	r0, #0
    5216:	beq.n	51fe <__kernel_rem_pio2f+0x18a>
    5218:	adds	r2, #1
    521a:	rsb	r3, r3, #255	; 0xff
    521e:	cmp	r5, r2
    5220:	str.w	r3, [lr]
    5224:	mov.w	r0, #1
    5228:	bgt.n	5210 <__kernel_rem_pio2f+0x19c>
    522a:	mov	r1, ip
    522c:	cmp.w	sl, #0
    5230:	ble.n	5254 <__kernel_rem_pio2f+0x1e0>
    5232:	cmp.w	sl, #1
    5236:	beq.w	544c <__kernel_rem_pio2f+0x3d8>
    523a:	cmp.w	sl, #2
    523e:	bne.n	5254 <__kernel_rem_pio2f+0x1e0>
    5240:	subs	r2, r5, #1
    5242:	add	r3, sp, #24
    5244:	add.w	lr, sp, #24
    5248:	ldr.w	r3, [r3, r2, lsl #2]
    524c:	and.w	r3, r3, #63	; 0x3f
    5250:	str.w	r3, [lr, r2, lsl #2]
    5254:	cmp	r1, #2
    5256:	beq.n	5324 <__kernel_rem_pio2f+0x2b0>
    5258:	vcmp.f32	s18, #0.0
    525c:	vmrs	APSR_nzcv, fpscr
    5260:	bne.n	5348 <__kernel_rem_pio2f+0x2d4>
    5262:	add.w	lr, r5, #4294967295
    5266:	cmp	r6, lr
    5268:	bgt.n	528a <__kernel_rem_pio2f+0x216>
    526a:	add.w	r2, r5, #1073741824	; 0x40000000
    526e:	subs	r2, #1
    5270:	add	r3, sp, #24
    5272:	add.w	r2, r3, r2, lsl #2
    5276:	movs	r0, #0
    5278:	ldr.w	r3, [r2], #-4
    527c:	cmp	r2, r8
    527e:	orr.w	r0, r0, r3
    5282:	bne.n	5278 <__kernel_rem_pio2f+0x204>
    5284:	cmp	r0, #0
    5286:	bne.w	54a2 <__kernel_rem_pio2f+0x42e>
    528a:	subs	r3, r6, #1
    528c:	add	r2, sp, #24
    528e:	ldr.w	r3, [r2, r3, lsl #2]
    5292:	cmp	r3, #0
    5294:	bne.w	5634 <__kernel_rem_pio2f+0x5c0>
    5298:	ldr	r3, [sp, #12]
    529a:	mov.w	lr, #1
    529e:	ldr.w	r2, [r3], #-4
    52a2:	add.w	lr, lr, #1
    52a6:	cmp	r2, #0
    52a8:	beq.n	529e <__kernel_rem_pio2f+0x22a>
    52aa:	add	lr, r5
    52ac:	adds	r3, r5, #1
    52ae:	cmp	r3, lr
    52b0:	bgt.n	530e <__kernel_rem_pio2f+0x29a>
    52b2:	ldr	r2, [sp, #8]
    52b4:	adds	r0, r3, r2
    52b6:	ldr	r2, [sp, #4]
    52b8:	add.w	r0, r0, #1073741824	; 0x40000000
    52bc:	adds	r1, r2, r5
    52be:	add.w	ip, lr, r2
    52c2:	ldr	r2, [sp, #404]	; 0x194
    52c4:	subs	r0, #1
    52c6:	add.w	r0, r2, r0, lsl #2
    52ca:	add	r2, sp, #104	; 0x68
    52cc:	add.w	r1, r2, r1, lsl #2
    52d0:	add.w	ip, r2, ip, lsl #2
    52d4:	add	r2, sp, #264	; 0x108
    52d6:	add.w	r5, r2, r3, lsl #2
    52da:	ldr.w	r3, [r0, #4]!
    52de:	vmov	s15, r3
    52e2:	vcvt.f32.s32	s15, s15
    52e6:	cmp	r7, #0
    52e8:	vstmia	r1!, {s15}
    52ec:	vldr	s15, [pc, #40]	; 5318 <__kernel_rem_pio2f+0x2a4>
    52f0:	blt.n	5306 <__kernel_rem_pio2f+0x292>
    52f2:	mov	r3, r9
    52f4:	mov	r2, r1
    52f6:	vldmia	r3!, {s13}
    52fa:	vldmdb	r2!, {s14}
    52fe:	cmp	r3, r4
    5300:	vfma.f32	s15, s13, s14
    5304:	bne.n	52f6 <__kernel_rem_pio2f+0x282>
    5306:	cmp	r1, ip
    5308:	vstmia	r5!, {s15}
    530c:	bne.n	52da <__kernel_rem_pio2f+0x266>
    530e:	mov	r5, lr
    5310:	b.n	5144 <__kernel_rem_pio2f+0xd0>
    5312:	nop
    5314:	.word	0x200008e8
    5318:	.word	0x00000000
    531c:	.word	0x43800000
    5320:	.word	0x3b800000
    5324:	vmov.f32	s0, #112	; 0x3f800000  1.0
    5328:	vsub.f32	s18, s0, s18
    532c:	cmp	r0, #0
    532e:	beq.n	5258 <__kernel_rem_pio2f+0x1e4>
    5330:	mov	r0, sl
    5332:	str	r1, [sp, #20]
    5334:	bl	5bfc <scalbnf>
    5338:	vsub.f32	s18, s18, s0
    533c:	ldr	r1, [sp, #20]
    533e:	vcmp.f32	s18, #0.0
    5342:	vmrs	APSR_nzcv, fpscr
    5346:	beq.n	5262 <__kernel_rem_pio2f+0x1ee>
    5348:	vmov.f32	s0, s18
    534c:	rsb	r0, sl, #0
    5350:	vmov	s19, fp
    5354:	mov	r8, r1
    5356:	ldr.w	fp, [sp, #16]
    535a:	bl	5bfc <scalbnf>
    535e:	vldr	s14, [pc, #-68]	; 531c <__kernel_rem_pio2f+0x2a8>
    5362:	vcmpe.f32	s0, s14
    5366:	vmrs	APSR_nzcv, fpscr
    536a:	blt.w	5650 <__kernel_rem_pio2f+0x5dc>
    536e:	vldr	s15, [pc, #-80]	; 5320 <__kernel_rem_pio2f+0x2ac>
    5372:	vmul.f32	s15, s0, s15
    5376:	add	r1, sp, #24
    5378:	vcvt.s32.f32	s15, s15
    537c:	adds	r3, r5, #1
    537e:	vcvt.f32.s32	s15, s15
    5382:	add.w	sl, sl, #8
    5386:	vfms.f32	s0, s15, s14
    538a:	vcvt.s32.f32	s15, s15
    538e:	vcvt.s32.f32	s0, s0
    5392:	vmov	r2, s0
    5396:	str.w	r2, [r1, r5, lsl #2]
    539a:	vmov	r2, s15
    539e:	str.w	r2, [r1, r3, lsl #2]
    53a2:	mov	r0, sl
    53a4:	vmov.f32	s0, #112	; 0x3f800000  1.0
    53a8:	str	r3, [sp, #4]
    53aa:	bl	5bfc <scalbnf>
    53ae:	ldr	r3, [sp, #4]
    53b0:	cmp	r3, #0
    53b2:	blt.w	5668 <__kernel_rem_pio2f+0x5f4>
    53b6:	lsls	r7, r3, #2
    53b8:	add	r4, sp, #264	; 0x108
    53ba:	add	r2, sp, #24
    53bc:	adds	r0, r7, #4
    53be:	add.w	lr, r4, r7
    53c2:	vldr	s14, [pc, #-164]	; 5320 <__kernel_rem_pio2f+0x2ac>
    53c6:	add	r0, r2
    53c8:	add.w	r2, lr, #4
    53cc:	vldmdb	r0!, {s15}
    53d0:	vcvt.f32.s32	s15, s15
    53d4:	vmul.f32	s15, s15, s0
    53d8:	vmul.f32	s0, s0, s14
    53dc:	vstmdb	r2!, {s15}
    53e0:	cmp	r2, r4
    53e2:	bne.n	53cc <__kernel_rem_pio2f+0x358>
    53e4:	add.w	ip, sp, #260	; 0x104
    53e8:	movs	r5, #0
    53ea:	cmp	r6, #0
    53ec:	blt.w	5618 <__kernel_rem_pio2f+0x5a4>
    53f0:	ldr	r0, [pc, #676]	; (5698 <__kernel_rem_pio2f+0x624>)
    53f2:	vldr	s14, [pc, #680]	; 569c <__kernel_rem_pio2f+0x628>
    53f6:	vldr	s15, [pc, #680]	; 56a0 <__kernel_rem_pio2f+0x62c>
    53fa:	mov	r1, lr
    53fc:	movs	r2, #0
    53fe:	b.n	540a <__kernel_rem_pio2f+0x396>
    5400:	cmp	r5, r2
    5402:	blt.n	5418 <__kernel_rem_pio2f+0x3a4>
    5404:	adds	r0, #4
    5406:	vldr	s14, [r0]
    540a:	vldmia	r1!, {s13}
    540e:	adds	r2, #1
    5410:	cmp	r6, r2
    5412:	vfma.f32	s15, s13, s14
    5416:	bge.n	5400 <__kernel_rem_pio2f+0x38c>
    5418:	sub.w	lr, lr, #4
    541c:	add	r2, sp, #344	; 0x158
    541e:	add.w	r2, r2, r5, lsl #2
    5422:	cmp	ip, lr
    5424:	vstr	s15, [r2, #-160]	; 0xffffff60
    5428:	add.w	r5, r5, #1
    542c:	bne.n	53ea <__kernel_rem_pio2f+0x376>
    542e:	ldr	r2, [sp, #400]	; 0x190
    5430:	cmp	r2, #3
    5432:	bhi.w	5592 <__kernel_rem_pio2f+0x51e>
    5436:	tbb	[pc, r2]
    543a:	.short	0xb5dc
    543c:	.short	0x50b5
    543e:	bne.n	5462 <__kernel_rem_pio2f+0x3ee>
    5440:	subs	r3, r5, #1
    5442:	add	r2, sp, #24
    5444:	ldr.w	r1, [r2, r3, lsl #2]
    5448:	asrs	r1, r1, #8
    544a:	b.n	51e4 <__kernel_rem_pio2f+0x170>
    544c:	subs	r2, r5, #1
    544e:	add	r3, sp, #24
    5450:	add.w	lr, sp, #24
    5454:	ldr.w	r3, [r3, r2, lsl #2]
    5458:	and.w	r3, r3, #127	; 0x7f
    545c:	str.w	r3, [lr, r2, lsl #2]
    5460:	b.n	5254 <__kernel_rem_pio2f+0x1e0>
    5462:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5466:	vcmpe.f32	s18, s15
    546a:	vmrs	APSR_nzcv, fpscr
    546e:	bge.n	5488 <__kernel_rem_pio2f+0x414>
    5470:	movs	r1, #0
    5472:	b.n	5258 <__kernel_rem_pio2f+0x1e4>
    5474:	vldr	s15, [pc, #552]	; 56a0 <__kernel_rem_pio2f+0x62c>
    5478:	vstmia	r0!, {s15}
    547c:	cmp	r0, lr
    547e:	add.w	r5, r5, #1
    5482:	bne.w	50f0 <__kernel_rem_pio2f+0x7c>
    5486:	b.n	5120 <__kernel_rem_pio2f+0xac>
    5488:	cmp	r5, #0
    548a:	add.w	fp, fp, #1
    548e:	it	gt
    5490:	movgt	r1, #2
    5492:	bgt.w	51f2 <__kernel_rem_pio2f+0x17e>
    5496:	vmov.f32	s15, #112	; 0x3f800000  1.0
    549a:	vsub.f32	s18, s15, s18
    549e:	movs	r1, #2
    54a0:	b.n	5258 <__kernel_rem_pio2f+0x1e4>
    54a2:	add	r2, sp, #24
    54a4:	vmov	s19, fp
    54a8:	ldr.w	r2, [r2, lr, lsl #2]
    54ac:	ldr.w	fp, [sp, #16]
    54b0:	mov	r3, lr
    54b2:	mov	r8, r1
    54b4:	sub.w	sl, sl, #8
    54b8:	cmp	r2, #0
    54ba:	bne.w	53a2 <__kernel_rem_pio2f+0x32e>
    54be:	add.w	r2, lr, #1073741824	; 0x40000000
    54c2:	subs	r2, #1
    54c4:	add	r1, sp, #24
    54c6:	add.w	r2, r1, r2, lsl #2
    54ca:	ldr.w	r1, [r2], #-4
    54ce:	subs	r3, #1
    54d0:	sub.w	sl, sl, #8
    54d4:	cmp	r1, #0
    54d6:	beq.n	54ca <__kernel_rem_pio2f+0x456>
    54d8:	b.n	53a2 <__kernel_rem_pio2f+0x32e>
    54da:	cmp	r3, #0
    54dc:	ble.w	5662 <__kernel_rem_pio2f+0x5ee>
    54e0:	add.w	r2, r3, #1073741824	; 0x40000000
    54e4:	subs	r2, #1
    54e6:	lsls	r0, r2, #2
    54e8:	add	r1, sp, #344	; 0x158
    54ea:	adds	r5, r1, r7
    54ec:	adds	r4, r0, #4
    54ee:	add	r1, sp, #184	; 0xb8
    54f0:	adds	r0, #8
    54f2:	vldr	s14, [r5, #-160]	; 0xffffff60
    54f6:	add	r4, r1
    54f8:	add	r0, r1
    54fa:	add	r5, sp, #188	; 0xbc
    54fc:	vldmdb	r4!, {s15}
    5500:	vadd.f32	s13, s15, s14
    5504:	vsub.f32	s15, s15, s13
    5508:	vadd.f32	s15, s15, s14
    550c:	vmov.f32	s14, s13
    5510:	vstmdb	r0!, {s15}
    5514:	cmp	r0, r5
    5516:	vstr	s13, [r4]
    551a:	bne.n	54fc <__kernel_rem_pio2f+0x488>
    551c:	cmp	r3, #1
    551e:	ble.w	5662 <__kernel_rem_pio2f+0x5ee>
    5522:	lsls	r2, r2, #2
    5524:	add	r3, sp, #344	; 0x158
    5526:	add	r7, r3
    5528:	add.w	r0, r2, #8
    552c:	add	r3, sp, #184	; 0xb8
    552e:	add	r0, r3
    5530:	adds	r2, #4
    5532:	vldr	s14, [r7, #-160]	; 0xffffff60
    5536:	add	r3, r2
    5538:	add	r4, sp, #192	; 0xc0
    553a:	mov	r2, r0
    553c:	vldmdb	r3!, {s15}
    5540:	vadd.f32	s13, s14, s15
    5544:	vsub.f32	s15, s15, s13
    5548:	vadd.f32	s15, s15, s14
    554c:	vmov.f32	s14, s13
    5550:	vstmdb	r2!, {s15}
    5554:	cmp	r4, r2
    5556:	vstr	s13, [r3]
    555a:	bne.n	553c <__kernel_rem_pio2f+0x4c8>
    555c:	vldr	s15, [pc, #320]	; 56a0 <__kernel_rem_pio2f+0x62c>
    5560:	vldmdb	r0!, {s14}
    5564:	cmp	r4, r0
    5566:	vadd.f32	s15, s15, s14
    556a:	bne.n	5560 <__kernel_rem_pio2f+0x4ec>
    556c:	mov	r3, r8
    556e:	cmp	r3, #0
    5570:	beq.n	563e <__kernel_rem_pio2f+0x5ca>
    5572:	vldr	s13, [sp, #184]	; 0xb8
    5576:	vldr	s14, [sp, #188]	; 0xbc
    557a:	vneg.f32	s15, s15
    557e:	vneg.f32	s13, s13
    5582:	vneg.f32	s14, s14
    5586:	vstr	s15, [fp, #8]
    558a:	vstr	s13, [fp]
    558e:	vstr	s14, [fp, #4]
    5592:	vmov	r3, s19
    5596:	and.w	r0, r3, #7
    559a:	add	sp, #348	; 0x15c
    559c:	vpop	{d8-d9}
    55a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55a4:	adds	r2, r7, #4
    55a6:	add	r0, sp, #184	; 0xb8
    55a8:	vldr	s15, [pc, #244]	; 56a0 <__kernel_rem_pio2f+0x62c>
    55ac:	add	r2, r0
    55ae:	vldmdb	r2!, {s14}
    55b2:	cmp	r2, r0
    55b4:	vadd.f32	s15, s15, s14
    55b8:	bne.n	55ae <__kernel_rem_pio2f+0x53a>
    55ba:	mov	r2, r8
    55bc:	cbz	r2, 561e <__kernel_rem_pio2f+0x5aa>
    55be:	vldr	s13, [sp, #184]	; 0xb8
    55c2:	vneg.f32	s14, s15
    55c6:	cmp	r3, #0
    55c8:	vsub.f32	s15, s13, s15
    55cc:	vstr	s14, [fp]
    55d0:	ble.n	55e8 <__kernel_rem_pio2f+0x574>
    55d2:	add	r0, sp, #188	; 0xbc
    55d4:	movs	r2, #1
    55d6:	vldmia	r0!, {s14}
    55da:	adds	r2, #1
    55dc:	cmp	r3, r2
    55de:	vadd.f32	s15, s15, s14
    55e2:	bge.n	55d6 <__kernel_rem_pio2f+0x562>
    55e4:	mov	r3, r8
    55e6:	cbz	r3, 55ec <__kernel_rem_pio2f+0x578>
    55e8:	vneg.f32	s15, s15
    55ec:	vstr	s15, [fp, #4]
    55f0:	b.n	5592 <__kernel_rem_pio2f+0x51e>
    55f2:	add	r2, sp, #344	; 0x158
    55f4:	add	r2, r7
    55f6:	vldr	s15, [pc, #168]	; 56a0 <__kernel_rem_pio2f+0x62c>
    55fa:	subs	r2, #156	; 0x9c
    55fc:	vldmdb	r2!, {s14}
    5600:	subs	r3, #1
    5602:	adds	r1, r3, #1
    5604:	vadd.f32	s15, s15, s14
    5608:	bne.n	55fc <__kernel_rem_pio2f+0x588>
    560a:	mov	r3, r8
    560c:	cbz	r3, 5612 <__kernel_rem_pio2f+0x59e>
    560e:	vneg.f32	s15, s15
    5612:	vstr	s15, [fp]
    5616:	b.n	5592 <__kernel_rem_pio2f+0x51e>
    5618:	vldr	s15, [pc, #132]	; 56a0 <__kernel_rem_pio2f+0x62c>
    561c:	b.n	5418 <__kernel_rem_pio2f+0x3a4>
    561e:	vldr	s14, [sp, #184]	; 0xb8
    5622:	vstr	s15, [fp]
    5626:	cmp	r3, #0
    5628:	vsub.f32	s15, s14, s15
    562c:	bgt.n	55d2 <__kernel_rem_pio2f+0x55e>
    562e:	vstr	s15, [fp, #4]
    5632:	b.n	5592 <__kernel_rem_pio2f+0x51e>
    5634:	mov.w	lr, #1
    5638:	b.n	52aa <__kernel_rem_pio2f+0x236>
    563a:	movs	r0, #0
    563c:	b.n	522c <__kernel_rem_pio2f+0x1b8>
    563e:	ldr	r2, [sp, #184]	; 0xb8
    5640:	ldr	r3, [sp, #188]	; 0xbc
    5642:	vstr	s15, [fp, #8]
    5646:	str.w	r2, [fp]
    564a:	str.w	r3, [fp, #4]
    564e:	b.n	5592 <__kernel_rem_pio2f+0x51e>
    5650:	vcvt.s32.f32	s0, s0
    5654:	add	r1, sp, #24
    5656:	vmov	r2, s0
    565a:	mov	r3, r5
    565c:	str.w	r2, [r1, r5, lsl #2]
    5660:	b.n	53a2 <__kernel_rem_pio2f+0x32e>
    5662:	vldr	s15, [pc, #60]	; 56a0 <__kernel_rem_pio2f+0x62c>
    5666:	b.n	556c <__kernel_rem_pio2f+0x4f8>
    5668:	ldr	r2, [sp, #400]	; 0x190
    566a:	cmp	r2, #3
    566c:	bhi.n	5592 <__kernel_rem_pio2f+0x51e>
    566e:	add	r1, pc, #4	; (adr r1, 5674 <__kernel_rem_pio2f+0x600>)
    5670:	ldr.w	pc, [r1, r2, lsl #2]
    5674:	.word	0x00005691
    5678:	.word	0x0000568b
    567c:	.word	0x0000568b
    5680:	.word	0x00005663
    5684:	ldr	r3, [sp, #4]
    5686:	lsls	r4, r3, #2
    5688:	b.n	5120 <__kernel_rem_pio2f+0xac>
    568a:	vldr	s15, [pc, #20]	; 56a0 <__kernel_rem_pio2f+0x62c>
    568e:	b.n	55ba <__kernel_rem_pio2f+0x546>
    5690:	vldr	s15, [pc, #12]	; 56a0 <__kernel_rem_pio2f+0x62c>
    5694:	b.n	560a <__kernel_rem_pio2f+0x596>
    5696:	nop
    5698:	.word	0x200008f4
    569c:	.word	0x3fc90000
    56a0:	.word	0x00000000

000056a4 <__kernel_sinf>:
    56a4:	vmov	r3, s0
    56a8:	bic.w	r3, r3, #2147483648	; 0x80000000
    56ac:	cmp.w	r3, #838860800	; 0x32000000
    56b0:	bge.n	56bc <__kernel_sinf+0x18>
    56b2:	vcvt.s32.f32	s15, s0
    56b6:	vmov	r3, s15
    56ba:	cbz	r3, 5706 <__kernel_sinf+0x62>
    56bc:	vmul.f32	s15, s0, s0
    56c0:	vldr	s10, [pc, #84]	; 5718 <__kernel_sinf+0x74>
    56c4:	vldr	s11, [pc, #84]	; 571c <__kernel_sinf+0x78>
    56c8:	vldr	s12, [pc, #84]	; 5720 <__kernel_sinf+0x7c>
    56cc:	vldr	s13, [pc, #84]	; 5724 <__kernel_sinf+0x80>
    56d0:	vldr	s14, [pc, #84]	; 5728 <__kernel_sinf+0x84>
    56d4:	vfma.f32	s11, s15, s10
    56d8:	vmul.f32	s10, s0, s15
    56dc:	vfma.f32	s12, s15, s11
    56e0:	vfma.f32	s13, s15, s12
    56e4:	vfma.f32	s14, s15, s13
    56e8:	cbz	r0, 5708 <__kernel_sinf+0x64>
    56ea:	vnmul.f32	s14, s14, s10
    56ee:	vmov.f32	s13, #96	; 0x3f000000  0.5
    56f2:	vfma.f32	s14, s1, s13
    56f6:	vldr	s13, [pc, #52]	; 572c <__kernel_sinf+0x88>
    56fa:	vfnms.f32	s1, s15, s14
    56fe:	vfma.f32	s1, s10, s13
    5702:	vsub.f32	s0, s0, s1
    5706:	bx	lr
    5708:	vldr	s13, [pc, #36]	; 5730 <__kernel_sinf+0x8c>
    570c:	vfma.f32	s13, s15, s14
    5710:	vfma.f32	s0, s10, s13
    5714:	bx	lr
    5716:	nop
    5718:	.word	0x2f2ec9d3
    571c:	.word	0xb2d72f34
    5720:	.word	0x3638ef1b
    5724:	.word	0xb9500d01
    5728:	.word	0x3c088889
    572c:	.word	0x3e2aaaab
    5730:	.word	0xbe2aaaab

00005734 <fabs>:
    5734:	vmov	r2, r3, d0
    5738:	bic.w	r3, r3, #2147483648	; 0x80000000
    573c:	vmov	d0, r2, r3
    5740:	bx	lr
    5742:	nop

00005744 <finite>:
    5744:	vmov	r3, s1
    5748:	orr.w	r0, r3, #2147483648	; 0x80000000
    574c:	add.w	r0, r0, #1048576	; 0x100000
    5750:	lsrs	r0, r0, #31
    5752:	bx	lr

00005754 <matherr>:
    5754:	movs	r0, #0
    5756:	bx	lr

00005758 <nan>:
    5758:	vldr	d0, [pc, #4]	; 5760 <nan+0x8>
    575c:	bx	lr
    575e:	nop
    5760:	.word	0x00000000
    5764:	.word	0x7ff80000

00005768 <rint>:
    5768:	push	{r4, r5, r6, r7}
    576a:	vmov	r2, r3, d0
    576e:	ubfx	r5, r3, #20, #11
    5772:	subw	r0, r5, #1023	; 0x3ff
    5776:	cmp	r0, #19
    5778:	sub	sp, #16
    577a:	mov	r1, r3
    577c:	mov.w	r7, r3, lsr #31
    5780:	vmov	r4, s0
    5784:	bgt.n	57e0 <rint+0x78>
    5786:	cmp	r0, #0
    5788:	blt.n	581a <rint+0xb2>
    578a:	ldr	r5, [pc, #240]	; (587c <rint+0x114>)
    578c:	asrs	r5, r0
    578e:	and.w	r6, r3, r5
    5792:	orrs	r6, r2
    5794:	beq.n	57ea <rint+0x82>
    5796:	lsrs	r5, r5, #1
    5798:	ands	r3, r5
    579a:	orrs	r4, r3
    579c:	beq.n	57b8 <rint+0x50>
    579e:	mov.w	r3, #262144	; 0x40000
    57a2:	cmp	r0, #19
    57a4:	bic.w	r5, r1, r5
    57a8:	asr.w	r1, r3, r0
    57ac:	orr.w	r1, r1, r5
    57b0:	ite	eq
    57b2:	moveq.w	r4, #2147483648	; 0x80000000
    57b6:	movne	r4, #0
    57b8:	ldr	r0, [pc, #196]	; (5880 <rint+0x118>)
    57ba:	add.w	r7, r0, r7, lsl #3
    57be:	vldr	d0, [r7]
    57c2:	mov	r3, r1
    57c4:	mov	r2, r4
    57c6:	vmov	d7, r2, r3
    57ca:	vadd.f64	d7, d7, d0
    57ce:	vstr	d7, [sp, #8]
    57d2:	vldr	d7, [sp, #8]
    57d6:	vsub.f64	d0, d7, d0
    57da:	add	sp, #16
    57dc:	pop	{r4, r5, r6, r7}
    57de:	bx	lr
    57e0:	cmp	r0, #51	; 0x33
    57e2:	ble.n	57f4 <rint+0x8c>
    57e4:	cmp.w	r0, #1024	; 0x400
    57e8:	beq.n	5874 <rint+0x10c>
    57ea:	vmov	d0, r2, r3
    57ee:	add	sp, #16
    57f0:	pop	{r4, r5, r6, r7}
    57f2:	bx	lr
    57f4:	subw	r5, r5, #1043	; 0x413
    57f8:	mov.w	r0, #4294967295
    57fc:	lsrs	r0, r5
    57fe:	tst	r2, r0
    5800:	beq.n	57ea <rint+0x82>
    5802:	lsrs	r0, r0, #1
    5804:	tst	r2, r0
    5806:	beq.n	57b8 <rint+0x50>
    5808:	mov.w	r3, #1073741824	; 0x40000000
    580c:	bic.w	r0, r4, r0
    5810:	asr.w	r5, r3, r5
    5814:	orr.w	r4, r5, r0
    5818:	b.n	57b8 <rint+0x50>
    581a:	bic.w	r0, r3, #2147483648	; 0x80000000
    581e:	orrs	r0, r2
    5820:	vmov	r6, s0
    5824:	beq.n	57ea <rint+0x82>
    5826:	ubfx	r0, r3, #0, #20
    582a:	orrs	r6, r0
    582c:	negs	r0, r6
    582e:	orrs	r6, r0
    5830:	ldr	r0, [pc, #76]	; (5880 <rint+0x118>)
    5832:	lsrs	r1, r3, #17
    5834:	lsrs	r6, r6, #12
    5836:	lsls	r1, r1, #17
    5838:	and.w	r6, r6, #524288	; 0x80000
    583c:	add.w	r0, r0, r7, lsl #3
    5840:	orr.w	r3, r6, r1
    5844:	vldr	d6, [r0]
    5848:	vmov	d7, r2, r3
    584c:	vadd.f64	d7, d7, d6
    5850:	vstr	d7, [sp, #8]
    5854:	vldr	d7, [sp, #8]
    5858:	vsub.f64	d7, d7, d6
    585c:	vstr	d7, [sp]
    5860:	ldr	r1, [sp, #4]
    5862:	ldrd	r2, r3, [sp]
    5866:	bic.w	r1, r1, #2147483648	; 0x80000000
    586a:	orr.w	r3, r1, r7, lsl #31
    586e:	vmov	d0, r2, r3
    5872:	b.n	57ee <rint+0x86>
    5874:	vadd.f64	d0, d0, d0
    5878:	b.n	57ee <rint+0x86>
    587a:	nop
    587c:	.word	0x000fffff
    5880:	.word	0x20000920
    5884:	.word	0x00000000

00005888 <scalbn>:
    5888:	push	{r4, lr}
    588a:	vpush	{d8}
    588e:	sub	sp, #8
    5890:	vstr	d0, [sp]
    5894:	ldr	r3, [sp, #4]
    5896:	ldr	r1, [sp, #0]
    5898:	ubfx	r2, r3, #20, #11
    589c:	cbnz	r2, 58ea <scalbn+0x62>
    589e:	bic.w	r3, r3, #2147483648	; 0x80000000
    58a2:	orrs	r3, r1
    58a4:	beq.n	5902 <scalbn+0x7a>
    58a6:	vldr	d7, [pc, #216]	; 5980 <scalbn+0xf8>
    58aa:	ldr	r2, [pc, #244]	; (59a0 <scalbn+0x118>)
    58ac:	vmul.f64	d7, d0, d7
    58b0:	cmp	r0, r2
    58b2:	vstr	d7, [sp]
    58b6:	ldr	r3, [sp, #4]
    58b8:	blt.n	590e <scalbn+0x86>
    58ba:	ubfx	r2, r3, #20, #11
    58be:	subs	r2, #54	; 0x36
    58c0:	adds	r4, r0, r2
    58c2:	movw	r2, #2046	; 0x7fe
    58c6:	cmp	r4, r2
    58c8:	bgt.n	592c <scalbn+0xa4>
    58ca:	cmp	r4, #0
    58cc:	ble.n	591e <scalbn+0x96>
    58ce:	bic.w	r1, r3, #2139095040	; 0x7f800000
    58d2:	ldrd	r2, r3, [sp]
    58d6:	bic.w	r1, r1, #7340032	; 0x700000
    58da:	orr.w	r3, r1, r4, lsl #20
    58de:	vmov	d0, r2, r3
    58e2:	add	sp, #8
    58e4:	vpop	{d8}
    58e8:	pop	{r4, pc}
    58ea:	movw	r1, #2047	; 0x7ff
    58ee:	cmp	r2, r1
    58f0:	bne.n	58c0 <scalbn+0x38>
    58f2:	vldr	d7, [sp]
    58f6:	vadd.f64	d0, d7, d7
    58fa:	add	sp, #8
    58fc:	vpop	{d8}
    5900:	pop	{r4, pc}
    5902:	vldr	d0, [sp]
    5906:	add	sp, #8
    5908:	vpop	{d8}
    590c:	pop	{r4, pc}
    590e:	vldr	d0, [pc, #120]	; 5988 <scalbn+0x100>
    5912:	vmul.f64	d0, d7, d0
    5916:	add	sp, #8
    5918:	vpop	{d8}
    591c:	pop	{r4, pc}
    591e:	cmn.w	r4, #53	; 0x35
    5922:	bge.n	5948 <scalbn+0xc0>
    5924:	movw	r3, #50000	; 0xc350
    5928:	cmp	r0, r3
    592a:	ble.n	5968 <scalbn+0xe0>
    592c:	vldr	d8, [pc, #96]	; 5990 <scalbn+0x108>
    5930:	vldr	d1, [sp]
    5934:	vmov.f64	d0, d8
    5938:	bl	5ccc <copysign>
    593c:	vmul.f64	d0, d0, d8
    5940:	add	sp, #8
    5942:	vpop	{d8}
    5946:	pop	{r4, pc}
    5948:	bic.w	r1, r3, #2139095040	; 0x7f800000
    594c:	ldrd	r2, r3, [sp]
    5950:	bic.w	r1, r1, #7340032	; 0x700000
    5954:	adds	r4, #54	; 0x36
    5956:	orr.w	r3, r1, r4, lsl #20
    595a:	vldr	d0, [pc, #60]	; 5998 <scalbn+0x110>
    595e:	vmov	d7, r2, r3
    5962:	vmul.f64	d0, d7, d0
    5966:	b.n	58e2 <scalbn+0x5a>
    5968:	vldr	d8, [pc, #28]	; 5988 <scalbn+0x100>
    596c:	vldr	d1, [sp]
    5970:	vmov.f64	d0, d8
    5974:	bl	5ccc <copysign>
    5978:	vmul.f64	d0, d0, d8
    597c:	b.n	58e2 <scalbn+0x5a>
    597e:	nop
    5980:	.word	0x00000000
    5984:	.word	0x43500000
    5988:	.word	0xc2f8f359
    598c:	.word	0x01a56e1f
    5990:	.word	0x8800759c
    5994:	.word	0x7e37e43c
    5998:	.word	0x00000000
    599c:	.word	0x3c900000
    59a0:	.word	0xffff3cb0

000059a4 <atanf>:
    59a4:	push	{r3, r4, r5, lr}
    59a6:	vmov	r5, s0
    59aa:	bic.w	r4, r5, #2147483648	; 0x80000000
    59ae:	cmp.w	r4, #1350565888	; 0x50800000
    59b2:	vmov.f32	s15, s0
    59b6:	blt.n	59d0 <atanf+0x2c>
    59b8:	cmp.w	r4, #2139095040	; 0x7f800000
    59bc:	bgt.n	5a70 <atanf+0xcc>
    59be:	vldr	s15, [pc, #336]	; 5b10 <atanf+0x16c>
    59c2:	vldr	s0, [pc, #336]	; 5b14 <atanf+0x170>
    59c6:	cmp	r5, #0
    59c8:	it	gt
    59ca:	vmovgt.f32	s0, s15
    59ce:	pop	{r3, r4, r5, pc}
    59d0:	ldr	r3, [pc, #324]	; (5b18 <atanf+0x174>)
    59d2:	cmp	r4, r3
    59d4:	bgt.n	5a92 <atanf+0xee>
    59d6:	cmp.w	r4, #822083584	; 0x31000000
    59da:	blt.n	5a76 <atanf+0xd2>
    59dc:	mov.w	r3, #4294967295
    59e0:	vmul.f32	s11, s15, s15
    59e4:	vldr	s2, [pc, #308]	; 5b1c <atanf+0x178>
    59e8:	vldr	s4, [pc, #308]	; 5b20 <atanf+0x17c>
    59ec:	vldr	s6, [pc, #308]	; 5b24 <atanf+0x180>
    59f0:	vldr	s3, [pc, #308]	; 5b28 <atanf+0x184>
    59f4:	vldr	s5, [pc, #308]	; 5b2c <atanf+0x188>
    59f8:	vldr	s8, [pc, #308]	; 5b30 <atanf+0x18c>
    59fc:	vldr	s7, [pc, #308]	; 5b34 <atanf+0x190>
    5a00:	vldr	s10, [pc, #308]	; 5b38 <atanf+0x194>
    5a04:	vldr	s9, [pc, #308]	; 5b3c <atanf+0x198>
    5a08:	vldr	s12, [pc, #308]	; 5b40 <atanf+0x19c>
    5a0c:	vldr	s13, [pc, #308]	; 5b44 <atanf+0x1a0>
    5a10:	vmul.f32	s14, s11, s11
    5a14:	adds	r2, r3, #1
    5a16:	vfma.f32	s4, s14, s2
    5a1a:	vfma.f32	s5, s14, s3
    5a1e:	vfma.f32	s6, s14, s4
    5a22:	vfma.f32	s7, s14, s5
    5a26:	vfma.f32	s8, s14, s6
    5a2a:	vfma.f32	s9, s14, s7
    5a2e:	vfma.f32	s10, s14, s8
    5a32:	vfma.f32	s13, s14, s9
    5a36:	vfma.f32	s12, s14, s10
    5a3a:	vmul.f32	s14, s13, s14
    5a3e:	vmul.f32	s13, s12, s11
    5a42:	beq.n	5ac2 <atanf+0x11e>
    5a44:	ldr	r2, [pc, #256]	; (5b48 <atanf+0x1a4>)
    5a46:	ldr	r1, [pc, #260]	; (5b4c <atanf+0x1a8>)
    5a48:	lsls	r3, r3, #2
    5a4a:	add	r2, r3
    5a4c:	vadd.f32	s13, s13, s14
    5a50:	vldr	s14, [r2]
    5a54:	vfnms.f32	s14, s15, s13
    5a58:	add	r3, r1
    5a5a:	cmp	r5, #0
    5a5c:	vldr	s0, [r3]
    5a60:	vsub.f32	s15, s14, s15
    5a64:	vsub.f32	s15, s0, s15
    5a68:	blt.n	5abc <atanf+0x118>
    5a6a:	vmov.f32	s0, s15
    5a6e:	pop	{r3, r4, r5, pc}
    5a70:	vadd.f32	s0, s0, s0
    5a74:	pop	{r3, r4, r5, pc}
    5a76:	vldr	s14, [pc, #216]	; 5b50 <atanf+0x1ac>
    5a7a:	vadd.f32	s14, s0, s14
    5a7e:	vmov.f32	s13, #112	; 0x3f800000  1.0
    5a82:	vcmpe.f32	s14, s13
    5a86:	vmrs	APSR_nzcv, fpscr
    5a8a:	ble.n	59dc <atanf+0x38>
    5a8c:	vmov.f32	s0, s15
    5a90:	pop	{r3, r4, r5, pc}
    5a92:	bl	5b5c <fabsf>
    5a96:	ldr	r3, [pc, #188]	; (5b54 <atanf+0x1b0>)
    5a98:	cmp	r4, r3
    5a9a:	bgt.n	5ad0 <atanf+0x12c>
    5a9c:	sub.w	r3, r3, #6815744	; 0x680000
    5aa0:	cmp	r4, r3
    5aa2:	bgt.n	5afa <atanf+0x156>
    5aa4:	vmov.f32	s15, #0	; 0x40000000  2.0
    5aa8:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    5aac:	vfma.f32	s14, s0, s15
    5ab0:	movs	r3, #0
    5ab2:	vadd.f32	s0, s0, s15
    5ab6:	vdiv.f32	s15, s14, s0
    5aba:	b.n	59e0 <atanf+0x3c>
    5abc:	vneg.f32	s0, s15
    5ac0:	pop	{r3, r4, r5, pc}
    5ac2:	vadd.f32	s13, s13, s14
    5ac6:	vfms.f32	s15, s15, s13
    5aca:	vmov.f32	s0, s15
    5ace:	pop	{r3, r4, r5, pc}
    5ad0:	ldr	r3, [pc, #132]	; (5b58 <atanf+0x1b4>)
    5ad2:	cmp	r4, r3
    5ad4:	bgt.n	5aee <atanf+0x14a>
    5ad6:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    5ada:	vmov.f32	s14, #112	; 0x3f800000  1.0
    5ade:	vfma.f32	s14, s0, s15
    5ae2:	movs	r3, #2
    5ae4:	vsub.f32	s0, s0, s15
    5ae8:	vdiv.f32	s15, s0, s14
    5aec:	b.n	59e0 <atanf+0x3c>
    5aee:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    5af2:	vdiv.f32	s15, s14, s0
    5af6:	movs	r3, #3
    5af8:	b.n	59e0 <atanf+0x3c>
    5afa:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5afe:	vsub.f32	s14, s0, s15
    5b02:	vadd.f32	s0, s0, s15
    5b06:	movs	r3, #1
    5b08:	vdiv.f32	s15, s14, s0
    5b0c:	b.n	59e0 <atanf+0x3c>
    5b0e:	nop
    5b10:	.word	0x3fc90fdb
    5b14:	.word	0xbfc90fdb
    5b18:	.word	0x3edfffff
    5b1c:	.word	0x3c8569d7
    5b20:	.word	0x3d4bda59
    5b24:	.word	0x3d886b35
    5b28:	.word	0xbd15a221
    5b2c:	.word	0xbd6ef16b
    5b30:	.word	0x3dba2e6e
    5b34:	.word	0xbd9d8795
    5b38:	.word	0x3e124925
    5b3c:	.word	0xbde38e38
    5b40:	.word	0x3eaaaaab
    5b44:	.word	0xbe4ccccd
    5b48:	.word	0x20000930
    5b4c:	.word	0x20000940
    5b50:	.word	0x7149f2ca
    5b54:	.word	0x3f97ffff
    5b58:	.word	0x401bffff

00005b5c <fabsf>:
    5b5c:	vmov	r3, s0
    5b60:	bic.w	r3, r3, #2147483648	; 0x80000000
    5b64:	vmov	s0, r3
    5b68:	bx	lr
    5b6a:	nop

00005b6c <floorf>:
    5b6c:	vmov	r2, s0
    5b70:	bic.w	r1, r2, #2147483648	; 0x80000000
    5b74:	lsrs	r3, r1, #23
    5b76:	subs	r3, #127	; 0x7f
    5b78:	cmp	r3, #22
    5b7a:	bgt.n	5bac <floorf+0x40>
    5b7c:	cmp	r3, #0
    5b7e:	vmov	r0, s0
    5b82:	blt.n	5bb8 <floorf+0x4c>
    5b84:	ldr	r1, [pc, #104]	; (5bf0 <floorf+0x84>)
    5b86:	asrs	r1, r3
    5b88:	tst	r2, r1
    5b8a:	beq.n	5bd2 <floorf+0x66>
    5b8c:	vldr	s15, [pc, #100]	; 5bf4 <floorf+0x88>
    5b90:	vadd.f32	s15, s0, s15
    5b94:	vcmpe.f32	s15, #0.0
    5b98:	vmrs	APSR_nzcv, fpscr
    5b9c:	ble.n	5bd2 <floorf+0x66>
    5b9e:	cmp	r2, #0
    5ba0:	blt.n	5bd4 <floorf+0x68>
    5ba2:	bic.w	r3, r0, r1
    5ba6:	vmov	s0, r3
    5baa:	bx	lr
    5bac:	cmp.w	r1, #2139095040	; 0x7f800000
    5bb0:	bcc.n	5bd2 <floorf+0x66>
    5bb2:	vadd.f32	s0, s0, s0
    5bb6:	bx	lr
    5bb8:	vldr	s15, [pc, #56]	; 5bf4 <floorf+0x88>
    5bbc:	vadd.f32	s15, s0, s15
    5bc0:	vcmpe.f32	s15, #0.0
    5bc4:	vmrs	APSR_nzcv, fpscr
    5bc8:	ble.n	5bd2 <floorf+0x66>
    5bca:	cmp	r2, #0
    5bcc:	blt.n	5be0 <floorf+0x74>
    5bce:	vldr	s0, [pc, #40]	; 5bf8 <floorf+0x8c>
    5bd2:	bx	lr
    5bd4:	mov.w	r2, #8388608	; 0x800000
    5bd8:	asr.w	r3, r2, r3
    5bdc:	add	r0, r3
    5bde:	b.n	5ba2 <floorf+0x36>
    5be0:	cmp	r1, #0
    5be2:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    5be6:	it	ne
    5be8:	vmovne.f32	s0, s15
    5bec:	bx	lr
    5bee:	nop
    5bf0:	.word	0x007fffff
    5bf4:	.word	0x7149f2ca
    5bf8:	.word	0x00000000

00005bfc <scalbnf>:
    5bfc:	push	{r3, lr}
    5bfe:	vmov	r3, s0
    5c02:	bics.w	r2, r3, #2147483648	; 0x80000000
    5c06:	vpush	{d8}
    5c0a:	beq.n	5c30 <scalbnf+0x34>
    5c0c:	cmp.w	r2, #2139095040	; 0x7f800000
    5c10:	bcs.n	5c36 <scalbnf+0x3a>
    5c12:	cmp.w	r2, #8388608	; 0x800000
    5c16:	bcc.n	5c40 <scalbnf+0x44>
    5c18:	lsrs	r2, r2, #23
    5c1a:	add	r2, r0
    5c1c:	cmp	r2, #254	; 0xfe
    5c1e:	bgt.n	5c7e <scalbnf+0x82>
    5c20:	cmp	r2, #0
    5c22:	ble.n	5c5a <scalbnf+0x5e>
    5c24:	bic.w	r3, r3, #2139095040	; 0x7f800000
    5c28:	orr.w	r3, r3, r2, lsl #23
    5c2c:	vmov	s0, r3
    5c30:	vpop	{d8}
    5c34:	pop	{r3, pc}
    5c36:	vpop	{d8}
    5c3a:	vadd.f32	s0, s0, s0
    5c3e:	pop	{r3, pc}
    5c40:	ldr	r3, [pc, #116]	; (5cb8 <scalbnf+0xbc>)
    5c42:	vldr	s15, [pc, #120]	; 5cbc <scalbnf+0xc0>
    5c46:	cmp	r0, r3
    5c48:	vmul.f32	s0, s0, s15
    5c4c:	blt.n	5c94 <scalbnf+0x98>
    5c4e:	vmov	r3, s0
    5c52:	ubfx	r2, r3, #23, #8
    5c56:	subs	r2, #25
    5c58:	b.n	5c1a <scalbnf+0x1e>
    5c5a:	cmn.w	r2, #22
    5c5e:	bge.n	5c9e <scalbnf+0xa2>
    5c60:	movw	r3, #50000	; 0xc350
    5c64:	cmp	r0, r3
    5c66:	bgt.n	5c7e <scalbnf+0x82>
    5c68:	vldr	s16, [pc, #84]	; 5cc0 <scalbnf+0xc4>
    5c6c:	vmov.f32	s1, s0
    5c70:	vmov.f32	s0, s16
    5c74:	bl	5ce8 <copysignf>
    5c78:	vmul.f32	s0, s0, s16
    5c7c:	b.n	5c30 <scalbnf+0x34>
    5c7e:	vldr	s16, [pc, #68]	; 5cc4 <scalbnf+0xc8>
    5c82:	vmov.f32	s1, s0
    5c86:	vmov.f32	s0, s16
    5c8a:	bl	5ce8 <copysignf>
    5c8e:	vmul.f32	s0, s0, s16
    5c92:	b.n	5c30 <scalbnf+0x34>
    5c94:	vldr	s1, [pc, #40]	; 5cc0 <scalbnf+0xc4>
    5c98:	vmul.f32	s0, s0, s1
    5c9c:	b.n	5c30 <scalbnf+0x34>
    5c9e:	adds	r2, #25
    5ca0:	bic.w	r3, r3, #2139095040	; 0x7f800000
    5ca4:	orr.w	r3, r3, r2, lsl #23
    5ca8:	vldr	s15, [pc, #28]	; 5cc8 <scalbnf+0xcc>
    5cac:	vmov	s0, r3
    5cb0:	vmul.f32	s0, s0, s15
    5cb4:	b.n	5c30 <scalbnf+0x34>
    5cb6:	nop
    5cb8:	.word	0xffff3cb0
    5cbc:	.word	0x4c000000
    5cc0:	.word	0x0da24260
    5cc4:	.word	0x7149f2ca
    5cc8:	.word	0x33000000

00005ccc <copysign>:
    5ccc:	vmov	r2, r3, d0
    5cd0:	vmov	r0, s3
    5cd4:	bic.w	r1, r3, #2147483648	; 0x80000000
    5cd8:	and.w	r0, r0, #2147483648	; 0x80000000
    5cdc:	orr.w	r3, r1, r0
    5ce0:	vmov	d0, r2, r3
    5ce4:	bx	lr
    5ce6:	nop

00005ce8 <copysignf>:
    5ce8:	vmov	r3, s0
    5cec:	bic.w	r2, r3, #2147483648	; 0x80000000
    5cf0:	vmov	r3, s1
    5cf4:	and.w	r3, r3, #2147483648	; 0x80000000
    5cf8:	orrs	r3, r2
    5cfa:	vmov	s0, r3
    5cfe:	bx	lr

00005d00 <__errno>:
    5d00:	ldr	r3, [pc, #4]	; (5d08 <__errno+0x8>)
    5d02:	ldr	r0, [r3, #0]
    5d04:	bx	lr
    5d06:	nop
    5d08:	.word	0x20000e30

00005d0c <__libc_init_array>:
    5d0c:	push	{r4, r5, r6, lr}
    5d0e:	ldr	r6, [pc, #60]	; (5d4c <__libc_init_array+0x40>)
    5d10:	ldr	r5, [pc, #60]	; (5d50 <__libc_init_array+0x44>)
    5d12:	subs	r6, r6, r5
    5d14:	asrs	r6, r6, #2
    5d16:	it	ne
    5d18:	movne	r4, #0
    5d1a:	beq.n	5d28 <__libc_init_array+0x1c>
    5d1c:	adds	r4, #1
    5d1e:	ldr.w	r3, [r5], #4
    5d22:	blx	r3
    5d24:	cmp	r6, r4
    5d26:	bne.n	5d1c <__libc_init_array+0x10>
    5d28:	ldr	r6, [pc, #40]	; (5d54 <__libc_init_array+0x48>)
    5d2a:	ldr	r5, [pc, #44]	; (5d58 <__libc_init_array+0x4c>)
    5d2c:	subs	r6, r6, r5
    5d2e:	bl	5df8 <___init_veneer>
    5d32:	asrs	r6, r6, #2
    5d34:	it	ne
    5d36:	movne	r4, #0
    5d38:	beq.n	5d48 <__libc_init_array+0x3c>
    5d3a:	adds	r4, #1
    5d3c:	ldr.w	r3, [r5], #4
    5d40:	blx	r3
    5d42:	cmp	r6, r4
    5d44:	bne.n	5d3a <__libc_init_array+0x2e>
    5d46:	pop	{r4, r5, r6, pc}
    5d48:	pop	{r4, r5, r6, pc}
    5d4a:	nop
    5d4c:	.word	0x60001820
    5d50:	.word	0x60001820
    5d54:	.word	0x60001828
    5d58:	.word	0x60001820

00005d5c <memset>:
    5d5c:	push	{r4, r5, r6}
    5d5e:	lsls	r4, r0, #30
    5d60:	beq.n	5df0 <memset+0x94>
    5d62:	subs	r4, r2, #1
    5d64:	cmp	r2, #0
    5d66:	beq.n	5dec <memset+0x90>
    5d68:	uxtb	r5, r1
    5d6a:	mov	r3, r0
    5d6c:	b.n	5d74 <memset+0x18>
    5d6e:	subs	r2, r4, #1
    5d70:	cbz	r4, 5dec <memset+0x90>
    5d72:	mov	r4, r2
    5d74:	strb.w	r5, [r3], #1
    5d78:	lsls	r2, r3, #30
    5d7a:	bne.n	5d6e <memset+0x12>
    5d7c:	cmp	r4, #3
    5d7e:	bls.n	5dde <memset+0x82>
    5d80:	uxtb	r5, r1
    5d82:	orr.w	r5, r5, r5, lsl #8
    5d86:	cmp	r4, #15
    5d88:	orr.w	r5, r5, r5, lsl #16
    5d8c:	bls.n	5dc2 <memset+0x66>
    5d8e:	add.w	r2, r3, #16
    5d92:	mov	r6, r4
    5d94:	subs	r6, #16
    5d96:	cmp	r6, #15
    5d98:	str.w	r5, [r2, #-16]
    5d9c:	str.w	r5, [r2, #-12]
    5da0:	str.w	r5, [r2, #-8]
    5da4:	str.w	r5, [r2, #-4]
    5da8:	add.w	r2, r2, #16
    5dac:	bhi.n	5d94 <memset+0x38>
    5dae:	sub.w	r2, r4, #16
    5db2:	bic.w	r2, r2, #15
    5db6:	and.w	r4, r4, #15
    5dba:	adds	r2, #16
    5dbc:	cmp	r4, #3
    5dbe:	add	r3, r2
    5dc0:	bls.n	5dde <memset+0x82>
    5dc2:	mov	r6, r3
    5dc4:	mov	r2, r4
    5dc6:	subs	r2, #4
    5dc8:	cmp	r2, #3
    5dca:	str.w	r5, [r6], #4
    5dce:	bhi.n	5dc6 <memset+0x6a>
    5dd0:	subs	r2, r4, #4
    5dd2:	bic.w	r2, r2, #3
    5dd6:	adds	r2, #4
    5dd8:	add	r3, r2
    5dda:	and.w	r4, r4, #3
    5dde:	cbz	r4, 5dec <memset+0x90>
    5de0:	uxtb	r1, r1
    5de2:	add	r4, r3
    5de4:	strb.w	r1, [r3], #1
    5de8:	cmp	r3, r4
    5dea:	bne.n	5de4 <memset+0x88>
    5dec:	pop	{r4, r5, r6}
    5dee:	bx	lr
    5df0:	mov	r4, r2
    5df2:	mov	r3, r0
    5df4:	b.n	5d7c <memset+0x20>
    5df6:	nop

00005df8 <___init_veneer>:
    5df8:	ldr.w	pc, [pc]	; 5dfc <___init_veneer+0x4>
    5dfc:	.word	0x600017cd

Disassembly of section .fini:

00005e00 <_fini>:
    5e00:	push	{r3, r4, r5, r6, r7, lr}
    5e02:	nop
