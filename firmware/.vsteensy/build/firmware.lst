
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000015d0 l    d  .fini	00000000 .fini
000015d4 l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200003b0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
000003d0 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00000700 l     F .text.itcm	0000005c schedule_transfer
0000075c l     F .text.itcm	00000030 run_callbacks
0000078c l     F .text.itcm	000000a4 endpoint0_transmit.constprop.0
00000830 l     F .text.itcm	000005b8 isr
200003d0 l     O .bss	00000004 endpointN_notify_mask
200003d8 l     O .bss	00000004 endpoint0_notify_mask
200003dc l     O .bss	00000001 usb_reboot_timer
200003e0 l     O .bss	00000008 endpoint0_setupdata
200003e8 l     O .bss	00000008 reply_buffer
200003f0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20000404 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20000408 l     O .bss	00000004 s_hotTemp
2000040c l     O .bss	00000004 s_hot_ROOM
20000410 l     O .bss	00000004 s_roomC_hotC
20000414 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200003b0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200003b4 l       .bss	00000000 object.8610
60001648 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 usb_desc.c
200002f4 l     O .data	0000000a qualifier_descriptor
20000318 l     O .data	00000043 config_descriptor
2000035c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
20000418 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
000012f8 l     F .text.itcm	00000028 rx_event
00001320 l     F .text.itcm	00000070 usb_serial_flush_callback
20000438 l     O .bss	00000700 txbuffer
20000b38 l     O .bss	00000001 tx_noautoflush
20000b39 l     O .bss	00000001 tx_head
20000b3c l     O .bss	000000c0 rx_buffer
20000bfc l     O .bss	00000006 rx_index
20000c04 l     O .bss	00000006 rx_count
20000c20 l     O .bss	00000060 rx_transfer
20000c80 l     O .bss	00000002 tx_available
20000ca0 l     O .bss	000000e0 tx_transfer
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20200000 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015f0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015f8 l     F .text.progmem	00000008 __loop_veneer
60001600 l     F .text.progmem	00000008 __yield_veneer
60001608 l     F .text.progmem	00000008 __delay_veneer
60001610 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001618 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001620 l     F .text.progmem	00000008 __memset_veneer
60001628 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001630 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001638 l     F .text.progmem	00000008 __pwm_init_veneer
60001640 l     F .text.progmem	00000008 __setup_veneer
000015c0 l     F .text.itcm	00000008 ___init_veneer
00001448 g     F .text.itcm	00000014 usb_serial_available
000003dc g     F .text.itcm	00000002 startup_default_late_hook
00001048  w    F .text.itcm	000000a0 yield
200003d4 g     O .bss	00000004 usb_timer1_callback
20000300 g     O .data	00000018 usb_string_manufacturer_name_default
20000d84 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
60001490 g     F .text.progmem	00000058 analog_init
200002f0 g     O .data	00000004 F_CPU_ACTUAL
000014ac g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00001234 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000430 g     O .bss	00000001 EventResponder::runningFromYield
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000041c g     O .bss	00000004 EventResponder::firstInterrupt
200003a2 g     O .data	00000001 usb_enable_serial_event_processing
20000000 g     O .data	00000280 digital_pin_to_info_PGM
000015d0 g       .text.itcm	00000000 _etext
200003b0 g       .bss	00000000 _sbss
60001650 g       *ABS*	00000000 _stextload
00000084 g     F .text.itcm	00000002 loop
00000de8 g     F .text.itcm	00000064 usb_config_rx
000011cc g     F .text.itcm	00000068 MillisTimer::addToActiveList()
20000420 g     O .bss	00000004 EventResponder::lastInterrupt
20000400 g     O .bss	00000004 systick_millis_count
200003f8 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000300  w    O .data	00000018 usb_string_manufacturer_name
00001168  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600013a4 g     F .text.progmem	000000ec usb_init
20003280 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
000003d8 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	0000026c ResetHandler
20003284 g     O .bss	00000008 usb_cdc_line_coding
20000428 g     O .bss	00000004 EventResponder::lastYield
00000340 g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
2000042c g     O .bss	00000004 EventResponder::firstYield
000014d4 g     F .text.itcm	00000050 __libc_init_array
000003e0  w    F .text.itcm	0000008c HardFault_HandlerC
60002c24 g       *ABS*	00000000 _sdataload
20000434 g     O .bss	00000004 MillisTimer::listWaiting
20000d80 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015e0 g     F .text.progmem	00000000 _init
00001390 g     F .text.itcm	00000002 usb_serial_reset
200032c0 g       .bss	00000000 _ebss
00000001 g       *ABS*	00000000 _itcm_block_count
20002000 g     O .bss	00000020 endpoint0_transfer_data
00000088 g     F .text.itcm	000002b8 pwm_init
60001340 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
2000328c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
20002020 g     O .bss	00000020 endpoint0_transfer_ack
00000ee4 g     F .text.itcm	00000028 usb_transmit
000012cc g     F .text.itcm	00000020 systick_isr
20000da0 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
000003d8  w    F .text.itcm	00000002 startup_early_hook
0000046c g     F .text.itcm	00000294 set_arm_clock
200003fc g     O .bss	00000004 systick_cycle_count
2000038c g     O .data	00000016 usb_string_serial_number_default
00000eb4 g     F .text.itcm	0000002e usb_prepare_transfer
000003c0 g     F .text.itcm	00000018 unused_interrupt_vector
200003cc g     O .bss	00000004 usb_timer0_callback
600014e8 g     F .text.progmem	000000f8 tempmon_init
000012ec  w    F .text.itcm	0000000c serialEvent()
00000024 g       *ABS*	00000000 _teensy_model_identifier
20000424 g     O .bss	00000004 MillisTimer::listActive
20001000 g     O .bss	000002c0 _VectorsRam
00001524 g     F .text.itcm	0000009a memset
00000ff0 g     F .text.itcm	00000058 usb_init_serialnumber
6000164c g       .text.progmem	00000000 __init_array_end
000010e8 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20000388 g     O .data	00000004 string0
000003dc  w    F .text.itcm	00000002 startup_late_hook
20003000 g     O .bss	00000280 endpoint_queue_head
20000370  w    O .data	00000016 usb_string_product_name
00000f30 g     F .text.itcm	000000c0 delay
000015d0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
60001648 g       .text.progmem	00000000 __preinit_array_end
0000007c g     F .text.itcm	00000008 setup
20000280 g     O .data	0000006c usb_descriptor_list
20078000 g       .bss	00000000 _estack
00001394 g     F .text.itcm	000000b4 usb_serial_configure
200003b0 g       .data	00000000 _edata
0000145c g     F .text.itcm	0000004e ultoa
00001184 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
60001648 g       .text.progmem	00000000 __init_array_start
200002ec g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
20000370 g     O .data	00000016 usb_string_product_name_default
600012a0 g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001648 g       .text.progmem	00000000 __preinit_array_start
00000f0c g     F .text.itcm	00000024 usb_receive
00002fd0 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000011c8 g     F .text.itcm	00000004 pendablesrvreq_isr
00000e4c g     F .text.itcm	00000068 usb_config_tx
2000038c  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`./......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns"), naked))
void ResetHandler(void)
{
	unsigned int i;

60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
#if defined(__IMXRT1062__)
60001036:	movs	r0, #7
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns"), naked))
void ResetHandler(void)
{
	unsigned int i;

60001038:	ldr	r4, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103e:	ldr	r2, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns"), naked))
void ResetHandler(void)
{
	unsigned int i;

60001040:	str	r4, [r3, #68]	; 0x44
#if defined(__IMXRT1062__)
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001044:	str	r1, [r3, #56]	; 0x38
	IOMUXC_GPR_GPR16 = 0x00200007;
60001046:	mov	sp, r2
	while (1) asm ("WFI");
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
60001048:	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104a:	ldr	r1, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
{
60001050:	ldr	r3, [pc, #464]	; (60001224 <ResetHandler+0x1f0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
	if (dest == src) return;
60001064:	ldr.w	r1, [r0], #4
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
60001068:	cmp	r0, r3
	if (dest == src) return;
6000106a:	str.w	r1, [r2], #4
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
6000106e:	bne.n	60001064 <ResetHandler+0x30>
	while (1) asm ("WFI");
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
60001070:	ldr	r2, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001072:	ldr	r1, [pc, #440]	; (6000122c <ResetHandler+0x1f8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
{
60001078:	ldr	r3, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
	if (dest == src) return;
6000108c:	ldr.w	r1, [r0], #4
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
60001090:	cmp	r0, r3
	if (dest == src) return;
60001092:	str.w	r1, [r2], #4
#endif
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
60001096:	bne.n	6000108c <ResetHandler+0x58>
		*dest++ = *src++;
	}
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
60001098:	ldr	r2, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109a:	ldr	r3, [pc, #412]	; (60001238 <ResetHandler+0x204>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
{
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
		*dest++ = *src++;
	}
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

600010b8:	ldr	r2, [pc, #384]	; (6000123c <ResetHandler+0x208>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #384]	; (60001240 <ResetHandler+0x20c>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #380]	; (60001244 <ResetHandler+0x210>)
	// enable FPU
	SCB_CPACR = 0x00F00000;

600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #372]	; (60001248 <ResetHandler+0x214>)
	// set up blank interrupt & exception vector table
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #372]	; (6000124c <ResetHandler+0x218>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
		return; // everything is as it should be  :-)
	}
}

FLASHMEM void reset_PFD()
{	
600010de:	ldr	r4, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
600010e4:	ldr	r6, [pc, #364]	; (60001254 <ResetHandler+0x220>)
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
600010e6:	mov.w	r2, #4294967295

	// enable FPU
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010ea:	ldr.w	sl, [pc, #424]	; 60001294 <ResetHandler+0x260>
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600010ee:	movs	r5, #0
	}
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
600010f0:	ldr.w	r9, [pc, #420]	; 60001298 <ResetHandler+0x264>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
	//PLL3:
600010f4:	ldr.w	r8, [pc, #420]	; 6000129c <ResetHandler+0x268>

	// enable FPU
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010f8:	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x224>)
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
600010fa:	ldr	r1, [pc, #276]	; (60001210 <ResetHandler+0x1dc>)

	// enable FPU
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010fc:	str.w	sl, [r3]
		return; // everything is as it should be  :-)
	}
}

FLASHMEM void reset_PFD()
{	
60001100:	str.w	r7, [r4, #260]	; 0x104
	//Reset PLL2 PFDs, set default frequencies:
60001104:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	//PLL3:
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
60001128:	str	r2, [r1, #104]	; 0x68
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
#endif

	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);
60001130:	bl	600012a0 <configure_cache>
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001134:	ldr	r2, [pc, #292]	; (6000125c <ResetHandler+0x228>)
60001136:	movs	r0, #99	; 0x63
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001138:	ldr	r3, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113a:	ldr	r1, [pc, #296]	; (60001264 <ResetHandler+0x230>)
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	str	r0, [r2, #0]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000113e:	movs	r2, #3
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001140:	str	r5, [r3, #0]
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001142:	str.w	r1, [sl, #56]	; 0x38
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001146:	str.w	r2, [r3, #-8]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000114a:	ldr	r1, [pc, #284]	; (60001268 <ResetHandler+0x234>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000114c:	ldr	r2, [pc, #284]	; (6000126c <ResetHandler+0x238>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114e:	ldr	r0, [pc, #288]	; (60001270 <ResetHandler+0x23c>)
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001154:	ldr	r3, [r1, #0]
}
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001158:	orr.w	r3, r3, #16777216	; 0x1000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
}

60001160:	ldr	r0, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001162:	str	r3, [r1, #0]
}
60001164:	ldr	r3, [r2, #0]

60001166:	ldr	r1, [pc, #276]	; (6000127c <ResetHandler+0x248>)
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
}
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]

6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001172:	bl	60001340 <usb_pll_start>
		return; // everything is as it should be  :-)
	}
}

FLASHMEM void reset_PFD()
{	
60001176:	str.w	r7, [r4, #260]	; 0x104
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
6000117a:	ldr	r0, [pc, #260]	; (60001280 <ResetHandler+0x24c>)
	}
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
6000117c:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	//PLL3:
60001184:	str.w	r8, [r4, #240]	; 0xf0
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
60001188:	bl	600015f0 <__set_arm_clock_veneer>
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

60001194:	ldr	r1, [r6, #108]	; 0x6c
	// Undo PIT timer usage by ROM startup
60001196:	ldr	r2, [pc, #236]	; (60001284 <ResetHandler+0x250>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

6000119c:	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

6000119e:	str	r1, [r6, #108]	; 0x6c
	// Undo PIT timer usage by ROM startup
600011a0:	str	r5, [r2, #0]
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_MCR = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL0 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL1 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x258>)
600011be:	str	r1, [r3, #84]	; 0x54
		// if SRTC isn't running, start it with default Jan 1, 2019
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
		SNVS_LPSRTCMR = 1546300800u >> 17;
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011ca:	ldr	r2, [pc, #188]	; (60001288 <ResetHandler+0x254>)
600011cc:	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x25c>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d6:	bl	60001630 <__startup_early_hook_veneer>
		} else if (pin == 34) {
			return (CORE_PIN34_PINREG & CORE_PIN34_BITMASK) ? 1 : 0;
		} else if (pin == 35) {
			return (CORE_PIN35_PINREG & CORE_PIN35_BITMASK) ? 1 : 0;
		} else if (pin == 36) {
			return (CORE_PIN36_PINREG & CORE_PIN36_BITMASK) ? 1 : 0;
600011da:	ldr	r3, [r4, #0]

600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	startup_early_hook();
600011e0:	bl	600013a4 <usb_init>
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e4:	bl	60001490 <analog_init>
	usb_init();
600011e8:	bl	60001638 <__pwm_init_veneer>
	analog_init();
600011ec:	bl	600014e8 <tempmon_init>
	pwm_init();
	tempmon_init();
600011f0:	bl	60001610 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]

600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	startup_late_hook();
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011fc:	bl	60001628 <____libc_init_array_veneer>
	//printf("before C++ constructors\n");
	__libc_init_array();
	//printf("after C++ constructors\n");
60001200:	bl	60001640 <__setup_veneer>
	//printf("before setup\n");
	main();
	
	while (1) ;
60001204:	bl	600015f8 <__loop_veneer>
}
60001208:	bl	60001600 <__yield_veneer>
6000120c:	b.n	60001204 <ResetHandler+0x1d0>
6000120e:	nop
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaab
60001218:	.word	0x20078000
6000121c:	.word	0x00000000
60001220:	.word	0x60001650
60001224:	.word	0x000015d0
60001228:	.word	0x20000000
6000122c:	.word	0x60002c24
60001230:	.word	0x200003b0
60001234:	.word	0x200003b0
60001238:	.word	0x200032c0
6000123c:	.word	0xe000ed88
60001240:	.word	0x20000ffc
60001244:	.word	0x000003c1
60001248:	.word	0xe000e400
6000124c:	.word	0xe000e4a0
60001250:	.word	0x400d8000
60001254:	.word	0x400fc000
60001258:	.word	0xe000ed08
6000125c:	.word	0xe000e014
60001260:	.word	0xe000e018
60001264:	.word	0x000011c9
60001268:	.word	0xe000edfc
6000126c:	.word	0x20200000
60001270:	.word	0x000012cd
60001274:	.word	0xe0001000
60001278:	.word	0xe0001004
6000127c:	.word	0x200003fc
60001280:	.word	0x23c34600
60001284:	.word	0x40084000
60001288:	.word	0x400d4000
6000128c:	.word	0x56c00000
60001290:	.word	0x20000400
60001294:	.word	0x20001000
60001298:	.word	0x2018101b
6000129c:	.word	0x13110d0c

600012a0 <configure_cache>:
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);
600012a0:	push	{r4, r5, r6, r7, lr}

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

600012a2:	ldr	r2, [pc, #100]	; (60001308 <configure_cache+0x68>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	movs	r1, #0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012a6:	ldr	r3, [pc, #100]	; (6000130c <configure_cache+0x6c>)

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

600012a8:	mov.w	lr, #16

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012ac:	ldr	r0, [pc, #96]	; (60001310 <configure_cache+0x70>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
600012ae:	movs	r4, #1
	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012b0:	ldr	r6, [pc, #96]	; (60001314 <configure_cache+0x74>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

600012b2:	ldr	r5, [pc, #100]	; (60001318 <configure_cache+0x78>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str	r1, [r0, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012b6:	ldr	r7, [pc, #100]	; (6000131c <configure_cache+0x7c>)

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

600012b8:	str.w	lr, [r2]
	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012bc:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

600012be:	str	r5, [r2, #0]
	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

600012c0:	ldr	r6, [pc, #92]	; (60001320 <configure_cache+0x80>)
	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	ldr	r5, [pc, #96]	; (60001324 <configure_cache+0x84>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	str	r7, [r3, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

600012c6:	str	r6, [r2, #0]
	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

600012c8:	ldr	r7, [pc, #92]	; (60001328 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	str	r5, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	ldr	r6, [pc, #92]	; (6000132c <configure_cache+0x8c>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

600012ce:	ldr	r5, [pc, #96]	; (60001330 <configure_cache+0x90>)
	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

600012d0:	str	r7, [r2, #0]
	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r6, [r3, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r7, [pc, #92]	; (60001334 <configure_cache+0x94>)
	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

600012d6:	str	r5, [r2, #0]
	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

600012d8:	ldr	r6, [pc, #92]	; (60001338 <configure_cache+0x98>)
	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	ldr	r5, [pc, #96]	; (6000133c <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	str	r7, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

600012de:	str	r6, [r2, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e0:	str	r5, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
600012e2:	str	r4, [r0, #0]
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

600012e4:	dsb	sy
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012e8:	isb	sy

600012ec:	str.w	r1, [r3, #432]	; 0x1b0
	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	ldr.w	r3, [r2, #-136]
600012fc:	orr.w	r3, r3, #196608	; 0x30000
60001300:	str.w	r3, [r2, #-136]
60001304:	pop	{r4, r5, r6, r7, pc}
60001306:	nop
60001308:	.word	0xe000ed9c
6000130c:	.word	0xe000eda0
60001310:	.word	0xe000ed94
60001314:	.word	0x03080025
60001318:	.word	0x00200011
6000131c:	.word	0x07020021
60001320:	.word	0x20000012
60001324:	.word	0x13080025
60001328:	.word	0x20200013
6000132c:	.word	0x130b0027
60001330:	.word	0x40000014
60001334:	.word	0x13100033
60001338:	.word	0x60000015
6000133c:	.word	0x070b002f

60001340 <usb_pll_start>:

	asm("dsb");
	asm("isb");
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
}

60001340:	push	{r4, r5, r6, r7}

FLASHMEM void usb_pll_start()
60001342:	ldr	r2, [pc, #92]	; (600013a0 <usb_pll_start+0x60>)
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
60001344:	movs	r7, #64	; 0x40
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
			printf("  wait for lock\n");
			continue;
		}
60001346:	mov.w	r1, #65536	; 0x10000
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
6000134a:	mov.w	r6, #4096	; 0x1000
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000134e:	mov.w	r5, #8192	; 0x2000

FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
60001352:	mov.w	r4, #49152	; 0xc000
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
60001356:	movw	r0, #12354	; 0x3042
	asm("isb");
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
}


FLASHMEM void usb_pll_start()
6000135a:	ldr	r3, [r2, #16]
{
	while (1) {
6000135c:	tst.w	r3, #2
60001360:	beq.n	60001370 <usb_pll_start+0x30>
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
60001362:	str	r4, [r2, #24]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001364:	str	r1, [r2, #20]
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
60001366:	str	r0, [r2, #24]
	asm("isb");
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
}


FLASHMEM void usb_pll_start()
60001368:	ldr	r3, [r2, #16]
{
	while (1) {
6000136a:	tst.w	r3, #2
6000136e:	bne.n	60001362 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
60001370:	tst.w	r3, #8192	; 0x2000
60001374:	bne.n	6000137a <usb_pll_start+0x3a>
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001376:	str	r5, [r2, #20]
			printf("  enable PLL\n");
60001378:	b.n	6000135a <usb_pll_start+0x1a>
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000137a:	tst.w	r3, #4096	; 0x1000
6000137e:	bne.n	60001384 <usb_pll_start+0x44>
			continue;
		}
60001380:	str	r6, [r2, #20]
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001382:	b.n	6000135a <usb_pll_start+0x1a>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001384:	cmp	r3, #0
60001386:	bge.n	6000135a <usb_pll_start+0x1a>
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
			printf("  wait for lock\n");
60001388:	tst.w	r3, #65536	; 0x10000
6000138c:	beq.n	60001392 <usb_pll_start+0x52>
			continue;
		}
6000138e:	str	r1, [r2, #24]
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001390:	b.n	6000135a <usb_pll_start+0x1a>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001392:	lsls	r3, r3, #25
60001394:	bmi.n	6000139a <usb_pll_start+0x5a>
			continue;
		}
60001396:	str	r7, [r2, #20]
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001398:	b.n	6000135a <usb_pll_start+0x1a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
			continue;
		}
6000139a:	pop	{r4, r5, r6, r7}
6000139c:	bx	lr
6000139e:	nop
600013a0:	.word	0x400d8000

600013a4 <usb_init>:
void (*usb_timer0_callback)(void) = NULL;
void (*usb_timer1_callback)(void) = NULL;

static void isr(void);
static void endpoint0_setup(uint64_t setupdata);
static void endpoint0_transmit(const void *data, uint32_t len, int notify);
600013a4:	ldr	r3, [pc, #192]	; (60001468 <usb_init+0xc4>)
600013a6:	movw	r2, #3937	; 0xf61
extern uint8_t usb_descriptor_buffer[]; // defined in usb_desc.c
extern const uint8_t usb_config_descriptor_480[];
extern const uint8_t usb_config_descriptor_12[];

void (*usb_timer0_callback)(void) = NULL;
void (*usb_timer1_callback)(void) = NULL;
600013aa:	push	{r4, r5, r6, lr}

static void isr(void);
static void endpoint0_setup(uint64_t setupdata);
static void endpoint0_transmit(const void *data, uint32_t len, int notify);
600013ac:	str.w	r2, [r3, #288]	; 0x120


FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
600013b0:	movw	r5, #1028	; 0x404
static void isr(void);
static void endpoint0_setup(uint64_t setupdata);
static void endpoint0_transmit(const void *data, uint32_t len, int notify);
static void endpoint0_receive(void *data, uint32_t len, int notify);
static void endpoint0_complete(void);

600013b4:	bl	60001618 <__usb_init_serialnumber_veneer>

static void run_callbacks(endpoint_t *ep);


600013b8:	ldr	r1, [pc, #176]	; (6000146c <usb_init+0xc8>)
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
600013ba:	ldr	r0, [pc, #180]	; (60001470 <usb_init+0xcc>)
static void endpoint0_complete(void);


static void run_callbacks(endpoint_t *ep);


600013bc:	ldr.w	r2, [r1, #128]	; 0x80
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	printf("USB1_TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);

600013c0:	ldr	r4, [pc, #176]	; (60001474 <usb_init+0xd0>)
static void endpoint0_complete(void);


static void run_callbacks(endpoint_t *ep);


600013c2:	orr.w	r2, r2, #3
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	printf("USB1_TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);

600013c6:	ldr	r3, [pc, #176]	; (60001478 <usb_init+0xd4>)
static void endpoint0_complete(void);


static void run_callbacks(endpoint_t *ep);


600013c8:	str.w	r2, [r1, #128]	; 0x80
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
600013cc:	str.w	r5, [r0, #352]	; 0x160
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	printf("USB1_TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);

600013d0:	ldr	r2, [r4, #0]
600013d2:	ands	r3, r2
600013d4:	cbnz	r3, 600013de <usb_init+0x3a>
	// Before programming this register, the PHY clocks must be enabled in registers
	// USBPHYx_CTRLn and CCM_ANALOG_USBPHYx_PLL_480_CTRLn.
600013d6:	ldr.w	r3, [r0, #424]	; 0x1a8
600013da:	lsls	r2, r3, #30
600013dc:	beq.n	60001414 <usb_init+0x70>

	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
	//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
600013de:	ldr	r3, [pc, #144]	; (60001470 <usb_init+0xcc>)

	// Before programming this register, the PHY clocks must be enabled in registers
	// USBPHYx_CTRLn and CCM_ANALOG_USBPHYx_PLL_480_CTRLn.

	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
600013e0:	mov.w	r1, #2147483648	; 0x80000000
600013e4:	ldr	r2, [pc, #140]	; (60001474 <usb_init+0xd0>)
600013e6:	str	r1, [r2, #52]	; 0x34
	//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
600013e8:	mov	r2, r3
	// Before programming this register, the PHY clocks must be enabled in registers
	// USBPHYx_CTRLn and CCM_ANALOG_USBPHYx_PLL_480_CTRLn.

	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
	//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
600013ea:	ldr.w	r1, [r3, #320]	; 0x140
600013ee:	orr.w	r1, r1, #2
600013f2:	str.w	r1, [r3, #320]	; 0x140
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
600013f6:	ldr.w	r3, [r2, #320]	; 0x140
600013fa:	lsls	r3, r3, #30
600013fc:	bmi.n	600013f6 <usb_init+0x52>

600013fe:	mov.w	r0, #131072	; 0x20000
60001402:	ldr	r1, [pc, #120]	; (6000147c <usb_init+0xd8>)
	// turn on PLL3, wait for 480 MHz lock?
60001404:	ldr	r3, [pc, #108]	; (60001474 <usb_init+0xd0>)
60001406:	mov.w	r2, #2147483648	; 0x80000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
	//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

6000140a:	str	r0, [r1, #0]
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
6000140c:	movs	r0, #25
	//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
	//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
6000140e:	str	r2, [r3, #56]	; 0x38
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
60001410:	bl	60001608 <__delay_veneer>
	// USBSTS	pg 3220
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
	// ENDPTSETUPSTAT  3245
60001414:	ldr	r5, [pc, #104]	; (60001480 <usb_init+0xdc>)
		delay(25);
	}
#endif
	// Device Controller Initialization, page 3161
	// USBCMD	pg 3216
	// USBSTS	pg 3220
60001416:	movs	r2, #0
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
	}
#endif
	// Device Controller Initialization, page 3161
	// USBCMD	pg 3216
60001418:	ldr	r3, [pc, #88]	; (60001474 <usb_init+0xd0>)
6000141a:	mov.w	r1, #1073741824	; 0x40000000
	// USBSTS	pg 3220
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
6000141e:	ldr	r4, [pc, #80]	; (60001470 <usb_init+0xcc>)
60001420:	movs	r6, #10
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
	}
#endif
	// Device Controller Initialization, page 3161
	// USBCMD	pg 3216
60001422:	str	r1, [r3, #56]	; 0x38
	// USBSTS	pg 3220
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
	// ENDPTSETUPSTAT  3245
60001424:	mov	r0, r5
		delay(25);
	}
#endif
	// Device Controller Initialization, page 3161
	// USBCMD	pg 3216
	// USBSTS	pg 3220
60001426:	str	r2, [r3, #0]
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
	// ENDPTSETUPSTAT  3245
60001428:	mov	r1, r2
	// USBCMD	pg 3216
	// USBSTS	pg 3220
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
6000142a:	str.w	r6, [r4, #424]	; 0x1a8
	// ENDPTSETUPSTAT  3245
6000142e:	mov.w	r2, #640	; 0x280
60001432:	bl	60001620 <__memset_veneer>
	// ENDPTPRIME	pg 3246
60001436:	mov.w	r6, #4227072	; 0x408000
	// ENDPTFLUSH	pg 3247
6000143a:	mov.w	r0, #4194304	; 0x400000
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

6000143e:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001442:	ldr	r2, [pc, #64]	; (60001484 <usb_init+0xe0>)
60001444:	ldr	r1, [pc, #64]	; (60001488 <usb_init+0xe4>)
	// USBINTR	pg 3224
	// DEVICEADDR	pg 3227
	// ENDPTLISTADDR   3229
	// USBMODE	pg 3244
	// ENDPTSETUPSTAT  3245
	// ENDPTPRIME	pg 3246
60001446:	str	r6, [r5, #0]
	// ENDPTFLUSH	pg 3247
60001448:	str	r0, [r5, #64]	; 0x40
	// ENDPTSTAT	pg 3247
6000144a:	str.w	r5, [r4, #344]	; 0x158
6000144e:	str.w	r1, [r2, #516]	; 0x204
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

60001452:	str.w	r3, [r4, #328]	; 0x148
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
60001456:	ldr	r2, [pc, #52]	; (6000148c <usb_init+0xe8>)
60001458:	mov.w	r1, #131072	; 0x20000

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
6000145c:	movs	r3, #1
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
6000145e:	str	r1, [r2, #0]

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001460:	str.w	r3, [r4, #320]	; 0x140
60001464:	pop	{r4, r5, r6, pc}
60001466:	nop
60001468:	.word	0x400d8000
6000146c:	.word	0x400fc000
60001470:	.word	0x402e0000
60001474:	.word	0x400d9000
60001478:	.word	0x001e1c00
6000147c:	.word	0xe000e28c
60001480:	.word	0x20003000
60001484:	.word	0x20001000
60001488:	.word	0x00000831
6000148c:	.word	0xe000e10c

60001490 <analog_init>:
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
60001490:	ldr	r3, [pc, #68]	; (600014d8 <analog_init+0x48>)
	mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(3); // async clock
#else
	uint32_t clock = F_BUS;
	if (clock > MAX_ADC_CLOCK*8) {
		mode |= ADC_CFG_ADIV(3) | ADC_CFG_ADICLK(1); // use IPG/16
	} else if (clock > MAX_ADC_CLOCK*4) {
60001492:	ldr	r1, [pc, #72]	; (600014dc <analog_init+0x4c>)
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
60001494:	ldr	r0, [r3, #108]	; 0x6c
	if (clock > MAX_ADC_CLOCK*8) {
		mode |= ADC_CFG_ADIV(3) | ADC_CFG_ADICLK(1); // use IPG/16
	} else if (clock > MAX_ADC_CLOCK*4) {
		mode |= ADC_CFG_ADIV(2) | ADC_CFG_ADICLK(1); // use IPG/8
	} else if (clock > MAX_ADC_CLOCK*2) {
		mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(1); // use IPG/4
60001496:	mov	r2, r1
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
60001498:	orr.w	r0, r0, #196608	; 0x30000
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
6000149c:	push	{r4, r5}
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
6000149e:	str	r0, [r3, #108]	; 0x6c
	mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(3); // async clock
#else
	uint32_t clock = F_BUS;
	if (clock > MAX_ADC_CLOCK*8) {
		mode |= ADC_CFG_ADIV(3) | ADC_CFG_ADICLK(1); // use IPG/16
	} else if (clock > MAX_ADC_CLOCK*4) {
600014a0:	movw	r5, #1719	; 0x6b7
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
600014a4:	ldr	r0, [r3, #108]	; 0x6c
#else
	uint32_t clock = F_BUS;
	if (clock > MAX_ADC_CLOCK*8) {
		mode |= ADC_CFG_ADIV(3) | ADC_CFG_ADICLK(1); // use IPG/16
	} else if (clock > MAX_ADC_CLOCK*4) {
		mode |= ADC_CFG_ADIV(2) | ADC_CFG_ADICLK(1); // use IPG/8
600014a6:	movs	r4, #160	; 0xa0
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
600014a8:	orr.w	r0, r0, #768	; 0x300
600014ac:	str	r0, [r3, #108]	; 0x6c
	mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(3); // async clock
#else
	uint32_t clock = F_BUS;
	if (clock > MAX_ADC_CLOCK*8) {
		mode |= ADC_CFG_ADIV(3) | ADC_CFG_ADICLK(1); // use IPG/16
	} else if (clock > MAX_ADC_CLOCK*4) {
600014ae:	str	r5, [r1, #68]	; 0x44
		mode |= ADC_CFG_ADIV(2) | ADC_CFG_ADICLK(1); // use IPG/8
600014b0:	str	r4, [r1, #72]	; 0x48
	} else if (clock > MAX_ADC_CLOCK*2) {
		mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(1); // use IPG/4
600014b2:	ldr	r3, [r2, #72]	; 0x48
600014b4:	lsls	r3, r3, #24
600014b6:	bmi.n	600014b2 <analog_init+0x22>
	} else if (clock > MAX_ADC_CLOCK) {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(1); // use IPG/2
	} else {
600014b8:	ldr	r3, [pc, #36]	; (600014e0 <analog_init+0x50>)
600014ba:	movw	r0, #1719	; 0x6b7
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
600014be:	movs	r1, #160	; 0xa0
	}
#endif
600014c0:	ldr	r2, [pc, #24]	; (600014dc <analog_init+0x4c>)
		mode |= ADC_CFG_ADIV(2) | ADC_CFG_ADICLK(1); // use IPG/8
	} else if (clock > MAX_ADC_CLOCK*2) {
		mode |= ADC_CFG_ADIV(1) | ADC_CFG_ADICLK(1); // use IPG/4
	} else if (clock > MAX_ADC_CLOCK) {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(1); // use IPG/2
	} else {
600014c2:	str	r0, [r3, #68]	; 0x44
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
600014c4:	str	r1, [r3, #72]	; 0x48
	}
#endif
600014c6:	ldr	r3, [r2, #72]	; 0x48
600014c8:	ands.w	r3, r3, #128	; 0x80
600014cc:	bne.n	600014c6 <analog_init+0x36>
	//ADC1
600014ce:	ldr	r2, [pc, #20]	; (600014e4 <analog_init+0x54>)
600014d0:	strb	r3, [r2, #0]
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d2:	pop	{r4, r5}
600014d4:	bx	lr
600014d6:	nop
600014d8:	.word	0x400fc000
600014dc:	.word	0x400c4000
600014e0:	.word	0x400c8000
600014e4:	.word	0x20000404

600014e8 <tempmon_init>:
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
  // Notes:
600014e8:	ldr	r2, [pc, #216]	; (600015c4 <tempmon_init+0xdc>)
  //    TEMPMON_TEMPSENSE0 &= ~0x2U;  Stops temp monitoring
  //    TEMPMON_TEMPSENSE0 |= 0x1U;   Powers down temp monitoring 
  uint32_t calibrationData;
600014ea:	movs	r0, #3
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
600014ec:	ldr	r1, [pc, #216]	; (600015c8 <tempmon_init+0xe0>)
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
  // Notes:
600014f2:	ldr	r3, [r2, #0]
600014f4:	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
600014f8:	push	{r4, r5, r6, r7, lr}
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
  // Notes:
600014fa:	str	r3, [r2, #0]
  //    TEMPMON_TEMPSENSE0 &= ~0x2U;  Stops temp monitoring
  //    TEMPMON_TEMPSENSE0 |= 0x1U;   Powers down temp monitoring 
  uint32_t calibrationData;
600014fc:	str.w	r0, [r2, #144]	; 0x90
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
60001500:	ldr.w	r3, [r1, #224]	; 0xe0
  //first power on the temperature sensor - no register change
60001504:	ldr.w	lr, [pc, #212]	; 600015dc <tempmon_init+0xf4>
60001508:	uxtb	r4, r3
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150a:	ubfx	r0, r3, #8, #12

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000150e:	ldr	r7, [pc, #188]	; (600015cc <tempmon_init+0xe4>)
60001510:	rsb	r3, r0, r3, lsr #20
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
60001514:	vmov	s15, r4
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	sub.w	r1, r4, #85	; 0x55
  //    TEMPMON_TEMPSENSE0 |= 0x1U;   Powers down temp monitoring 
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
6000151c:	str.w	r4, [lr]
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
60001520:	vcvt.f32.s32	s14, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001524:	add.w	r4, r3, r3, lsl #2
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	vmov	s15, r0
6000152c:	mul.w	r1, r3, r1
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001530:	str	r3, [r7, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001532:	add.w	r3, r3, r3, lsl #6
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001536:	vcvt.f32.s32	s10, s15
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000153a:	vmov	s15, r1
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000153e:	subs	r1, r1, r4
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
60001540:	vsub.f32	s13, s14, s13
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001544:	vcvt.f32.u32	s14, s15
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
60001548:	ldr	r5, [pc, #132]	; (600015d0 <tempmon_init+0xe8>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

6000154a:	vmov	s15, r1
    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154e:	add	r3, r1
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
60001550:	vstr	s13, [r5]
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

60001554:	vcvt.f32.u32	s15, s15
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001558:	ldr	r6, [pc, #120]	; (600015d4 <tempmon_init+0xec>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000155a:	vdiv.f32	s11, s14, s13
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

6000155e:	ldr	r1, [pc, #120]	; (600015d8 <tempmon_init+0xf0>)
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001560:	str	r0, [r6, #0]
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001562:	ldr	r0, [r2, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

60001564:	vdiv.f32	s12, s15, s13
    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001568:	vmov	s15, r3
6000156c:	vcvt.f32.u32	s15, s15
60001570:	vdiv.f32	s14, s15, s13
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001574:	vadd.f32	s11, s11, s10
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

60001578:	vadd.f32	s13, s12, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000157c:	vcvt.u32.f32	s11, s11
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

60001580:	vcvt.u32.f32	s13, s13
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001584:	vmov	r3, s11
60001588:	orr.w	r3, r0, r3, lsl #20
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

6000158c:	vmov	r0, s13
    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001590:	vadd.f32	s15, s14, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001594:	str	r3, [r2, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

60001596:	and.w	r1, r1, r0, lsl #16
6000159a:	ldr.w	r3, [r2, #272]	; 0x110
    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159e:	vcvt.u32.f32	s15, s15
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

600015a2:	orrs	r3, r1
600015a4:	str.w	r3, [r2, #272]	; 0x110
    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a8:	vmov	r3, s15
600015ac:	ldr.w	r1, [r2, #272]	; 0x110
600015b0:	ubfx	r3, r3, #0, #12
600015b4:	orrs	r3, r1
600015b6:	str.w	r3, [r2, #272]	; 0x110
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015ba:	ldr	r3, [r2, #0]
600015bc:	orr.w	r3, r3, #2
600015c0:	str	r3, [r2, #0]
600015c2:	pop	{r4, r5, r6, r7, pc}
600015c4:	.word	0x400d8180
600015c8:	.word	0x401f4400
600015cc:	.word	0x20000410
600015d0:	.word	0x2000040c
600015d4:	.word	0x20000414
600015d8:	.word	0x0fff0000
600015dc:	.word	0x20000408

600015e0 <_init>:
600015e0:	push	{r3, r4, r5, r6, r7, lr}
600015e2:	nop
600015e4:	pop	{r3, r4, r5, r6, r7}
600015e6:	pop	{r3}
600015e8:	mov	lr, r3
600015ea:	bx	lr
600015ec:			; <UNDEFINED> instruction: 0xffffffff

600015f0 <__set_arm_clock_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__set_arm_clock_veneer+0x4>
600015f4:	.word	0x0000046d

600015f8 <__loop_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__loop_veneer+0x4>
600015fc:	.word	0x00000085

60001600 <__yield_veneer>:
60001600:	ldr.w	pc, [pc]	; 60001604 <__yield_veneer+0x4>
60001604:	.word	0x00001049

60001608 <__delay_veneer>:
60001608:	ldr.w	pc, [pc]	; 6000160c <__delay_veneer+0x4>
6000160c:	.word	0x00000f31

60001610 <__startup_late_hook_veneer>:
60001610:	ldr.w	pc, [pc]	; 60001614 <__startup_late_hook_veneer+0x4>
60001614:	.word	0x000003dd

60001618 <__usb_init_serialnumber_veneer>:
60001618:	ldr.w	pc, [pc]	; 6000161c <__usb_init_serialnumber_veneer+0x4>
6000161c:	.word	0x00000ff1

60001620 <__memset_veneer>:
60001620:	ldr.w	pc, [pc]	; 60001624 <__memset_veneer+0x4>
60001624:	.word	0x00001525

60001628 <____libc_init_array_veneer>:
60001628:	ldr.w	pc, [pc]	; 6000162c <____libc_init_array_veneer+0x4>
6000162c:	.word	0x000014d5

60001630 <__startup_early_hook_veneer>:
60001630:	ldr.w	pc, [pc]	; 60001634 <__startup_early_hook_veneer+0x4>
60001634:	.word	0x000003d9

60001638 <__pwm_init_veneer>:
60001638:	ldr.w	pc, [pc]	; 6000163c <__pwm_init_veneer+0x4>
6000163c:	.word	0x00000089

60001640 <__setup_veneer>:
60001640:	ldr.w	pc, [pc]	; 60001644 <__setup_veneer+0x4>
60001644:	.word	0x0000007d

60001648 <__init_array_start>:
60001648:	.word	0x00000045

6000164c <__init_array_end>:
6000164c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
	//		   This bit would also be cleared by hardware when state machine
	//		   is hazard region for which adding a dTD to a primed endpoint
	//		    may go unrecognized.

/*struct endpoint_struct {
	uint32_t config;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
}


float tempmonGetTemp(void)
{
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	.word	0xbd107023
      38:	lsls	r0, r6, #14
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
    uint32_t nmeas;
      40:	.word	0x000015d4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
    for (nn = 0; nn < 2000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
      5c:	.word	0xd0fb2b00
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	lsls	r4, r6, #14
      6e:	.short	0x2000
      70:	asrs	r4, r2, #23
      72:	.short	0x0000
      74:	lsls	r0, r6, #14
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <setup>:

Mode mode = Mode::TROT;

void setup() {
  Serial.begin(600000000);
  pinMode(led_pin, OUTPUT);
      7c:	.word	0x200d2101
      80:	b.w	340 <pinMode>

00000084 <loop>:
  

}


void loop() {
      84:	bx	lr
      86:	.short	0xbf00

00000088 <pwm_init>:
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      88:	ldr	r0, [pc, #656]	; (31c <pwm_init+0x294>)
      8a:	.short	0xf04f
      8c:	lsrs	r7, r1, #16

    } else if (num >= 4) {
      8e:	.short	0x4ba4
      mode |= ADC_CFG_AVGS(0);
      mode1 |= ADC_CFG_AVGS(0);

    } else {
      90:	ldr	r2, [r0, #120]	; 0x78
      92:	.short	0xf442
      94:	lsls	r7, r7, #9
      96:	.short	0xb5f0
      98:	str	r2, [r0, #120]	; 0x78
      9a:	movs	r5, #0

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
      9c:	.word	0x2080f8d0
      a0:	mov.w	r6, #61440	; 0xf000
{
      a4:	.word	0xf44f4c9f
      a8:	ldr	r6, [pc, #384]	; (22c <pwm_init+0x1a4>)
      aa:	.short	0x4629
      ac:	mov.w	r7, #1024	; 0x400
      b0:	orrs	r4, r2
      b2:	mov	r2, r5
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5);
      b4:	str.w	r4, [r0, #128]	; 0x80
      b8:	.word	0x618cf8a3
      bc:	movw	r6, #33464	; 0x82b8
      c0:	.word	0xc18ef8a3
	uint32_t prescale = 0;
      c4:	strh.w	r5, [r3, #400]	; 0x190
      c8:	ldrh.w	r0, [r3, #392]	; 0x188
      cc:	uxth	r0, r0
      ce:	orr.w	r0, r0, #240	; 0xf0
      d2:	strh.w	r0, [r3, #392]	; 0x188
      d6:	add.w	r0, r1, r1, lsl #1
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
	if (high >= modulo - 1) high = modulo - 2;

	//printf(" modulo=%lu\n", modulo);
      da:	ldr	r3, [pc, #580]	; (320 <pwm_init+0x298>)
	//printf(" high=%lu\n", high);
      dc:	adds	r1, #1
      de:	movs	r5, #0
      e0:	lsls	r0, r0, #5
      e2:	mov	r4, r3
	uint32_t low = modulo - high; // low must 2 or higher
      e4:	cmp	r1, #4
      e6:	add	r3, r0
      e8:	strh.w	lr, [r3, #4]
	//printf(" low=%lu\n", low);
      ec:	strh	r7, [r3, #6]
      ee:	strh	r2, [r3, #34]	; 0x22
      f0:	strh	r2, [r3, #48]	; 0x30
      f2:	strh	r2, [r3, #2]
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
      f4:	strh	r2, [r3, #10]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
      f6:	strh	r6, [r3, #14]
		p->CH[i].CMPLD1 = 0;
      f8:	strh	r2, [r3, #18]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
      fa:	strh	r2, [r3, #22]
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
      fc:	strh	r2, [r3, #26]
	}
      fe:	strh	r2, [r3, #30]
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     100:	bne.n	d6 <pwm_init+0x4e>
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     102:	ldrh.w	r0, [r4, #392]	; 0x188
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     106:	mov.w	ip, #15
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     10a:	ldr	r3, [pc, #540]	; (328 <pwm_init+0x2a0>)
     10c:	mov.w	r6, #61440	; 0xf000
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     110:	uxth	r0, r0
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     112:	mov	r1, r5
	for (i=0; i < 4; i++) {
     114:	mov.w	r7, #57344	; 0xe000
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     118:	mov	r2, r5
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     11a:	orr.w	r0, r0, ip
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     11e:	mov.w	lr, #1024	; 0x400
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     122:	strh.w	r0, [r4, #392]	; 0x188
void pwm_init(void)
     126:	ldrh.w	r0, [r4, #392]	; 0x188
     12a:	uxth	r0, r0
     12c:	orr.w	r0, r0, #3840	; 0xf00
     130:	strh.w	r0, [r4, #392]	; 0x188
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     134:	strh.w	r6, [r3, #396]	; 0x18c
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     138:	movw	r6, #33464	; 0x82b8
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     13c:	strh.w	ip, [r3, #398]	; 0x18e
{
     140:	strh.w	r5, [r3, #400]	; 0x190
	int i;
     144:	ldrh.w	r0, [r3, #392]	; 0x188
     148:	uxth	r0, r0
     14a:	orr.w	r0, r0, #240	; 0xf0
     14e:	strh.w	r0, [r3, #392]	; 0x188
     152:	add.w	r0, r1, r1, lsl #1
     156:	ldr	r3, [pc, #464]	; (328 <pwm_init+0x2a0>)

     158:	adds	r1, #1
	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     15a:	movs	r5, #0
     15c:	lsls	r0, r0, #5
     15e:	mov	r4, r3
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     160:	cmp	r1, #4
     162:	add	r3, r0
	for (i=0; i < 4; i++) {
     164:	strh	r7, [r3, #4]
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     166:	strh.w	lr, [r3, #6]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     16a:	strh	r2, [r3, #34]	; 0x22
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     16c:	strh	r2, [r3, #48]	; 0x30
		// COMP must be less than LOAD - otherwise output is always low
     16e:	strh	r2, [r3, #2]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     170:	strh	r2, [r3, #10]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     172:	strh	r6, [r3, #14]
		p->CH[i].CMPLD1 = 0;
     174:	strh	r2, [r3, #18]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     176:	strh	r2, [r3, #22]
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
     178:	strh	r2, [r3, #26]
	}
     17a:	strh	r2, [r3, #30]
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     17c:	bne.n	152 <pwm_init+0xca>
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     17e:	ldrh.w	r0, [r4, #392]	; 0x188
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     182:	mov.w	ip, #15
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     186:	ldr	r3, [pc, #420]	; (32c <pwm_init+0x2a4>)
     188:	mov.w	r6, #61440	; 0xf000
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     18c:	uxth	r0, r0
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     18e:	mov	r1, r5
	for (i=0; i < 4; i++) {
     190:	mov.w	r7, #57344	; 0xe000
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     194:	mov	r2, r5
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     196:	orr.w	r0, r0, ip
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     19a:	mov.w	lr, #1024	; 0x400
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     19e:	strh.w	r0, [r4, #392]	; 0x188
void pwm_init(void)
     1a2:	ldrh.w	r0, [r4, #392]	; 0x188
     1a6:	uxth	r0, r0
     1a8:	orr.w	r0, r0, #3840	; 0xf00
     1ac:	strh.w	r0, [r4, #392]	; 0x188
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     1b0:	strh.w	r6, [r3, #396]	; 0x18c
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     1b4:	movw	r6, #33464	; 0x82b8
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     1b8:	strh.w	ip, [r3, #398]	; 0x18e
{
     1bc:	strh.w	r5, [r3, #400]	; 0x190
	int i;
     1c0:	ldrh.w	r0, [r3, #392]	; 0x188
     1c4:	uxth	r0, r0
     1c6:	orr.w	r0, r0, #240	; 0xf0
     1ca:	strh.w	r0, [r3, #392]	; 0x188
     1ce:	add.w	r0, r1, r1, lsl #1
     1d2:	ldr	r3, [pc, #344]	; (32c <pwm_init+0x2a4>)

     1d4:	adds	r1, #1
	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     1d6:	movs	r5, #0
     1d8:	lsls	r0, r0, #5
     1da:	mov	r4, r3
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     1dc:	cmp	r1, #4
     1de:	add	r3, r0
	for (i=0; i < 4; i++) {
     1e0:	strh	r7, [r3, #4]
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     1e2:	strh.w	lr, [r3, #6]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     1e6:	strh	r2, [r3, #34]	; 0x22
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     1e8:	strh	r2, [r3, #48]	; 0x30
		// COMP must be less than LOAD - otherwise output is always low
     1ea:	strh	r2, [r3, #2]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     1ec:	strh	r2, [r3, #10]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     1ee:	strh	r6, [r3, #14]
		p->CH[i].CMPLD1 = 0;
     1f0:	strh	r2, [r3, #18]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     1f2:	strh	r2, [r3, #22]
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
     1f4:	strh	r2, [r3, #26]
	}
     1f6:	strh	r2, [r3, #30]
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     1f8:	bne.n	1ce <pwm_init+0x146>
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     1fa:	ldrh.w	r0, [r4, #392]	; 0x188
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     1fe:	mov.w	ip, #15
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     202:	ldr	r3, [pc, #300]	; (330 <pwm_init+0x2a8>)
     204:	mov.w	r7, #61440	; 0xf000
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     208:	uxth	r0, r0
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     20a:	mov	r1, r5
	for (i=0; i < 4; i++) {
     20c:	mov.w	r6, #57344	; 0xe000
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     210:	mov	r2, r5
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     212:	orr.w	r0, r0, ip
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     216:	mov.w	lr, #1024	; 0x400
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     21a:	strh.w	r0, [r4, #392]	; 0x188
void pwm_init(void)
     21e:	ldrh.w	r0, [r4, #392]	; 0x188
     222:	uxth	r0, r0
     224:	orr.w	r0, r0, #3840	; 0xf00
     228:	strh.w	r0, [r4, #392]	; 0x188
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

     22c:	strh.w	r7, [r3, #396]	; 0x18c
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     230:	movw	r7, #33464	; 0x82b8
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
     234:	strh.w	ip, [r3, #398]	; 0x18e
{
     238:	strh.w	r5, [r3, #400]	; 0x190
	int i;
     23c:	ldrh.w	r0, [r3, #392]	; 0x188
     240:	uxth	r0, r0
     242:	orr.w	r0, r0, #240	; 0xf0
     246:	strh.w	r0, [r3, #392]	; 0x188
     24a:	add.w	r0, r1, r1, lsl #1
     24e:	ldr	r3, [pc, #224]	; (330 <pwm_init+0x2a8>)

     250:	adds	r1, #1
     252:	lsls	r0, r0, #5
     254:	mov	r4, r3
     256:	cmp	r1, #4
     258:	add	r3, r0
	for (i=0; i < 4; i++) {
     25a:	strh	r6, [r3, #4]
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
     25c:	strh.w	lr, [r3, #6]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     260:	strh	r2, [r3, #34]	; 0x22
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     262:	strh	r2, [r3, #48]	; 0x30
		// COMP must be less than LOAD - otherwise output is always low
     264:	strh	r2, [r3, #2]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     266:	strh	r2, [r3, #10]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     268:	strh	r7, [r3, #14]
		p->CH[i].CMPLD1 = 0;
     26a:	strh	r2, [r3, #18]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     26c:	strh	r2, [r3, #22]
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
     26e:	strh	r2, [r3, #26]
	}
     270:	strh	r2, [r3, #30]
}

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

     272:	bne.n	24a <pwm_init+0x1c2>
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     274:	ldrh.w	r3, [r4, #392]	; 0x188
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
     278:	movs	r7, #15
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     27a:	movs	r2, #0
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
     27c:	movw	r6, #4097	; 0x1001
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     280:	uxth	r3, r3
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     282:	movw	lr, #24000	; 0x5dc0
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     286:	mov	r1, r2
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}


     288:	movw	r5, #12326	; 0x3026
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

     28c:	orrs	r3, r7
     28e:	strh.w	r3, [r4, #392]	; 0x188
void pwm_init(void)
     292:	ldrh.w	r3, [r4, #392]	; 0x188
     296:	uxth	r3, r3
     298:	orr.w	r3, r3, #3840	; 0xf00
     29c:	strh.w	r3, [r4, #392]	; 0x188
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     2a0:	lsls	r0, r2, #5
     2a2:	ldr	r3, [pc, #144]	; (334 <pwm_init+0x2ac>)
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2a4:	adds	r2, #1
	flexpwm_init(&IMXRT_FLEXPWM2);
     2a6:	add	r3, r0
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2a8:	cmp	r2, #4
	flexpwm_init(&IMXRT_FLEXPWM2);
     2aa:	strh	r1, [r3, #12]
	flexpwm_init(&IMXRT_FLEXPWM3);
     2ac:	strh	r1, [r3, #10]
	flexpwm_init(&IMXRT_FLEXPWM4);
     2ae:	strh	r7, [r3, #14]
	quadtimer_init(&IMXRT_TMR1);
     2b0:	strh	r6, [r3, #20]
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     2b2:	strh.w	lr, [r3, #6]
}
     2b6:	strh	r1, [r3, #0]

     2b8:	strh	r1, [r3, #16]

     2ba:	strh	r5, [r3, #12]
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2bc:	bne.n	2a0 <pwm_init+0x218>
     2be:	movs	r2, #0
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
     2c0:	movs	r7, #15
	quadtimer_init(&IMXRT_TMR1);
     2c2:	movw	r6, #4097	; 0x1001
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     2c6:	movw	r5, #24000	; 0x5dc0
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     2ca:	mov	r1, r2
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}


     2cc:	movw	r4, #12326	; 0x3026
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     2d0:	lsls	r0, r2, #5
     2d2:	ldr	r3, [pc, #100]	; (338 <pwm_init+0x2b0>)
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2d4:	adds	r2, #1
	flexpwm_init(&IMXRT_FLEXPWM2);
     2d6:	add	r3, r0
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2d8:	cmp	r2, #4
	flexpwm_init(&IMXRT_FLEXPWM2);
     2da:	strh	r1, [r3, #12]
	flexpwm_init(&IMXRT_FLEXPWM3);
     2dc:	strh	r1, [r3, #10]
	flexpwm_init(&IMXRT_FLEXPWM4);
     2de:	strh	r7, [r3, #14]
	quadtimer_init(&IMXRT_TMR1);
     2e0:	strh	r6, [r3, #20]
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     2e2:	strh	r5, [r3, #6]
}
     2e4:	strh	r1, [r3, #0]

     2e6:	strh	r1, [r3, #16]

     2e8:	strh	r4, [r3, #12]
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     2ea:	bne.n	2d0 <pwm_init+0x248>
     2ec:	movs	r2, #0
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
     2ee:	movs	r7, #15
	quadtimer_init(&IMXRT_TMR1);
     2f0:	movw	r6, #4097	; 0x1001
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     2f4:	movw	r5, #24000	; 0x5dc0
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     2f8:	mov	r1, r2
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}


     2fa:	movw	r4, #12326	; 0x3026
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
	flexpwm_init(&IMXRT_FLEXPWM2);
     2fe:	lsls	r0, r2, #5
     300:	ldr	r3, [pc, #56]	; (33c <pwm_init+0x2b4>)
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     302:	adds	r2, #1
	flexpwm_init(&IMXRT_FLEXPWM2);
     304:	add	r3, r0
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     306:	cmp	r2, #4
	flexpwm_init(&IMXRT_FLEXPWM2);
     308:	strh	r1, [r3, #12]
	flexpwm_init(&IMXRT_FLEXPWM3);
     30a:	strh	r1, [r3, #10]
	flexpwm_init(&IMXRT_FLEXPWM4);
     30c:	strh	r7, [r3, #14]
	quadtimer_init(&IMXRT_TMR1);
     30e:	strh	r6, [r3, #20]
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
     310:	strh	r5, [r3, #6]
}
     312:	strh	r1, [r3, #0]

     314:	strh	r1, [r3, #16]

     316:	strh	r4, [r3, #12]
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     318:	bne.n	2fe <pwm_init+0x276>
	*xbar = val;
#else
	// does not work, seems 8 bit access is not allowed
	volatile uint8_t *xbar = (volatile uint8_t *)XBARA1_SEL0;
	xbar[output] = input;
#endif
     31a:	pop	{r4, r5, r6, r7, pc}
     31c:	.word	0x400fc000
     320:	.word	0x403dc000
     324:	.word	0xfc030000
     328:	.word	0x403e0000
     32c:	.word	0x403e4000
     330:	.word	0x403e8000
     334:	.word	0x401dc000
     338:	.word	0x401e0000
     33c:	.word	0x401e4000

00000340 <pinMode>:
		// pin is configured for input mode
		// writing controls pullup resistor

		// TODO....
	}
}
     340:	cmp	r0, #39	; 0x27
     342:	bhi.n	37e <pinMode+0x3e>

     344:	lsls	r0, r0, #4
     346:	ldr	r2, [pc, #104]	; (3b0 <pinMode+0x70>)
uint8_t digitalRead(uint8_t pin)
     348:	cmp	r1, #1
		// writing controls pullup resistor

		// TODO....
	}
}

     34a:	add.w	r3, r2, r0

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

     34e:	ldr	r0, [r2, r0]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// writing controls pullup resistor

     350:	push	{r4}
		// TODO....
	}
}

uint8_t digitalRead(uint8_t pin)
     352:	beq.n	380 <pinMode+0x40>
     354:	cmp	r1, #4
     356:	beq.n	380 <pinMode+0x40>

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

     358:	ldr	r4, [r3, #12]
     35a:	ldr	r2, [r0, #4]
     35c:	bic.w	r2, r2, r4
     360:	str	r2, [r0, #4]
void pinMode(uint8_t pin, uint8_t mode)
{
     362:	ldr	r2, [r3, #8]
	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
     364:	cbz	r1, 3a2 <pinMode+0x62>
{
	const struct digital_pin_bitband_and_config_table_struct *p;
     366:	cmp	r1, #2
     368:	beq.n	3a8 <pinMode+0x68>

	if (pin >= CORE_NUM_DIGITAL) return;
     36a:	cmp	r1, #3
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
     36c:	ldr	r3, [r3, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     36e:	ldr.w	r4, [sp], #4
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     372:	ite	eq
     374:	ldreq	r1, [pc, #60]	; (3b4 <pinMode+0x74>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     376:	ldrne	r1, [pc, #64]	; (3b8 <pinMode+0x78>)
     378:	str	r1, [r2, #0]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
     37a:	movs	r2, #21
     37c:	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     37e:	bx	lr
		// TODO....
	}
}

uint8_t digitalRead(uint8_t pin)
{
     380:	ldr	r2, [r3, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
     382:	cmp	r1, #1
		// TODO....
	}
}

uint8_t digitalRead(uint8_t pin)
{
     384:	ldr	r4, [r0, #4]
     386:	orr.w	r2, r2, r4
     38a:	str	r2, [r0, #4]
	const struct digital_pin_bitband_and_config_table_struct *p;

     38c:	ldr	r2, [r3, #8]
	}
}

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
     38e:	beq.n	3a2 <pinMode+0x62>

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
     390:	movw	r1, #2104	; 0x838
     394:	str	r1, [r2, #0]
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
     396:	ldr	r3, [r3, #4]
     398:	movs	r2, #21
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     39a:	ldr.w	r4, [sp], #4
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
     39e:	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     3a0:	bx	lr
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     3a2:	movs	r1, #56	; 0x38
     3a4:	str	r1, [r2, #0]
     3a6:	b.n	396 <pinMode+0x56>
	const struct digital_pin_bitband_and_config_table_struct *p;

     3a8:	ldr	r1, [pc, #16]	; (3bc <pinMode+0x7c>)
     3aa:	str	r1, [r2, #0]
     3ac:	b.n	396 <pinMode+0x56>
     3ae:	nop
     3b0:	.word	0x20000000
     3b4:	.word	0x00013038
     3b8:	.word	0x00010038
     3bc:	.word	0x0001f038

000003c0 <unused_interrupt_vector>:
//  R2
//  R1
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
     3c0:	movs	r0, #4
     3c2:	mov	r1, lr
     3c4:	tst	r0, r1
     3c6:	beq.n	3d0 <_MSP>
     3c8:	mrs	r0, PSP
     3cc:	b.w	3e0 <HardFault_HandlerC>

000003d0 <_MSP>:
     3d0:	mrs	r0, MSP
     3d4:	b.w	3e0 <HardFault_HandlerC>

000003d8 <startup_default_early_hook>:
         "BEQ _MSP \n"
         "MRS R0, PSP \n"
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
     3d8:	bx	lr
     3da:	nop

000003dc <startup_default_late_hook>:
uint32_t set_arm_clock(uint32_t frequency); // clockspeed.c
extern void __libc_init_array(void); // C++ standard library


extern int main (void);
void startup_default_early_hook(void) {}
     3dc:	bx	lr
     3de:	nop

000003e0 <HardFault_HandlerC>:
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     3e0:	ldr	r3, [pc, #108]	; (450 <HardFault_HandlerC+0x70>)
  }
  printf(" _DFSR ::  %x\n", _DFSR);
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif
     3e2:	movs	r1, #5
     3e4:	ldr	r2, [pc, #108]	; (454 <HardFault_HandlerC+0x74>)

     3e6:	movs	r0, #56	; 0x38
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}

__attribute__((weak))
     3e8:	push	{r4, r5, lr}
  }
  printf(" _DFSR ::  %x\n", _DFSR);
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif
     3ea:	str.w	r1, [r2, #328]	; 0x148

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     3ee:	movs	r1, #8
  printf(" _DFSR ::  %x\n", _DFSR);
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

     3f0:	str.w	r0, [r2, #824]	; 0x338
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}

__attribute__((weak))
     3f4:	sub	sp, #12
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     3f6:	ldr	r2, [r3, #4]
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     3f8:	ldr	r4, [pc, #92]	; (458 <HardFault_HandlerC+0x78>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     3fa:	orrs	r2, r1
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     3fc:	ldr	r0, [pc, #92]	; (45c <HardFault_HandlerC+0x7c>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     3fe:	str	r2, [r3, #4]
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     400:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_GDIR |= (1 << 3);
     404:	str.w	r1, [r3, #136]	; 0x88
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     408:	ldr	r3, [r4, #0]
     40a:	cmp	r3, r0
     40c:	bls.n	414 <HardFault_HandlerC+0x34>

     40e:	ldr	r0, [pc, #80]	; (460 <HardFault_HandlerC+0x80>)
     410:	bl	46c <set_arm_clock>
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
     414:	ldr	r5, [pc, #56]	; (450 <HardFault_HandlerC+0x70>)
     416:	movs	r4, #8
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     418:	movs	r0, #0
     41a:	ldr	r2, [pc, #72]	; (464 <HardFault_HandlerC+0x84>)
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     41c:	ldr	r1, [pc, #72]	; (468 <HardFault_HandlerC+0x88>)
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
     41e:	str.w	r4, [r5, #132]	; 0x84
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     422:	str	r0, [sp, #4]
     424:	ldr	r3, [sp, #4]
     426:	cmp	r3, r2
     428:	bhi.n	436 <HardFault_HandlerC+0x56>
     42a:	ldr	r3, [sp, #4]
     42c:	adds	r3, #1
     42e:	str	r3, [sp, #4]
     430:	ldr	r3, [sp, #4]
     432:	cmp	r3, r2
     434:	bls.n	42a <HardFault_HandlerC+0x4a>
    // digitalWrite(13, HIGH);
     436:	str.w	r4, [r5, #136]	; 0x88
    for (nn = 0; nn < 2000000/2; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     43a:	str	r0, [sp, #4]
     43c:	ldr	r3, [sp, #4]
     43e:	cmp	r3, r1
     440:	bhi.n	41e <HardFault_HandlerC+0x3e>
     442:	ldr	r3, [sp, #4]
     444:	adds	r3, #1
     446:	str	r3, [sp, #4]
     448:	ldr	r3, [sp, #4]
     44a:	cmp	r3, r1
     44c:	bls.n	442 <HardFault_HandlerC+0x62>
     44e:	b.n	41e <HardFault_HandlerC+0x3e>
     450:	.word	0x401bc000
     454:	.word	0x401f8000
     458:	.word	0x200002f0
     45c:	.word	0x23c345ff
     460:	.word	0x11e1a300
     464:	.word	0x000f423f
     468:	.word	0x0089543f

0000046c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     46c:	ldr	r2, [pc, #560]	; (6a0 <set_arm_clock+0x234>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     46e:	ldr	r3, [pc, #564]	; (6a4 <set_arm_clock+0x238>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     470:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     472:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     476:	ldr	r5, [pc, #560]	; (6a8 <set_arm_clock+0x23c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     478:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     47a:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     47c:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     47e:	bls.n	4bc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     480:	ldr	r3, [pc, #552]	; (6ac <set_arm_clock+0x240>)
     482:	cmp	r0, r3
     484:	bls.w	68a <set_arm_clock+0x21e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     488:	ldr	r3, [pc, #548]	; (6b0 <set_arm_clock+0x244>)
     48a:	movw	r6, #1575	; 0x627
     48e:	ldr.w	lr, [pc, #608]	; 6f0 <set_arm_clock+0x284>
     492:	add	r3, r0
     494:	ldr	r5, [pc, #540]	; (6b4 <set_arm_clock+0x248>)
     496:	lsrs	r2, r3, #8
     498:	umull	r3, r2, lr, r2
     49c:	lsrs	r3, r2, #7
     49e:	add.w	r3, r3, r3, lsl #2
     4a2:	add.w	r2, r3, r3, lsl #2
     4a6:	addw	r3, r2, #1250	; 0x4e2
     4aa:	cmp	r3, r6
     4ac:	it	cs
     4ae:	movcs	r3, r6
     4b0:	sub.w	r3, r3, #800	; 0x320
     4b4:	umull	r3, r6, r5, r3
     4b8:	lsrs	r6, r6, #3
     4ba:	b.n	4c6 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     4bc:	ldr	r6, [pc, #504]	; (6b8 <set_arm_clock+0x24c>)
     4be:	cmp	r0, r6
     4c0:	ite	ls
     4c2:	movls	r6, #6
     4c4:	movhi	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     4c6:	ldr	r2, [pc, #476]	; (6a4 <set_arm_clock+0x238>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     4c8:	and.w	lr, r7, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     4cc:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     4d0:	cmp	lr, r6
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     4d2:	orr.w	r3, r3, #192	; 0xc0
     4d6:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     4da:	bcs.n	4f2 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     4dc:	ldr	r3, [pc, #456]	; (6a8 <set_arm_clock+0x23c>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     4de:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     4e2:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     4e4:	orrs	r7, r6
		DCDC_REG3 = dcdc;
     4e6:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     4e8:	ldr	r3, [r2, #0]
     4ea:	cmp	r3, #0
     4ec:	bge.n	4e8 <set_arm_clock+0x7c>
     4ee:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     4f2:	ands.w	r3, r4, #33554432	; 0x2000000
     4f6:	bne.n	556 <set_arm_clock+0xea>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     4f8:	ldr	r5, [pc, #448]	; (6bc <set_arm_clock+0x250>)
     4fa:	ldr	r2, [pc, #452]	; (6c0 <set_arm_clock+0x254>)
     4fc:	ldr.w	ip, [r5, #16]
     500:	mov	r5, r2
     502:	and.w	r2, ip, r2
     506:	cmp	r2, r5
     508:	itet	eq
     50a:	moveq.w	r3, #402653184	; 0x18000000
     50e:	movne.w	r2, #4096	; 0x1000
     512:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     514:	eor.w	r5, r4, r3
     518:	tst.w	r5, #939524096	; 0x38000000
     51c:	beq.n	52c <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     51e:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     522:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     526:	ldr	r5, [pc, #380]	; (6a4 <set_arm_clock+0x238>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     528:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
     52a:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     52c:	eor.w	r3, r1, r2
     530:	tst.w	r3, #12288	; 0x3000
     534:	beq.n	548 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     536:	ldr	r3, [pc, #364]	; (6a4 <set_arm_clock+0x238>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     538:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     53c:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     53e:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     540:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     542:	ldr	r3, [r2, #72]	; 0x48
     544:	lsls	r5, r3, #28
     546:	bmi.n	542 <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     548:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     54c:	ldr	r2, [pc, #340]	; (6a4 <set_arm_clock+0x238>)
     54e:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     550:	ldr	r3, [r2, #72]	; 0x48
     552:	lsls	r1, r3, #26
     554:	bmi.n	550 <set_arm_clock+0xe4>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     556:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     558:	ldr	r5, [pc, #360]	; (6c4 <set_arm_clock+0x258>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     55a:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     55c:	mul.w	r3, r1, r2
     560:	mul.w	r3, r0, r3
     564:	cmp	r3, r5
     566:	bhi.n	57c <set_arm_clock+0x110>
		if (div_arm < 8) {
     568:	cmp	r2, #7
     56a:	bhi.w	676 <set_arm_clock+0x20a>
			div_arm = div_arm + 1;
     56e:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     570:	mul.w	r3, r1, r2
     574:	mul.w	r3, r0, r3
     578:	cmp	r3, r5
     57a:	bls.n	568 <set_arm_clock+0xfc>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     57c:	ldr	r0, [pc, #328]	; (6c8 <set_arm_clock+0x25c>)
     57e:	ldr	r5, [pc, #332]	; (6cc <set_arm_clock+0x260>)
     580:	add	r0, r3
     582:	umull	r3, r0, r5, r0
     586:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
     588:	cmp	r3, #108	; 0x6c
     58a:	bhi.n	680 <set_arm_clock+0x214>
	if (mult < 54) mult = 54;
     58c:	cmp	r3, #53	; 0x35
     58e:	bhi.n	68e <set_arm_clock+0x222>
     590:	ldr.w	r8, [pc, #352]	; 6f4 <set_arm_clock+0x288>
     594:	movs	r3, #54	; 0x36
     596:	ldr	r0, [pc, #312]	; (6d0 <set_arm_clock+0x264>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     598:	ldr.w	ip, [pc, #288]	; 6bc <set_arm_clock+0x250>
     59c:	ldr	r5, [pc, #308]	; (6d4 <set_arm_clock+0x268>)
     59e:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     5a2:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     5a6:	and.w	r5, r9, r5
     5aa:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     5ac:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     5b0:	beq.n	5ca <set_arm_clock+0x15e>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     5b2:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     5b6:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     5ba:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     5bc:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     5c0:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     5c4:	ldr	r3, [r5, #0]
     5c6:	cmp	r3, #0
     5c8:	bge.n	5c4 <set_arm_clock+0x158>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     5ca:	ldr.w	ip, [pc, #216]	; 6a4 <set_arm_clock+0x238>
     5ce:	subs	r2, #1
     5d0:	ldr.w	r3, [ip, #16]
     5d4:	and.w	r3, r3, #7
     5d8:	cmp	r3, r2
     5da:	beq.n	5ec <set_arm_clock+0x180>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     5dc:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     5e0:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     5e2:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     5e6:	ldr	r3, [r5, #72]	; 0x48
     5e8:	lsls	r3, r3, #15
     5ea:	bmi.n	5e6 <set_arm_clock+0x17a>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     5ec:	subs	r1, #1
     5ee:	lsls	r1, r1, #10
     5f0:	eor.w	r3, r4, r1
     5f4:	tst.w	r3, #7168	; 0x1c00
     5f8:	beq.n	610 <set_arm_clock+0x1a4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     5fa:	ldr	r3, [pc, #168]	; (6a4 <set_arm_clock+0x238>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     5fc:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     600:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     604:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     606:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
     608:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     60a:	ldr	r3, [r2, #72]	; 0x48
     60c:	lsls	r1, r3, #30
     60e:	bmi.n	60a <set_arm_clock+0x19e>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     610:	ldr	r3, [pc, #196]	; (6d8 <set_arm_clock+0x26c>)
     612:	ldr	r1, [pc, #200]	; (6dc <set_arm_clock+0x270>)
     614:	add	r3, r0
     616:	lsrs	r3, r3, #7
     618:	umull	r3, r1, r1, r3
     61c:	lsrs	r1, r1, #12
     61e:	cmp	r1, #4
     620:	it	cs
     622:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     624:	subs	r3, r1, #1
     626:	lsls	r3, r3, #8
     628:	eor.w	r2, r4, r3
     62c:	tst.w	r2, #768	; 0x300
     630:	beq.n	640 <set_arm_clock+0x1d4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     632:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     636:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     63a:	ldr	r2, [pc, #104]	; (6a4 <set_arm_clock+0x238>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     63c:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     63e:	str	r4, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
     640:	ldr	r3, [pc, #96]	; (6a4 <set_arm_clock+0x238>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     642:	bic.w	r4, r4, #33554432	; 0x2000000
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     646:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
     648:	str	r4, [r3, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     64a:	ldr	r3, [r2, #72]	; 0x48
     64c:	lsls	r3, r3, #26
     64e:	bmi.n	64a <set_arm_clock+0x1de>
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     650:	udiv	r1, r0, r1

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

     654:	ldr	r2, [pc, #136]	; (6e0 <set_arm_clock+0x274>)
	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

     656:	cmp	r6, lr
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     658:	ldr	r3, [pc, #136]	; (6e4 <set_arm_clock+0x278>)

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

     65a:	str	r0, [r2, #0]
	F_CPU_ACTUAL = frequency;
     65c:	str	r1, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

     65e:	bcs.n	672 <set_arm_clock+0x206>
	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     660:	ldr	r3, [pc, #68]	; (6a8 <set_arm_clock+0x23c>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     662:	bic.w	r7, r7, #31
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     666:	mov	r2, r3

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
     668:	orrs	r7, r6
		dcdc &= ~DCDC_REG3_TRG_MASK;
     66a:	str	r7, [r3, #12]
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     66c:	ldr	r3, [r2, #0]
     66e:	cmp	r3, #0
     670:	bge.n	66c <set_arm_clock+0x200>
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
	}

     672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     676:	cmp	r1, #4
     678:	bhi.n	57c <set_arm_clock+0x110>
				div_ahb = div_ahb + 1;
     67a:	adds	r1, #1
				div_arm = 1;
     67c:	movs	r2, #1
     67e:	b.n	55c <set_arm_clock+0xf0>
     680:	ldr.w	r8, [pc, #116]	; 6f8 <set_arm_clock+0x28c>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     684:	movs	r3, #108	; 0x6c
     686:	ldr	r0, [pc, #96]	; (6e8 <set_arm_clock+0x27c>)
     688:	b.n	598 <set_arm_clock+0x12c>
     68a:	movs	r6, #18
     68c:	b.n	4c6 <set_arm_clock+0x5a>
     68e:	ldr	r0, [pc, #92]	; (6ec <set_arm_clock+0x280>)
     690:	ldr.w	r8, [pc, #104]	; 6fc <set_arm_clock+0x290>
     694:	mul.w	r0, r0, r3
     698:	orr.w	r8, r3, r8
     69c:	b.n	598 <set_arm_clock+0x12c>
     69e:	nop
     6a0:	.word	0x1f78a400
     6a4:	.word	0x400fc000
     6a8:	.word	0x40080000
     6ac:	.word	0x23c34600
     6b0:	.word	0xdc3cba00
     6b4:	.word	0x51eb851f
     6b8:	.word	0x016e3600
     6bc:	.word	0x400d8000
     6c0:	.word	0x80003040
     6c4:	.word	0x269fb1ff
     6c8:	.word	0x005b8d80
     6cc:	.word	0x165e9f81
     6d0:	.word	0x269fb200
     6d4:	.word	0x8001307f
     6d8:	.word	0x08f0d17f
     6dc:	.word	0x00e5109f
     6e0:	.word	0x200002f0
     6e4:	.word	0x200002ec
     6e8:	.word	0x4d3f6400
     6ec:	.word	0x00b71b00
     6f0:	.word	0x004cb223
     6f4:	.word	0x80002036
     6f8:	.word	0x8000206c
     6fc:	.word	0x80002000

00000700 <schedule_transfer>:
#ifdef KEYBOARD_INTERFACE
	if (setup.word1 == 0x02000921 && setup.word2 == ((1 << 16) | KEYBOARD_INTERFACE)) {
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
     700:	ldr	r3, [r0, #56]	; 0x38
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
		}
	}
#endif
#ifdef KEYBOARD_INTERFACE
     702:	push	{r4, r5}
	if (setup.word1 == 0x02000921 && setup.word2 == ((1 << 16) | KEYBOARD_INTERFACE)) {
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
     704:	cbz	r3, 70e <schedule_transfer+0xe>
#ifdef SEREMU_INTERFACE
     706:	ldr	r3, [r2, #4]
     708:	orr.w	r3, r3, #32768	; 0x8000
     70c:	str	r3, [r2, #4]
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
     70e:	cpsid	i
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
     710:	ldr	r4, [r0, #52]	; 0x34
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     712:	cbz	r4, 73c <schedule_transfer+0x3c>
	}
#endif
     714:	ldr	r3, [pc, #64]	; (758 <schedule_transfer+0x58>)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
	}
     716:	str	r2, [r4, #0]
#endif
     718:	ldr.w	r4, [r3, #432]	; 0x1b0
     71c:	tst	r4, r1
     71e:	bne.n	750 <schedule_transfer+0x50>
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
     720:	ldr.w	r4, [r3, #320]	; 0x140
     724:	orr.w	r4, r4, #16384	; 0x4000
     728:	str.w	r4, [r3, #320]	; 0x140
	qh->config = config;
     72c:	ldr.w	r5, [r3, #440]	; 0x1b8
	qh->next = 1; // Terminate bit = 1
     730:	ldr.w	r4, [r3, #320]	; 0x140
     734:	lsls	r4, r4, #17
     736:	bpl.n	720 <schedule_transfer+0x20>
	qh->callback_function = callback;
}
     738:	tst	r1, r5
     73a:	bne.n	750 <schedule_transfer+0x50>

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     73c:	movs	r3, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     73e:	ldr	r4, [pc, #24]	; (758 <schedule_transfer+0x58>)
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     740:	str	r2, [r0, #8]
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     742:	str	r3, [r0, #12]
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     744:	ldr.w	r3, [r4, #432]	; 0x1b0
     748:	orrs	r1, r3
     74a:	str.w	r1, [r4, #432]	; 0x1b0
	if (cb) endpointN_notify_mask |= (1 << ep);
     74e:	str	r2, [r0, #48]	; 0x30
}

     750:	str	r2, [r0, #52]	; 0x34
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
     752:	cpsie	i
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}


     754:	pop	{r4, r5}
     756:	bx	lr
     758:	.word	0x402e0000

0000075c <run_callbacks>:
	if (endpoint->callback_function) {
		transfer->status |= (1<<15);
	}
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
     75c:	push	{r3, r4, r5, lr}
     75e:	mov	r5, r0
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     760:	ldr	r3, [r0, #48]	; 0x30
		//digitalWriteFast(2, HIGH);
     762:	b.n	772 <run_callbacks+0x16>
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     764:	ldr	r2, [r5, #56]	; 0x38
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
     766:	ldr	r4, [r3, #0]
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     768:	blx	r2
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
     76a:	ldr	r2, [r5, #52]	; 0x34
     76c:	mov	r3, r4
     76e:	cmp	r4, r2
     770:	beq.n	784 <run_callbacks+0x28>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     772:	mov	r0, r3
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
     774:	cbz	r3, 784 <run_callbacks+0x28>
     776:	cmp	r3, #1
     778:	beq.n	784 <run_callbacks+0x28>
		//ret |= 0x01;
     77a:	ldr	r2, [r3, #4]
     77c:	lsls	r2, r2, #24
     77e:	bpl.n	764 <run_callbacks+0x8>
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
     780:	str	r3, [r5, #48]	; 0x30
		if (status & epmask) goto end;
     782:	pop	{r3, r4, r5, pc}
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
     784:	movs	r3, #0
     786:	str	r3, [r5, #48]	; 0x30
	endpoint->first_transfer = transfer;
     788:	str	r3, [r5, #52]	; 0x34
     78a:	pop	{r3, r4, r5, pc}

0000078c <endpoint0_transmit.constprop.0>:
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     78c:	push	{r4, r5, r6, r7, lr}
		}
		endpoint0_receive(NULL, 0, 0);
		return;
     78e:	cbnz	r1, 7ce <endpoint0_transmit.constprop.0+0x42>
     790:	ldr	r4, [pc, #136]	; (81c <endpoint0_transmit.constprop.0+0x90>)
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     792:	ldr	r1, [pc, #140]	; (820 <endpoint0_transmit.constprop.0+0x94>)
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
     794:	movs	r0, #0
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     796:	ldr	r3, [pc, #140]	; (824 <endpoint0_transmit.constprop.0+0x98>)
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     798:	movs	r2, #1
					// config descriptor needs to adapt to speed
     79a:	movs	r5, #128	; 0x80
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
     79c:	str	r1, [r4, #8]
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     79e:	str	r2, [r1, #0]
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
     7a0:	mov	r2, r3
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
     7a2:	str	r5, [r1, #4]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
     7a4:	str	r0, [r4, #12]
				} else if (setup.wValue == 0x700) {
     7a6:	ldr.w	r4, [r3, #444]	; 0x1bc
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
     7aa:	str	r0, [r1, #8]
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     7ac:	orr.w	r4, r4, #65537	; 0x10001
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
     7b0:	ldr	r5, [pc, #116]	; (828 <endpoint0_transmit.constprop.0+0x9c>)
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     7b2:	str.w	r4, [r3, #444]	; 0x1bc
					// other speed config also needs to adapt
     7b6:	ldr.w	r1, [r3, #432]	; 0x1b0
     7ba:	orr.w	r1, r1, #1
     7be:	str.w	r1, [r3, #432]	; 0x1b0
					const uint8_t *src = usb_config_descriptor_480;
     7c2:	str	r0, [r5, #0]
					if (usb_high_speed) src = usb_config_descriptor_12;
     7c4:	ldr.w	r3, [r2, #432]	; 0x1b0
     7c8:	cmp	r3, #0
     7ca:	bne.n	7c4 <endpoint0_transmit.constprop.0+0x38>
					memcpy(usb_descriptor_buffer, src, datalen);
     7cc:	pop	{r4, r5, r6, r7, pc}
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     7ce:	lsls	r1, r1, #16
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
     7d0:	ldr	r3, [pc, #88]	; (82c <endpoint0_transmit.constprop.0+0xa0>)
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     7d2:	ldr	r5, [pc, #80]	; (824 <endpoint0_transmit.constprop.0+0x98>)
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
     7d4:	movs	r6, #1
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
     7d6:	ldr	r4, [pc, #68]	; (81c <endpoint0_transmit.constprop.0+0x90>)
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     7d8:	orr.w	r1, r1, #128	; 0x80
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
     7dc:	movs	r2, #0
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
     7de:	str	r6, [r3, #0]
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     7e0:	str	r1, [r3, #4]
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
     7e2:	add.w	ip, r0, #4096	; 0x1000
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
     7e6:	str	r2, [r4, #76]	; 0x4c
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
     7e8:	add.w	lr, r0, #8192	; 0x2000
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
     7ec:	str	r3, [r4, #72]	; 0x48
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
     7ee:	add.w	r7, r0, #12288	; 0x3000
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     7f2:	ldr.w	r1, [r5, #432]	; 0x1b0
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
     7f6:	add.w	r6, r0, #16384	; 0x4000
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

     7fa:	mov	r2, r5
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
     7fc:	str	r0, [r3, #8]
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     7fe:	orr.w	r1, r1, #65536	; 0x10000
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
     802:	str.w	ip, [r3, #12]
					// for string descriptors, use the descriptor's
     806:	str.w	lr, [r3, #16]
					// length field, allowing runtime configured length.
     80a:	str	r7, [r3, #20]
					datalen = *(list->addr);
     80c:	str	r6, [r3, #24]
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     80e:	str.w	r1, [r5, #432]	; 0x1b0

     812:	ldr.w	r3, [r2, #432]	; 0x1b0
     816:	cmp	r3, #0
     818:	bne.n	812 <endpoint0_transmit.constprop.0+0x86>
     81a:	b.n	792 <endpoint0_transmit.constprop.0+0x6>
     81c:	.word	0x20003000
     820:	.word	0x20002020
     824:	.word	0x402e0000
     828:	.word	0x200003d8
     82c:	.word	0x20002000

00000830 <isr>:
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
     830:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_ENABLE_IRQ(IRQ_USB1);
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
     834:	ldr	r4, [pc, #748]	; (b24 <isr+0x2f4>)
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
     836:	sub	sp, #12
	NVIC_ENABLE_IRQ(IRQ_USB1);
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
     838:	ldr.w	r8, [r4, #324]	; 0x144
	//transfer_log_head = 0;
	//transfer_log_count = 0;
}


static void isr(void)
     83c:	tst.w	r8, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
     840:	str.w	r8, [r4, #324]	; 0x144
	//transfer_log_head = 0;
	//transfer_log_count = 0;
}


static void isr(void)
     844:	beq.n	904 <isr+0xd4>
{
	//printf("*");
     846:	ldr.w	r3, [r4, #428]	; 0x1ac

	//  Port control in device mode is only used for
     84a:	cmp	r3, #0
     84c:	beq.n	8fa <isr+0xca>
	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
     84e:	mov.w	r9, #65537	; 0x10001
     852:	ldr.w	fp, [pc, #752]	; b44 <isr+0x314>

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;

     856:	mov	r6, r4
     858:	ldr	r7, [pc, #716]	; (b28 <isr+0x2f8>)
	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
     85a:	mov	sl, r9
     85c:	ldr	r1, [r7, #40]	; 0x28
     85e:	ldr	r2, [r7, #44]	; 0x2c
static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
     860:	str.w	r3, [r4, #428]	; 0x1ac
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;

     864:	ldr.w	r3, [r4, #320]	; 0x140
     868:	orr.w	r3, r3, #8192	; 0x2000
     86c:	str.w	r3, [r4, #320]	; 0x140
	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected
     870:	ldr.w	r3, [r4, #320]	; 0x140
     874:	lsls	r5, r3, #18
     876:	bpl.n	864 <isr+0x34>

     878:	ldr.w	r3, [r6, #320]	; 0x140
     87c:	bic.w	r3, r3, #8192	; 0x2000
     880:	str.w	r3, [r6, #320]	; 0x140
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
     884:	str.w	sl, [r6, #436]	; 0x1b4
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     888:	ldr.w	r3, [r4, #436]	; 0x1b4
     88c:	ands.w	r3, r3, #65537	; 0x10001
     890:	bne.n	888 <isr+0x58>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     892:	uxth	r0, r1
     894:	movw	r5, #1665	; 0x681
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
     898:	str.w	r3, [fp]
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     89c:	cmp	r0, r5
     89e:	bhi.w	9ce <isr+0x19e>
     8a2:	cmp.w	r0, #1664	; 0x680
     8a6:	bcs.w	c5a <isr+0x42a>
     8aa:	cmp.w	r0, #258	; 0x102
     8ae:	beq.w	b60 <isr+0x330>
     8b2:	bhi.w	a60 <isr+0x230>
     8b6:	cmp	r0, #128	; 0x80
     8b8:	beq.w	b08 <isr+0x2d8>
     8bc:	cmp	r0, #130	; 0x82
     8be:	bne.w	a50 <isr+0x220>
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     8c2:	uxth	r2, r2
     8c4:	and.w	r1, r2, #127	; 0x7f
		#endif
     8c8:	cmp	r1, #7
     8ca:	bhi.w	a50 <isr+0x220>
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
     8ce:	lsls	r1, r1, #2
     8d0:	ldr	r0, [pc, #600]	; (b2c <isr+0x2fc>)
		#endif
     8d2:	ldr	r5, [pc, #604]	; (b30 <isr+0x300>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
     8d4:	add	r0, r1
     8d6:	ldr	r1, [r0, #0]
		#endif
		#if defined(ENDPOINT6_CONFIG)
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
     8d8:	lsls	r0, r2, #24
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
		#endif
     8da:	strb	r3, [r5, #0]
		#if defined(ENDPOINT6_CONFIG)
     8dc:	strb	r3, [r5, #1]
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
     8de:	bpl.w	cac <isr+0x47c>
     8e2:	lsls	r1, r1, #15
     8e4:	bpl.n	8ea <isr+0xba>
		#endif
     8e6:	movs	r3, #1
     8e8:	strb	r3, [r5, #0]
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
     8ea:	movs	r1, #2
     8ec:	ldr	r0, [pc, #576]	; (b30 <isr+0x300>)
     8ee:	bl	78c <endpoint0_transmit.constprop.0>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     8f2:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     8f6:	cmp	r3, #0
     8f8:	bne.n	85c <isr+0x2c>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
     8fa:	ldr	r2, [pc, #552]	; (b24 <isr+0x2f4>)
     8fc:	ldr.w	r3, [r2, #444]	; 0x1bc
				USB1_USBCMD |= USB_USBCMD_SUTW;
     900:	cmp	r3, #0
     902:	bne.n	98e <isr+0x15e>
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
     904:	tst.w	r8, #64	; 0x40
     908:	beq.n	93c <isr+0x10c>
				int i;   // TODO: optimize with __builtin_ctz()
     90a:	ldr	r3, [pc, #536]	; (b24 <isr+0x2f4>)
     90c:	ldr.w	r1, [r3, #428]	; 0x1ac
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     910:	mov	r2, r3
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
     912:	str.w	r1, [r3, #428]	; 0x1ac
				for (i=2; i <= NUM_ENDPOINTS; i++) {
     916:	ldr.w	r1, [r3, #444]	; 0x1bc
     91a:	str.w	r1, [r3, #444]	; 0x1bc
					if (completestatus & (1 << i)) { // receive
     91e:	ldr.w	r4, [r2, #432]	; 0x1b0
     922:	ldr	r3, [pc, #512]	; (b24 <isr+0x2f4>)
     924:	cmp	r4, #0
     926:	bne.n	91e <isr+0xee>
						run_callbacks(endpoint_queue_head + i * 2);
     928:	mov.w	r2, #4294967295
     92c:	str.w	r2, [r3, #436]	; 0x1b4
					}
     930:	ldr.w	r3, [r3, #388]	; 0x184
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     934:	bl	1390 <usb_serial_reset>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     938:	ldr	r3, [pc, #504]	; (b34 <isr+0x304>)
     93a:	str	r4, [r3, #0]
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
			//printf("reset\n");
		} else {
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
     93c:	tst.w	r8, #16777216	; 0x1000000
     940:	beq.n	94a <isr+0x11a>
		}
     942:	ldr	r3, [pc, #500]	; (b38 <isr+0x308>)
     944:	ldr	r3, [r3, #0]
     946:	cbz	r3, 94a <isr+0x11a>
     948:	blx	r3
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     94a:	tst.w	r8, #33554432	; 0x2000000
     94e:	beq.n	958 <isr+0x128>
		#endif
     950:	ldr	r3, [pc, #488]	; (b3c <isr+0x30c>)
     952:	ldr	r3, [r3, #0]
     954:	cbz	r3, 958 <isr+0x128>
     956:	blx	r3
		endpointN_notify_mask = 0;
		// TODO: Free all allocated dTDs
     958:	tst.w	r8, #4
     95c:	beq.n	964 <isr+0x134>
		//if (++reset_count >= 3) {
     95e:	ldr	r3, [pc, #452]	; (b24 <isr+0x2f4>)
     960:	ldr.w	r3, [r3, #388]	; 0x184
		if (usb_timer0_callback != NULL) usb_timer0_callback();
	}
	if (status & USB_USBSTS_TI1) {
		if (usb_timer1_callback != NULL) usb_timer1_callback();
	}
	if (status & USB_USBSTS_PCI) {
     964:	ldr	r3, [pc, #444]	; (b24 <isr+0x2f4>)
     966:	ldr.w	r2, [r3, #328]	; 0x148
     96a:	lsls	r2, r2, #24
     96c:	bpl.n	988 <isr+0x158>
     96e:	tst.w	r8, #128	; 0x80
     972:	beq.n	988 <isr+0x158>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
     974:	ldr	r1, [pc, #456]	; (b40 <isr+0x310>)
     976:	ldrb	r2, [r1, #0]
     978:	cmp	r2, #0
     97a:	beq.w	c9a <isr+0x46a>
			usb_high_speed = 1;
     97e:	subs	r3, r2, #1
     980:	uxtb	r3, r3
     982:	strb	r3, [r1, #0]
     984:	cbnz	r3, 988 <isr+0x158>
		} else {
     986:	bkpt	0x00fb
			usb_high_speed = 0;
		}
	}
	if (status & USB_USBSTS_SLI) { // page 3165
		//printf("suspend\n");
	}
     988:	add	sp, #12
     98a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     98e:	ldr	r1, [pc, #436]	; (b44 <isr+0x314>)
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
     990:	str.w	r3, [r2, #444]	; 0x1bc
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     994:	ldr	r0, [r1, #0]
     996:	tst	r3, r0
     998:	bne.w	d34 <isr+0x504>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     99c:	ldr	r2, [pc, #404]	; (b34 <isr+0x304>)
     99e:	ldr	r4, [r2, #0]
			endpoint0_notify_mask = 0;
     9a0:	ands	r4, r3
     9a2:	beq.n	904 <isr+0xd4>
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
     9a4:	lsls	r3, r4, #29
     9a6:	bmi.w	d6e <isr+0x53e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     9aa:	lsls	r7, r4, #13
     9ac:	bmi.w	d8e <isr+0x55e>
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
     9b0:	lsls	r6, r4, #28
     9b2:	bmi.w	d86 <isr+0x556>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     9b6:	lsls	r5, r4, #12
     9b8:	bmi.w	d7e <isr+0x54e>
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
     9bc:	lsls	r0, r4, #27
     9be:	bmi.w	d76 <isr+0x546>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     9c2:	lsls	r1, r4, #11
     9c4:	bpl.n	904 <isr+0xd4>
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
     9c6:	ldr	r0, [pc, #384]	; (b48 <isr+0x318>)
     9c8:	bl	75c <run_callbacks>
     9cc:	b.n	904 <isr+0xd4>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     9ce:	movw	r5, #8225	; 0x2021
     9d2:	cmp	r0, r5
     9d4:	beq.n	a48 <isr+0x218>
     9d6:	bhi.n	ab8 <isr+0x288>
     9d8:	cmp.w	r0, #2176	; 0x880
     9dc:	beq.w	c3e <isr+0x40e>
     9e0:	cmp.w	r0, #2304	; 0x900
     9e4:	bne.n	a50 <isr+0x220>
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
	}
     9e6:	ubfx	r1, r1, #16, #8
     9ea:	ldr	r2, [pc, #352]	; (b4c <isr+0x31c>)


/*
struct transfer_struct { // table 55-60, pg 3159
	uint32_t next;
	uint32_t status;
     9ec:	ldr	r0, [pc, #352]	; (b50 <isr+0x320>)
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
	}
     9ee:	strb	r1, [r2, #0]
struct transfer_struct { // table 55-60, pg 3159
	uint32_t next;
	uint32_t status;
	uint32_t pointer0;
	uint32_t pointer1;
	uint32_t pointer2;
     9f0:	ldr	r1, [pc, #352]	; (b54 <isr+0x324>)
	uint32_t pointer3;
	uint32_t pointer4;
	uint32_t unused1;
     9f2:	ldr	r2, [pc, #356]	; (b58 <isr+0x328>)
     9f4:	str	r3, [sp, #4]


/*
struct transfer_struct { // table 55-60, pg 3159
	uint32_t next;
	uint32_t status;
     9f6:	str.w	r0, [r6, #456]	; 0x1c8
	uint32_t pointer0;
	uint32_t pointer1;
	uint32_t pointer2;
     9fa:	str.w	r1, [r6, #460]	; 0x1cc
	uint32_t pointer3;
	uint32_t pointer4;
	uint32_t unused1;
     9fe:	str.w	r2, [r6, #464]	; 0x1d0
static void endpoint0_setup(uint64_t setupdata)
{
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

     a02:	bl	1394 <usb_serial_configure>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a06:	ldr	r2, [pc, #340]	; (b5c <isr+0x32c>)
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     a08:	ldr	r3, [sp, #4]
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     a0a:	movs	r1, #128	; 0x80
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a0c:	movs	r0, #1
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     a0e:	str	r3, [r7, #76]	; 0x4c
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a10:	str	r0, [r2, #0]
		endpoint0_receive(endpoint0_buffer, 7, 1);
     a12:	str	r1, [r2, #4]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a14:	ldr.w	r1, [r6, #444]	; 0x1bc
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     a18:	str	r3, [r2, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a1a:	orr.w	r1, r1, #65537	; 0x10001
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     a1e:	str	r2, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a20:	str.w	r1, [r6, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     a24:	ldr.w	r2, [r6, #432]	; 0x1b0
     a28:	orr.w	r2, r2, #65536	; 0x10000
     a2c:	str.w	r2, [r6, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
     a30:	ldr	r2, [pc, #272]	; (b44 <isr+0x314>)
     a32:	str	r3, [r2, #0]
			endpoint0_setupdata.bothwords = setup.bothwords;
     a34:	ldr.w	r3, [r4, #432]	; 0x1b0
     a38:	cmp	r3, #0
     a3a:	bne.n	a34 <isr+0x204>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     a3c:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     a40:	cmp	r3, #0
     a42:	bne.w	85c <isr+0x2c>
     a46:	b.n	8fa <isr+0xca>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     a48:	lsrs	r0, r2, #16
     a4a:	cmp	r0, #7
     a4c:	beq.w	cb4 <isr+0x484>
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
     a50:	str.w	r9, [r4, #448]	; 0x1c0
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     a54:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     a58:	cmp	r3, #0
     a5a:	bne.w	85c <isr+0x2c>
     a5e:	b.n	8fa <isr+0xca>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     a60:	movw	r5, #770	; 0x302
     a64:	cmp	r0, r5
     a66:	beq.w	bd8 <isr+0x3a8>
     a6a:	cmp.w	r0, #1280	; 0x500
     a6e:	bne.n	a50 <isr+0x220>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a70:	ldr	r2, [pc, #232]	; (b5c <isr+0x32c>)
		endpoint0_receive(endpoint0_buffer, 7, 1);
     a72:	movs	r0, #128	; 0x80
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a74:	movs	r5, #1
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     a76:	str	r3, [r7, #76]	; 0x4c
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     a78:	str	r0, [r2, #4]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     a7a:	str	r5, [r2, #0]
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a7c:	ldr.w	r0, [r6, #444]	; 0x1bc
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     a80:	str	r3, [r2, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a82:	orr.w	r3, r0, #65537	; 0x10001
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     a86:	str	r2, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     a88:	str.w	r3, [r6, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     a8c:	ldr.w	r3, [r6, #432]	; 0x1b0
     a90:	orr.w	r3, r3, #65536	; 0x10000
     a94:	str.w	r3, [r6, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
     a98:	ldr.w	r3, [r4, #432]	; 0x1b0
     a9c:	cmp	r3, #0
     a9e:	bne.n	a98 <isr+0x268>
void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
     aa0:	lsrs	r3, r1, #16
     aa2:	lsls	r3, r3, #25
     aa4:	orr.w	r3, r3, #16777216	; 0x1000000
     aa8:	str.w	r3, [r6, #340]	; 0x154
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     aac:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     ab0:	cmp	r3, #0
     ab2:	bne.w	85c <isr+0x2c>
     ab6:	b.n	8fa <isr+0xca>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     ab8:	movw	r3, #8737	; 0x2221
     abc:	cmp	r0, r3
     abe:	beq.w	bc6 <isr+0x396>
     ac2:	movw	r3, #8993	; 0x2321
     ac6:	cmp	r0, r3
     ac8:	bne.n	a50 <isr+0x220>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     aca:	ldr	r3, [pc, #144]	; (b5c <isr+0x32c>)
     acc:	movs	r1, #1
		endpoint0_receive(endpoint0_buffer, 7, 1);
     ace:	movs	r2, #128	; 0x80
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     ad0:	str	r1, [r3, #0]
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     ad2:	movs	r1, #0
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     ad4:	str	r2, [r3, #4]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     ad6:	ldr.w	r2, [r4, #444]	; 0x1bc
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     ada:	str	r3, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     adc:	orr.w	r2, r2, #65537	; 0x10001
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     ae0:	str	r1, [r3, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     ae2:	str	r1, [r7, #76]	; 0x4c
	  case 0x0921: // HID SET_REPORT
     ae4:	str.w	r2, [r4, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     ae8:	ldr.w	r3, [r4, #432]	; 0x1b0
     aec:	orr.w	r3, r3, #65536	; 0x10000
     af0:	str.w	r3, [r4, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
     af4:	ldr.w	r3, [r4, #432]	; 0x1b0
     af8:	cmp	r3, #0
     afa:	bne.n	af4 <isr+0x2c4>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     afc:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     b00:	cmp	r3, #0
     b02:	bne.w	85c <isr+0x2c>
     b06:	b.n	8fa <isr+0xca>
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
     b08:	ldr	r2, [pc, #36]	; (b30 <isr+0x300>)
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     b0a:	movs	r1, #2
     b0c:	mov	r0, r2
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
     b0e:	strb	r3, [r2, #0]
		#if defined(ENDPOINT3_CONFIG)
     b10:	strb	r3, [r2, #1]
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     b12:	bl	78c <endpoint0_transmit.constprop.0>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     b16:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     b1a:	cmp	r3, #0
     b1c:	bne.w	85c <isr+0x2c>
     b20:	b.n	8fa <isr+0xca>
     b22:	nop
     b24:	.word	0x402e0000
     b28:	.word	0x20003000
     b2c:	.word	0x402e01c0
     b30:	.word	0x200003e8
     b34:	.word	0x200003d0
     b38:	.word	0x200003cc
     b3c:	.word	0x200003d4
     b40:	.word	0x200003dc
     b44:	.word	0x200003d8
     b48:	.word	0x20003240
     b4c:	.word	0x200003f8
     b50:	.word	0x00cc0002
     b54:	.word	0x000200c8
     b58:	.word	0x00c80002
     b5c:	.word	0x20002020
		#endif
		#if defined(KEYBOARD_INTERFACE)
		usb_keyboard_configure();
		#endif
		#if defined(MOUSE_INTERFACE)
		usb_mouse_configure();
     b60:	uxth	r2, r2
     b62:	and.w	r3, r2, #127	; 0x7f
		#endif
     b66:	cmp	r3, #7
     b68:	bhi.w	a50 <isr+0x220>
		#if defined(FLIGHTSIM_INTERFACE)
		usb_flightsim_configure();
     b6c:	tst.w	r2, #128	; 0x80
		#endif
     b70:	mov.w	r3, r3, lsl #2
     b74:	ldr	r2, [pc, #544]	; (d98 <isr+0x568>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     b76:	mov.w	r1, #1
		#if defined(MOUSE_INTERFACE)
		usb_mouse_configure();
		#endif
		#if defined(FLIGHTSIM_INTERFACE)
		usb_flightsim_configure();
		#endif
     b7a:	add	r2, r3
     b7c:	ldr	r3, [r2, #0]
     b7e:	ite	ne
     b80:	bicne.w	r3, r3, #65536	; 0x10000
		#if defined(JOYSTICK_INTERFACE)
		usb_joystick_configure();
     b84:	biceq.w	r3, r3, #1
     b88:	str	r3, [r2, #0]
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     b8a:	movs	r2, #128	; 0x80
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     b8c:	ldr	r3, [pc, #524]	; (d9c <isr+0x56c>)
     b8e:	str	r1, [r3, #0]
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     b90:	movs	r1, #0
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     b92:	str	r2, [r3, #4]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     b94:	ldr.w	r2, [r4, #444]	; 0x1bc
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     b98:	str	r3, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     b9a:	orr.w	r2, r2, #65537	; 0x10001
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     b9e:	str	r1, [r3, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     ba0:	str	r1, [r7, #76]	; 0x4c
	  case 0x0921: // HID SET_REPORT
     ba2:	str.w	r2, [r4, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     ba6:	ldr.w	r3, [r4, #432]	; 0x1b0
     baa:	orr.w	r3, r3, #65536	; 0x10000
     bae:	str.w	r3, [r4, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
     bb2:	ldr.w	r3, [r4, #432]	; 0x1b0
     bb6:	cmp	r3, #0
     bb8:	bne.n	bb2 <isr+0x382>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     bba:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     bbe:	cmp	r3, #0
     bc0:	bne.w	85c <isr+0x2c>
     bc4:	b.n	8fa <isr+0xca>
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     bc6:	ldr	r3, [pc, #472]	; (da0 <isr+0x570>)
		reply_buffer[0] = 0;
     bc8:	ubfx	r1, r1, #16, #8
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     bcc:	ldr	r2, [pc, #468]	; (da4 <isr+0x574>)
     bce:	ldr	r0, [r3, #0]
		reply_buffer[0] = 0;
     bd0:	ldr	r3, [pc, #468]	; (da8 <isr+0x578>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     bd2:	str	r0, [r2, #0]
		reply_buffer[0] = 0;
     bd4:	strb	r1, [r3, #0]
     bd6:	b.n	aca <isr+0x29a>
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     bd8:	uxth	r2, r2
     bda:	and.w	r3, r2, #127	; 0x7f
		#elif defined(SEREMU_INTERFACE)
     bde:	cmp	r3, #7
     be0:	bhi.w	a50 <isr+0x220>
		usb_seremu_configure();
		#endif
     be4:	tst.w	r2, #128	; 0x80
		#if defined(RAWHID_INTERFACE)
     be8:	mov.w	r3, r3, lsl #2
     bec:	ldr	r2, [pc, #424]	; (d98 <isr+0x568>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     bee:	mov.w	r1, #1
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
		#endif
		#if defined(RAWHID_INTERFACE)
     bf2:	add	r2, r3
     bf4:	ldr	r3, [r2, #0]
     bf6:	ite	ne
     bf8:	orrne.w	r3, r3, #65536	; 0x10000
		usb_rawhid_configure();
		#endif
     bfc:	orreq.w	r3, r3, #1
     c00:	str	r3, [r2, #0]
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     c02:	movs	r2, #128	; 0x80
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     c04:	ldr	r3, [pc, #404]	; (d9c <isr+0x56c>)
     c06:	str	r1, [r3, #0]
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     c08:	movs	r1, #0
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     c0a:	str	r2, [r3, #4]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     c0c:	ldr.w	r2, [r4, #444]	; 0x1bc
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     c10:	str	r3, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     c12:	orr.w	r2, r2, #65537	; 0x10001
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     c16:	str	r1, [r3, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     c18:	str	r1, [r7, #76]	; 0x4c
	  case 0x0921: // HID SET_REPORT
     c1a:	str.w	r2, [r4, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     c1e:	ldr.w	r3, [r4, #432]	; 0x1b0
     c22:	orr.w	r3, r3, #65536	; 0x10000
     c26:	str.w	r3, [r4, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
     c2a:	ldr.w	r3, [r4, #432]	; 0x1b0
     c2e:	cmp	r3, #0
     c30:	bne.n	c2a <isr+0x3fa>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     c32:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     c36:	cmp	r3, #0
     c38:	bne.w	85c <isr+0x2c>
     c3c:	b.n	8fa <isr+0xca>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c3e:	ldr	r2, [pc, #364]	; (dac <isr+0x57c>)
		// configure all other endpoints
     c40:	movs	r1, #1
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c42:	ldr	r3, [pc, #364]	; (db0 <isr+0x580>)
     c44:	ldrb	r2, [r2, #0]
		// configure all other endpoints
     c46:	mov	r0, r3
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c48:	strb	r2, [r3, #0]
		// configure all other endpoints
     c4a:	bl	78c <endpoint0_transmit.constprop.0>
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     c4e:	ldr.w	r3, [r4, #428]	; 0x1ac

static void isr(void)
{
	//printf("*");

	//  Port control in device mode is only used for
     c52:	cmp	r3, #0
     c54:	bne.w	85c <isr+0x2c>
     c58:	b.n	8fa <isr+0xca>
		#endif
		#if defined(MULTITOUCH_INTERFACE)
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
     c5a:	ldr	r3, [pc, #344]	; (db4 <isr+0x584>)
     c5c:	ldr	r0, [r3, #4]
     c5e:	cmp	r0, #0
     c60:	beq.w	a50 <isr+0x220>
     c64:	lsrs	r1, r1, #16
		#endif
     c66:	uxth.w	lr, r2
     c6a:	b.n	c76 <isr+0x446>
		#endif
		#if defined(MULTITOUCH_INTERFACE)
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
     c6c:	adds	r3, #12
     c6e:	ldr	r0, [r3, #4]
     c70:	cmp	r0, #0
     c72:	beq.w	a50 <isr+0x220>
		#endif
     c76:	ldrh	r5, [r3, #0]
     c78:	cmp	r5, r1
     c7a:	bne.n	c6c <isr+0x43c>
     c7c:	ldrh	r5, [r3, #2]
     c7e:	cmp	r5, lr
     c80:	bne.n	c6c <isr+0x43c>
		endpoint0_receive(NULL, 0, 0);
     c82:	lsrs	r1, r1, #8
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     c84:	lsrs	r2, r2, #16
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
     c86:	cmp	r1, #3
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     c88:	ite	eq
     c8a:	ldrbeq	r1, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
     c8c:	ldrhne	r1, [r3, #8]
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
     c8e:	cmp	r1, r2
     c90:	it	cs
     c92:	movcs	r1, r2
     c94:	bl	78c <endpoint0_transmit.constprop.0>
     c98:	b.n	8f2 <isr+0xc2>
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
		}
	}
     c9a:	ldr.w	r2, [r3, #328]	; 0x148
     c9e:	bic.w	r2, r2, #128	; 0x80
     ca2:	str.w	r2, [r3, #328]	; 0x148
	if (status & USB_USBSTS_SLI) { // page 3165
		//printf("suspend\n");
	}
     ca6:	add	sp, #12
     ca8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
		#endif
		#if defined(ENDPOINT6_CONFIG)
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
     cac:	lsls	r2, r1, #31
     cae:	bpl.w	8ea <isr+0xba>
     cb2:	b.n	8e6 <isr+0xb6>
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
     cb4:	ldr	r5, [pc, #256]	; (db8 <isr+0x588>)
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     cb6:	movs	r0, #1
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
     cb8:	str	r3, [r7, #12]
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
     cba:	str	r1, [r5, #0]
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     cbc:	ldr	r3, [pc, #252]	; (dbc <isr+0x58c>)
				return;
     cbe:	ldr	r1, [pc, #256]	; (dc0 <isr+0x590>)
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     cc0:	str	r0, [r3, #0]
				return;
     cc2:	str	r1, [r3, #4]
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
     cc4:	ldr	r1, [pc, #252]	; (dc4 <isr+0x594>)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
     cc6:	ldr.w	r0, [r6, #432]	; 0x1b0
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
     cca:	str	r2, [r5, #4]
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     ccc:	add.w	lr, r1, #8192	; 0x2000
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
     cd0:	orr.w	r2, r0, #1
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
				return;
			}
		}
     cd4:	sub.w	r0, r1, #8192	; 0x2000
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
     cd8:	add.w	r5, r1, #4096	; 0x1000
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
     cdc:	str	r3, [r7, #8]
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
				return;
			}
		}
     cde:	str	r0, [r3, #8]
		break;
     ce0:	sub.w	r0, r1, #4096	; 0x1000
     ce4:	str	r0, [r3, #12]
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
     ce6:	str.w	r2, [r6, #432]	; 0x1b0
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
				return;
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
     cea:	str	r1, [r3, #16]
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
     cec:	str	r5, [r3, #20]
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     cee:	str.w	lr, [r3, #24]
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
     cf2:	ldr.w	r3, [r4, #432]	; 0x1b0
     cf6:	cmp	r3, #0
     cf8:	bne.n	cf2 <isr+0x4c2>
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     cfa:	ldr	r2, [pc, #160]	; (d9c <isr+0x56c>)
     cfc:	movs	r0, #1
		endpoint0_receive(endpoint0_buffer, 7, 1);
     cfe:	movw	r1, #32896	; 0x8080
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
     d02:	str	r3, [r7, #76]	; 0x4c
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     d04:	str	r0, [r2, #0]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
     d06:	mov.w	r0, #65536	; 0x10000
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
     d0a:	str	r1, [r2, #4]
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     d0c:	ldr.w	r1, [r6, #444]	; 0x1bc
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
     d10:	str	r3, [r2, #8]
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     d12:	orr.w	r3, r1, #65537	; 0x10001
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
     d16:	str	r2, [r7, #72]	; 0x48
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
     d18:	str.w	r3, [r6, #444]	; 0x1bc
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
     d1c:	ldr.w	r3, [r6, #432]	; 0x1b0
     d20:	orrs	r3, r0
     d22:	str.w	r3, [r6, #432]	; 0x1b0
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
     d26:	str.w	r0, [fp]
			endpoint0_setupdata.bothwords = setup.bothwords;
     d2a:	ldr.w	r3, [r4, #432]	; 0x1b0
     d2e:	cmp	r3, #0
     d30:	bne.n	d2a <isr+0x4fa>
     d32:	b.n	8f2 <isr+0xc2>
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     d34:	ldr	r4, [pc, #128]	; (db8 <isr+0x588>)
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d36:	movw	r0, #8225	; 0x2021
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     d3a:	movs	r5, #0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d3c:	ldrh	r4, [r4, #0]
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     d3e:	str	r5, [r1, #0]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d40:	cmp	r4, r0
     d42:	bne.w	99c <isr+0x16c>
	endpoint0_transfer_ack.pointer0 = 0;
     d46:	ldr	r1, [pc, #128]	; (dc8 <isr+0x598>)
     d48:	ldr	r4, [pc, #128]	; (dcc <isr+0x59c>)
     d4a:	ldmia	r1, {r0, r1}
     d4c:	lsrs	r5, r1, #16
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     d4e:	cmp	r0, #134	; 0x86
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d50:	str	r0, [r4, #0]
     d52:	strh	r1, [r4, #4]
     d54:	strb	r5, [r4, #6]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     d56:	bne.w	99c <isr+0x16c>
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d5a:	ldr.w	r1, [r2, #328]	; 0x148
	USB1_ENDPTPRIME |= (1<<0);
     d5e:	movs	r4, #80	; 0x50
     d60:	ldr	r0, [pc, #108]	; (dd0 <isr+0x5a0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     d62:	orr.w	r1, r1, #128	; 0x80
     d66:	str.w	r1, [r2, #328]	; 0x148
	USB1_ENDPTPRIME |= (1<<0);
     d6a:	strb	r4, [r0, #0]
     d6c:	b.n	99c <isr+0x16c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     d6e:	ldr	r0, [pc, #100]	; (dd4 <isr+0x5a4>)
     d70:	bl	75c <run_callbacks>
     d74:	b.n	9aa <isr+0x17a>
     d76:	ldr	r0, [pc, #96]	; (dd8 <isr+0x5a8>)
     d78:	bl	75c <run_callbacks>
     d7c:	b.n	9c2 <isr+0x192>
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
     d7e:	ldr	r0, [pc, #92]	; (ddc <isr+0x5ac>)
     d80:	bl	75c <run_callbacks>
     d84:	b.n	9bc <isr+0x18c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     d86:	ldr	r0, [pc, #88]	; (de0 <isr+0x5b0>)
     d88:	bl	75c <run_callbacks>
     d8c:	b.n	9b6 <isr+0x186>
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
     d8e:	ldr	r0, [pc, #84]	; (de4 <isr+0x5b4>)
     d90:	bl	75c <run_callbacks>
     d94:	b.n	9b0 <isr+0x180>
     d96:	nop
     d98:	.word	0x402e01c0
     d9c:	.word	0x20002020
     da0:	.word	0x20000400
     da4:	.word	0x2000328c
     da8:	.word	0x20000d80
     dac:	.word	0x200003f8
     db0:	.word	0x200003e8
     db4:	.word	0x20000280
     db8:	.word	0x200003e0
     dbc:	.word	0x20002000
     dc0:	.word	0x00070080
     dc4:	.word	0x200023f0
     dc8:	.word	0x200003f0
     dcc:	.word	0x20003284
     dd0:	.word	0x200003dc
     dd4:	.word	0x20003100
     dd8:	.word	0x20003200
     ddc:	.word	0x200031c0
     de0:	.word	0x20003180
     de4:	.word	0x20003140

00000de8 <usb_config_rx>:
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     de8:	cmp	r2, #0
	endpoint0_transfer_ack.pointer0 = 0;
     dea:	sub.w	r2, r0, #2
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     df2:	ite	ne
     df4:	movne	r7, #0
     df6:	moveq.w	r7, #536870912	; 0x20000000
	endpoint0_transfer_ack.pointer0 = 0;
     dfa:	cmp	r2, #2
     dfc:	bls.n	e02 <usb_config_rx+0x1a>
     dfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e02:	mov.w	sl, r0, lsl #7
     e06:	ldr.w	r9, [pc, #64]	; e48 <usb_config_rx+0x60>
     e0a:	mov	r5, r1
     e0c:	mov	r4, r0
     e0e:	add.w	r6, sl, r9
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     e12:	movs	r1, #0
     e14:	movs	r2, #64	; 0x40
     e16:	mov	r8, r3
     e18:	mov	r0, r6
     e1a:	bl	1524 <memset>
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     e1e:	movs	r0, #1
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
     e20:	orr.w	r1, r7, r5, lsl #16
     e24:	str.w	r1, [sl, r9]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
     e28:	str.w	r8, [r6, #56]	; 0x38
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     e2c:	str	r0, [r6, #8]
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     e2e:	cmp.w	r8, #0
     e32:	beq.n	dfe <usb_config_rx+0x16>
     e34:	ldr	r3, [pc, #12]	; (e44 <usb_config_rx+0x5c>)
     e36:	lsls	r0, r4
     e38:	ldr	r4, [r3, #0]
     e3a:	orrs	r0, r4
     e3c:	str	r0, [r3, #0]
     e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e42:	nop
     e44:	.word	0x200003d0
     e48:	.word	0x20003000

00000e4c <usb_config_tx>:
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
}
     e4c:	cmp	r2, #0

     e4e:	sub.w	r2, r0, #2
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e52:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}
     e56:	ite	ne
     e58:	movne	r7, #0
     e5a:	moveq.w	r7, #536870912	; 0x20000000

     e5e:	cmp	r2, #2
     e60:	bls.n	e66 <usb_config_tx+0x1a>
     e62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     e66:	movs	r2, #64	; 0x40
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
}

/*typedef union {
     e68:	lsls	r5, r0, #7
     e6a:	ldr.w	r9, [pc, #68]	; eb0 <usb_config_tx+0x64>
     e6e:	mov	r8, r1
     e70:	add	r5, r2
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     e72:	movs	r1, #0
     e74:	mov	r4, r0
     e76:	mov	r6, r3
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
}

/*typedef union {
     e78:	add.w	sl, r5, r9
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     e7c:	mov	r0, sl
     e7e:	bl	1524 <memset>
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     e82:	movs	r2, #1
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
     e84:	orr.w	r1, r7, r8, lsl #16
     e88:	str.w	r1, [r5, r9]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
     e8c:	str.w	r6, [sl, #56]	; 0x38
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     e90:	str.w	r2, [sl, #8]
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
}

/*typedef union {
 struct {
     e94:	cmp	r6, #0
     e96:	beq.n	e62 <usb_config_tx+0x16>
     e98:	add.w	r0, r4, #16
     e9c:	ldr	r3, [pc, #12]	; (eac <usb_config_tx+0x60>)
     e9e:	lsls	r2, r0
     ea0:	ldr	r0, [r3, #0]
     ea2:	orrs	r2, r0
     ea4:	str	r2, [r3, #0]
     ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     eaa:	nop
     eac:	.word	0x200003d0
     eb0:	.word	0x20003000

00000eb4 <usb_prepare_transfer>:
        uint8_t bmRequestType;
        uint8_t bRequest;
   };
        uint16_t wRequestAndType;
  };
        uint16_t wValue;
     eb4:	lsls	r2, r2, #16
        uint16_t wIndex;
        uint16_t wLength;
     eb6:	str	r1, [r0, #8]
 };
 struct {
        uint32_t word1;
        uint32_t word2;
 };
     eb8:	str	r3, [r0, #28]
        uint8_t bmRequestType;
        uint8_t bRequest;
   };
        uint16_t wRequestAndType;
  };
        uint16_t wValue;
     eba:	orr.w	r2, r2, #128	; 0x80
  union {
   struct {
        uint8_t bmRequestType;
        uint8_t bRequest;
   };
        uint16_t wRequestAndType;
     ebe:	push	{r4, r5, r6, r7}
  };
        uint16_t wValue;
     ec0:	str	r2, [r0, #4]
   struct {
        uint8_t bmRequestType;
        uint8_t bRequest;
   };
        uint16_t wRequestAndType;
  };
     ec2:	movs	r7, #1
        uint16_t wValue;
        uint16_t wIndex;
        uint16_t wLength;
 };
     ec4:	add.w	r6, r1, #4096	; 0x1000
 struct {
     ec8:	add.w	r5, r1, #8192	; 0x2000
        uint32_t word1;
     ecc:	add.w	r4, r1, #12288	; 0x3000
        uint32_t word2;
     ed0:	add.w	r2, r1, #16384	; 0x4000
   struct {
        uint8_t bmRequestType;
        uint8_t bRequest;
   };
        uint16_t wRequestAndType;
  };
     ed4:	str	r7, [r0, #0]
        uint16_t wValue;
        uint16_t wIndex;
        uint16_t wLength;
 };
     ed6:	str	r6, [r0, #12]
 struct {
     ed8:	str	r5, [r0, #16]
        uint32_t word1;
     eda:	str	r4, [r0, #20]
        uint32_t word2;
     edc:	str	r2, [r0, #24]
 };
	uint64_t bothwords;
     ede:	pop	{r4, r5, r6, r7}
     ee0:	bx	lr
     ee2:	nop

00000ee4 <usb_transmit>:
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
	__enable_irq();
	//digitalWriteFast(4, LOW);
	//digitalWriteFast(3, LOW);
     ee4:	subs	r3, r0, #2
     ee6:	cmp	r3, #2
     ee8:	bls.n	eec <usb_transmit+0x8>
     eea:	bx	lr
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
	__enable_irq();
	//digitalWriteFast(4, LOW);
     eec:	push	{r4, r5}
	//digitalWriteFast(3, LOW);
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
     eee:	ldr	r3, [pc, #24]	; (f08 <usb_transmit+0x24>)
     ef0:	add.w	r4, r0, #16
     ef4:	movs	r5, #1
     ef6:	mov	r2, r1
     ef8:	add.w	r0, r3, r0, lsl #7
     efc:	lsl.w	r1, r5, r4
	//transfer_log[transfer_log_head++] = ret;
     f00:	pop	{r4, r5}
	__enable_irq();
	//digitalWriteFast(4, LOW);
	//digitalWriteFast(3, LOW);
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
     f02:	b.w	700 <schedule_transfer>
     f06:	nop
     f08:	.word	0x20003040

00000f0c <usb_receive>:
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
	// ENDPTPRIME -  Software should write a one to the corresponding bit when
	//		 posting a new transfer descriptor to an endpoint queue head.
     f0c:	subs	r3, r0, #2
     f0e:	cmp	r3, #2
     f10:	bls.n	f14 <usb_receive+0x8>
     f12:	bx	lr
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
	// ENDPTPRIME -  Software should write a one to the corresponding bit when
     f14:	push	{r4}
	//		 posting a new transfer descriptor to an endpoint queue head.
	//		 Hardware automatically uses this bit to begin parsing for a
	//		 new transfer descriptor from the queue head and prepare a
	//		 transmit buffer. Hardware clears this bit when the associated
     f16:	ldr	r3, [pc, #20]	; (f2c <usb_receive+0x20>)
     f18:	movs	r4, #1
     f1a:	mov	r2, r1
     f1c:	lsl.w	r1, r4, r0
     f20:	add.w	r0, r3, r0, lsl #7
	//		 endpoint(s) is (are) successfully primed.
     f24:	ldr.w	r4, [sp], #4
}
	// ENDPTPRIME -  Software should write a one to the corresponding bit when
	//		 posting a new transfer descriptor to an endpoint queue head.
	//		 Hardware automatically uses this bit to begin parsing for a
	//		 new transfer descriptor from the queue head and prepare a
	//		 transmit buffer. Hardware clears this bit when the associated
     f28:	b.w	700 <schedule_transfer>
     f2c:	.word	0x20003000

00000f30 <delay>:
}*/

void delay(uint32_t msec)
{
	uint32_t start;

     f30:	cmp	r0, #0
     f32:	beq.n	fda <delay+0xaa>
/*void yield(void)
{

}*/

void delay(uint32_t msec)
     f34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f38:	mov	r9, r0
     f3a:	sub	sp, #12
     f3c:	ldr	r4, [pc, #156]	; (fdc <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     f3e:	movs	r0, #1
     f40:	ldr	r5, [pc, #156]	; (fe0 <delay+0xb0>)
     f42:	ldr	r6, [pc, #160]	; (fe4 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     f44:	ldrex	r3, [r4]

uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
     f48:	ldr	r2, [r5, #0]
		smc = systick_millis_count;
     f4a:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     f4c:	strex	r3, r0, [r4]
		scc = systick_cycle_count;
     f50:	cmp	r3, #0
     f52:	bne.n	f44 <delay+0x14>
	} while ( __STREXW(1, &systick_safe_read));
     f54:	ldr	r7, [pc, #144]	; (fe8 <delay+0xb8>)
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f56:	mov.w	lr, #1000	; 0x3e8
     f5a:	ldr	r0, [pc, #144]	; (fec <delay+0xbc>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
     f5c:	ldr.w	ip, [r7]
     f60:	mov	fp, r7
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f62:	add.w	r7, r7, #1660944384	; 0x63000000
     f66:	ldr	r3, [r0, #0]
     f68:	rsb	r1, r1, ip
     f6c:	add.w	r7, r7, #1818624	; 0x1bc000
     f70:	addw	r7, r7, #3711	; 0xe7f
     f74:	umull	ip, r3, r7, r3
{
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
     f78:	mov	sl, r7
     f7a:	movs	r7, #1
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f7c:	lsrs	r3, r3, #18
     f7e:	udiv	r3, r1, r3
     f82:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     f86:	ldrex	r3, [r4]

uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
     f8a:	ldr	r2, [r5, #0]
		smc = systick_millis_count;
     f8c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     f8e:	strex	r3, r7, [r4]
		scc = systick_cycle_count;
     f92:	cmp	r3, #0
     f94:	bne.n	f86 <delay+0x56>
	} while ( __STREXW(1, &systick_safe_read));
     f96:	ldr.w	ip, [fp]
{
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
     f9a:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f9e:	ldr	r3, [r0, #0]
{
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
     fa0:	mul.w	r2, lr, r2
     fa4:	rsb	r1, r1, ip
     fa8:	umull	r3, lr, sl, r3
     fac:	rsb	r3, r8, r2
     fb0:	mov.w	r2, lr, lsr #18
     fb4:	udiv	r1, r1, r2
     fb8:	adds	r2, r1, r3
     fba:	cmp.w	r2, #1000	; 0x3e8
     fbe:	bcc.n	fd0 <delay+0xa0>
		while ((micros() - start) >= 1000) {
     fc0:	subs.w	r9, r9, #1
			if (--msec == 0) return;
     fc4:	add.w	r8, r8, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     fc8:	bne.n	f86 <delay+0x56>
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
	}
	// TODO...
     fca:	add	sp, #12
     fcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fd0:	str	r0, [sp, #4]
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
     fd2:	bl	1048 <yield>
		yield();
     fd6:	ldr	r0, [sp, #4]
     fd8:	b.n	f86 <delay+0x56>
     fda:	bx	lr
     fdc:	.word	0x20003280
     fe0:	.word	0x20000400
     fe4:	.word	0x200003fc
     fe8:	.word	0xe0001004
     fec:	.word	0x200002f0

00000ff0 <usb_init_serialnumber>:
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
     ff0:	ldr	r2, [pc, #72]	; (103c <usb_init_serialnumber+0x4c>)
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
     ff2:	ldr	r3, [pc, #76]	; (1040 <usb_init_serialnumber+0x50>)
        4,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
     ff4:	ldr.w	r0, [r2, #544]	; 0x220
     ff8:	bic.w	r0, r0, #4278190080	; 0xff000000
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
     ffc:	cmp	r0, r3
        0x24,                                   // bDescriptorType
        0x01,                                   // bDescriptorSubtype
        0x01,                                   // bmCapabilities
        1,                                      // bDataInterface
        // Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
        4,                                      // bFunctionLength
     ffe:	push	{r4, lr}
    1000:	sub	sp, #16
        0x02,                                   // bDescriptorSubtype
        0x06,                                   // bmCapabilities
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
    1002:	bhi.n	100a <usb_init_serialnumber+0x1a>
    1004:	add.w	r0, r0, r0, lsl #2
    1008:	lsls	r0, r0, #1
    100a:	ldr	r4, [pc, #56]	; (1044 <usb_init_serialnumber+0x54>)
        CDC_STATUS_INTERFACE,                   // bMasterInterface
    100c:	add	r1, sp, #4
    100e:	movs	r2, #10
    1010:	bl	145c <ultoa>
    1014:	add	r1, sp, #4
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
    1016:	movs	r3, #0
    1018:	mov	r0, r4
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
    101a:	ldrb.w	r2, [r1], #1
    101e:	adds	r3, #1
        7,                                      // bLength
    1020:	cbz	r2, 1032 <usb_init_serialnumber+0x42>
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC_STATUS_INTERFACE,                   // bMasterInterface
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
    1022:	cmp	r3, #10
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
    1024:	strh.w	r2, [r0, #2]!
        // Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
        5,                                      // bFunctionLength
        0x24,                                   // bDescriptorType
        0x06,                                   // bDescriptorSubtype
        CDC_STATUS_INTERFACE,                   // bMasterInterface
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
    1028:	bne.n	101a <usb_init_serialnumber+0x2a>
    102a:	movs	r3, #22
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_ACM_ENDPOINT | 0x80,                // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
    102c:	strb	r3, [r4, #0]
        16,                                     // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_DATA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
    102e:	add	sp, #16
    1030:	pop	{r4, pc}
    1032:	lsls	r3, r3, #1
    1034:	uxtb	r3, r3
        CDC_DATA_INTERFACE,                     // bSlaveInterface0
        // endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
        7,                                      // bLength
        5,                                      // bDescriptorType
        CDC_ACM_ENDPOINT | 0x80,                // bEndpointAddress
        0x03,                                   // bmAttributes (0x03=intr)
    1036:	strb	r3, [r4, #0]
        16,                                     // bInterval
        // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
        9,                                      // bLength
        4,                                      // bDescriptorType
        CDC_DATA_INTERFACE,                     // bInterfaceNumber
        0,                                      // bAlternateSetting
    1038:	add	sp, #16
    103a:	pop	{r4, pc}
    103c:	.word	0x401f4400
    1040:	.word	0x0098967f
    1044:	.word	0x2000038c

00001048 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1048:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    104a:	ldr	r4, [pc, #132]	; (10d0 <yield+0x88>)
    104c:	ldrb	r3, [r4, #0]
    104e:	cbnz	r3, 1072 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1050:	ldr	r3, [pc, #128]	; (10d4 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1052:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1054:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1056:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1058:	cbnz	r3, 10a2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    105a:	ldr	r3, [pc, #124]	; (10d8 <yield+0x90>)
    105c:	ldrb	r3, [r3, #0]
    105e:	cmp	r3, #0
    1060:	bne.n	10b6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    1062:	ldr	r3, [pc, #120]	; (10dc <yield+0x94>)

	running = 0;
    1064:	movs	r1, #0
    1066:	ldr	r2, [r3, #0]
    1068:	strb	r1, [r4, #0]
    106a:	cbz	r2, 1072 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    106c:	mrs	r2, IPSR
		if (ipsr != 0) return;
    1070:	cbz	r2, 1074 <yield+0x2c>
    1072:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1074:	mrs	r0, PRIMASK
		__disable_irq();
    1078:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    107a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    107c:	cbz	r2, 10bc <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    107e:	ldr	r4, [pc, #96]	; (10e0 <yield+0x98>)
    1080:	ldrb	r1, [r4, #0]
    1082:	cbnz	r1, 10bc <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1084:	movs	r6, #1
		firstYield = first->_next;
    1086:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1088:	strb	r6, [r4, #0]
		firstYield = first->_next;
    108a:	str	r5, [r3, #0]
		if (firstYield) {
    108c:	cbz	r5, 10c4 <yield+0x7c>
			firstYield->_prev = nullptr;
    108e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1090:	cbnz	r0, 1094 <yield+0x4c>
    1092:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1094:	movs	r5, #0
		(*(first->_function))(*first);
    1096:	ldr	r3, [r2, #8]
    1098:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    109a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    109c:	blx	r3
		runningFromYield = false;
    109e:	strb	r5, [r4, #0]
    10a0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    10a2:	bl	1448 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    10a6:	cmp	r0, #0
    10a8:	beq.n	105a <yield+0x12>
    10aa:	bl	12ec <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    10ae:	ldr	r3, [pc, #40]	; (10d8 <yield+0x90>)
    10b0:	ldrb	r3, [r3, #0]
    10b2:	cmp	r3, #0
    10b4:	beq.n	1062 <yield+0x1a>
    10b6:	bl	14ac <HardwareSerial::processSerialEvents()>
    10ba:	b.n	1062 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    10bc:	cmp	r0, #0
    10be:	bne.n	1072 <yield+0x2a>
    10c0:	cpsie	i
    10c2:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    10c4:	ldr	r3, [pc, #28]	; (10e4 <yield+0x9c>)
    10c6:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    10c8:	cmp	r0, #0
    10ca:	bne.n	1094 <yield+0x4c>
    10cc:	b.n	1092 <yield+0x4a>
    10ce:	nop
    10d0:	.word	0x20000418
    10d4:	.word	0x200003a2
    10d8:	.word	0x20000da0
    10dc:	.word	0x2000042c
    10e0:	.word	0x20000430
    10e4:	.word	0x20000428

000010e8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    10e8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    10ea:	mrs	r2, PRIMASK
		__disable_irq();
    10ee:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    10f0:	ldrb	r3, [r0, #29]
    10f2:	cbnz	r3, 1102 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    10f4:	ldrb	r1, [r0, #28]
    10f6:	cmp	r1, #1
    10f8:	beq.n	110c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    10fa:	cmp	r1, #3
    10fc:	beq.n	1120 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    10fe:	movs	r3, #1
    1100:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1102:	cbnz	r2, 1106 <EventResponder::triggerEventNotImmediate()+0x1e>
    1104:	cpsie	i
	}
	enableInterrupts(irq);
}
    1106:	ldr.w	r4, [sp], #4
    110a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    110c:	ldr	r4, [pc, #68]	; (1154 <EventResponder::triggerEventNotImmediate()+0x6c>)
    110e:	ldr	r1, [r4, #0]
    1110:	cbz	r1, 113c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1112:	ldr	r1, [pc, #68]	; (1158 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1114:	str	r3, [r0, #20]
				_prev = lastYield;
    1116:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    1118:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    111a:	str	r3, [r0, #24]
				_prev->_next = this;
    111c:	str	r0, [r3, #20]
    111e:	b.n	10fe <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    1120:	ldr	r4, [pc, #56]	; (115c <EventResponder::triggerEventNotImmediate()+0x74>)
    1122:	ldr	r1, [r4, #0]
    1124:	cbz	r1, 1148 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1126:	ldr	r1, [pc, #56]	; (1160 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    1128:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    112a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    112c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    112e:	str	r3, [r0, #24]
				_prev->_next = this;
    1130:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    1132:	ldr	r3, [pc, #48]	; (1164 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1134:	mov.w	r1, #268435456	; 0x10000000
    1138:	str	r1, [r3, #0]
    113a:	b.n	10fe <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    113c:	ldr	r3, [pc, #24]	; (1158 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    113e:	str	r1, [r0, #20]
				_prev = nullptr;
    1140:	str	r1, [r0, #24]
				firstYield = this;
    1142:	str	r0, [r4, #0]
				lastYield = this;
    1144:	str	r0, [r3, #0]
    1146:	b.n	10fe <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1148:	ldr	r3, [pc, #20]	; (1160 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    114a:	str	r1, [r0, #20]
				_prev = nullptr;
    114c:	str	r1, [r0, #24]
				firstInterrupt = this;
    114e:	str	r0, [r4, #0]
				lastInterrupt = this;
    1150:	str	r0, [r3, #0]
    1152:	b.n	1132 <EventResponder::triggerEventNotImmediate()+0x4a>
    1154:	.word	0x2000042c
    1158:	.word	0x20000428
    115c:	.word	0x2000041c
    1160:	.word	0x20000420
    1164:	.word	0xe000ed04

00001168 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1168:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    116a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    116c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    116e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1170:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1172:	beq.n	117c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1174:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1178:	b.w	10e8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    117c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    117e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1182:	bx	r3

00001184 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1184:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1186:	mrs	r1, PRIMASK
		__disable_irq();
    118a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    118c:	ldr	r4, [pc, #48]	; (11c0 <EventResponder::runFromInterrupt()+0x3c>)
    118e:	ldr	r3, [r4, #0]
		if (first) {
    1190:	cbz	r3, 11b6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1192:	ldr	r6, [pc, #48]	; (11c4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1194:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1196:	ldr	r2, [r3, #20]
    1198:	str	r2, [r4, #0]
			if (firstInterrupt) {
    119a:	cbz	r2, 11bc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    119c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    119e:	cbnz	r1, 11a2 <EventResponder::runFromInterrupt()+0x1e>
    11a0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    11a2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    11a4:	mov	r0, r3
    11a6:	ldr	r3, [r3, #8]
    11a8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    11aa:	mrs	r1, PRIMASK
		__disable_irq();
    11ae:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    11b0:	ldr	r3, [r4, #0]
		if (first) {
    11b2:	cmp	r3, #0
    11b4:	bne.n	1196 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    11b6:	cbnz	r1, 11ba <EventResponder::runFromInterrupt()+0x36>
    11b8:	cpsie	i
    11ba:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    11bc:	str	r2, [r6, #0]
    11be:	b.n	119e <EventResponder::runFromInterrupt()+0x1a>
    11c0:	.word	0x2000041c
    11c4:	.word	0x20000420

000011c8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    11c8:	b.w	1184 <EventResponder::runFromInterrupt()>

000011cc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    11cc:	ldr	r2, [pc, #96]	; (1230 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    11ce:	push	{r4, r5}
	if (listActive == nullptr) {
    11d0:	ldr	r4, [r2, #0]
    11d2:	cmp	r4, #0
    11d4:	beq.n	1228 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    11d6:	ldr	r3, [r0, #0]
    11d8:	ldr	r1, [r4, #0]
    11da:	cmp	r3, r1
    11dc:	bcs.n	11fe <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    11de:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    11e0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    11e2:	str	r4, [r0, #8]
		_prev = nullptr;
    11e4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    11e6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    11e8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    11ea:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    11ec:	movs	r3, #2
}
    11ee:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    11f0:	strb	r3, [r0, #20]
}
    11f2:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    11f4:	str	r3, [r0, #0]
    11f6:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    11f8:	ldr	r1, [r2, #0]
    11fa:	cmp	r3, r1
    11fc:	bcc.n	1210 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    11fe:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1200:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1202:	cmp	r2, #0
    1204:	bne.n	11f4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    1206:	str	r2, [r0, #8]
		_prev = timer;
    1208:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    120a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    120c:	str	r0, [r4, #8]
    120e:	b.n	11ec <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1210:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    1212:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    1214:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    1216:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1218:	str	r5, [r0, #12]
				timer->_prev = this;
    121a:	str	r0, [r4, #12]
				_prev->_next = this;
    121c:	ldr	r1, [r0, #12]
    121e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    1220:	str	r3, [r4, #0]
				_state = TimerActive;
    1222:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    1224:	pop	{r4, r5}
    1226:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    1228:	str	r4, [r0, #8]
		_prev = nullptr;
    122a:	str	r4, [r0, #12]
		listActive = this;
    122c:	str	r0, [r2, #0]
    122e:	b.n	11ec <MillisTimer::addToActiveList()+0x20>
    1230:	.word	0x20000424

00001234 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1234:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1236:	ldr	r6, [pc, #136]	; (12c0 <MillisTimer::runFromTimer()+0x8c>)
    1238:	ldr	r4, [r6, #0]
	while (timer) {
    123a:	cbz	r4, 1288 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    123c:	ldr	r3, [r4, #0]
    123e:	cmp	r3, #0
    1240:	bne.n	12b8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    1242:	mov	r5, r3
    1244:	ldr	r7, [pc, #124]	; (12c4 <MillisTimer::runFromTimer()+0x90>)
    1246:	b.n	1252 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1248:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    124a:	cbz	r4, 1288 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    124c:	ldr	r3, [r4, #0]
    124e:	cmp	r3, #0
    1250:	bne.n	12b8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    1252:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1254:	cbz	r3, 1258 <MillisTimer::runFromTimer()+0x24>
    1256:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1258:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    125a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    125c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    125e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1260:	ldr	r3, [r3, #0]
    1262:	cmp	r3, r7
    1264:	bne.n	12aa <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1266:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1268:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    126a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    126c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    126e:	beq.n	12b2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1270:	bl	10e8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1274:	ldr	r3, [r4, #4]
    1276:	cmp	r3, #0
    1278:	beq.n	1248 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    127a:	str	r3, [r4, #0]
				timer->addToActiveList();
    127c:	mov	r0, r4
    127e:	bl	11cc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    1282:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1284:	cmp	r4, #0
    1286:	bne.n	124c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1288:	mrs	r3, PRIMASK
		__disable_irq();
    128c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    128e:	ldr	r2, [pc, #56]	; (12c8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1290:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1292:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1294:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1296:	cbnz	r3, 129a <MillisTimer::runFromTimer()+0x66>
    1298:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    129a:	cbz	r0, 12a8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    129c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    129e:	bl	11cc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    12a2:	mov	r0, r4
    12a4:	cmp	r0, #0
    12a6:	bne.n	129c <MillisTimer::runFromTimer()+0x68>
    12a8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    12aa:	mov	r2, r4
    12ac:	movs	r1, #0
    12ae:	blx	r3
    12b0:	b.n	1274 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    12b2:	ldr	r3, [r0, #8]
    12b4:	blx	r3
    12b6:	b.n	1274 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    12b8:	subs	r3, #1
    12ba:	str	r3, [r4, #0]
			break;
    12bc:	b.n	1288 <MillisTimer::runFromTimer()+0x54>
    12be:	nop
    12c0:	.word	0x20000424
    12c4:	.word	0x00001169
    12c8:	.word	0x20000434

000012cc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    12cc:	ldr	r2, [pc, #16]	; (12e0 <systick_isr+0x14>)
    12ce:	ldr	r3, [pc, #20]	; (12e4 <systick_isr+0x18>)
    12d0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    12d2:	ldr	r2, [pc, #20]	; (12e8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    12d4:	str	r1, [r3, #0]
	systick_millis_count++;
    12d6:	ldr	r3, [r2, #0]
    12d8:	adds	r3, #1
    12da:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    12dc:	b.w	1234 <MillisTimer::runFromTimer()>
    12e0:	.word	0xe0001004
    12e4:	.word	0x200003fc
    12e8:	.word	0x20000400

000012ec <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    12ec:	ldr	r3, [pc, #4]	; (12f4 <serialEvent()+0x8>)
    12ee:	movs	r2, #0
    12f0:	strb	r2, [r3, #0]
    12f2:	bx	lr
    12f4:	.word	0x200003a2

000012f8 <rx_event>:
DMAMEM static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE_480] __attribute__ ((aligned(32)));
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];
static uint16_t rx_packet_size=0;
static volatile uint8_t rx_head;
static volatile uint8_t rx_tail;
    12f8:	ldr	r3, [r0, #4]
static uint8_t rx_list[RX_NUM + 1];
    12fa:	ldr	r2, [r0, #28]
static volatile uint32_t rx_available;
static void rx_queue_transfer(int i);
    12fc:	ubfx	r3, r3, #16, #15
    1300:	ldr	r1, [pc, #20]	; (1318 <rx_event+0x20>)
static transfer_t rx_transfer[RX_NUM] __attribute__ ((used, aligned(32)));
DMAMEM static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE_480] __attribute__ ((aligned(32)));
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];
static uint16_t rx_packet_size=0;
static volatile uint8_t rx_head;
    1302:	push	{r4, r5}
static volatile uint8_t rx_tail;
static uint8_t rx_list[RX_NUM + 1];
static volatile uint32_t rx_available;
static void rx_queue_transfer(int i);
    1304:	rsb	r3, r3, #64	; 0x40
static void rx_event(transfer_t *t);
    1308:	ldr	r4, [pc, #16]	; (131c <rx_event+0x24>)
    130a:	movs	r5, #0
static uint16_t rx_packet_size=0;
static volatile uint8_t rx_head;
static volatile uint8_t rx_tail;
static uint8_t rx_list[RX_NUM + 1];
static volatile uint32_t rx_available;
static void rx_queue_transfer(int i);
    130c:	strh.w	r3, [r1, r2, lsl #1]
static void rx_event(transfer_t *t);
    1310:	strh.w	r5, [r4, r2, lsl #1]

    1314:	pop	{r4, r5}
    1316:	bx	lr
    1318:	.word	0x20000c04
    131c:	.word	0x20000bfc

00001320 <usb_serial_flush_callback>:
static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

    1320:	push	{r3, r4, r5, r6, r7, lr}
static void timer_stop(void)
    1322:	ldr	r3, [pc, #84]	; (1378 <usb_serial_flush_callback+0x58>)
    1324:	ldrb	r3, [r3, #0]
    1326:	cbnz	r3, 1338 <usb_serial_flush_callback+0x18>
    1328:	and.w	r4, r3, #255	; 0xff
{
    132c:	ldr	r3, [pc, #76]	; (137c <usb_serial_flush_callback+0x5c>)
    132e:	ldrb	r3, [r3, #0]
    1330:	cbz	r3, 1338 <usb_serial_flush_callback+0x18>
	USB1_GPTIMER0CTRL = 0;
    1332:	ldr	r5, [pc, #76]	; (1380 <usb_serial_flush_callback+0x60>)
    1334:	ldrh	r2, [r5, #0]
    1336:	cbnz	r2, 133a <usb_serial_flush_callback+0x1a>
    1338:	pop	{r3, r4, r5, r6, r7, pc}
}

    133a:	ldr	r7, [pc, #72]	; (1384 <usb_serial_flush_callback+0x64>)

    133c:	mov	r3, r4

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
}

    133e:	ldr	r6, [pc, #72]	; (1388 <usb_serial_flush_callback+0x68>)

    1340:	rsb	r2, r2, #256	; 0x100

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
}

    1344:	ldrb	r1, [r7, #0]

    1346:	ldr	r0, [pc, #68]	; (138c <usb_serial_flush_callback+0x6c>)

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
}

    1348:	add.w	r6, r6, r1, lsl #5

    134c:	add.w	r1, r0, r1, lsl #8
    1350:	mov	r0, r6
    1352:	bl	eb4 <usb_prepare_transfer>
int usb_serial_write(const void *buffer, uint32_t size)
    1356:	mov	r1, r6
    1358:	movs	r0, #4
    135a:	bl	ee4 <usb_transmit>
{
    135e:	ldrb	r3, [r7, #0]
    1360:	adds	r3, #1
    1362:	uxtb	r3, r3
    1364:	cmp	r3, #6
    1366:	it	ls
    1368:	strbls	r3, [r7, #0]
	uint32_t sent=0;
    136a:	mov.w	r3, #0
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    136e:	it	hi
    1370:	strbhi	r4, [r7, #0]
	uint32_t sent=0;
    1372:	strh	r3, [r5, #0]
    1374:	pop	{r3, r4, r5, r6, r7, pc}
    1376:	nop
    1378:	.word	0x20000b38
    137c:	.word	0x200003f8
    1380:	.word	0x20000c80
    1384:	.word	0x20000b39
    1388:	.word	0x20000ca0
    138c:	.word	0x20000438

00001390 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1390:	bx	lr
    1392:	nop

00001394 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	int i;

    1394:	movs	r1, #0
    1396:	movs	r2, #224	; 0xe0
    1398:	ldr	r0, [pc, #128]	; (141c <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    139a:	push	{r3, r4, r5, r6, r7, lr}
	int i;

	printf("usb_serial_configure\n");
    139c:	mov	r4, r1
    139e:	ldr	r6, [pc, #128]	; (1420 <usb_serial_configure+0x8c>)
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    13a0:	ldr	r5, [pc, #128]	; (1424 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	int i;

    13a2:	bl	1524 <memset>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
    13a6:	ldr	r7, [pc, #128]	; (1428 <usb_serial_configure+0x94>)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    13a8:	mov	r1, r4
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    13aa:	ldr	r3, [pc, #128]	; (142c <usb_serial_configure+0x98>)
		tx_packet_size = CDC_TX_SIZE_480;
    13ac:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
    13ae:	strb	r4, [r6, #0]
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    13b0:	mov	r0, r5
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
    13b2:	ldr	r6, [pc, #124]	; (1430 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    13b4:	strh	r4, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    13b6:	bl	1524 <memset>
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    13ba:	mov	r3, r4
    13bc:	mov	r2, r4
    13be:	movs	r1, #16
    13c0:	movs	r0, #2
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
    13c2:	str	r4, [r7, #0]
    13c4:	strh	r4, [r7, #4]
	} else {
    13c6:	str	r4, [r6, #0]
    13c8:	strh	r4, [r6, #4]
		tx_packet_size = CDC_TX_SIZE_12;
    13ca:	bl	e4c <usb_config_tx>
		rx_packet_size = CDC_RX_SIZE_12;
    13ce:	mov	r2, r4
    13d0:	ldr	r3, [pc, #96]	; (1434 <usb_serial_configure+0xa0>)
    13d2:	movs	r1, #64	; 0x40
    13d4:	movs	r0, #3
    13d6:	bl	de8 <usb_config_rx>
	}
    13da:	mov	r3, r4
    13dc:	mov	r2, r4
    13de:	movs	r1, #64	; 0x40
    13e0:	movs	r0, #4
    13e2:	bl	e4c <usb_config_tx>
	memset(tx_transfer, 0, sizeof(tx_transfer));
    13e6:	mov	r3, r4
    13e8:	movs	r2, #64	; 0x40
    13ea:	mov	r0, r5
    13ec:	ldr	r1, [pc, #72]	; (1438 <usb_serial_configure+0xa4>)
    13ee:	bl	eb4 <usb_prepare_transfer>
	tx_head = 0;
    13f2:	mov	r1, r5
    13f4:	movs	r0, #3
    13f6:	bl	f0c <usb_receive>
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    13fa:	ldr	r3, [pc, #64]	; (143c <usb_serial_configure+0xa8>)
			rx_index[i] += len;
    13fc:	movs	r2, #74	; 0x4a
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    13fe:	ldr	r1, [pc, #64]	; (1440 <usb_serial_configure+0xac>)
    1400:	ldr	r0, [pc, #64]	; (1444 <usb_serial_configure+0xb0>)
    1402:	str	r0, [r1, #0]
			rx_available -= len;
    1404:	str.w	r4, [r3, #132]	; 0x84
			rx_index[i] += len;
    1408:	str.w	r2, [r3, #128]	; 0x80
			count += len;
    140c:	ldr.w	r2, [r3, #328]	; 0x148
    1410:	orr.w	r2, r2, #16777216	; 0x1000000
    1414:	str.w	r2, [r3, #328]	; 0x148
    1418:	pop	{r3, r4, r5, r6, r7, pc}
    141a:	nop
    141c:	.word	0x20000ca0
    1420:	.word	0x20000b39
    1424:	.word	0x20000c20
    1428:	.word	0x20000c04
    142c:	.word	0x20000c80
    1430:	.word	0x20000bfc
    1434:	.word	0x000012f9
    1438:	.word	0x20000b3c
    143c:	.word	0x402e0000
    1440:	.word	0x200003cc
    1444:	.word	0x00001321

00001448 <usb_serial_available>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1448:	ldr	r2, [pc, #8]	; (1454 <usb_serial_available+0xc>)
    144a:	ldr	r3, [pc, #12]	; (1458 <usb_serial_available+0x10>)
    144c:	ldrh	r0, [r2, #0]
    144e:	ldrh	r3, [r3, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1450:	subs	r0, r0, r3
    1452:	bx	lr
    1454:	.word	0x20000c04
    1458:	.word	0x20000bfc

0000145c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    145c:	push	{r4, r5, r6, r7}
    145e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1460:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1462:	mov	r7, r6
    1464:	b.n	1468 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1466:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1468:	udiv	r3, r0, r2
    146c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1470:	add.w	r4, r0, #55	; 0x37
    1474:	cmp	r0, #9
    1476:	add.w	r0, r0, #48	; 0x30
    147a:	uxtb	r4, r4
    147c:	it	ls
    147e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1480:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1482:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1486:	cmp	r3, #0
    1488:	bne.n	1466 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    148a:	adds	r2, r1, r5
    148c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    148e:	cbz	r5, 14a4 <ultoa+0x48>
    1490:	adds	r3, #1
		t = buf[j];
    1492:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1496:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1498:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    149a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    149c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    149e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    14a2:	blt.n	1490 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    14a4:	mov	r0, r1
    14a6:	pop	{r4, r5, r6, r7}
    14a8:	bx	lr
    14aa:	nop

000014ac <HardwareSerial::processSerialEvents()>:
	}
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
    14ac:	push	{r3, r4, r5, lr}
{
    14ae:	ldr	r3, [pc, #28]	; (14cc <HardwareSerial::processSerialEvents()+0x20>)
    14b0:	ldrb	r4, [r3, #0]
    14b2:	cbz	r4, 14c8 <HardwareSerial::processSerialEvents()+0x1c>
    14b4:	ldr	r5, [pc, #24]	; (14d0 <HardwareSerial::processSerialEvents()+0x24>)
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
    14b6:	ldr.w	r3, [r5, #4]!
    14ba:	cmp	r3, #0
    14bc:	beq.n	14b6 <HardwareSerial::processSerialEvents()+0xa>
		if (serial_event_handler_checks[i]) {
    14be:	blx	r3
			(*serial_event_handler_checks[i])();
    14c0:	subs	r3, r4, #1
    14c2:	ands.w	r4, r3, #255	; 0xff
    14c6:	bne.n	14b6 <HardwareSerial::processSerialEvents()+0xa>
    14c8:	pop	{r3, r4, r5, pc}
    14ca:	nop
    14cc:	.word	0x20000da0
    14d0:	.word	0x20000d80

000014d4 <__libc_init_array>:
    14d4:	push	{r4, r5, r6, lr}
    14d6:	ldr	r6, [pc, #60]	; (1514 <__libc_init_array+0x40>)
    14d8:	ldr	r5, [pc, #60]	; (1518 <__libc_init_array+0x44>)
    14da:	subs	r6, r6, r5
    14dc:	asrs	r6, r6, #2
    14de:	it	ne
    14e0:	movne	r4, #0
    14e2:	beq.n	14f0 <__libc_init_array+0x1c>
    14e4:	adds	r4, #1
    14e6:	ldr.w	r3, [r5], #4
    14ea:	blx	r3
    14ec:	cmp	r6, r4
    14ee:	bne.n	14e4 <__libc_init_array+0x10>
    14f0:	ldr	r6, [pc, #40]	; (151c <__libc_init_array+0x48>)
    14f2:	ldr	r5, [pc, #44]	; (1520 <__libc_init_array+0x4c>)
    14f4:	subs	r6, r6, r5
    14f6:	bl	15c0 <___init_veneer>
    14fa:	asrs	r6, r6, #2
    14fc:	it	ne
    14fe:	movne	r4, #0
    1500:	beq.n	1510 <__libc_init_array+0x3c>
    1502:	adds	r4, #1
    1504:	ldr.w	r3, [r5], #4
    1508:	blx	r3
    150a:	cmp	r6, r4
    150c:	bne.n	1502 <__libc_init_array+0x2e>
    150e:	pop	{r4, r5, r6, pc}
    1510:	pop	{r4, r5, r6, pc}
    1512:	nop
    1514:	.word	0x60001648
    1518:	.word	0x60001648
    151c:	.word	0x6000164c
    1520:	.word	0x60001648

00001524 <memset>:
    1524:	push	{r4, r5, r6}
    1526:	lsls	r4, r0, #30
    1528:	beq.n	15b8 <memset+0x94>
    152a:	subs	r4, r2, #1
    152c:	cmp	r2, #0
    152e:	beq.n	15b4 <memset+0x90>
    1530:	uxtb	r5, r1
    1532:	mov	r3, r0
    1534:	b.n	153c <memset+0x18>
    1536:	subs	r2, r4, #1
    1538:	cbz	r4, 15b4 <memset+0x90>
    153a:	mov	r4, r2
    153c:	strb.w	r5, [r3], #1
    1540:	lsls	r2, r3, #30
    1542:	bne.n	1536 <memset+0x12>
    1544:	cmp	r4, #3
    1546:	bls.n	15a6 <memset+0x82>
    1548:	uxtb	r5, r1
    154a:	orr.w	r5, r5, r5, lsl #8
    154e:	cmp	r4, #15
    1550:	orr.w	r5, r5, r5, lsl #16
    1554:	bls.n	158a <memset+0x66>
    1556:	add.w	r2, r3, #16
    155a:	mov	r6, r4
    155c:	subs	r6, #16
    155e:	cmp	r6, #15
    1560:	str.w	r5, [r2, #-16]
    1564:	str.w	r5, [r2, #-12]
    1568:	str.w	r5, [r2, #-8]
    156c:	str.w	r5, [r2, #-4]
    1570:	add.w	r2, r2, #16
    1574:	bhi.n	155c <memset+0x38>
    1576:	sub.w	r2, r4, #16
    157a:	bic.w	r2, r2, #15
    157e:	and.w	r4, r4, #15
    1582:	adds	r2, #16
    1584:	cmp	r4, #3
    1586:	add	r3, r2
    1588:	bls.n	15a6 <memset+0x82>
    158a:	mov	r6, r3
    158c:	mov	r2, r4
    158e:	subs	r2, #4
    1590:	cmp	r2, #3
    1592:	str.w	r5, [r6], #4
    1596:	bhi.n	158e <memset+0x6a>
    1598:	subs	r2, r4, #4
    159a:	bic.w	r2, r2, #3
    159e:	adds	r2, #4
    15a0:	add	r3, r2
    15a2:	and.w	r4, r4, #3
    15a6:	cbz	r4, 15b4 <memset+0x90>
    15a8:	uxtb	r1, r1
    15aa:	add	r4, r3
    15ac:	strb.w	r1, [r3], #1
    15b0:	cmp	r3, r4
    15b2:	bne.n	15ac <memset+0x88>
    15b4:	pop	{r4, r5, r6}
    15b6:	bx	lr
    15b8:	mov	r4, r2
    15ba:	mov	r3, r0
    15bc:	b.n	1544 <memset+0x20>
    15be:	nop

000015c0 <___init_veneer>:
    15c0:	ldr.w	pc, [pc]	; 15c4 <___init_veneer+0x4>
    15c4:	.word	0x600015e1
	...

Disassembly of section .fini:

000015d0 <_fini>:
    15d0:	push	{r3, r4, r5, r6, r7, lr}
    15d2:	nop
