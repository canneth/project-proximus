
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00003ca0 l    d  .fini	00000000 .fini
00003ca4 l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20000830 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00001e78 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00000ac0 l     F .text.itcm	0000005c schedule_transfer
00000b1c l     F .text.itcm	00000036 run_callbacks
00000b54 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
00000bf8 l     F .text.itcm	00000698 isr
20000a64 l     O .bss	00000004 endpointN_notify_mask
20000a68 l     O .bss	00000001 sof_usage
20000a74 l     O .bss	00000004 endpoint0_notify_mask
20000a78 l     O .bss	00000001 usb_reboot_timer
20000a80 l     O .bss	00000008 endpoint0_setupdata
20000a88 l     O .bss	00000008 reply_buffer
20000a90 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20000ac8 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20000acc l     O .bss	00000004 s_hotTemp
20000ad0 l     O .bss	00000004 s_hot_ROOM
20000ad4 l     O .bss	00000004 s_roomC_hotC
20000ad8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
600016dc l     O .text.progmem	0000000a qualifier_descriptor
200003b8 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20000830 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20000834 l       .bss	00000000 object.8610
60001740 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000130 l     F .text.itcm	0000004c _GLOBAL__sub_I_matrix_printer
00000000 l    df *ABS*	00000000 Leg.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00000380 l     F .text.itcm	0000006c rx_queue_transfer
000003ec l     F .text.itcm	000000b4 rx_event
000004a0 l     F .text.itcm	00000098 usb_serial_flush_callback
00000538 l     F .text.itcm	0000017c usb_serial_write.part.1
20000888 l     O .bss	00000010 rx_index
20000898 l     O .bss	00000002 tx_packet_size
2000089a l     O .bss	00000001 tx_noautoflush
2000089b l     O .bss	00000001 tx_head
200008a0 l     O .bss	00000100 rx_transfer
200009a0 l     O .bss	00000001 rx_tail
200009a4 l     O .bss	00000009 rx_list
200009ae l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
200009b0 l     O .bss	00000010 rx_count
200009c0 l     O .bss	00000004 rx_available
200009c4 l     O .bss	00000001 rx_head
200009c5 l     O .bss	00000001 transmit_previous_timeout
200009c6 l     O .bss	00000002 tx_available
200009e0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20000aa8 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 w_acos.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_acos.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_atan.c
20000368 l     O .data	00000020 atanlo
20000388 l     O .data	00000020 atanhi
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
200003a8 l     O .data	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20000400 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20203050 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600016f8 l     F .text.progmem	00000008 __main_veneer
60001700 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001708 l     F .text.progmem	00000008 __memset_veneer
60001710 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001718 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001720 l     F .text.progmem	00000008 __delay_veneer
60001728 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001730 l     F .text.progmem	00000008 __pwm_init_veneer
60001738 l     F .text.progmem	00000008 ____libc_init_array_veneer
00003c90 l     F .text.itcm	00000008 ___init_veneer
000008f0 g     F .text.itcm	0000000c usb_serial_available
00001e84 g     F .text.itcm	00000002 startup_default_late_hook
0000390c g     F .text.itcm	0000000e fabs
00001848  w    F .text.itcm	000000a0 yield
00002650 g     F .text.itcm	000000a8 sqrt
20000a6c g     O .bss	00000004 usb_timer1_callback
60001638 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20000adc g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
2000084c g     O .bss	0000003c leg
00001b20 g     F .text.itcm	00000020 Print::println()
600014ac g     F .text.progmem	00000058 analog_init
0000017c g     F .text.itcm	0000002e project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
200003f8 g     O .data	00000004 F_CPU_ACTUAL
0000224c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00001a34 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000ac0 g     O .bss	00000001 EventResponder::runningFromYield
00003b98 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
20000aac g     O .bss	00000004 EventResponder::firstInterrupt
000013d8 g     F .text.itcm	00000004 usb_transfer_status
200003e2 g     O .data	00000001 usb_enable_serial_event_processing
00001b04  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000024 g     O .data	00000280 digital_pin_to_info_PGM
00003ca0 g       .text.itcm	00000000 _etext
20000830 g       .bss	00000000 _sbss
60001750 g       *ABS*	00000000 _stextload
00000084 g     F .text.itcm	000000ac loop
00001290 g     F .text.itcm	00000064 usb_config_rx
000019cc g     F .text.itcm	00000068 MillisTimer::addToActiveList()
20000ab0 g     O .bss	00000004 EventResponder::lastInterrupt
00001d34 g     F .text.itcm	00000134 memcpy
20000aa4 g     O .bss	00000004 systick_millis_count
20000a98 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
60001638  w    O .text.progmem	00000018 usb_string_manufacturer_name
00001968  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
6000129c g     F .text.progmem	000000ec usb_init
0000017c g     F .text.itcm	0000002e project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
20002280 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
60001698 g     O .text.progmem	00000043 usb_config_descriptor_480
00001e80 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
00000970 g     F .text.itcm	00000020 usb_serial_getchar
20000afc g     O .bss	00000008 usb_cdc_line_coding
20000ab8 g     O .bss	00000004 EventResponder::lastYield
00001760 g     F .text.itcm	00000080 pinMode
00001bc0 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss.dma	00000000 _heap_end
200003fc g     O .data	00000001 __fdlib_version
20000abc g     O .bss	00000004 EventResponder::firstYield
00003ba4 g     F .text.itcm	00000050 __libc_init_array
00001e88  w    F .text.itcm	0000008c HardFault_HandlerC
00001aec  w    F .text.itcm	00000004 usb_serial_class::clear()
600053f4 g       *ABS*	00000000 _sdataload
20000ac4 g     O .bss	00000004 MillisTimer::listWaiting
200009c8 g     O .bss	00000001 usb_cdc_line_rtsdtr
600016e8 g     F .text.progmem	00000000 _init
000006b4 g     F .text.itcm	00000002 usb_serial_reset
60001654 g     O .text.progmem	00000043 usb_config_descriptor_12
200026e0 g       .bss	00000000 _ebss
00003940 g     F .text.itcm	0000011c rint
00002c20 g     F .text.itcm	000001dc __ieee754_atan2
00000001 g       *ABS*	00000000 _itcm_block_count
20001000 g     O .bss	00000020 endpoint0_transfer_data
000014a8 g     F .text.itcm	000002b8 pwm_init
60001448 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20001020 g     O .bss	00000020 endpoint0_transfer_ack
20000b04 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000138c g     F .text.itcm	00000028 usb_transmit
00001acc g     F .text.itcm	00000020 systick_isr
200003e4 g     O .data	00000010 Serial
20000af8 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00001b0c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00001e80  w    F .text.itcm	00000002 startup_early_hook
000029b8 g     F .text.itcm	00000264 __ieee754_asin
000008ac g     F .text.itcm	00000044 usb_serial_peekchar
00001f14 g     F .text.itcm	000002c4 set_arm_clock
20000a9c g     O .bss	00000004 systick_cycle_count
200003cc g     O .data	00000016 usb_string_serial_number_default
00001afc  w    F .text.itcm	00000004 usb_serial_class::flush()
00001af4  w    F .text.itcm	00000004 usb_serial_class::read()
0000135c g     F .text.itcm	0000002e usb_prepare_transfer
000023cc g     F .text.itcm	00000004 atan2
00001e68 g     F .text.itcm	00000018 unused_interrupt_vector
60001504 g     F .text.progmem	0000011c tempmon_init
20000a60 g     O .bss	00000004 usb_timer0_callback
00001b14  w    F .text.itcm	0000000c serialEvent()
000008fc g     F .text.itcm	00000074 usb_serial_flush_input
00002e00 g     F .text.itcm	00000784 __ieee754_pow
000023d0 g     F .text.itcm	00000280 pow
00000990 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20000310  w    O .data	00000028 vtable for usb_serial_class
20000aa0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20000ab4 g     O .bss	00000004 MillisTimer::listActive
00000a20 g     F .text.itcm	000000a0 usb_serial_flush_output
20002400 g     O .bss	000002c0 _VectorsRam
20000a70 g     O .bss	00000001 usb_high_speed
00003bf4 g     F .text.itcm	0000009a memset
00001838 g     F .text.itcm	00000010 main
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
0000392c g     F .text.itcm	00000004 matherr
000017e0 g     F .text.itcm	00000058 usb_init_serialnumber
60001748 g       .text.progmem	00000000 __init_array_end
000018e8 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
60001650 g     O .text.progmem	00000004 string0
000009bc g     F .text.itcm	00000018 usb_serial_write
0000391c g     F .text.itcm	00000010 finite
00001e84  w    F .text.itcm	00000002 startup_late_hook
00001af8  w    F .text.itcm	00000004 usb_serial_class::available()
20002000 g     O .bss	00000280 endpoint_queue_head
60001620  w    O .text.progmem	00000016 usb_string_product_name
00003b7c g     F .text.itcm	0000001a copysign
000013dc g     F .text.itcm	000000cc delay
00003ca0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00003708 g     F .text.itcm	00000204 atan
00002228 g     F .text.itcm	00000024 Panic_Temp_isr
00002320 g     F .text.itcm	000000ac asin
20000828 g     O .data	00000004 _impure_ptr
00003a60 g     F .text.itcm	0000011c scalbn
60001740 g       .text.progmem	00000000 __preinit_array_end
0000007c g     F .text.itcm	00000008 setup
200002a4 g     O .data	0000006c usb_descriptor_list
00003930 g     F .text.itcm	00000010 nan
00003584 g     F .text.itcm	00000184 __ieee754_sqrt
20078000 g       .bss.dma	00000000 _estack
000009d4 g     F .text.itcm	0000004c usb_serial_write_buffer_free
000001b0 g     F .text.itcm	000001d0 project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)
000006b8 g     F .text.itcm	00000108 usb_serial_configure
20000830 g       .data	00000000 _edata
00001b00  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000021d8 g     F .text.itcm	0000004e ultoa
00001984 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
00001af0  w    F .text.itcm	00000004 usb_serial_class::peek()
60001740 g       .text.progmem	00000000 __init_array_start
200003f4 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
60001620 g     O .text.progmem	00000016 usb_string_product_name_default
60001388 g     F .text.progmem	000000c0 configure_cache
00002274 g     F .text.itcm	000000ac acos
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001740 g       .text.progmem	00000000 __preinit_array_start
000013b4 g     F .text.itcm	00000024 usb_receive
00005c20 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000019c8 g     F .text.itcm	00000004 pendablesrvreq_isr
000007c0 g     F .text.itcm	000000ec usb_serial_read
00001b40 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000012f4 g     F .text.itcm	00000068 usb_config_tx
000026f8 g     F .text.itcm	000002bc __ieee754_acos
200003cc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...` \......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001448 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001710 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001728 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	6000129c <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001730 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001700 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001738 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600016f8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001750
60001220:	.word	0x00003ca0
60001224:	.word	0x20000000
60001228:	.word	0x600053f4
6000122c:	.word	0x20000830
60001230:	.word	0x20000830
60001234:	.word	0x200026e0
60001238:	.word	0xe000ed88
6000123c:	.word	0x200023fc
60001240:	.word	0x00001e69
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x000019c9
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00001acd
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000a9c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20000aa4
60001290:	.word	0x20002400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001718 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001720 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #640	; 0x280
6000132a:	bl	60001708 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20002000
6000137c:	.word	0x20002400
60001380:	.word	0x00000bf9
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138a:	ldr	r2, [pc, #116]	; (60001400 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138e:	ldr	r3, [pc, #116]	; (60001404 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001390:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r0, [pc, #112]	; (60001408 <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001398:	ldr	r7, [pc, #112]	; (6000140c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000139a:	ldr	r6, [pc, #116]	; (60001410 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139c:	ldr	r5, [pc, #116]	; (60001414 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a8:	ldr	r7, [pc, #108]	; (60001418 <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013aa:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ac:	ldr	r6, [pc, #108]	; (6000141c <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013ae:	ldr	r5, [pc, #112]	; (60001420 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013b0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013b2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b4:	ldr	r7, [pc, #108]	; (60001424 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b6:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b8:	ldr	r6, [pc, #108]	; (60001428 <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ba:	ldr	r5, [pc, #112]	; (6000142c <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013bc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c0:	ldr	r7, [pc, #108]	; (60001430 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c2:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c4:	ldr	r6, [pc, #108]	; (60001434 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013c6:	ldr	r5, [pc, #112]	; (60001438 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ca:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013cc:	ldr	r7, [pc, #108]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600013ce:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d0:	ldr	r6, [pc, #108]	; (60001440 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d2:	ldr	r5, [pc, #112]	; (60001444 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600013d4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600013d6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600013d8:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013da:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013dc:	dsb	sy
	asm("isb");
600013e0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013e4:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013e8:	dsb	sy
	asm("isb");
600013ec:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013f0:	ldr.w	r3, [r2, #-136]
600013f4:	orr.w	r3, r3, #196608	; 0x30000
600013f8:	str.w	r3, [r2, #-136]
600013fc:	pop	{r4, r5, r6, r7, pc}
600013fe:	nop
60001400:	.word	0xe000ed9c
60001404:	.word	0xe000eda0
60001408:	.word	0xe000ed94
6000140c:	.word	0x03080025
60001410:	.word	0x00200011
60001414:	.word	0x07020021
60001418:	.word	0x20000012
6000141c:	.word	0x13080025
60001420:	.word	0x20200013
60001424:	.word	0x130b0027
60001428:	.word	0x40000014
6000142c:	.word	0x13100033
60001430:	.word	0x60000015
60001434:	.word	0x070b002f
60001438:	.word	0x70000016
6000143c:	.word	0x070b0035
60001440:	.word	0x70000017
60001444:	.word	0x030b002f

60001448 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001448:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144a:	ldr	r2, [pc, #92]	; (600014a8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000144e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001452:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001456:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000145e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001462:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001464:	tst.w	r3, #2
60001468:	beq.n	60001478 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000146c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000146e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001470:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001472:	tst.w	r3, #2
60001476:	bne.n	6000146a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001478:	tst.w	r3, #8192	; 0x2000
6000147c:	bne.n	60001482 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000147e:	str	r5, [r2, #20]
			continue;
60001480:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001482:	tst.w	r3, #4096	; 0x1000
60001486:	bne.n	6000148c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001488:	str	r6, [r2, #20]
			continue;
6000148a:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000148c:	cmp	r3, #0
6000148e:	bge.n	60001462 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001490:	tst.w	r3, #65536	; 0x10000
60001494:	beq.n	6000149a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001496:	str	r1, [r2, #24]
			continue;
60001498:	b.n	60001462 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149a:	lsls	r3, r3, #25
6000149c:	bmi.n	600014a2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000149e:	str	r7, [r2, #20]
			continue;
600014a0:	b.n	60001462 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a2:	pop	{r4, r5, r6, r7}
600014a4:	bx	lr
600014a6:	nop
600014a8:	.word	0x400d8000

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x20000ac8

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x20000ad4
60001600:	.word	0x20000ad8
60001604:	.word	0x20000ad0
60001608:	.word	0x20002400
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x00002229
60001618:	.word	0xe000e108
6000161c:	.word	0x20000acc

60001620 <usb_string_product_name_default>:
60001620:	..U.S.B. .S.e.r.
60001630:	i.a.l...

60001638 <usb_string_manufacturer_name_default>:
60001638:	..T.e.e.n.s.y.d.
60001648:	u.i.n.o.

60001650 <string0>:
60001650:	....

60001654 <usb_config_descriptor_12>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	.........@......
60001694:	@...

60001698 <usb_config_descriptor_480>:
60001698:	..C.....2.......
600016a8:	...$....$....$..
600016b8:	.$..............
600016c8:	................
600016d8:	....

600016dc <qualifier_descriptor>:
600016dc:	.......@....

600016e8 <_init>:
600016e8:	push	{r3, r4, r5, r6, r7, lr}
600016ea:	nop
600016ec:	pop	{r3, r4, r5, r6, r7}
600016ee:	pop	{r3}
600016f0:	mov	lr, r3
600016f2:	bx	lr
600016f4:			; <UNDEFINED> instruction: 0xffffffff

600016f8 <__main_veneer>:
600016f8:	ldr.w	pc, [pc]	; 600016fc <__main_veneer+0x4>
600016fc:	.word	0x00001839

60001700 <__startup_late_hook_veneer>:
60001700:	ldr.w	pc, [pc]	; 60001704 <__startup_late_hook_veneer+0x4>
60001704:	.word	0x00001e85

60001708 <__memset_veneer>:
60001708:	ldr.w	pc, [pc]	; 6000170c <__memset_veneer+0x4>
6000170c:	.word	0x00003bf5

60001710 <__set_arm_clock_veneer>:
60001710:	ldr.w	pc, [pc]	; 60001714 <__set_arm_clock_veneer+0x4>
60001714:	.word	0x00001f15

60001718 <__usb_init_serialnumber_veneer>:
60001718:	ldr.w	pc, [pc]	; 6000171c <__usb_init_serialnumber_veneer+0x4>
6000171c:	.word	0x000017e1

60001720 <__delay_veneer>:
60001720:	ldr.w	pc, [pc]	; 60001724 <__delay_veneer+0x4>
60001724:	.word	0x000013dd

60001728 <__startup_early_hook_veneer>:
60001728:	ldr.w	pc, [pc]	; 6000172c <__startup_early_hook_veneer+0x4>
6000172c:	.word	0x00001e81

60001730 <__pwm_init_veneer>:
60001730:	ldr.w	pc, [pc]	; 60001734 <__pwm_init_veneer+0x4>
60001734:	.word	0x000014a9

60001738 <____libc_init_array_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <____libc_init_array_veneer+0x4>
6000173c:	.word	0x00003ba5

60001740 <__init_array_start>:
60001740:	.word	0x00000045
60001744:	.word	0x00000131

60001748 <__init_array_end>:
60001748:	.word	0xffffffff
6000174c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	.word	0xbd107023
      38:	lsrs	r0, r6, #32
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	subs	r4, #164	; 0xa4
	...

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r6, #32
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	subs	r4, #164	; 0xa4
  ADC2_CFG = mode1;
      72:	.short	0x0000
  
  if(num >= 4){
      74:	lsrs	r0, r6, #32
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <setup>:
    0.160, // l_3
    Eigen::Vector3i(1, 1, 1)
);

void setup() {
    pinMode(led_pin, OUTPUT);
      7c:	movs	r1, #1
      7e:	.short	0x200d
      80:	b.w	1760 <pinMode>

00000084 <loop>:
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      84:	.word	0xb086b570
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
      88:	ldr	r3, [pc, #132]	; (110 <loop+0x8c>)
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
      8a:	.short	0x4d22
   
}

void loop() {
    // 1.57080
    matrix_printer.print(leg.calculateIKFoot(Eigen::Vector3f(0.2, 0.1, -0.2)));
      8c:	add	r0, sp, #12
      m_storage.data()[1] = y;
      8e:	ldr	r6, [pc, #136]	; (118 <loop+0x94>)
      90:	.word	0x4922466a
      m_storage.data()[2] = z;
      94:	str	r3, [sp, #8]
      96:	.short	0x4604
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
      98:	str	r5, [sp, #0]
      9a:	add	r5, sp, #24
      m_storage.data()[1] = y;
      9c:	str	r6, [sp, #4]
      9e:	bl	1b0 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      a2:	movs	r1, #13
      a4:	.word	0xf000481e
      a8:	stc2	3, cr2, [r9], {0}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
      ac:	movs	r2, #10
      ae:	.short	0x2103
      b0:	ldr	r0, [pc, #112]	; (124 <loop+0xa0>)
      b2:	.short	0xf001
      b4:	stc2l	8, cr4, [r5, #-108]	; 0xffffff94
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
      b8:	bl	1b20 <Print::println()>
      bc:	movs	r1, #13
      be:	ldr	r0, [pc, #104]	; (128 <loop+0xa4>)
      c0:	bl	9bc <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
      c4:	movs	r3, #0
      c6:	movs	r2, #10
      c8:	movs	r1, #1
      ca:	ldr	r0, [pc, #88]	; (124 <loop+0xa0>)
      cc:	.word	0xfd38f001
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
      d0:	ldr	r0, [pc, #80]	; (124 <loop+0xa0>)
      d2:	.short	0xf001
      d4:	stc2	8, cr4, [r5, #-76]!	; 0xffffffb4
                uint8_t num_of_rows = matrix_to_print.rows();
                uint8_t num_of_cols = matrix_to_print.cols();

                Serial.print("num_of_rows: "); Serial.println(num_of_rows);
                Serial.print("num_of_cols: "); Serial.println(num_of_cols);       
                Serial.println();
      d8:	.word	0xfd22f001
            
                for (uint8_t i = 0; i < num_of_rows; i++)
                {
                    for (uint8_t j = 0; j < num_of_cols; j++)
                    {
                        Serial.print(matrix_to_print(i, j), 5); // To 5 dp
      dc:	vldmia	r4!, {s0}
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
      e0:	movs	r1, #5
      e2:	.short	0x4810
      e4:	vcvt.f64.f32	d0, s0
      e8:	bl	1bc0 <Print::printFloat(double, unsigned char)>
      ec:	.word	0x480f2102
      f0:	bl	9bc <usb_serial_write>
                        Serial.print(", ");
                    }
                    Serial.println();
      f4:	.word	0xf001480b
      f8:	ldc2	2, cr4, [r3, #-688]	; 0xfffffd50

                Serial.print("num_of_rows: "); Serial.println(num_of_rows);
                Serial.print("num_of_cols: "); Serial.println(num_of_cols);       
                Serial.println();
            
                for (uint8_t i = 0; i < num_of_rows; i++)
      fc:	bne.n	dc <loop+0x58>
                        Serial.print(matrix_to_print(i, j), 5); // To 5 dp
                        Serial.print(", ");
                    }
                    Serial.println();
                }
                Serial.println();
      fe:	.short	0x4809
     100:	bl	1b20 <Print::println()>
    delay(1000);
     104:	.word	0x707af44f
     108:	bl	13dc <delay>
  
     10c:	.word	0xbd70b006
     110:	ldmia	r4!, {r0, r2, r3, r6, r7}
     112:	.short	0xbe4c
     114:	ldmia	r4!, {r0, r2, r3, r6, r7}
     116:	subs	r6, #76	; 0x4c
     118:	.word	0x3dcccccd
     11c:	lsrs	r4, r1, #1
     11e:	.short	0x2000
     120:	movs	r0, r0
     122:	movs	r0, #0
     124:	.word	0x200003e4
     128:	movs	r0, r2
     12a:	.short	0x2000
     12c:	movs	r0, r4
     12e:	movs	r0, #0

00000130 <_GLOBAL__sub_I_matrix_printer>:

const uint8_t led_pin = 13;

MatrixPrinter matrix_printer;

Leg leg(
     130:	.word	0x2a0ceddf
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     134:	movs	r3, #1
     136:	.short	0xeddf
     138:	subs	r4, r1, r0
     13a:	.short	0xeeb0
     13c:	cmp	r2, #98	; 0x62
     13e:	vldr	s2, [pc, #44]	; 16c <_GLOBAL__sub_I_matrix_printer+0x3c>
     142:	.short	0xeddf
     144:	lsrs	r3, r1, #8
     146:	.short	0xed9f
     148:	lsrs	r3, r1, #8
     14a:	.short	0x480b
void loop() {
    // 1.57080
    matrix_printer.print(leg.calculateIKFoot(Eigen::Vector3f(0.2, 0.1, -0.2)));
    delay(1000);
  
     14c:	push	{lr}
     14e:	.short	0xb085

const uint8_t led_pin = 13;

MatrixPrinter matrix_printer;

Leg leg(
     150:	add	r1, sp, #4
     152:	.short	0x9301
      m_storage.data()[1] = y;
     154:	str	r3, [sp, #8]
      m_storage.data()[2] = z;
     156:	str	r3, [sp, #12]
     158:	.word	0xf810f000
void loop() {
    // 1.57080
    matrix_printer.print(leg.calculateIKFoot(Eigen::Vector3f(0.2, 0.1, -0.2)));
    delay(1000);
  
     15c:	add	sp, #20
     15e:	.short	0xf85d
     160:	mla	pc, r4, r0, fp
     164:	.word	0x3e23d70a
     168:	ldr	r3, [r6, #4]
     16a:	.short	0x3d91
     16c:	add	r5, pc, #908	; (adr r5, 4fc <usb_serial_flush_callback+0x5c>)
     16e:	.short	0x3d1b
     170:	bvc.n	188 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)+0xc>
     172:	subs	r5, #35	; 0x23
     174:	.word	0x3e1eb852
     178:	lsrs	r4, r1, #1
     17a:	.short	0x2000

0000017c <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>:
    l_3(0.0),
    joint_servo_directions(Eigen::Vector3i::Ones()),
    joint_angles(Eigen::Vector3f::Zero()),
    foot_position_wrt_body(Eigen::Vector3f::Zero())
{}
Leg::Leg(
     17c:	mov	r3, r0
     17e:	.short	0xb410
    }
    EIGEN_DEVICE_FUNC
    explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
      : m_data(internal::constructor_without_unaligned_array_assert()) {}
    EIGEN_DEVICE_FUNC 
    DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
     180:	ldmia	r1, {r0, r1, r2}
     182:	.short	0xf103
     184:	lsls	r0, r3, #16
    d_y(d_y_init),
    d_j2_j1_bx(d_j2_j1_bx_init),
    d_j2_j1_by(d_j2_j1_by_init),
    l_2(l_2_init),
    l_3(l_3_init),
    joint_servo_directions(joint_servo_directions_init)
     186:	.short	0xed83
     188:	lsrs	r0, r0, #8
     18a:	vstr	s1, [r3, #4]
     18e:	vstr	s2, [r3, #8]
     192:	vstr	s3, [r3, #12]
     196:	vstr	s4, [r3, #16]
     19a:	vstr	s5, [r3, #20]
     19e:	stmia.w	r4, {r0, r1, r2}
{}
     1a2:	mov	r0, r3
     1a4:	ldr.w	r4, [sp], #4
     1a8:	bx	lr
     1aa:	nop
     1ac:	movs	r0, r0
	...

000001b0 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>:
Eigen::Vector3f Leg::getFootPositionWrtBody() {
    return foot_position_wrt_body;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     1b0:	push	{r3, r4, r5, lr}
     1b2:	vpush	{d8-d14}
    float theta_2 = 0.0;
    float theta_3 = 0.0;

    float p_x = foot_pos(0);
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
     1b6:	vldr	s16, [r2, #8]
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     1ba:	vmov.f64	d1, #96	; 0x3f000000  0.5
     1be:	vldr	s15, [r2, #4]
Eigen::Vector3f Leg::getFootPositionWrtBody() {
    return foot_position_wrt_body;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     1c2:	mov	r4, r1
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     1c4:	vcvt.f64.f32	d0, s16
     1c8:	vldr	s14, [r1, #4]
Eigen::Vector3f Leg::getFootPositionWrtBody() {
    return foot_position_wrt_body;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     1cc:	mov	r5, r0

    float theta_1 = 0.0;
    float theta_2 = 0.0;
    float theta_3 = 0.0;

    float p_x = foot_pos(0);
     1ce:	vldr	s22, [r2]
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     1d2:	vsub.f32	s14, s15, s14
     1d6:	vmul.f64	d0, d0, d0
     1da:	vcvt.f64.f32	d7, s14
     1de:	vfma.f64	d0, d7, d7
     1e2:	bl	23d0 <pow>
    float rho = asin(abs(p_z)/l_a);
     1e6:	vcvt.s32.f32	s16, s16
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     1ea:	vcvt.f32.f64	s20, d0
    float rho = asin(abs(p_z)/l_a);
     1ee:	vmov	r3, s16
     1f2:	cmp	r3, #0
     1f4:	it	lt
     1f6:	neglt	r3, r3
     1f8:	vmov	s16, r3
     1fc:	vcvt.f32.s32	s16, s16
     200:	vdiv.f32	s0, s16, s20
     204:	vcvt.f64.f32	d0, s0
     208:	bl	2320 <asin>
    float beta = acos(abs(d_j2_j1_by)/l_a);
     20c:	vldr	s15, [r4, #12]
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
    float rho = asin(abs(p_z)/l_a);
     210:	vmov.f64	d9, d0
    float beta = acos(abs(d_j2_j1_by)/l_a);
     214:	vcvt.s32.f32	s15, s15
     218:	vmov	r3, s15
     21c:	cmp	r3, #0
     21e:	it	lt
     220:	neglt	r3, r3
     222:	vmov	s15, r3
     226:	vcvt.f32.s32	s15, s15
     22a:	vdiv.f32	s0, s15, s20
     22e:	vcvt.f64.f32	d0, s0
     232:	bl	2274 <acos>
     236:	vmov.f64	d8, d0
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
     23a:	vldr	s0, [r4, #12]
     23e:	vcvt.f64.f32	d7, s20
     242:	vcvt.f64.f32	d0, s0
     246:	vnmul.f64	d0, d0, d0
     24a:	vfma.f64	d0, d7, d7
     24e:	vsqrt.f64	d12, d0
     252:	vcmp.f64	d12, d12
     256:	vmrs	APSR_nzcv, fpscr
     25a:	bne.w	364 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x1b4>
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
     25e:	vldr	s15, [r4]
     262:	vcvt.f32.f64	s24, d12
     266:	vldr	s0, [r4, #8]
     26a:	vsub.f32	s15, s22, s15
     26e:	vcvt.f64.f32	d12, s24
     272:	vsub.f32	s0, s15, s0
     276:	vcvt.f64.f32	d0, s0
     27a:	vmul.f64	d0, d0, d0
     27e:	vfma.f64	d0, d12, d12
     282:	vsqrt.f64	d10, d0
     286:	vcmp.f64	d10, d10
     28a:	vmrs	APSR_nzcv, fpscr
     28e:	bne.n	36e <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x1be>
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;
     290:	vldr	s14, [r4, #16]
     294:	vcvt.f32.f64	s20, d10
     298:	vmov.f64	d14, #128	; 0xc0000000 -2.0
     29c:	vldr	s12, [r4, #20]
     2a0:	vcvt.f64.f32	d7, s14
     2a4:	vcvt.f64.f32	d10, s20
     2a8:	vcvt.f64.f32	d6, s12
     2ac:	vnmul.f64	d0, d7, d7
     2b0:	vmul.f64	d7, d7, d14
     2b4:	vfma.f64	d0, d10, d10
     2b8:	vmul.f64	d7, d7, d6
     2bc:	vfms.f64	d0, d6, d6
     2c0:	vdiv.f64	d0, d0, d7
     2c4:	bl	2274 <acos>

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     2c8:	vldr	s14, [r4, #20]
     2cc:	vldr	s12, [r4, #16]
     2d0:	vcvt.f64.f32	d7, s14
     2d4:	vcvt.f64.f32	d6, s12
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;
     2d8:	vmov.f64	d13, d0

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     2dc:	vmul.f64	d7, d7, d7
     2e0:	vmul.f64	d0, d10, d14
     2e4:	vfms.f64	d7, d10, d10
     2e8:	vmul.f64	d0, d0, d6
     2ec:	vfms.f64	d7, d6, d6
     2f0:	vdiv.f64	d0, d7, d0
     2f4:	bl	2274 <acos>
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;
     2f8:	vldr	s15, [r4, #8]
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     2fc:	vmov.f64	d10, d0
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;
     300:	vldr	s0, [r4]
     304:	vmov.f64	d1, d12
     308:	vsub.f32	s22, s22, s0
     30c:	vsub.f32	s0, s22, s15
     310:	vcvt.f64.f32	d0, s0
     314:	bl	23cc <atan2>

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     318:	vcvt.f32.f64	s20, d10

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     31c:	vcvt.f32.f64	s16, d8
     320:	add.w	r3, r4, #36	; 0x24
     324:	vcvt.f32.f64	s18, d9
    joint_angles(1) = theta_2;
     328:	vcvt.f64.f32	d10, s20
     32c:	vldr	d7, [pc, #72]	; 378 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x1c8>
     330:	vsub.f64	d0, d0, d10

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     334:	vsub.f32	s16, s16, s18
    joint_angles(1) = theta_2;
    joint_angles(2) = theta_3;
     338:	vsub.f64	d13, d13, d7
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     33c:	vadd.f64	d10, d0, d7

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     340:	vstr	s16, [r4, #36]	; 0x24
    joint_angles(1) = theta_2;
    joint_angles(2) = theta_3;
     344:	vcvt.f32.f64	s26, d13
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     348:	vcvt.f32.f64	s20, d10
    joint_angles(2) = theta_3;
     34c:	vstr	s26, [r4, #44]	; 0x2c
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     350:	vstr	s20, [r4, #40]	; 0x28
    joint_angles(2) = theta_3;

    return joint_angles;

    
     354:	vpop	{d8-d14}
     358:	ldmia.w	r3, {r0, r1, r2}
     35c:	stmia.w	r5, {r0, r1, r2}
     360:	mov	r0, r5
     362:	pop	{r3, r4, r5, pc}
    float rho = asin(abs(p_z)/l_a);
    float beta = acos(abs(d_j2_j1_by)/l_a);
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
     364:	bl	2650 <sqrt>
     368:	vmov.f64	d12, d0
     36c:	b.n	25e <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0xae>
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
     36e:	bl	2650 <sqrt>
     372:	vmov.f64	d10, d0
     376:	b.n	290 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0xe0>
     378:	.word	0x54442d18
     37c:	.word	0x3ff921fb

00000380 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     380:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     382:	ldr	r1, [pc, #80]	; (3d4 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     384:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     388:	ldr	r5, [pc, #76]	; (3d8 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     38a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     38c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     390:	ldr	r6, [pc, #72]	; (3dc <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     392:	ldr	r2, [pc, #76]	; (3e0 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     394:	add.w	r5, r5, r0, lsl #5
     398:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
     39a:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     39c:	mov	r0, r5
     39e:	ldrh	r2, [r6, #0]
     3a0:	bl	135c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     3a4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     3a6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     3aa:	add	r1, r4
	asm("dsb");
     3ac:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     3b0:	ldr	r2, [pc, #48]	; (3e4 <rx_queue_transfer+0x64>)
     3b2:	str	r3, [r2, #0]
		location += 32;
     3b4:	adds	r3, #32
	} while (location < end_addr);
     3b6:	cmp	r1, r3
     3b8:	bhi.n	3b2 <rx_queue_transfer+0x32>
	asm("dsb");
     3ba:	dsb	sy
	asm("isb");
     3be:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     3c2:	movs	r0, #3
     3c4:	mov	r1, r5
     3c6:	bl	13b4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     3ca:	ldr	r3, [pc, #28]	; (3e8 <rx_queue_transfer+0x68>)
     3cc:	mov.w	r2, #131072	; 0x20000
     3d0:	str	r2, [r3, #0]
     3d2:	pop	{r3, r4, r5, r6, r7, pc}
     3d4:	.word	0x20200000
     3d8:	.word	0x200008a0
     3dc:	.word	0x200009ae
     3e0:	.word	0xe000e18c
     3e4:	.word	0xe000ef5c
     3e8:	.word	0xe000e10c

000003ec <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     3ec:	ldr	r2, [pc, #144]	; (480 <rx_event+0x94>)
     3ee:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
     3f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     3f4:	ubfx	r3, r3, #16, #15
     3f8:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
     3fa:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     3fc:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     3fe:	cmp	r4, #0
     400:	ble.n	474 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
     402:	ldr	r1, [pc, #128]	; (484 <rx_event+0x98>)
		if (head != rx_tail) {
     404:	ldr	r2, [pc, #128]	; (488 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     406:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
     408:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
     40a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     40c:	ldr	r0, [pc, #124]	; (48c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
     40e:	ldr	r6, [pc, #128]	; (490 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
     410:	cmp	r3, r2
     412:	beq.n	424 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
     414:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     418:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     41c:	rsb	r2, r7, #512	; 0x200
     420:	cmp	r4, r2
     422:	bls.n	44a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     424:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
     426:	movs	r2, #0
     428:	ldr	r7, [pc, #104]	; (494 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     42a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
     42c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
     430:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
     434:	ldr	r6, [pc, #96]	; (498 <rx_event+0xac>)
     436:	ite	ls
     438:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     43a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
     43c:	strb	r2, [r1, #0]
		rx_available += len;
     43e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
     440:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
     442:	add	r4, r2
     444:	str	r4, [r6, #0]
     446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     44a:	ldr	r3, [pc, #80]	; (49c <rx_event+0xb0>)
     44c:	add.w	r0, r7, r8, lsl #9
     450:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     452:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     454:	add.w	r1, r3, r5, lsl #9
     458:	add	r0, r3
     45a:	bl	1d34 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
     45e:	ldr	r2, [pc, #56]	; (498 <rx_event+0xac>)
				rx_queue_transfer(i);
     460:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
     462:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     466:	ldr	r3, [r2, #0]
     468:	add	r4, r3
     46a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     46c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
     470:	b.w	380 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     474:	mov	r0, r5
	}
}
     476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
     47a:	b.w	380 <rx_queue_transfer>
     47e:	nop
     480:	.word	0x200009ae
     484:	.word	0x200009c4
     488:	.word	0x200009a0
     48c:	.word	0x200009a4
     490:	.word	0x200009b0
     494:	.word	0x20000888
     498:	.word	0x200009c0
     49c:	.word	0x20200000

000004a0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     4a0:	ldr	r3, [pc, #120]	; (51c <usb_serial_flush_callback+0x7c>)
     4a2:	ldrb	r2, [r3, #0]
     4a4:	cbnz	r2, 4be <usb_serial_flush_callback+0x1e>
     4a6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
     4aa:	ldr	r2, [pc, #116]	; (520 <usb_serial_flush_callback+0x80>)
     4ac:	ldrb	r2, [r2, #0]
     4ae:	cbz	r2, 4be <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     4b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
     4b4:	ldr	r5, [pc, #108]	; (524 <usb_serial_flush_callback+0x84>)
     4b6:	ldrh	r2, [r5, #0]
     4b8:	cbnz	r2, 4c0 <usb_serial_flush_callback+0x20>
     4ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4be:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     4c0:	ldr	r6, [pc, #100]	; (528 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     4c2:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     4c6:	ldr	r7, [pc, #100]	; (52c <usb_serial_flush_callback+0x8c>)
     4c8:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     4ca:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     4cc:	ldr	r4, [pc, #96]	; (530 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     4ce:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     4d2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     4d6:	mov	r0, r7
     4d8:	mov	r1, r4
     4da:	bl	135c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     4de:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4e2:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     4e6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     4ea:	ldr	r3, [pc, #72]	; (534 <usb_serial_flush_callback+0x94>)
     4ec:	str	r1, [r3, #0]
		location += 32;
     4ee:	adds	r1, #32
	} while (location < end_addr);
     4f0:	cmp	r2, r1
     4f2:	bhi.n	4ec <usb_serial_flush_callback+0x4c>
	asm("dsb");
     4f4:	dsb	sy
	asm("isb");
     4f8:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     4fc:	movs	r0, #4
     4fe:	mov	r1, r7
     500:	bl	138c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     504:	ldrb	r3, [r6, #0]
     506:	ldr	r2, [pc, #32]	; (528 <usb_serial_flush_callback+0x88>)
     508:	adds	r3, #1
     50a:	uxtb	r3, r3
     50c:	cmp	r3, #3
     50e:	it	hi
     510:	movhi	r3, #0
     512:	strb	r3, [r2, #0]
	tx_available = 0;
     514:	movs	r3, #0
     516:	strh	r3, [r5, #0]
     518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     51c:	.word	0x2000089a
     520:	.word	0x20000a98
     524:	.word	0x200009c6
     528:	.word	0x2000089b
     52c:	.word	0x200009e0
     530:	.word	0x20201000
     534:	.word	0xe000ef70

00000538 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     538:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	sub	sp, #20
     53e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     540:	str	r1, [sp, #4]
     542:	cmp	r1, #0
     544:	beq.w	68c <usb_serial_write.part.1+0x154>
     548:	movs	r3, #0
     54a:	ldr.w	r8, [pc, #348]	; 6a8 <usb_serial_write.part.1+0x170>
     54e:	ldr.w	r9, [pc, #332]	; 69c <usb_serial_write.part.1+0x164>
     552:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     554:	ldr	r6, [pc, #312]	; (690 <usb_serial_write.part.1+0x158>)
     556:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     55a:	ldr.w	sl, [pc, #336]	; 6ac <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
     55e:	ldr.w	fp, [pc, #336]	; 6b0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     562:	ldr	r2, [pc, #304]	; (694 <usb_serial_write.part.1+0x15c>)
     564:	ldrb	r4, [r2, #0]
     566:	ldr	r2, [pc, #304]	; (698 <usb_serial_write.part.1+0x160>)
     568:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     56c:	cmp	r3, #0
     56e:	bne.n	64e <usb_serial_write.part.1+0x116>
     570:	mov	r5, r3
     572:	mov	r4, r3
     574:	b.n	5a0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     576:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     57a:	cbnz	r4, 57e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
     57c:	ldr	r5, [r6, #0]
     57e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     580:	cmp	r3, #0
     582:	bne.n	642 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     584:	ldr	r3, [r6, #0]
     586:	subs	r3, r3, r5
     588:	cmp	r3, #120	; 0x78
     58a:	bhi.n	680 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     58c:	ldrb.w	r3, [sl]
     590:	cmp	r3, #0
     592:	beq.n	642 <usb_serial_write.part.1+0x10a>
			yield();
     594:	bl	1848 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     598:	ldrh.w	r3, [r8]
     59c:	cmp	r3, #0
     59e:	bne.n	64a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     5a0:	mov	r0, r7
     5a2:	bl	13d8 <usb_transfer_status>
			if (!(status & 0x80)) {
     5a6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     5aa:	ldr	r2, [pc, #240]	; (69c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     5ac:	bne.n	576 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     5ae:	mov.w	r3, #2048	; 0x800
     5b2:	ldr	r2, [pc, #224]	; (694 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
     5b4:	strb.w	r0, [r9]
     5b8:	ldrb	r4, [r2, #0]
     5ba:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     5bc:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     5c0:	lsls	r4, r4, #11
		if (size >= tx_available) {
     5c2:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     5c4:	ldr	r1, [pc, #216]	; (6a0 <usb_serial_write.part.1+0x168>)
     5c6:	add	r0, r4
		if (size >= tx_available) {
     5c8:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     5ca:	add	r0, r1
		if (size >= tx_available) {
     5cc:	bcc.n	656 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     5ce:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
     5d0:	ldr	r1, [sp, #8]
     5d2:	bl	1d34 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
     5d6:	movs	r3, #0
     5d8:	mov	r1, r4
     5da:	mov.w	r2, #2048	; 0x800
     5de:	mov	r0, r7
     5e0:	bl	135c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     5e4:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
     5e8:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
     5ec:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     5f0:	str.w	r3, [fp]
		location += 32;
     5f4:	adds	r3, #32
	} while (location < end_addr);
     5f6:	cmp	r4, r3
     5f8:	bhi.n	5f0 <usb_serial_write.part.1+0xb8>
	asm("dsb");
     5fa:	dsb	sy
	asm("isb");
     5fe:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     602:	movs	r0, #4
     604:	mov	r1, r7
     606:	bl	138c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     60a:	ldr	r3, [pc, #136]	; (694 <usb_serial_write.part.1+0x15c>)
     60c:	ldr	r2, [pc, #132]	; (694 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     60e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     610:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     612:	ldr	r0, [pc, #144]	; (6a4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     614:	adds	r3, #1
     616:	uxtb	r3, r3
     618:	cmp	r3, #3
     61a:	it	hi
     61c:	movhi	r3, #0
     61e:	strb	r3, [r2, #0]
			size -= tx_available;
     620:	ldrh.w	r2, [r8]
			sent += tx_available;
     624:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
     626:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     62a:	add	r3, r2
     62c:	str	r3, [sp, #0]
			data += tx_available;
     62e:	ldr	r3, [sp, #8]
     630:	add	r3, r2
     632:	str	r3, [sp, #8]
     634:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     636:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     63a:	ldr	r1, [sp, #4]
     63c:	subs	r2, r1, r2
     63e:	str	r2, [sp, #4]
     640:	bne.n	562 <usb_serial_write.part.1+0x2a>
     642:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     644:	add	sp, #20
     646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     64a:	ldr	r2, [pc, #72]	; (694 <usb_serial_write.part.1+0x15c>)
     64c:	ldrb	r4, [r2, #0]
     64e:	mov	r2, r3
     650:	rsb	r0, r3, #2048	; 0x800
     654:	b.n	5c0 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     656:	ldr	r4, [sp, #4]
     658:	ldr	r1, [sp, #8]
     65a:	mov	r2, r4
     65c:	str	r3, [sp, #12]
     65e:	bl	1d34 <memcpy>
			tx_available -= size;
     662:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     664:	ldr	r2, [pc, #60]	; (6a4 <usb_serial_write.part.1+0x16c>)
     666:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     66a:	subs	r3, r3, r4
     66c:	strh.w	r3, [r8]
     670:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     672:	str.w	r1, [r2, #132]	; 0x84
     676:	mov	r0, r3
     678:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     67a:	add	sp, #20
     67c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     680:	movs	r3, #1
				return sent;
     682:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     684:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     686:	add	sp, #20
     688:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     68c:	ldr	r0, [sp, #4]
     68e:	b.n	644 <usb_serial_write.part.1+0x10c>
     690:	.word	0x20000aa4
     694:	.word	0x2000089b
     698:	.word	0x200009e0
     69c:	.word	0x200009c5
     6a0:	.word	0x20201000
     6a4:	.word	0x402e0000
     6a8:	.word	0x200009c6
     6ac:	.word	0x20000a98
     6b0:	.word	0xe000ef70

000006b4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
     6b4:	bx	lr
     6b6:	nop

000006b8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     6b8:	ldr	r3, [pc, #196]	; (780 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     6ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     6be:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
     6c0:	ldr	r7, [pc, #192]	; (784 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
     6c2:	cmp	r3, #0
     6c4:	beq.n	770 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
     6c6:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
     6ca:	ldr.w	r8, [pc, #236]	; 7b8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
     6ce:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     6d0:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     6d4:	movs	r1, #0
     6d6:	movs	r2, #128	; 0x80
     6d8:	ldr	r0, [pc, #172]	; (788 <usb_serial_configure+0xd0>)
	tx_head = 0;
     6da:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     6dc:	ldr	r6, [pc, #172]	; (78c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
     6de:	bl	3bf4 <memset>
	tx_head = 0;
     6e2:	ldr	r4, [pc, #172]	; (790 <usb_serial_configure+0xd8>)
	tx_available = 0;
     6e4:	ldr	r3, [pc, #172]	; (794 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     6e6:	mov	r1, r5
     6e8:	mov.w	r2, #256	; 0x100
     6ec:	ldr	r0, [pc, #168]	; (798 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     6ee:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     6f0:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     6f2:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     6f4:	bl	3bf4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     6f8:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     6fa:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     6fc:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     6fe:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     700:	str	r5, [r6, #8]
     702:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     704:	ldr	r1, [pc, #148]	; (79c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     706:	ldr	r6, [pc, #152]	; (7a0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
     708:	ldr	r0, [pc, #152]	; (7a4 <usb_serial_configure+0xec>)
	rx_available = 0;
     70a:	ldr.w	lr, [pc, #176]	; 7bc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
     70e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     710:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
     712:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     714:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     716:	str	r5, [r6, #0]
     718:	str	r5, [r6, #4]
     71a:	str	r5, [r6, #8]
     71c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
     71e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     722:	bl	12f4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     726:	ldrh.w	r1, [r8]
     72a:	mov	r2, r5
     72c:	ldr	r3, [pc, #120]	; (7a8 <usb_serial_configure+0xf0>)
     72e:	movs	r0, #3
     730:	bl	1290 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     734:	mov	r3, r5
     736:	ldrh	r1, [r7, #0]
     738:	movs	r2, #1
     73a:	movs	r0, #4
     73c:	bl	12f4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     740:	mov	r0, r4
     742:	adds	r4, #1
     744:	bl	380 <rx_queue_transfer>
     748:	cmp	r4, #8
     74a:	bne.n	740 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     74c:	ldr	r3, [pc, #92]	; (7ac <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
     74e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     750:	ldr	r0, [pc, #92]	; (7b0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
     752:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     754:	ldr	r4, [pc, #92]	; (7b4 <usb_serial_configure+0xfc>)
     756:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     758:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     75c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     760:	ldr.w	r2, [r3, #328]	; 0x148
     764:	orr.w	r2, r2, #16777216	; 0x1000000
     768:	str.w	r2, [r3, #328]	; 0x148
     76c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     770:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
     772:	ldr.w	r8, [pc, #68]	; 7b8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
     776:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
     778:	strh.w	r3, [r8]
     77c:	b.n	6d4 <usb_serial_configure+0x1c>
     77e:	nop
     780:	.word	0x20000a70
     784:	.word	0x20000898
     788:	.word	0x200009e0
     78c:	.word	0x200009b0
     790:	.word	0x2000089b
     794:	.word	0x200009c6
     798:	.word	0x200008a0
     79c:	.word	0x200009c4
     7a0:	.word	0x20000888
     7a4:	.word	0x200009a0
     7a8:	.word	0x000003ed
     7ac:	.word	0x402e0000
     7b0:	.word	0x20000a60
     7b4:	.word	0x000004a1
     7b8:	.word	0x200009ae
     7bc:	.word	0x200009c0

000007c0 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     7c0:	ldr	r3, [pc, #196]	; (888 <usb_serial_read+0xc8>)
     7c2:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     7c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
     7ca:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
     7cc:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     7ce:	ldr	r3, [pc, #188]	; (88c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     7d0:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
     7d2:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     7d4:	cmp	r1, #0
     7d6:	beq.n	880 <usb_serial_read+0xc0>
     7d8:	ldr	r3, [pc, #180]	; (890 <usb_serial_read+0xd0>)
     7da:	uxtb	r4, r4
     7dc:	ldrb	r3, [r3, #0]
     7de:	cmp	r4, r3
     7e0:	beq.n	884 <usb_serial_read+0xc4>
     7e2:	mov	sl, r0
     7e4:	movs	r7, #0
     7e6:	ldr.w	fp, [pc, #192]	; 8a8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
     7ea:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     7ec:	ldr	r3, [pc, #164]	; (894 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
     7ee:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     7f2:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     7f4:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     7f6:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
     7f8:	ldr	r3, [pc, #156]	; (898 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
     7fa:	it	cs
     7fc:	movcs	r4, #0
		uint32_t i = rx_list[tail];
     7fe:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     800:	ldr	r3, [pc, #144]	; (894 <usb_serial_read+0xd4>)
     802:	ldrh.w	lr, [r3, r5, lsl #1]
     806:	ldr	r3, [pc, #148]	; (89c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     808:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     80c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     810:	ldr	r3, [pc, #140]	; (8a0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
     812:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     816:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     818:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     81a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
     81c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
     81e:	bcs.n	854 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
     820:	add.w	r1, lr, r5, lsl #9
     824:	mov	r2, r8
     826:	add	r1, r3
     828:	bl	1d34 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
     82c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     82e:	ldr.w	r1, [fp]
     832:	mov	r0, r9
			rx_index[i] += len;
     834:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     838:	rsb	r1, r8, r1
			rx_index[i] += len;
     83c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
     83e:	str.w	r1, [fp]
			rx_index[i] += len;
     842:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
     846:	ldr	r3, [pc, #92]	; (8a4 <usb_serial_read+0xe4>)
     848:	mov.w	r2, #131072	; 0x20000
     84c:	str	r2, [r3, #0]
	return count;
}
     84e:	add	sp, #12
     850:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
     854:	bl	1d34 <memcpy>
			p += avail;
			rx_available -= avail;
     858:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     85c:	uxtb	r3, r4
			rx_queue_transfer(i);
     85e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
     860:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
     862:	add	sl, r6
			rx_available -= avail;
     864:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
     868:	ldr	r2, [pc, #32]	; (88c <usb_serial_read+0xcc>)
     86a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
     86c:	bl	380 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
     870:	cmp	r9, r7
     872:	bls.n	87c <usb_serial_read+0xbc>
     874:	ldr	r3, [pc, #24]	; (890 <usb_serial_read+0xd0>)
     876:	ldrb	r3, [r3, #0]
     878:	cmp	r4, r3
     87a:	bne.n	7ea <usb_serial_read+0x2a>
     87c:	mov	r0, r7
     87e:	b.n	846 <usb_serial_read+0x86>
     880:	mov	r0, r1
     882:	b.n	846 <usb_serial_read+0x86>
     884:	movs	r0, #0
     886:	b.n	846 <usb_serial_read+0x86>
     888:	.word	0xe000e18c
     88c:	.word	0x200009a0
     890:	.word	0x200009c4
     894:	.word	0x20000888
     898:	.word	0x200009a4
     89c:	.word	0x200009b0
     8a0:	.word	0x20200000
     8a4:	.word	0xe000e10c
     8a8:	.word	0x200009c0

000008ac <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     8ac:	ldr	r3, [pc, #44]	; (8dc <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
     8ae:	ldr	r2, [pc, #48]	; (8e0 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     8b0:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
     8b2:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
     8b4:	uxtb	r3, r3
	if (tail == rx_head) return -1;
     8b6:	cmp	r3, r2
     8b8:	beq.n	8d6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
     8ba:	adds	r3, #1
	uint32_t i = rx_list[tail];
     8bc:	ldr	r0, [pc, #36]	; (8e4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     8be:	ldr	r2, [pc, #40]	; (8e8 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     8c0:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     8c2:	ldr	r1, [pc, #40]	; (8ec <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
     8c4:	it	cs
     8c6:	movcs	r3, #0
	uint32_t i = rx_list[tail];
     8c8:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
     8ca:	ldrh.w	r1, [r1, r3, lsl #1]
     8ce:	add.w	r3, r2, r3, lsl #9
     8d2:	ldrb	r0, [r3, r1]
     8d4:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
     8d6:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
     8da:	bx	lr
     8dc:	.word	0x200009a0
     8e0:	.word	0x200009c4
     8e4:	.word	0x200009a4
     8e8:	.word	0x20200000
     8ec:	.word	0x20000888

000008f0 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
     8f0:	ldr	r3, [pc, #4]	; (8f8 <usb_serial_available+0x8>)
     8f2:	ldr	r0, [r3, #0]
}
     8f4:	bx	lr
     8f6:	nop
     8f8:	.word	0x200009c0

000008fc <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
     8fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
     900:	ldr	r6, [pc, #84]	; (958 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
     902:	ldr	r5, [pc, #88]	; (95c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     904:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
     906:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
     908:	uxtb	r4, r4
	while (tail != rx_head) {
     90a:	cmp	r4, r3
     90c:	beq.n	952 <usb_serial_flush_input+0x56>
     90e:	ldr.w	r9, [pc, #84]	; 964 <usb_serial_flush_input+0x68>
     912:	ldr.w	fp, [pc, #84]	; 968 <usb_serial_flush_input+0x6c>
     916:	ldr.w	r8, [pc, #84]	; 96c <usb_serial_flush_input+0x70>
     91a:	ldr	r7, [pc, #68]	; (960 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
     91c:	adds	r4, #1
     91e:	cmp	r4, #8
     920:	uxtb.w	sl, r4
     924:	bls.n	92a <usb_serial_flush_input+0x2e>
     926:	movs	r4, #0
     928:	mov	sl, r4
		uint32_t i = rx_list[tail];
     92a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
     92e:	ldr.w	r2, [fp]
     932:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
     936:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
     938:	ldrh.w	r1, [r7, r1, lsl #1]
     93c:	subs	r3, r3, r1
     93e:	subs	r3, r2, r3
     940:	str.w	r3, [fp]
		rx_queue_transfer(i);
     944:	bl	380 <rx_queue_transfer>
		rx_tail = tail;
     948:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
     94c:	ldrb	r3, [r5, #0]
     94e:	cmp	r4, r3
     950:	bne.n	91c <usb_serial_flush_input+0x20>
     952:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     956:	nop
     958:	.word	0x200009a0
     95c:	.word	0x200009c4
     960:	.word	0x20000888
     964:	.word	0x200009a4
     968:	.word	0x200009c0
     96c:	.word	0x200009b0

00000970 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     970:	push	{lr}
     972:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
     974:	movs	r1, #1
     976:	add.w	r0, sp, #7
     97a:	bl	7c0 <usb_serial_read>
     97e:	cbz	r0, 98a <usb_serial_getchar+0x1a>
     980:	ldrb.w	r0, [sp, #7]
	return -1;
}
     984:	add	sp, #12
     986:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
     98a:	mov.w	r0, #4294967295
     98e:	b.n	984 <usb_serial_getchar+0x14>

00000990 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     990:	ldr	r3, [pc, #36]	; (9b8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     992:	push	{lr}
     994:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     996:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     998:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     99c:	cbnz	r3, 9a8 <usb_serial_putchar+0x18>
     99e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     9a2:	add	sp, #12
     9a4:	ldr.w	pc, [sp], #4
     9a8:	movs	r1, #1
     9aa:	add.w	r0, sp, #7
     9ae:	bl	538 <usb_serial_write.part.1>
     9b2:	add	sp, #12
     9b4:	ldr.w	pc, [sp], #4
     9b8:	.word	0x20000a98

000009bc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     9bc:	ldr	r3, [pc, #16]	; (9d0 <usb_serial_write+0x14>)
     9be:	ldrb	r3, [r3, #0]
     9c0:	and.w	r2, r3, #255	; 0xff
     9c4:	cbz	r3, 9ca <usb_serial_write+0xe>
     9c6:	b.w	538 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     9ca:	mov	r0, r2
     9cc:	bx	lr
     9ce:	nop
     9d0:	.word	0x20000a98

000009d4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     9d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     9d8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     9da:	ldr.w	r8, [pc, #64]	; a1c <usb_serial_write_buffer_free+0x48>
     9de:	movs	r3, #1
     9e0:	ldr	r5, [pc, #48]	; (a14 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     9e2:	mov	r7, r4
     9e4:	ldr	r6, [pc, #48]	; (a18 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     9e6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     9ea:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     9ec:	mov	r0, r5
     9ee:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     9f0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     9f2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     9f6:	beq.n	a04 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     9f8:	bl	13d8 <usb_transfer_status>
     9fc:	lsls	r3, r0, #24
     9fe:	it	pl
     a00:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     a04:	cmp	r4, #4
     a06:	bne.n	9ea <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     a08:	movs	r3, #0
	return sum;
}
     a0a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     a0c:	strb.w	r3, [r8]
	return sum;
}
     a10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a14:	.word	0x200009e0
     a18:	.word	0x2000089b
     a1c:	.word	0x2000089a

00000a20 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     a20:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
     a24:	ldr	r3, [pc, #124]	; (aa4 <usb_serial_flush_output+0x84>)
     a26:	ldrb	r3, [r3, #0]
     a28:	cbz	r3, a30 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
     a2a:	ldr	r5, [pc, #124]	; (aa8 <usb_serial_flush_output+0x88>)
     a2c:	ldrh	r2, [r5, #0]
     a2e:	cbnz	r2, a34 <usb_serial_flush_output+0x14>
     a30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     a34:	ldr.w	r8, [pc, #132]	; abc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     a38:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     a3c:	ldr	r6, [pc, #108]	; (aac <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     a3e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     a42:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     a46:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     a48:	ldr	r4, [pc, #100]	; (ab0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     a4a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     a4c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     a50:	ldr	r7, [pc, #96]	; (ab4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     a52:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     a56:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     a58:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     a5c:	mov	r1, r4
     a5e:	bl	135c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
     a62:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     a66:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
     a6a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     a6e:	ldr	r3, [pc, #72]	; (ab8 <usb_serial_flush_output+0x98>)
     a70:	str	r1, [r3, #0]
		location += 32;
     a72:	adds	r1, #32
	} while (location < end_addr);
     a74:	cmp	r2, r1
     a76:	bhi.n	a70 <usb_serial_flush_output+0x50>
	asm("dsb");
     a78:	dsb	sy
	asm("isb");
     a7c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     a80:	movs	r0, #4
     a82:	mov	r1, r6
     a84:	bl	138c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     a88:	ldrb.w	r3, [r8]
     a8c:	ldr	r2, [pc, #44]	; (abc <usb_serial_flush_output+0x9c>)
     a8e:	adds	r3, #1
     a90:	uxtb	r3, r3
     a92:	cmp	r3, #3
     a94:	it	hi
     a96:	movhi	r3, #0
     a98:	strb	r3, [r2, #0]
	tx_available = 0;
     a9a:	movs	r3, #0
     a9c:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
     a9e:	strb	r3, [r7, #0]
     aa0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     aa4:	.word	0x20000a98
     aa8:	.word	0x200009c6
     aac:	.word	0x200009e0
     ab0:	.word	0x20201000
     ab4:	.word	0x2000089a
     ab8:	.word	0xe000ef70
     abc:	.word	0x2000089b

00000ac0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ac0:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     ac2:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ac4:	cbz	r3, ace <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     ac6:	ldr	r3, [r2, #4]
     ac8:	orr.w	r3, r3, #32768	; 0x8000
     acc:	str	r3, [r2, #4]
	}
	__disable_irq();
     ace:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     ad0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     ad2:	cbz	r4, afc <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     ad4:	ldr	r3, [pc, #64]	; (b18 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     ad6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     ad8:	ldr.w	r4, [r3, #432]	; 0x1b0
     adc:	tst	r4, r1
     ade:	bne.n	b10 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     ae0:	ldr.w	r4, [r3, #320]	; 0x140
     ae4:	orr.w	r4, r4, #16384	; 0x4000
     ae8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     aec:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     af0:	ldr.w	r4, [r3, #320]	; 0x140
     af4:	lsls	r4, r4, #17
     af6:	bpl.n	ae0 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     af8:	tst	r1, r5
     afa:	bne.n	b10 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     afc:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     afe:	ldr	r4, [pc, #24]	; (b18 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     b00:	str	r2, [r0, #8]
	endpoint->status = 0;
     b02:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     b04:	ldr.w	r3, [r4, #432]	; 0x1b0
     b08:	orrs	r1, r3
     b0a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     b0e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     b10:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     b12:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     b14:	pop	{r4, r5}
     b16:	bx	lr
     b18:	.word	0x402e0000

00000b1c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     b1c:	push	{r4, r5, r6, lr}
     b1e:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     b20:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     b22:	cbz	r0, b4a <run_callbacks+0x2e>
     b24:	mov	r2, r0
     b26:	movs	r4, #0
     b28:	b.n	b32 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     b2a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     b2c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     b2e:	cmp	r2, #1
     b30:	beq.n	b4c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     b32:	ldr	r3, [r2, #4]
     b34:	ands.w	r3, r3, #128	; 0x80
     b38:	beq.n	b2a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     b3a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b3c:	cbz	r4, b4a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     b3e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     b40:	ldr	r5, [r0, #0]
		ep->callback_function(first);
     b42:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b44:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     b46:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     b48:	bne.n	b3e <run_callbacks+0x22>
     b4a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     b4c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     b4e:	str	r3, [r6, #52]	; 0x34
			break;
     b50:	b.n	b3c <run_callbacks+0x20>
     b52:	nop

00000b54 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     b54:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     b56:	cbnz	r1, b96 <endpoint0_transmit.constprop.1+0x42>
     b58:	ldr	r4, [pc, #136]	; (be4 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     b5a:	ldr	r1, [pc, #140]	; (be8 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     b5c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     b5e:	ldr	r3, [pc, #140]	; (bec <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     b60:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     b62:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     b64:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     b66:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     b68:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     b6a:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     b6c:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     b6e:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     b72:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     b74:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     b78:	ldr	r5, [pc, #116]	; (bf0 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     b7a:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     b7e:	ldr.w	r1, [r3, #432]	; 0x1b0
     b82:	orr.w	r1, r1, #1
     b86:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     b8a:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     b8c:	ldr.w	r3, [r2, #432]	; 0x1b0
     b90:	cmp	r3, #0
     b92:	bne.n	b8c <endpoint0_transmit.constprop.1+0x38>
}
     b94:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     b96:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     b98:	ldr	r3, [pc, #88]	; (bf4 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     b9a:	ldr	r5, [pc, #80]	; (bec <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     b9c:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     b9e:	ldr	r4, [pc, #68]	; (be4 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     ba0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     ba4:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     ba6:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     ba8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     baa:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     bae:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     bb0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     bb4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     bb6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     bba:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     bbe:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     bc2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     bc4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     bc6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     bca:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     bce:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     bd2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     bd4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     bd6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     bda:	ldr.w	r3, [r2, #432]	; 0x1b0
     bde:	cmp	r3, #0
     be0:	bne.n	bda <endpoint0_transmit.constprop.1+0x86>
     be2:	b.n	b5a <endpoint0_transmit.constprop.1+0x6>
     be4:	.word	0x20002000
     be8:	.word	0x20001020
     bec:	.word	0x402e0000
     bf0:	.word	0x20000a74
     bf4:	.word	0x20001000

00000bf8 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
     bf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     bfc:	ldr	r4, [pc, #752]	; (ef0 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
     bfe:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     c00:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     c04:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     c08:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     c0c:	beq.n	ccc <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     c0e:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     c12:	cmp	r3, #0
     c14:	beq.n	cc2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     c16:	mov.w	fp, #65537	; 0x10001
     c1a:	ldr.w	r9, [pc, #764]	; f18 <isr+0x320>
     c1e:	ldr	r6, [pc, #724]	; (ef4 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     c20:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     c22:	mov	sl, fp
     c24:	ldr	r0, [r6, #40]	; 0x28
     c26:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     c28:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     c2c:	ldr.w	r3, [r4, #320]	; 0x140
     c30:	orr.w	r3, r3, #8192	; 0x2000
     c34:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     c38:	ldr.w	r3, [r4, #320]	; 0x140
     c3c:	lsls	r7, r3, #18
     c3e:	bpl.n	c2c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     c40:	ldr.w	r3, [r5, #320]	; 0x140
     c44:	bic.w	r3, r3, #8192	; 0x2000
     c48:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     c4c:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     c50:	ldr.w	r3, [r4, #436]	; 0x1b4
     c54:	ands.w	r3, r3, #65537	; 0x10001
     c58:	bne.n	c50 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     c5a:	uxth	r1, r0
     c5c:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     c60:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     c64:	cmp	r1, r7
     c66:	bhi.w	db4 <isr+0x1bc>
     c6a:	cmp.w	r1, #1664	; 0x680
     c6e:	bcs.w	1048 <isr+0x450>
     c72:	cmp.w	r1, #258	; 0x102
     c76:	beq.w	f4e <isr+0x356>
     c7a:	bhi.w	e46 <isr+0x24e>
     c7e:	cmp	r1, #128	; 0x80
     c80:	beq.w	f34 <isr+0x33c>
     c84:	cmp	r1, #130	; 0x82
     c86:	bne.w	e36 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     c8a:	uxth	r2, r2
     c8c:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     c90:	cmp	r1, #7
     c92:	bhi.w	e36 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     c96:	lsls	r1, r1, #2
     c98:	ldr	r0, [pc, #604]	; (ef8 <isr+0x300>)
		reply_buffer[0] = 0;
     c9a:	ldr	r7, [pc, #608]	; (efc <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     c9c:	add	r0, r1
     c9e:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     ca0:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     ca2:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     ca4:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     ca6:	bpl.w	10c6 <isr+0x4ce>
     caa:	lsls	r2, r1, #15
     cac:	bpl.n	cb2 <isr+0xba>
			reply_buffer[0] = 1;
     cae:	movs	r3, #1
     cb0:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     cb2:	movs	r1, #2
     cb4:	ldr	r0, [pc, #580]	; (efc <isr+0x304>)
     cb6:	bl	b54 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     cba:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     cbe:	cmp	r3, #0
     cc0:	bne.n	c24 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     cc2:	ldr	r2, [pc, #556]	; (ef0 <isr+0x2f8>)
     cc4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     cc8:	cmp	r3, #0
     cca:	bne.n	d6e <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     ccc:	tst.w	r8, #64	; 0x40
     cd0:	beq.n	d04 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     cd2:	ldr	r3, [pc, #540]	; (ef0 <isr+0x2f8>)
     cd4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     cd8:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     cda:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     cde:	ldr.w	r1, [r3, #444]	; 0x1bc
     ce2:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     ce6:	ldr.w	r4, [r2, #432]	; 0x1b0
     cea:	ldr	r3, [pc, #516]	; (ef0 <isr+0x2f8>)
     cec:	cmp	r4, #0
     cee:	bne.n	ce6 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     cf0:	mov.w	r2, #4294967295
     cf4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     cf8:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     cfc:	bl	6b4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     d00:	ldr	r3, [pc, #508]	; (f00 <isr+0x308>)
     d02:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     d04:	tst.w	r8, #16777216	; 0x1000000
     d08:	beq.n	d12 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     d0a:	ldr	r3, [pc, #504]	; (f04 <isr+0x30c>)
     d0c:	ldr	r3, [r3, #0]
     d0e:	cbz	r3, d12 <isr+0x11a>
     d10:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     d12:	tst.w	r8, #33554432	; 0x2000000
     d16:	beq.n	d20 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     d18:	ldr	r3, [pc, #492]	; (f08 <isr+0x310>)
     d1a:	ldr	r3, [r3, #0]
     d1c:	cbz	r3, d20 <isr+0x128>
     d1e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     d20:	tst.w	r8, #4
     d24:	beq.n	d38 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     d26:	ldr	r3, [pc, #456]	; (ef0 <isr+0x2f8>)
     d28:	ldr.w	r3, [r3, #388]	; 0x184
     d2c:	ands.w	r3, r3, #512	; 0x200
     d30:	beq.n	dae <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     d32:	ldr	r3, [pc, #472]	; (f0c <isr+0x314>)
     d34:	movs	r2, #1
     d36:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     d38:	ldr	r3, [pc, #436]	; (ef0 <isr+0x2f8>)
     d3a:	ldr.w	r2, [r3, #328]	; 0x148
     d3e:	lsls	r2, r2, #24
     d40:	bpl.n	d68 <isr+0x170>
     d42:	tst.w	r8, #128	; 0x80
     d46:	beq.n	d68 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     d48:	ldr	r1, [pc, #452]	; (f10 <isr+0x318>)
     d4a:	ldrb	r2, [r1, #0]
     d4c:	cbz	r2, d68 <isr+0x170>
			if (--usb_reboot_timer == 0) {
     d4e:	subs	r2, #1
     d50:	uxtb	r2, r2
     d52:	strb	r2, [r1, #0]
     d54:	cbnz	r2, d68 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     d56:	ldr	r1, [pc, #444]	; (f14 <isr+0x31c>)
     d58:	ldrb	r2, [r1, #0]
     d5a:	and.w	r2, r2, #251	; 0xfb
     d5e:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     d60:	cmp	r2, #0
     d62:	beq.w	11ca <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     d66:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
     d68:	add	sp, #12
     d6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     d6e:	ldr	r1, [pc, #424]	; (f18 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     d70:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     d74:	ldr	r0, [r1, #0]
     d76:	tst	r3, r0
     d78:	bne.w	1152 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     d7c:	ldr	r2, [pc, #384]	; (f00 <isr+0x308>)
     d7e:	ldr	r4, [r2, #0]
			if (completestatus) {
     d80:	ands	r4, r3
     d82:	beq.n	ccc <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     d84:	lsls	r3, r4, #29
     d86:	bmi.w	11e8 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     d8a:	lsls	r7, r4, #13
     d8c:	bmi.w	11e0 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     d90:	lsls	r6, r4, #28
     d92:	bmi.w	11f8 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     d96:	lsls	r5, r4, #12
     d98:	bmi.w	11f0 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
     d9c:	lsls	r0, r4, #27
     d9e:	bmi.w	11d8 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
     da2:	lsls	r1, r4, #11
     da4:	bpl.n	ccc <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
     da6:	ldr	r0, [pc, #372]	; (f1c <isr+0x324>)
     da8:	bl	b1c <run_callbacks>
     dac:	b.n	ccc <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     dae:	ldr	r2, [pc, #348]	; (f0c <isr+0x314>)
     db0:	strb	r3, [r2, #0]
     db2:	b.n	d38 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     db4:	movw	r7, #8225	; 0x2021
     db8:	cmp	r1, r7
     dba:	beq.n	e2e <isr+0x236>
     dbc:	bhi.n	e9e <isr+0x2a6>
     dbe:	cmp.w	r1, #2176	; 0x880
     dc2:	beq.w	102c <isr+0x434>
     dc6:	cmp.w	r1, #2304	; 0x900
     dca:	bne.n	e36 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     dcc:	ubfx	r0, r0, #16, #8
     dd0:	ldr	r2, [pc, #332]	; (f20 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     dd2:	ldr	r1, [pc, #336]	; (f24 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     dd4:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     dd6:	ldr	r7, [pc, #336]	; (f28 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     dd8:	ldr	r2, [pc, #336]	; (f2c <isr+0x334>)
     dda:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     ddc:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     de0:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     de4:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     de8:	bl	6b8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dec:	ldr	r2, [pc, #320]	; (f30 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     dee:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     df0:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     df2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     df4:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     df6:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     df8:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     dfa:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     dfe:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e00:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e04:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e06:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     e0a:	ldr.w	r2, [r5, #432]	; 0x1b0
     e0e:	orr.w	r2, r2, #65536	; 0x10000
     e12:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     e16:	ldr	r2, [pc, #256]	; (f18 <isr+0x320>)
     e18:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     e1a:	ldr.w	r3, [r4, #432]	; 0x1b0
     e1e:	cmp	r3, #0
     e20:	bne.n	e1a <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e22:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e26:	cmp	r3, #0
     e28:	bne.w	c24 <isr+0x2c>
     e2c:	b.n	cc2 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     e2e:	lsrs	r1, r2, #16
     e30:	cmp	r1, #7
     e32:	beq.w	10ce <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     e36:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e3a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e3e:	cmp	r3, #0
     e40:	bne.w	c24 <isr+0x2c>
     e44:	b.n	cc2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     e46:	movw	r7, #770	; 0x302
     e4a:	cmp	r1, r7
     e4c:	beq.w	fc6 <isr+0x3ce>
     e50:	cmp.w	r1, #1280	; 0x500
     e54:	bne.n	e36 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e56:	ldr	r2, [pc, #216]	; (f30 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e58:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e5a:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     e5c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e5e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e60:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e62:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e66:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e68:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e6c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     e6e:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     e72:	ldr.w	r3, [r5, #432]	; 0x1b0
     e76:	orr.w	r3, r3, #65536	; 0x10000
     e7a:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e7e:	ldr.w	r3, [r4, #432]	; 0x1b0
     e82:	cmp	r3, #0
     e84:	bne.n	e7e <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     e86:	lsrs	r3, r0, #16
     e88:	lsls	r3, r3, #25
     e8a:	orr.w	r3, r3, #16777216	; 0x1000000
     e8e:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e92:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e96:	cmp	r3, #0
     e98:	bne.w	c24 <isr+0x2c>
     e9c:	b.n	cc2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     e9e:	movw	r3, #8737	; 0x2221
     ea2:	cmp	r1, r3
     ea4:	beq.w	fb4 <isr+0x3bc>
     ea8:	movw	r3, #8993	; 0x2321
     eac:	cmp	r1, r3
     eae:	bne.n	e36 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     eb0:	ldr	r3, [pc, #124]	; (f30 <isr+0x338>)
     eb2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     eb4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     eb6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     eb8:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     eba:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ebc:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ec0:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ec2:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ec6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     ec8:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     eca:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     ece:	ldr.w	r3, [r4, #432]	; 0x1b0
     ed2:	orr.w	r3, r3, #65536	; 0x10000
     ed6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     eda:	ldr.w	r3, [r4, #432]	; 0x1b0
     ede:	cmp	r3, #0
     ee0:	bne.n	eda <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ee2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     ee6:	cmp	r3, #0
     ee8:	bne.w	c24 <isr+0x2c>
     eec:	b.n	cc2 <isr+0xca>
     eee:	nop
     ef0:	.word	0x402e0000
     ef4:	.word	0x20002000
     ef8:	.word	0x402e01c0
     efc:	.word	0x20000a88
     f00:	.word	0x20000a64
     f04:	.word	0x20000a60
     f08:	.word	0x20000a6c
     f0c:	.word	0x20000a70
     f10:	.word	0x20000a78
     f14:	.word	0x20000a68
     f18:	.word	0x20000a74
     f1c:	.word	0x20002240
     f20:	.word	0x20000a98
     f24:	.word	0x000200c8
     f28:	.word	0x00cc0002
     f2c:	.word	0x00c80002
     f30:	.word	0x20001020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     f34:	ldr	r2, [pc, #744]	; (1220 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
     f36:	movs	r1, #2
     f38:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     f3a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
     f3c:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
     f3e:	bl	b54 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     f42:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f46:	cmp	r3, #0
     f48:	bne.w	c24 <isr+0x2c>
     f4c:	b.n	cc2 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     f4e:	uxth	r2, r2
     f50:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     f54:	cmp	r3, #7
     f56:	bhi.w	e36 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
     f5a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     f5e:	mov.w	r3, r3, lsl #2
     f62:	ldr	r2, [pc, #704]	; (1224 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f64:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     f68:	add	r2, r3
     f6a:	ldr	r3, [r2, #0]
     f6c:	ite	ne
     f6e:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     f72:	biceq.w	r3, r3, #1
     f76:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f78:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f7a:	ldr	r3, [pc, #684]	; (1228 <isr+0x630>)
     f7c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f7e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f80:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f82:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     f86:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f88:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f8c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f8e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f90:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     f94:	ldr.w	r3, [r4, #432]	; 0x1b0
     f98:	orr.w	r3, r3, #65536	; 0x10000
     f9c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     fa0:	ldr.w	r3, [r4, #432]	; 0x1b0
     fa4:	cmp	r3, #0
     fa6:	bne.n	fa0 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     fa8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     fac:	cmp	r3, #0
     fae:	bne.w	c24 <isr+0x2c>
     fb2:	b.n	cc2 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     fb4:	ldr	r3, [pc, #628]	; (122c <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
     fb6:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     fba:	ldr	r2, [pc, #628]	; (1230 <isr+0x638>)
     fbc:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
     fbe:	ldr	r3, [pc, #628]	; (1234 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     fc0:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
     fc2:	strb	r0, [r3, #0]
     fc4:	b.n	eb0 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     fc6:	uxth	r2, r2
     fc8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     fcc:	cmp	r3, #7
     fce:	bhi.w	e36 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
     fd2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     fd6:	mov.w	r3, r3, lsl #2
     fda:	ldr	r2, [pc, #584]	; (1224 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     fdc:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     fe0:	add	r2, r3
     fe2:	ldr	r3, [r2, #0]
     fe4:	ite	ne
     fe6:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     fea:	orreq.w	r3, r3, #1
     fee:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ff0:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     ff2:	ldr	r3, [pc, #564]	; (1228 <isr+0x630>)
     ff4:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ff6:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ff8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     ffa:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ffe:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1000:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1004:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1006:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1008:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    100c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1010:	orr.w	r3, r3, #65536	; 0x10000
    1014:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1018:	ldr.w	r3, [r4, #432]	; 0x1b0
    101c:	cmp	r3, #0
    101e:	bne.n	1018 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1020:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1024:	cmp	r3, #0
    1026:	bne.w	c24 <isr+0x2c>
    102a:	b.n	cc2 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    102c:	ldr	r2, [pc, #520]	; (1238 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    102e:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1030:	ldr	r3, [pc, #492]	; (1220 <isr+0x628>)
    1032:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1034:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1036:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1038:	bl	b54 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    103c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1040:	cmp	r3, #0
    1042:	bne.w	c24 <isr+0x2c>
    1046:	b.n	cc2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1048:	ldr	r3, [pc, #496]	; (123c <isr+0x644>)
    104a:	ldr	r1, [r3, #4]
    104c:	cmp	r1, #0
    104e:	beq.w	e36 <isr+0x23e>
    1052:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1054:	uxth.w	lr, r2
    1058:	b.n	1064 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    105a:	adds	r3, #12
    105c:	ldr	r1, [r3, #4]
    105e:	cmp	r1, #0
    1060:	beq.w	e36 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1064:	ldrh	r7, [r3, #0]
    1066:	cmp	r7, r0
    1068:	bne.n	105a <isr+0x462>
    106a:	ldrh	r7, [r3, #2]
    106c:	cmp	r7, lr
    106e:	bne.n	105a <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1070:	lsrs	r7, r0, #8
    1072:	cmp	r7, #3
    1074:	beq.w	1284 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1078:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    107a:	lsrs	r2, r2, #16
    107c:	cmp	r3, r2
    107e:	it	cs
    1080:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1082:	cmp.w	r0, #512	; 0x200
    1086:	beq.w	1200 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    108a:	cmp.w	r0, #1792	; 0x700
    108e:	beq.w	11a4 <isr+0x5ac>
    1092:	ldr	r7, [pc, #428]	; (1240 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1094:	mov	r2, r3
    1096:	str	r3, [sp, #4]
    1098:	mov	r0, r7
    109a:	bl	1d34 <memcpy>
    109e:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    10a0:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    10a4:	add	r7, r3
	asm("dsb");
    10a6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    10aa:	ldr	r1, [pc, #408]	; (1244 <isr+0x64c>)
    10ac:	str	r2, [r1, #0]
		location += 32;
    10ae:	adds	r2, #32
	} while (location < end_addr);
    10b0:	cmp	r7, r2
    10b2:	bhi.n	10aa <isr+0x4b2>
	asm("dsb");
    10b4:	dsb	sy
	asm("isb");
    10b8:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    10bc:	ldr	r0, [pc, #384]	; (1240 <isr+0x648>)
    10be:	mov	r1, r3
    10c0:	bl	b54 <endpoint0_transmit.constprop.1>
    10c4:	b.n	cba <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    10c6:	lsls	r3, r1, #31
    10c8:	bpl.w	cb2 <isr+0xba>
    10cc:	b.n	cae <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    10ce:	ldr	r7, [pc, #376]	; (1248 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10d0:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    10d4:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10d6:	ldr	r1, [pc, #372]	; (124c <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10d8:	ldr	r3, [pc, #372]	; (1250 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    10da:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10dc:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10e0:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    10e2:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    10e6:	ldr	r1, [pc, #364]	; (1254 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    10e8:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    10ea:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10ee:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10f2:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    10f6:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10f8:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    10fc:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1100:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1104:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1106:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1108:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    110c:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    110e:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1110:	ldr.w	r3, [r4, #432]	; 0x1b0
    1114:	cmp	r3, #0
    1116:	bne.n	1110 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    1118:	ldr	r2, [pc, #268]	; (1228 <isr+0x630>)
    111a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    111c:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1120:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1122:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1124:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1128:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    112a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    112e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1130:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1134:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1136:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    113a:	ldr.w	r3, [r5, #432]	; 0x1b0
    113e:	orrs	r3, r0
    1140:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1144:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1148:	ldr.w	r3, [r4, #432]	; 0x1b0
    114c:	cmp	r3, #0
    114e:	bne.n	1148 <isr+0x550>
    1150:	b.n	cba <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1152:	ldr	r4, [pc, #244]	; (1248 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1154:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1158:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    115a:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    115c:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    115e:	cmp	r4, r0
    1160:	bne.w	d7c <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1164:	ldr	r1, [pc, #236]	; (1254 <isr+0x65c>)
    1166:	ldr	r4, [pc, #240]	; (1258 <isr+0x660>)
    1168:	ldmia	r1, {r0, r1}
    116a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    116c:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    116e:	str	r0, [r4, #0]
    1170:	strh	r1, [r4, #4]
    1172:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1174:	bne.w	d7c <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1178:	cpsid	i
	sof_usage |= (1 << interface);
    117a:	ldr	r0, [pc, #224]	; (125c <isr+0x664>)
    117c:	ldrb	r1, [r0, #0]
    117e:	orr.w	r1, r1, #4
    1182:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1184:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1188:	lsls	r0, r1, #24
    118a:	bmi.n	119a <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    118c:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1190:	movs	r0, #128	; 0x80
    1192:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1196:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    119a:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    119c:	ldr	r2, [pc, #192]	; (1260 <isr+0x668>)
    119e:	movs	r1, #80	; 0x50
    11a0:	strb	r1, [r2, #0]
    11a2:	b.n	d7c <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    11a4:	ldr	r0, [pc, #188]	; (1264 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    11a6:	mov	r2, r3
    11a8:	ldr	r7, [pc, #148]	; (1240 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    11aa:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    11ae:	ldr	r1, [pc, #184]	; (1268 <isr+0x670>)
    11b0:	ldr	r0, [pc, #184]	; (126c <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    11b2:	str	r3, [sp, #4]
    11b4:	cmp.w	lr, #0
    11b8:	it	eq
    11ba:	moveq	r1, r0
    11bc:	mov	r0, r7
    11be:	bl	1d34 <memcpy>
					usb_descriptor_buffer[1] = 7;
    11c2:	movs	r2, #7
    11c4:	ldr	r3, [sp, #4]
    11c6:	strb	r2, [r7, #1]
    11c8:	b.n	10a0 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    11ca:	ldr.w	r2, [r3, #328]	; 0x148
    11ce:	bic.w	r2, r2, #128	; 0x80
    11d2:	str.w	r2, [r3, #328]	; 0x148
    11d6:	b.n	d66 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    11d8:	ldr	r0, [pc, #148]	; (1270 <isr+0x678>)
    11da:	bl	b1c <run_callbacks>
    11de:	b.n	da2 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    11e0:	ldr	r0, [pc, #144]	; (1274 <isr+0x67c>)
    11e2:	bl	b1c <run_callbacks>
    11e6:	b.n	d90 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    11e8:	ldr	r0, [pc, #140]	; (1278 <isr+0x680>)
    11ea:	bl	b1c <run_callbacks>
    11ee:	b.n	d8a <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    11f0:	ldr	r0, [pc, #136]	; (127c <isr+0x684>)
    11f2:	bl	b1c <run_callbacks>
    11f6:	b.n	d9c <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    11f8:	ldr	r0, [pc, #132]	; (1280 <isr+0x688>)
    11fa:	bl	b1c <run_callbacks>
    11fe:	b.n	d96 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1200:	ldr	r0, [pc, #96]	; (1264 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1202:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1204:	ldr	r1, [pc, #100]	; (126c <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1206:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1208:	ldr	r0, [pc, #92]	; (1268 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    120a:	str	r3, [sp, #4]
    120c:	cmp	r7, #0
    120e:	it	eq
    1210:	moveq	r1, r0
    1212:	ldr	r0, [pc, #44]	; (1240 <isr+0x648>)
    1214:	bl	1d34 <memcpy>
    1218:	ldr	r7, [pc, #36]	; (1240 <isr+0x648>)
    121a:	ldr	r3, [sp, #4]
    121c:	b.n	10a0 <isr+0x4a8>
    121e:	nop
    1220:	.word	0x20000a88
    1224:	.word	0x402e01c0
    1228:	.word	0x20001020
    122c:	.word	0x20000aa4
    1230:	.word	0x20000b04
    1234:	.word	0x200009c8
    1238:	.word	0x20000a98
    123c:	.word	0x200002a4
    1240:	.word	0x20203000
    1244:	.word	0xe000ef70
    1248:	.word	0x20000a80
    124c:	.word	0x00070080
    1250:	.word	0x20001000
    1254:	.word	0x20000a90
    1258:	.word	0x20000afc
    125c:	.word	0x20000a68
    1260:	.word	0x20000a78
    1264:	.word	0x20000a70
    1268:	.word	0x60001654
    126c:	.word	0x60001698
    1270:	.word	0x20002200
    1274:	.word	0x20002140
    1278:	.word	0x20002100
    127c:	.word	0x200021c0
    1280:	.word	0x20002180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1284:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1286:	ldrb	r3, [r1, #0]
    1288:	cmp	r3, r2
    128a:	it	cs
    128c:	movcs	r3, r2
    128e:	b.n	108a <isr+0x492>

00001290 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1290:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1292:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1296:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    129a:	ite	ne
    129c:	movne	r7, #0
    129e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    12a2:	cmp	r2, #2
    12a4:	bls.n	12aa <usb_config_rx+0x1a>
    12a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    12aa:	mov.w	sl, r0, lsl #7
    12ae:	ldr.w	r9, [pc, #64]	; 12f0 <usb_config_rx+0x60>
    12b2:	mov	r5, r1
    12b4:	mov	r4, r0
    12b6:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    12ba:	movs	r1, #0
    12bc:	movs	r2, #64	; 0x40
    12be:	mov	r8, r3
    12c0:	mov	r0, r6
    12c2:	bl	3bf4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    12c6:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    12c8:	orr.w	r1, r7, r5, lsl #16
    12cc:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    12d0:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    12d4:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    12d6:	cmp.w	r8, #0
    12da:	beq.n	12a6 <usb_config_rx+0x16>
    12dc:	ldr	r3, [pc, #12]	; (12ec <usb_config_rx+0x5c>)
    12de:	lsls	r0, r4
    12e0:	ldr	r4, [r3, #0]
    12e2:	orrs	r0, r4
    12e4:	str	r0, [r3, #0]
    12e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ea:	nop
    12ec:	.word	0x20000a64
    12f0:	.word	0x20002000

000012f4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    12f4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    12f6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    12fa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    12fe:	ite	ne
    1300:	movne	r7, #0
    1302:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1306:	cmp	r2, #2
    1308:	bls.n	130e <usb_config_tx+0x1a>
    130a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    130e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1310:	lsls	r5, r0, #7
    1312:	ldr.w	r9, [pc, #68]	; 1358 <usb_config_tx+0x64>
    1316:	mov	r8, r1
    1318:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    131a:	movs	r1, #0
    131c:	mov	r4, r0
    131e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1320:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1324:	mov	r0, sl
    1326:	bl	3bf4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    132a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    132c:	orr.w	r1, r7, r8, lsl #16
    1330:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1334:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1338:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    133c:	cmp	r6, #0
    133e:	beq.n	130a <usb_config_tx+0x16>
    1340:	add.w	r0, r4, #16
    1344:	ldr	r3, [pc, #12]	; (1354 <usb_config_tx+0x60>)
    1346:	lsls	r2, r0
    1348:	ldr	r0, [r3, #0]
    134a:	orrs	r2, r0
    134c:	str	r2, [r3, #0]
    134e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1352:	nop
    1354:	.word	0x20000a64
    1358:	.word	0x20002000

0000135c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    135c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    135e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1360:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1362:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1366:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1368:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    136a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    136c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1370:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1374:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1378:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    137c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    137e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1380:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1382:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1384:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1386:	pop	{r4, r5, r6, r7}
    1388:	bx	lr
    138a:	nop

0000138c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    138c:	subs	r3, r0, #2
    138e:	cmp	r3, #2
    1390:	bls.n	1394 <usb_transmit+0x8>
    1392:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1394:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1396:	ldr	r3, [pc, #24]	; (13b0 <usb_transmit+0x24>)
    1398:	add.w	r4, r0, #16
    139c:	movs	r5, #1
    139e:	mov	r2, r1
    13a0:	add.w	r0, r3, r0, lsl #7
    13a4:	lsl.w	r1, r5, r4
}
    13a8:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    13aa:	b.w	ac0 <schedule_transfer>
    13ae:	nop
    13b0:	.word	0x20002040

000013b4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    13b4:	subs	r3, r0, #2
    13b6:	cmp	r3, #2
    13b8:	bls.n	13bc <usb_receive+0x8>
    13ba:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    13bc:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    13be:	ldr	r3, [pc, #20]	; (13d4 <usb_receive+0x20>)
    13c0:	movs	r4, #1
    13c2:	mov	r2, r1
    13c4:	lsl.w	r1, r4, r0
    13c8:	add.w	r0, r3, r0, lsl #7
}
    13cc:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    13d0:	b.w	ac0 <schedule_transfer>
    13d4:	.word	0x20002000

000013d8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    13d8:	ldr	r0, [r0, #4]
#endif
}
    13da:	bx	lr

000013dc <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    13dc:	cmp	r0, #0
    13de:	beq.n	1490 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13e0:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    13e2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13e6:	sub	sp, #20
    13e8:	mov	fp, r0
    13ea:	ldr	r4, [pc, #168]	; (1494 <delay+0xb8>)
    13ec:	ldr	r5, [pc, #168]	; (1498 <delay+0xbc>)
    13ee:	ldr	r6, [pc, #172]	; (149c <delay+0xc0>)
    13f0:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    13f4:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    13f8:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    13fa:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13fc:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1400:	cmp	r1, #0
    1402:	bne.n	13f4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1404:	ldr	r7, [pc, #152]	; (14a0 <delay+0xc4>)
    1406:	strd	r8, r9, [sp, #8]
    140a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    140c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    140e:	ldr	r2, [pc, #148]	; (14a4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1410:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1414:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1416:	ldr	r2, [r2, #0]
    1418:	movs	r7, #1
    141a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    141e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1422:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1424:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1426:	cmp	r3, r1
    1428:	it	eq
    142a:	cmpeq	r2, r8
    142c:	ite	cs
    142e:	movcs	sl, r8
    1430:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1432:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1436:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    143a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    143c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    143e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1442:	cmp	r3, #0
    1444:	bne.n	1436 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1446:	ldr	r0, [sp, #4]
    1448:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    144a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    144c:	ldr	r0, [pc, #84]	; (14a4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    144e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1452:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1454:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1458:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    145c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1460:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1464:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    1466:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1468:	cmp	r1, r3
    146a:	it	eq
    146c:	cmpeq	r0, r8
    146e:	ite	cs
    1470:	movcs	r3, r8
    1472:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1474:	add	r2, r3
    1476:	cmp	r2, lr
    1478:	bcc.n	148a <delay+0xae>
			if (--msec == 0) return;
    147a:	subs.w	fp, fp, #1
			start += 1000;
    147e:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    1482:	bne.n	1436 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    1484:	add	sp, #20
    1486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    148a:	bl	1848 <yield>
	}
    148e:	b.n	1436 <delay+0x5a>
    1490:	bx	lr
    1492:	nop
    1494:	.word	0x20002280
    1498:	.word	0x20000aa4
    149c:	.word	0x20000a9c
    14a0:	.word	0xe0001004
    14a4:	.word	0x20000aa0

000014a8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    14a8:	ldr	r0, [pc, #656]	; (173c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    14aa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    14ae:	ldr	r3, [pc, #656]	; (1740 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    14b0:	ldr	r2, [r0, #120]	; 0x78
    14b2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    14b6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    14b8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    14ba:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    14bc:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    14c0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    14c4:	ldr	r4, [pc, #636]	; (1744 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    14c6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    14ca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    14cc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    14d0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    14d2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    14d4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    14d8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    14dc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    14e0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    14e4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    14e8:	ldrh.w	r0, [r3, #392]	; 0x188
    14ec:	uxth	r0, r0
    14ee:	orr.w	r0, r0, #240	; 0xf0
    14f2:	strh.w	r0, [r3, #392]	; 0x188
    14f6:	add.w	r0, r1, r1, lsl #1
    14fa:	ldr	r3, [pc, #580]	; (1740 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    14fc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    14fe:	movs	r5, #0
    1500:	lsls	r0, r0, #5
    1502:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1504:	cmp	r1, #4
    1506:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1508:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    150c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    150e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1510:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1512:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1514:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1516:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1518:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    151a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    151c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    151e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1520:	bne.n	14f6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1522:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1526:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    152a:	ldr	r3, [pc, #540]	; (1748 <pwm_init+0x2a0>)
    152c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1530:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1532:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1534:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1538:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    153a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    153e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1542:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1546:	ldrh.w	r0, [r4, #392]	; 0x188
    154a:	uxth	r0, r0
    154c:	orr.w	r0, r0, #3840	; 0xf00
    1550:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1554:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1558:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    155c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1560:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1564:	ldrh.w	r0, [r3, #392]	; 0x188
    1568:	uxth	r0, r0
    156a:	orr.w	r0, r0, #240	; 0xf0
    156e:	strh.w	r0, [r3, #392]	; 0x188
    1572:	add.w	r0, r1, r1, lsl #1
    1576:	ldr	r3, [pc, #464]	; (1748 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    1578:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    157a:	movs	r5, #0
    157c:	lsls	r0, r0, #5
    157e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1580:	cmp	r1, #4
    1582:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1584:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1586:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    158a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    158c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    158e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1590:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1592:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1594:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1596:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1598:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    159a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    159c:	bne.n	1572 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    159e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    15a2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    15a6:	ldr	r3, [pc, #420]	; (174c <pwm_init+0x2a4>)
    15a8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    15ac:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    15ae:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    15b0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    15b4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    15b6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    15ba:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    15be:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    15c2:	ldrh.w	r0, [r4, #392]	; 0x188
    15c6:	uxth	r0, r0
    15c8:	orr.w	r0, r0, #3840	; 0xf00
    15cc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    15d0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    15d4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    15d8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    15dc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    15e0:	ldrh.w	r0, [r3, #392]	; 0x188
    15e4:	uxth	r0, r0
    15e6:	orr.w	r0, r0, #240	; 0xf0
    15ea:	strh.w	r0, [r3, #392]	; 0x188
    15ee:	add.w	r0, r1, r1, lsl #1
    15f2:	ldr	r3, [pc, #344]	; (174c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    15f4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    15f6:	movs	r5, #0
    15f8:	lsls	r0, r0, #5
    15fa:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    15fc:	cmp	r1, #4
    15fe:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1600:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1602:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1606:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1608:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    160a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    160c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    160e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1610:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1612:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1614:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1616:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1618:	bne.n	15ee <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    161a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    161e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1622:	ldr	r3, [pc, #300]	; (1750 <pwm_init+0x2a8>)
    1624:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1628:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    162a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    162c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1630:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1632:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1636:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    163a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    163e:	ldrh.w	r0, [r4, #392]	; 0x188
    1642:	uxth	r0, r0
    1644:	orr.w	r0, r0, #3840	; 0xf00
    1648:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    164c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1650:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1654:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1658:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    165c:	ldrh.w	r0, [r3, #392]	; 0x188
    1660:	uxth	r0, r0
    1662:	orr.w	r0, r0, #240	; 0xf0
    1666:	strh.w	r0, [r3, #392]	; 0x188
    166a:	add.w	r0, r1, r1, lsl #1
    166e:	ldr	r3, [pc, #224]	; (1750 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1670:	adds	r1, #1
    1672:	lsls	r0, r0, #5
    1674:	mov	r4, r3
    1676:	cmp	r1, #4
    1678:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    167a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    167c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1680:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1682:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1684:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1686:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1688:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    168a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    168c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    168e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1690:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1692:	bne.n	166a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1694:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1698:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    169a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    169c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    16a0:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16a2:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    16a6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16a8:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    16ac:	orrs	r3, r7
    16ae:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    16b2:	ldrh.w	r3, [r4, #392]	; 0x188
    16b6:	uxth	r3, r3
    16b8:	orr.w	r3, r3, #3840	; 0xf00
    16bc:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    16c0:	lsls	r0, r2, #5
    16c2:	ldr	r3, [pc, #144]	; (1754 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    16c4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    16c6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    16c8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    16ca:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    16cc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16ce:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16d0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16d2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    16d6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    16d8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16da:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    16dc:	bne.n	16c0 <pwm_init+0x218>
    16de:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16e0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16e2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16e6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    16ea:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16ec:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    16f0:	lsls	r0, r2, #5
    16f2:	ldr	r3, [pc, #100]	; (1758 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    16f4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    16f6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    16f8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    16fa:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    16fc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16fe:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1700:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1702:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1704:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1706:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1708:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    170a:	bne.n	16f0 <pwm_init+0x248>
    170c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    170e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1710:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1714:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1718:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    171a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    171e:	lsls	r0, r2, #5
    1720:	ldr	r3, [pc, #56]	; (175c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1722:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1724:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1726:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    1728:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    172a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    172c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    172e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1730:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1732:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1734:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1736:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1738:	bne.n	171e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    173a:	pop	{r4, r5, r6, r7, pc}
    173c:	.word	0x400fc000
    1740:	.word	0x403dc000
    1744:	.word	0xfc030000
    1748:	.word	0x403e0000
    174c:	.word	0x403e4000
    1750:	.word	0x403e8000
    1754:	.word	0x401dc000
    1758:	.word	0x401e0000
    175c:	.word	0x401e4000

00001760 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1760:	cmp	r0, #39	; 0x27
    1762:	bhi.n	179e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1764:	lsls	r0, r0, #4
    1766:	ldr	r2, [pc, #104]	; (17d0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1768:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    176a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    176e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    1770:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1772:	beq.n	17a0 <pinMode+0x40>
    1774:	cmp	r1, #4
    1776:	beq.n	17a0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1778:	ldr	r4, [r3, #12]
    177a:	ldr	r2, [r0, #4]
    177c:	bic.w	r2, r2, r4
    1780:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1782:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1784:	cbz	r1, 17c2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1786:	cmp	r1, #2
    1788:	beq.n	17c8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    178a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    178c:	ldr	r3, [r3, #4]
}
    178e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1792:	ite	eq
    1794:	ldreq	r1, [pc, #60]	; (17d4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1796:	ldrne	r1, [pc, #64]	; (17d8 <pinMode+0x78>)
    1798:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    179a:	movs	r2, #21
    179c:	str	r2, [r3, #0]
}
    179e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    17a0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    17a2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    17a4:	ldr	r4, [r0, #4]
    17a6:	orr.w	r2, r2, r4
    17aa:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    17ac:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    17ae:	beq.n	17c2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    17b0:	movw	r1, #2104	; 0x838
    17b4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    17b6:	ldr	r3, [r3, #4]
    17b8:	movs	r2, #21
}
    17ba:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    17be:	str	r2, [r3, #0]
}
    17c0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    17c2:	movs	r1, #56	; 0x38
    17c4:	str	r1, [r2, #0]
    17c6:	b.n	17b6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    17c8:	ldr	r1, [pc, #16]	; (17dc <pinMode+0x7c>)
    17ca:	str	r1, [r2, #0]
    17cc:	b.n	17b6 <pinMode+0x56>
    17ce:	nop
    17d0:	.word	0x20000024
    17d4:	.word	0x00013038
    17d8:	.word	0x00010038
    17dc:	.word	0x0001f038

000017e0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    17e0:	ldr	r2, [pc, #72]	; (182c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    17e2:	ldr	r3, [pc, #76]	; (1830 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    17e4:	ldr.w	r0, [r2, #544]	; 0x220
    17e8:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    17ec:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    17ee:	push	{r4, lr}
    17f0:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    17f2:	bhi.n	17fa <usb_init_serialnumber+0x1a>
    17f4:	add.w	r0, r0, r0, lsl #2
    17f8:	lsls	r0, r0, #1
    17fa:	ldr	r4, [pc, #56]	; (1834 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    17fc:	add	r1, sp, #4
    17fe:	movs	r2, #10
    1800:	bl	21d8 <ultoa>
    1804:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1806:	movs	r3, #0
    1808:	mov	r0, r4
		char c = buf[i];
    180a:	ldrb.w	r2, [r1], #1
    180e:	adds	r3, #1
		if (!c) break;
    1810:	cbz	r2, 1822 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1812:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1814:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1818:	bne.n	180a <usb_init_serialnumber+0x2a>
    181a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    181c:	strb	r3, [r4, #0]
}
    181e:	add	sp, #16
    1820:	pop	{r4, pc}
    1822:	lsls	r3, r3, #1
    1824:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1826:	strb	r3, [r4, #0]
}
    1828:	add	sp, #16
    182a:	pop	{r4, pc}
    182c:	.word	0x401f4400
    1830:	.word	0x0098967f
    1834:	.word	0x200003cc

00001838 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1838:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    183a:	bl	7c <setup>
	while (1) {
		loop();
    183e:	bl	84 <loop>
		yield();
    1842:	bl	1848 <yield>
    1846:	b.n	183e <main+0x6>

00001848 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1848:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    184a:	ldr	r4, [pc, #132]	; (18d0 <yield+0x88>)
    184c:	ldrb	r3, [r4, #0]
    184e:	cbnz	r3, 1872 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1850:	ldr	r3, [pc, #128]	; (18d4 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1852:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1854:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1856:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    1858:	cbnz	r3, 18a2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    185a:	ldr	r3, [pc, #124]	; (18d8 <yield+0x90>)
    185c:	ldrb	r3, [r3, #0]
    185e:	cmp	r3, #0
    1860:	bne.n	18b6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    1862:	ldr	r3, [pc, #120]	; (18dc <yield+0x94>)

	running = 0;
    1864:	movs	r1, #0
    1866:	ldr	r2, [r3, #0]
    1868:	strb	r1, [r4, #0]
    186a:	cbz	r2, 1872 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    186c:	mrs	r2, IPSR
		if (ipsr != 0) return;
    1870:	cbz	r2, 1874 <yield+0x2c>
    1872:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1874:	mrs	r0, PRIMASK
		__disable_irq();
    1878:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    187a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    187c:	cbz	r2, 18bc <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    187e:	ldr	r4, [pc, #96]	; (18e0 <yield+0x98>)
    1880:	ldrb	r1, [r4, #0]
    1882:	cbnz	r1, 18bc <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1884:	movs	r6, #1
		firstYield = first->_next;
    1886:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1888:	strb	r6, [r4, #0]
		firstYield = first->_next;
    188a:	str	r5, [r3, #0]
		if (firstYield) {
    188c:	cbz	r5, 18c4 <yield+0x7c>
			firstYield->_prev = nullptr;
    188e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1890:	cbnz	r0, 1894 <yield+0x4c>
    1892:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1894:	movs	r5, #0
		(*(first->_function))(*first);
    1896:	ldr	r3, [r2, #8]
    1898:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    189a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    189c:	blx	r3
		runningFromYield = false;
    189e:	strb	r5, [r4, #0]
    18a0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    18a2:	bl	8f0 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    18a6:	cmp	r0, #0
    18a8:	beq.n	185a <yield+0x12>
    18aa:	bl	1b14 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    18ae:	ldr	r3, [pc, #40]	; (18d8 <yield+0x90>)
    18b0:	ldrb	r3, [r3, #0]
    18b2:	cmp	r3, #0
    18b4:	beq.n	1862 <yield+0x1a>
    18b6:	bl	224c <HardwareSerial::processSerialEvents()>
    18ba:	b.n	1862 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    18bc:	cmp	r0, #0
    18be:	bne.n	1872 <yield+0x2a>
    18c0:	cpsie	i
    18c2:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    18c4:	ldr	r3, [pc, #28]	; (18e4 <yield+0x9c>)
    18c6:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    18c8:	cmp	r0, #0
    18ca:	bne.n	1894 <yield+0x4c>
    18cc:	b.n	1892 <yield+0x4a>
    18ce:	nop
    18d0:	.word	0x20000aa8
    18d4:	.word	0x200003e2
    18d8:	.word	0x20000af8
    18dc:	.word	0x20000abc
    18e0:	.word	0x20000ac0
    18e4:	.word	0x20000ab8

000018e8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    18e8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    18ea:	mrs	r2, PRIMASK
		__disable_irq();
    18ee:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    18f0:	ldrb	r3, [r0, #29]
    18f2:	cbnz	r3, 1902 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    18f4:	ldrb	r1, [r0, #28]
    18f6:	cmp	r1, #1
    18f8:	beq.n	190c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    18fa:	cmp	r1, #3
    18fc:	beq.n	1920 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    18fe:	movs	r3, #1
    1900:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1902:	cbnz	r2, 1906 <EventResponder::triggerEventNotImmediate()+0x1e>
    1904:	cpsie	i
	}
	enableInterrupts(irq);
}
    1906:	ldr.w	r4, [sp], #4
    190a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    190c:	ldr	r4, [pc, #68]	; (1954 <EventResponder::triggerEventNotImmediate()+0x6c>)
    190e:	ldr	r1, [r4, #0]
    1910:	cbz	r1, 193c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1912:	ldr	r1, [pc, #68]	; (1958 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1914:	str	r3, [r0, #20]
				_prev = lastYield;
    1916:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    1918:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    191a:	str	r3, [r0, #24]
				_prev->_next = this;
    191c:	str	r0, [r3, #20]
    191e:	b.n	18fe <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    1920:	ldr	r4, [pc, #56]	; (195c <EventResponder::triggerEventNotImmediate()+0x74>)
    1922:	ldr	r1, [r4, #0]
    1924:	cbz	r1, 1948 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1926:	ldr	r1, [pc, #56]	; (1960 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    1928:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    192a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    192c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    192e:	str	r3, [r0, #24]
				_prev->_next = this;
    1930:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    1932:	ldr	r3, [pc, #48]	; (1964 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1934:	mov.w	r1, #268435456	; 0x10000000
    1938:	str	r1, [r3, #0]
    193a:	b.n	18fe <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    193c:	ldr	r3, [pc, #24]	; (1958 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    193e:	str	r1, [r0, #20]
				_prev = nullptr;
    1940:	str	r1, [r0, #24]
				firstYield = this;
    1942:	str	r0, [r4, #0]
				lastYield = this;
    1944:	str	r0, [r3, #0]
    1946:	b.n	18fe <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1948:	ldr	r3, [pc, #20]	; (1960 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    194a:	str	r1, [r0, #20]
				_prev = nullptr;
    194c:	str	r1, [r0, #24]
				firstInterrupt = this;
    194e:	str	r0, [r4, #0]
				lastInterrupt = this;
    1950:	str	r0, [r3, #0]
    1952:	b.n	1932 <EventResponder::triggerEventNotImmediate()+0x4a>
    1954:	.word	0x20000abc
    1958:	.word	0x20000ab8
    195c:	.word	0x20000aac
    1960:	.word	0x20000ab0
    1964:	.word	0xe000ed04

00001968 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1968:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    196a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    196c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    196e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1970:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1972:	beq.n	197c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1974:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1978:	b.w	18e8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    197c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    197e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1982:	bx	r3

00001984 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1984:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1986:	mrs	r1, PRIMASK
		__disable_irq();
    198a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    198c:	ldr	r4, [pc, #48]	; (19c0 <EventResponder::runFromInterrupt()+0x3c>)
    198e:	ldr	r3, [r4, #0]
		if (first) {
    1990:	cbz	r3, 19b6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1992:	ldr	r6, [pc, #48]	; (19c4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1994:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1996:	ldr	r2, [r3, #20]
    1998:	str	r2, [r4, #0]
			if (firstInterrupt) {
    199a:	cbz	r2, 19bc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    199c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    199e:	cbnz	r1, 19a2 <EventResponder::runFromInterrupt()+0x1e>
    19a0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    19a2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    19a4:	mov	r0, r3
    19a6:	ldr	r3, [r3, #8]
    19a8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    19aa:	mrs	r1, PRIMASK
		__disable_irq();
    19ae:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    19b0:	ldr	r3, [r4, #0]
		if (first) {
    19b2:	cmp	r3, #0
    19b4:	bne.n	1996 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    19b6:	cbnz	r1, 19ba <EventResponder::runFromInterrupt()+0x36>
    19b8:	cpsie	i
    19ba:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    19bc:	str	r2, [r6, #0]
    19be:	b.n	199e <EventResponder::runFromInterrupt()+0x1a>
    19c0:	.word	0x20000aac
    19c4:	.word	0x20000ab0

000019c8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    19c8:	b.w	1984 <EventResponder::runFromInterrupt()>

000019cc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    19cc:	ldr	r2, [pc, #96]	; (1a30 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    19ce:	push	{r4, r5}
	if (listActive == nullptr) {
    19d0:	ldr	r4, [r2, #0]
    19d2:	cmp	r4, #0
    19d4:	beq.n	1a28 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    19d6:	ldr	r3, [r0, #0]
    19d8:	ldr	r1, [r4, #0]
    19da:	cmp	r3, r1
    19dc:	bcs.n	19fe <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    19de:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    19e0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    19e2:	str	r4, [r0, #8]
		_prev = nullptr;
    19e4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    19e6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    19e8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    19ea:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    19ec:	movs	r3, #2
}
    19ee:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    19f0:	strb	r3, [r0, #20]
}
    19f2:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    19f4:	str	r3, [r0, #0]
    19f6:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    19f8:	ldr	r1, [r2, #0]
    19fa:	cmp	r3, r1
    19fc:	bcc.n	1a10 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    19fe:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1a00:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1a02:	cmp	r2, #0
    1a04:	bne.n	19f4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    1a06:	str	r2, [r0, #8]
		_prev = timer;
    1a08:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    1a0a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    1a0c:	str	r0, [r4, #8]
    1a0e:	b.n	19ec <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1a10:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    1a12:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    1a14:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    1a16:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    1a18:	str	r5, [r0, #12]
				timer->_prev = this;
    1a1a:	str	r0, [r4, #12]
				_prev->_next = this;
    1a1c:	ldr	r1, [r0, #12]
    1a1e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    1a20:	str	r3, [r4, #0]
				_state = TimerActive;
    1a22:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    1a24:	pop	{r4, r5}
    1a26:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    1a28:	str	r4, [r0, #8]
		_prev = nullptr;
    1a2a:	str	r4, [r0, #12]
		listActive = this;
    1a2c:	str	r0, [r2, #0]
    1a2e:	b.n	19ec <MillisTimer::addToActiveList()+0x20>
    1a30:	.word	0x20000ab4

00001a34 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1a34:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1a36:	ldr	r6, [pc, #136]	; (1ac0 <MillisTimer::runFromTimer()+0x8c>)
    1a38:	ldr	r4, [r6, #0]
	while (timer) {
    1a3a:	cbz	r4, 1a88 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1a3c:	ldr	r3, [r4, #0]
    1a3e:	cmp	r3, #0
    1a40:	bne.n	1ab8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    1a42:	mov	r5, r3
    1a44:	ldr	r7, [pc, #124]	; (1ac4 <MillisTimer::runFromTimer()+0x90>)
    1a46:	b.n	1a52 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1a48:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1a4a:	cbz	r4, 1a88 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1a4c:	ldr	r3, [r4, #0]
    1a4e:	cmp	r3, #0
    1a50:	bne.n	1ab8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    1a52:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1a54:	cbz	r3, 1a58 <MillisTimer::runFromTimer()+0x24>
    1a56:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1a58:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    1a5a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1a5c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    1a5e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1a60:	ldr	r3, [r3, #0]
    1a62:	cmp	r3, r7
    1a64:	bne.n	1aaa <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1a66:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1a68:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1a6a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1a6c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    1a6e:	beq.n	1ab2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1a70:	bl	18e8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1a74:	ldr	r3, [r4, #4]
    1a76:	cmp	r3, #0
    1a78:	beq.n	1a48 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    1a7a:	str	r3, [r4, #0]
				timer->addToActiveList();
    1a7c:	mov	r0, r4
    1a7e:	bl	19cc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    1a82:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1a84:	cmp	r4, #0
    1a86:	bne.n	1a4c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1a88:	mrs	r3, PRIMASK
		__disable_irq();
    1a8c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1a8e:	ldr	r2, [pc, #56]	; (1ac8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1a90:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    1a92:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1a94:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1a96:	cbnz	r3, 1a9a <MillisTimer::runFromTimer()+0x66>
    1a98:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    1a9a:	cbz	r0, 1aa8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    1a9c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    1a9e:	bl	19cc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    1aa2:	mov	r0, r4
    1aa4:	cmp	r0, #0
    1aa6:	bne.n	1a9c <MillisTimer::runFromTimer()+0x68>
    1aa8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1aaa:	mov	r2, r4
    1aac:	movs	r1, #0
    1aae:	blx	r3
    1ab0:	b.n	1a74 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1ab2:	ldr	r3, [r0, #8]
    1ab4:	blx	r3
    1ab6:	b.n	1a74 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    1ab8:	subs	r3, #1
    1aba:	str	r3, [r4, #0]
			break;
    1abc:	b.n	1a88 <MillisTimer::runFromTimer()+0x54>
    1abe:	nop
    1ac0:	.word	0x20000ab4
    1ac4:	.word	0x00001969
    1ac8:	.word	0x20000ac4

00001acc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1acc:	ldr	r2, [pc, #16]	; (1ae0 <systick_isr+0x14>)
    1ace:	ldr	r3, [pc, #20]	; (1ae4 <systick_isr+0x18>)
    1ad0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    1ad2:	ldr	r2, [pc, #20]	; (1ae8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1ad4:	str	r1, [r3, #0]
	systick_millis_count++;
    1ad6:	ldr	r3, [r2, #0]
    1ad8:	adds	r3, #1
    1ada:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    1adc:	b.w	1a34 <MillisTimer::runFromTimer()>
    1ae0:	.word	0xe0001004
    1ae4:	.word	0x20000a9c
    1ae8:	.word	0x20000aa4

00001aec <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1aec:	b.w	8fc <usb_serial_flush_input>

00001af0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1af0:	b.w	8ac <usb_serial_peekchar>

00001af4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1af4:	b.w	970 <usb_serial_getchar>

00001af8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1af8:	b.w	8f0 <usb_serial_available>

00001afc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1afc:	b.w	a20 <usb_serial_flush_output>

00001b00 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1b00:	b.w	9d4 <usb_serial_write_buffer_free>

00001b04 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b04:	mov	r0, r1
    1b06:	mov	r1, r2
    1b08:	b.w	9bc <usb_serial_write>

00001b0c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1b0c:	mov	r0, r1
    1b0e:	b.w	990 <usb_serial_putchar>
    1b12:	nop

00001b14 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    1b14:	ldr	r3, [pc, #4]	; (1b1c <serialEvent()+0x8>)
    1b16:	movs	r2, #0
    1b18:	strb	r2, [r3, #0]
    1b1a:	bx	lr
    1b1c:	.word	0x200003e2

00001b20 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1b20:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1b22:	ldr	r4, [pc, #24]	; (1b3c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1b24:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1b26:	ldr	r3, [r0, #0]
    1b28:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1b2a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1b2c:	add	r1, sp, #4
    1b2e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1b30:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1b34:	blx	r3
}
    1b36:	add	sp, #8
    1b38:	pop	{r4, pc}
    1b3a:	nop
    1b3c:	.word	0x20000338

00001b40 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    1b40:	push	{r4, r5, r6, r7, lr}
    1b42:	mov	r6, r0
    1b44:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    1b46:	cmp	r2, #0
    1b48:	beq.n	1bb2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    1b4a:	cmp	r2, #1
    1b4c:	it	eq
    1b4e:	moveq	r2, #10
	}


	if (n == 0) {
    1b50:	cbz	r1, 1ba8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    1b52:	movs	r5, #33	; 0x21
    1b54:	b.n	1b58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    1b56:	uxtb	r5, r7
    1b58:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    1b5a:	udiv	r4, r1, r2
    1b5e:	mls	r1, r2, r4, r1
    1b62:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1b64:	cmp	r1, #9
    1b66:	add.w	r1, r0, #55	; 0x37
    1b6a:	add.w	r0, r0, #48	; 0x30
    1b6e:	it	hi
    1b70:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    1b72:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1b74:	add	r4, sp, #40	; 0x28
    1b76:	it	ls
    1b78:	uxtbls	r0, r0
    1b7a:	add	r4, r5
    1b7c:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    1b80:	cmp	r1, #0
    1b82:	bne.n	1b56 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    1b84:	cbz	r3, 1b94 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    1b86:	subs	r5, #1
		buf[i] = '-';
    1b88:	add	r3, sp, #40	; 0x28
    1b8a:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    1b8c:	uxtb	r5, r5
		buf[i] = '-';
    1b8e:	add	r3, r5
    1b90:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    1b94:	ldr	r3, [r6, #0]
    1b96:	add	r1, sp, #4
    1b98:	rsb	r2, r5, #34	; 0x22
    1b9c:	mov	r0, r6
    1b9e:	add	r1, r5
    1ba0:	ldr	r3, [r3, #4]
    1ba2:	blx	r3
}
    1ba4:	add	sp, #44	; 0x2c
    1ba6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1ba8:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1baa:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1bac:	strb.w	r2, [sp, #37]	; 0x25
    1bb0:	b.n	1b84 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    1bb2:	ldr	r3, [r0, #0]
    1bb4:	uxtb	r1, r1
    1bb6:	ldr	r3, [r3, #0]
    1bb8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    1bba:	add	sp, #44	; 0x2c
    1bbc:	pop	{r4, r5, r6, r7, pc}
    1bbe:	nop

00001bc0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1bc0:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    1bc4:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1bc6:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    1bca:	mov	r5, r0
    1bcc:	vpush	{d8}
    1bd0:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1bd2:	bvs.w	1cf8 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    1bd6:	vabs.f64	d7, d0
    1bda:	vldr	d6, [pc, #300]	; 1d08 <Print::printFloat(double, unsigned char)+0x148>
    1bde:	vcmp.f64	d7, d6
    1be2:	vmrs	APSR_nzcv, fpscr
    1be6:	ble.n	1bfe <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1be8:	ldr	r3, [r0, #0]
    1bea:	movs	r2, #3
    1bec:	ldr	r1, [pc, #312]	; (1d28 <Print::printFloat(double, unsigned char)+0x168>)
    1bee:	ldr	r3, [r3, #4]
    1bf0:	blx	r3
    1bf2:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    1bf4:	mov	r0, r6
    1bf6:	add	sp, #24
    1bf8:	vpop	{d8}
    1bfc:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    1bfe:	vldr	d7, [pc, #272]	; 1d10 <Print::printFloat(double, unsigned char)+0x150>
    1c02:	vcmpe.f64	d0, d7
    1c06:	vmrs	APSR_nzcv, fpscr
    1c0a:	bgt.n	1cbe <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    1c0c:	vldr	d7, [pc, #264]	; 1d18 <Print::printFloat(double, unsigned char)+0x158>
    1c10:	vcmpe.f64	d0, d7
    1c14:	vmrs	APSR_nzcv, fpscr
    1c18:	bmi.n	1cbe <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    1c1a:	vcmpe.f64	d0, #0.0
    1c1e:	mov	r4, r1
    1c20:	vmrs	APSR_nzcv, fpscr
    1c24:	bmi.n	1cd4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    1c26:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    1c28:	cmp	r4, #0
    1c2a:	beq.n	1cdc <Print::printFloat(double, unsigned char)+0x11c>
    1c2c:	vmov.f64	d8, #96	; 0x3f000000  0.5
    1c30:	movs	r2, #0
		rounding *= 0.1;
    1c32:	vldr	d7, [pc, #236]	; 1d20 <Print::printFloat(double, unsigned char)+0x160>
    1c36:	adds	r2, #1
    1c38:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    1c3c:	uxtb	r1, r2
    1c3e:	cmp	r4, r1
    1c40:	bhi.n	1c36 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    1c42:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1c46:	movs	r2, #10
    1c48:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    1c4a:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    1c4e:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    1c52:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    1c56:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    1c5a:	bl	1b40 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c5e:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1c60:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1c64:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1c68:	mov.w	r3, #46	; 0x2e
    1c6c:	it	cs
    1c6e:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1c70:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1c72:	strb.w	r3, [sp, #8]
    1c76:	add	r4, r2
    1c78:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1c7a:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1c7e:	adds	r3, r2, #1
    1c80:	add	r1, sp, #24
    1c82:	add	r1, r2
    1c84:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    1c86:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    1c88:	vcvt.u32.f64	s13, d0
    1c8c:	vstr	s13, [sp, #4]
    1c90:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    1c94:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1c98:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    1c9c:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    1ca0:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    1ca4:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    1ca8:	bne.n	1c7a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    1caa:	ldr	r3, [r5, #0]
    1cac:	mov	r0, r5
    1cae:	add	r1, sp, #8
    1cb0:	ldr	r3, [r3, #4]
    1cb2:	blx	r3
	}
	return count;
}
    1cb4:	mov	r0, r6
    1cb6:	add	sp, #24
    1cb8:	vpop	{d8}
    1cbc:	pop	{r4, r5, r6, pc}
    1cbe:	ldr	r3, [r5, #0]
    1cc0:	movs	r2, #3
    1cc2:	ldr	r1, [pc, #104]	; (1d2c <Print::printFloat(double, unsigned char)+0x16c>)
    1cc4:	ldr	r3, [r3, #4]
    1cc6:	blx	r3
    1cc8:	mov	r6, r0
    1cca:	mov	r0, r6
    1ccc:	add	sp, #24
    1cce:	vpop	{d8}
    1cd2:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    1cd4:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    1cd8:	movs	r3, #1
    1cda:	b.n	1c28 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    1cdc:	vmov.f64	d7, #96	; 0x3f000000  0.5
    1ce0:	mov	r0, r5
    1ce2:	movs	r2, #10
    1ce4:	vadd.f64	d0, d0, d7
    1ce8:	vcvt.u32.f64	s15, d0
    1cec:	vmov	r1, s15
    1cf0:	bl	1b40 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1cf4:	mov	r6, r0
    1cf6:	b.n	1bf4 <Print::printFloat(double, unsigned char)+0x34>
    1cf8:	ldr	r3, [r0, #0]
    1cfa:	movs	r2, #3
    1cfc:	ldr	r1, [pc, #48]	; (1d30 <Print::printFloat(double, unsigned char)+0x170>)
    1cfe:	ldr	r3, [r3, #4]
    1d00:	blx	r3
    1d02:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1d04:	b.n	1bf4 <Print::printFloat(double, unsigned char)+0x34>
    1d06:	nop
    1d08:	.word	0xffffffff
    1d0c:	.word	0x7fefffff
    1d10:	.word	0xe0000000
    1d14:	.word	0x41efffff
    1d18:	.word	0xe0000000
    1d1c:	.word	0xc1efffff
    1d20:	.word	0x9999999a
    1d24:	.word	0x3fb99999
    1d28:	.word	0x20000344
    1d2c:	.word	0x20000340
    1d30:	.word	0x2000033c

00001d34 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1d34:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1d36:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1d3a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1d3e:	bne.n	1e1c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1d40:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1d42:	bcc.n	1dc8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1d44:	ldr.w	r3, [r1], #4
    1d48:	str.w	r3, [r0], #4
    1d4c:	ldr.w	r3, [r1], #4
    1d50:	str.w	r3, [r0], #4
    1d54:	ldr.w	r3, [r1], #4
    1d58:	str.w	r3, [r0], #4
    1d5c:	ldr.w	r3, [r1], #4
    1d60:	str.w	r3, [r0], #4
    1d64:	ldr.w	r3, [r1], #4
    1d68:	str.w	r3, [r0], #4
    1d6c:	ldr.w	r3, [r1], #4
    1d70:	str.w	r3, [r0], #4
    1d74:	ldr.w	r3, [r1], #4
    1d78:	str.w	r3, [r0], #4
    1d7c:	ldr.w	r3, [r1], #4
    1d80:	str.w	r3, [r0], #4
    1d84:	ldr.w	r3, [r1], #4
    1d88:	str.w	r3, [r0], #4
    1d8c:	ldr.w	r3, [r1], #4
    1d90:	str.w	r3, [r0], #4
    1d94:	ldr.w	r3, [r1], #4
    1d98:	str.w	r3, [r0], #4
    1d9c:	ldr.w	r3, [r1], #4
    1da0:	str.w	r3, [r0], #4
    1da4:	ldr.w	r3, [r1], #4
    1da8:	str.w	r3, [r0], #4
    1dac:	ldr.w	r3, [r1], #4
    1db0:	str.w	r3, [r0], #4
    1db4:	ldr.w	r3, [r1], #4
    1db8:	str.w	r3, [r0], #4
    1dbc:	ldr.w	r3, [r1], #4
    1dc0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1dc4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1dc6:	bcs.n	1d44 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1dc8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1dca:	bcc.n	1df0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1dcc:	ldr.w	r3, [r1], #4
    1dd0:	str.w	r3, [r0], #4
    1dd4:	ldr.w	r3, [r1], #4
    1dd8:	str.w	r3, [r0], #4
    1ddc:	ldr.w	r3, [r1], #4
    1de0:	str.w	r3, [r0], #4
    1de4:	ldr.w	r3, [r1], #4
    1de8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1dec:	subs	r2, #16
	bhs	.Lmid_block_loop
    1dee:	bcs.n	1dcc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1df0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1df2:	bcc.n	1e00 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1df4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1df8:	str.w	r3, [r0], #4
	subs	r2, #4
    1dfc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1dfe:	bcs.n	1df4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1e00:	adds	r2, #4
	beq	.Ldone
    1e02:	beq.n	1e16 <memcpy+0xe2>

	lsls	r2, r2, #31
    1e04:	lsls	r2, r2, #31
	itt ne
    1e06:	itt	ne
	ldrbne  r3, [r1], #1
    1e08:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1e0c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1e10:	bcc.n	1e16 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1e12:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1e14:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1e16:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1e18:	bx	lr
    1e1a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1e1c:	cmp	r2, #8
	blo	.Lbyte_copy
    1e1e:	bcc.n	1e48 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1e20:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1e22:	beq.n	1d40 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1e24:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1e28:	beq.n	1d40 <memcpy+0xc>

	rsb	r3, #4
    1e2a:	rsb	r3, r3, #4
	subs	r2, r3
    1e2e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1e30:	lsls	r3, r3, #31
	itt ne
    1e32:	itt	ne
	ldrbne  r3, [r1], #1
    1e34:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1e38:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1e3c:	bcc.n	1d40 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1e3e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1e42:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1e46:	b.n	1d40 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1e48:	subs	r2, #4
	blo	.Lcopy_less_than_4
    1e4a:	bcc.n	1e00 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1e4c:	subs	r2, #1
	ldrb    r3, [r1], #1
    1e4e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1e52:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1e56:	bcs.n	1e4c <memcpy+0x118>

	ldrb	r3, [r1]
    1e58:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1e5a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1e5c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1e5e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1e60:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1e62:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1e64:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1e66:	bx	lr

00001e68 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1e68:	movs	r0, #4
    1e6a:	mov	r1, lr
    1e6c:	tst	r0, r1
    1e6e:	beq.n	1e78 <_MSP>
    1e70:	mrs	r0, PSP
    1e74:	b.w	1e88 <HardFault_HandlerC>

00001e78 <_MSP>:
    1e78:	mrs	r0, MSP
    1e7c:	b.w	1e88 <HardFault_HandlerC>

00001e80 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    1e80:	bx	lr
    1e82:	nop

00001e84 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1e84:	bx	lr
    1e86:	nop

00001e88 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1e88:	ldr	r3, [pc, #108]	; (1ef8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1e8a:	movs	r1, #5
    1e8c:	ldr	r2, [pc, #108]	; (1efc <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1e8e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1e90:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1e92:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1e96:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1e98:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1e9c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1e9e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1ea0:	ldr	r4, [pc, #92]	; (1f00 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1ea2:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1ea4:	ldr	r0, [pc, #92]	; (1f04 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1ea6:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1ea8:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1eac:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    1eb0:	ldr	r3, [r4, #0]
    1eb2:	cmp	r3, r0
    1eb4:	bls.n	1ebc <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1eb6:	ldr	r0, [pc, #80]	; (1f08 <HardFault_HandlerC+0x80>)
    1eb8:	bl	1f14 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1ebc:	ldr	r5, [pc, #56]	; (1ef8 <HardFault_HandlerC+0x70>)
    1ebe:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1ec0:	movs	r0, #0
    1ec2:	ldr	r2, [pc, #72]	; (1f0c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1ec4:	ldr	r1, [pc, #72]	; (1f10 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1ec6:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1eca:	str	r0, [sp, #4]
    1ecc:	ldr	r3, [sp, #4]
    1ece:	cmp	r3, r2
    1ed0:	bhi.n	1ede <HardFault_HandlerC+0x56>
    1ed2:	ldr	r3, [sp, #4]
    1ed4:	adds	r3, #1
    1ed6:	str	r3, [sp, #4]
    1ed8:	ldr	r3, [sp, #4]
    1eda:	cmp	r3, r2
    1edc:	bls.n	1ed2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1ede:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1ee2:	str	r0, [sp, #4]
    1ee4:	ldr	r3, [sp, #4]
    1ee6:	cmp	r3, r1
    1ee8:	bhi.n	1ec6 <HardFault_HandlerC+0x3e>
    1eea:	ldr	r3, [sp, #4]
    1eec:	adds	r3, #1
    1eee:	str	r3, [sp, #4]
    1ef0:	ldr	r3, [sp, #4]
    1ef2:	cmp	r3, r1
    1ef4:	bls.n	1eea <HardFault_HandlerC+0x62>
    1ef6:	b.n	1ec6 <HardFault_HandlerC+0x3e>
    1ef8:	.word	0x401bc000
    1efc:	.word	0x401f8000
    1f00:	.word	0x200003f8
    1f04:	.word	0x23c345ff
    1f08:	.word	0x11e1a300
    1f0c:	.word	0x000f423f
    1f10:	.word	0x0089543f

00001f14 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1f14:	ldr	r2, [pc, #600]	; (2170 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1f16:	ldr	r3, [pc, #604]	; (2174 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1f18:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1f1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1f1e:	ldr	r4, [pc, #600]	; (2178 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1f20:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1f24:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1f26:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1f28:	bls.n	1f64 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1f2a:	ldr	r3, [pc, #592]	; (217c <set_arm_clock+0x268>)
    1f2c:	cmp	r0, r3
    1f2e:	bls.w	215c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1f32:	ldr	r3, [pc, #588]	; (2180 <set_arm_clock+0x26c>)
    1f34:	movw	r5, #1575	; 0x627
    1f38:	ldr	r7, [pc, #584]	; (2184 <set_arm_clock+0x270>)
    1f3a:	add	r3, r0
    1f3c:	ldr	r4, [pc, #584]	; (2188 <set_arm_clock+0x274>)
    1f3e:	lsrs	r2, r3, #8
    1f40:	umull	r3, r2, r7, r2
    1f44:	lsrs	r3, r2, #7
    1f46:	add.w	r3, r3, r3, lsl #2
    1f4a:	add.w	r2, r3, r3, lsl #2
    1f4e:	addw	r3, r2, #1250	; 0x4e2
    1f52:	cmp	r3, r5
    1f54:	it	cs
    1f56:	movcs	r3, r5
    1f58:	sub.w	r3, r3, #800	; 0x320
    1f5c:	umull	r3, r5, r4, r3
    1f60:	lsrs	r5, r5, #3
    1f62:	b.n	1f6e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1f64:	ldr	r5, [pc, #548]	; (218c <set_arm_clock+0x278>)
    1f66:	cmp	r0, r5
    1f68:	ite	ls
    1f6a:	movls	r5, #6
    1f6c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1f6e:	ldr	r2, [pc, #516]	; (2174 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1f70:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1f74:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1f78:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1f7a:	orr.w	r3, r3, #192	; 0xc0
    1f7e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1f82:	bcs.n	1f9a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1f84:	ldr	r3, [pc, #496]	; (2178 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1f86:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1f8a:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1f8c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1f8e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1f90:	ldr	r3, [r2, #0]
    1f92:	cmp	r3, #0
    1f94:	bge.n	1f90 <set_arm_clock+0x7c>
    1f96:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1f9a:	ands.w	r3, lr, #33554432	; 0x2000000
    1f9e:	bne.n	2004 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1fa0:	ldr	r4, [pc, #492]	; (2190 <set_arm_clock+0x27c>)
    1fa2:	ldr	r2, [pc, #496]	; (2194 <set_arm_clock+0x280>)
    1fa4:	ldr.w	ip, [r4, #16]
    1fa8:	mov	r4, r2
    1faa:	and.w	r2, ip, r2
    1fae:	cmp	r2, r4
    1fb0:	itet	eq
    1fb2:	moveq.w	r3, #402653184	; 0x18000000
    1fb6:	movne.w	r2, #4096	; 0x1000
    1fba:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1fbc:	eor.w	r4, lr, r3
    1fc0:	tst.w	r4, #939524096	; 0x38000000
    1fc4:	beq.n	1fd8 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1fc6:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1fca:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1fce:	ldr	r4, [pc, #420]	; (2174 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1fd0:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1fd4:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1fd8:	eor.w	r3, r1, r2
    1fdc:	tst.w	r3, #12288	; 0x3000
    1fe0:	beq.n	1ff4 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1fe2:	ldr	r3, [pc, #400]	; (2174 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1fe4:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1fe8:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1fea:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1fec:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1fee:	ldr	r3, [r2, #72]	; 0x48
    1ff0:	lsls	r4, r3, #28
    1ff2:	bmi.n	1fee <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1ff4:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1ff8:	ldr	r2, [pc, #376]	; (2174 <set_arm_clock+0x260>)
    1ffa:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ffe:	ldr	r3, [r2, #72]	; 0x48
    2000:	lsls	r1, r3, #26
    2002:	bmi.n	1ffe <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2004:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2006:	ldr	r4, [pc, #400]	; (2198 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2008:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    200a:	mul.w	r3, r1, r2
    200e:	mul.w	r3, r0, r3
    2012:	cmp	r3, r4
    2014:	bhi.n	202a <set_arm_clock+0x116>
		if (div_arm < 8) {
    2016:	cmp	r2, #7
    2018:	bhi.w	2146 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    201c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    201e:	mul.w	r3, r1, r2
    2022:	mul.w	r3, r0, r3
    2026:	cmp	r3, r4
    2028:	bls.n	2016 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    202a:	ldr	r0, [pc, #368]	; (219c <set_arm_clock+0x288>)
    202c:	ldr	r4, [pc, #368]	; (21a0 <set_arm_clock+0x28c>)
    202e:	add	r0, r3
    2030:	umull	r0, r3, r4, r0
    2034:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2036:	cmp	r3, #108	; 0x6c
    2038:	bhi.w	2152 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    203c:	cmp	r3, #53	; 0x35
    203e:	bhi.w	2160 <set_arm_clock+0x24c>
    2042:	ldr.w	r8, [pc, #392]	; 21cc <set_arm_clock+0x2b8>
    2046:	movs	r3, #54	; 0x36
    2048:	ldr	r0, [pc, #344]	; (21a4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    204a:	ldr.w	ip, [pc, #324]	; 2190 <set_arm_clock+0x27c>
    204e:	ldr	r4, [pc, #344]	; (21a8 <set_arm_clock+0x294>)
    2050:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2054:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2058:	and.w	r4, r9, r4
    205c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    205e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2062:	beq.n	207c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2064:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2068:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    206c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    206e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2072:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2076:	ldr	r3, [r4, #0]
    2078:	cmp	r3, #0
    207a:	bge.n	2076 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    207c:	ldr.w	ip, [pc, #244]	; 2174 <set_arm_clock+0x260>
    2080:	subs	r2, #1
    2082:	ldr.w	r3, [ip, #16]
    2086:	and.w	r3, r3, #7
    208a:	cmp	r3, r2
    208c:	beq.n	209e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    208e:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2092:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2094:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2098:	ldr	r3, [r4, #72]	; 0x48
    209a:	lsls	r3, r3, #15
    209c:	bmi.n	2098 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    209e:	subs	r1, #1
    20a0:	lsls	r1, r1, #10
    20a2:	eor.w	r3, lr, r1
    20a6:	tst.w	r3, #7168	; 0x1c00
    20aa:	beq.n	20c6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    20ac:	ldr	r3, [pc, #196]	; (2174 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    20ae:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    20b2:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    20b6:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    20b8:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    20bc:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    20c0:	ldr	r3, [r2, #72]	; 0x48
    20c2:	lsls	r1, r3, #30
    20c4:	bmi.n	20c0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    20c6:	ldr	r3, [pc, #228]	; (21ac <set_arm_clock+0x298>)
    20c8:	ldr	r1, [pc, #228]	; (21b0 <set_arm_clock+0x29c>)
    20ca:	add	r3, r0
    20cc:	lsrs	r3, r3, #7
    20ce:	umull	r3, r1, r1, r3
    20d2:	lsrs	r1, r1, #12
    20d4:	cmp	r1, #4
    20d6:	it	cs
    20d8:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    20da:	subs	r3, r1, #1
    20dc:	lsls	r3, r3, #8
    20de:	eor.w	r2, lr, r3
    20e2:	tst.w	r2, #768	; 0x300
    20e6:	beq.n	20f8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    20e8:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    20ec:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    20f0:	ldr	r2, [pc, #128]	; (2174 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    20f2:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    20f6:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    20f8:	ldr	r3, [pc, #120]	; (2174 <set_arm_clock+0x260>)
    20fa:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    20fc:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    20fe:	bic.w	r4, r4, #33554432	; 0x2000000
    2102:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2104:	ldr	r3, [r2, #72]	; 0x48
    2106:	lsls	r3, r3, #26
    2108:	bmi.n	2104 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    210a:	ldr	r3, [pc, #168]	; (21b4 <set_arm_clock+0x2a0>)
    210c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2110:	ldr	r4, [pc, #164]	; (21b8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2112:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2114:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2118:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    211a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    211e:	ldr	r4, [pc, #156]	; (21bc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2120:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2124:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2128:	ldr	r2, [pc, #148]	; (21c0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    212a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    212c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    212e:	bcs.n	2142 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2130:	ldr	r3, [pc, #68]	; (2178 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2132:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2136:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2138:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    213a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    213c:	ldr	r3, [r2, #0]
    213e:	cmp	r3, #0
    2140:	bge.n	213c <set_arm_clock+0x228>
	}

	return frequency;
}
    2142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2146:	cmp	r1, #4
    2148:	bhi.w	202a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    214c:	adds	r1, #1
				div_arm = 1;
    214e:	movs	r2, #1
    2150:	b.n	200a <set_arm_clock+0xf6>
    2152:	ldr.w	r8, [pc, #124]	; 21d0 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2156:	movs	r3, #108	; 0x6c
    2158:	ldr	r0, [pc, #104]	; (21c4 <set_arm_clock+0x2b0>)
    215a:	b.n	204a <set_arm_clock+0x136>
    215c:	movs	r5, #18
    215e:	b.n	1f6e <set_arm_clock+0x5a>
    2160:	ldr	r0, [pc, #100]	; (21c8 <set_arm_clock+0x2b4>)
    2162:	ldr.w	r8, [pc, #112]	; 21d4 <set_arm_clock+0x2c0>
    2166:	mul.w	r0, r0, r3
    216a:	orr.w	r8, r3, r8
    216e:	b.n	204a <set_arm_clock+0x136>
    2170:	.word	0x1f78a400
    2174:	.word	0x400fc000
    2178:	.word	0x40080000
    217c:	.word	0x23c34600
    2180:	.word	0xdc3cba00
    2184:	.word	0x004cb223
    2188:	.word	0x51eb851f
    218c:	.word	0x016e3600
    2190:	.word	0x400d8000
    2194:	.word	0x80003040
    2198:	.word	0x269fb1ff
    219c:	.word	0x005b8d80
    21a0:	.word	0x165e9f81
    21a4:	.word	0x269fb200
    21a8:	.word	0x8001307f
    21ac:	.word	0x08f0d17f
    21b0:	.word	0x00e5109f
    21b4:	.word	0x431bde83
    21b8:	.word	0x200003f8
    21bc:	.word	0x200003f4
    21c0:	.word	0x20000aa0
    21c4:	.word	0x4d3f6400
    21c8:	.word	0x00b71b00
    21cc:	.word	0x80002036
    21d0:	.word	0x8000206c
    21d4:	.word	0x80002000

000021d8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    21d8:	push	{r4, r5, r6, r7}
    21da:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    21dc:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    21de:	mov	r7, r6
    21e0:	b.n	21e4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    21e2:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    21e4:	udiv	r3, r0, r2
    21e8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21ec:	add.w	r4, r0, #55	; 0x37
    21f0:	cmp	r0, #9
    21f2:	add.w	r0, r0, #48	; 0x30
    21f6:	uxtb	r4, r4
    21f8:	it	ls
    21fa:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    21fc:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21fe:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    2202:	cmp	r3, #0
    2204:	bne.n	21e2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    2206:	adds	r2, r1, r5
    2208:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    220a:	cbz	r5, 2220 <ultoa+0x48>
    220c:	adds	r3, #1
		t = buf[j];
    220e:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    2212:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2214:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    2216:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2218:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    221a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    221e:	blt.n	220c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2220:	mov	r0, r1
    2222:	pop	{r4, r5, r6, r7}
    2224:	bx	lr
    2226:	nop

00002228 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2228:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    222a:	ldr	r2, [pc, #24]	; (2244 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    222c:	movs	r1, #7
    222e:	ldr	r3, [pc, #24]	; (2248 <Panic_Temp_isr+0x20>)
    2230:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2232:	ldr	r3, [r2, #56]	; 0x38
    2234:	orr.w	r3, r3, #64	; 0x40
    2238:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    223a:	dsb	sy
  while (1) asm ("wfi");
    223e:	wfi
    2240:	b.n	223e <Panic_Temp_isr+0x16>
    2242:	nop
    2244:	.word	0x400d4000
    2248:	.word	0x400ac000

0000224c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    224c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    224e:	ldr	r3, [pc, #28]	; (226c <HardwareSerial::processSerialEvents()+0x20>)
    2250:	ldrb	r4, [r3, #0]
    2252:	cbz	r4, 2268 <HardwareSerial::processSerialEvents()+0x1c>
    2254:	ldr	r5, [pc, #24]	; (2270 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    2256:	ldr.w	r3, [r5, #4]!
    225a:	cmp	r3, #0
    225c:	beq.n	2256 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    225e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    2260:	subs	r3, r4, #1
    2262:	ands.w	r4, r3, #255	; 0xff
    2266:	bne.n	2256 <HardwareSerial::processSerialEvents()+0xa>
    2268:	pop	{r3, r4, r5, pc}
    226a:	nop
    226c:	.word	0x20000af8
    2270:	.word	0x20000ad8

00002274 <acos>:
    2274:	push	{r4, lr}
    2276:	vpush	{d8-d9}
    227a:	vmov.f64	d8, d0
    227e:	ldr	r4, [pc, #148]	; (2314 <acos+0xa0>)
    2280:	sub	sp, #40	; 0x28
    2282:	bl	26f8 <__ieee754_acos>
    2286:	ldrsb.w	r3, [r4]
    228a:	vmov.f64	d9, d0
    228e:	adds	r3, #1
    2290:	beq.n	22f0 <acos+0x7c>
    2292:	vcmp.f64	d8, d8
    2296:	vmrs	APSR_nzcv, fpscr
    229a:	bvs.n	22f0 <acos+0x7c>
    229c:	vmov.f64	d0, d8
    22a0:	bl	390c <fabs>
    22a4:	vmov.f64	d7, #112	; 0x3f800000  1.0
    22a8:	vcmpe.f64	d0, d7
    22ac:	vmrs	APSR_nzcv, fpscr
    22b0:	ble.n	22f0 <acos+0x7c>
    22b2:	movs	r3, #1
    22b4:	ldr	r2, [pc, #96]	; (2318 <acos+0xa4>)
    22b6:	str	r3, [sp, #0]
    22b8:	ldr	r0, [pc, #96]	; (231c <acos+0xa8>)
    22ba:	str	r2, [sp, #4]
    22bc:	movs	r3, #0
    22be:	str	r3, [sp, #32]
    22c0:	vstr	d8, [sp, #16]
    22c4:	vstr	d8, [sp, #8]
    22c8:	bl	3930 <nan>
    22cc:	ldrsb.w	r3, [r4]
    22d0:	cmp	r3, #2
    22d2:	vstr	d0, [sp, #24]
    22d6:	beq.n	22fc <acos+0x88>
    22d8:	mov	r0, sp
    22da:	bl	392c <matherr>
    22de:	cbz	r0, 22fc <acos+0x88>
    22e0:	ldr	r3, [sp, #32]
    22e2:	cbnz	r3, 230a <acos+0x96>
    22e4:	vldr	d0, [sp, #24]
    22e8:	add	sp, #40	; 0x28
    22ea:	vpop	{d8-d9}
    22ee:	pop	{r4, pc}
    22f0:	vmov.f64	d0, d9
    22f4:	add	sp, #40	; 0x28
    22f6:	vpop	{d8-d9}
    22fa:	pop	{r4, pc}
    22fc:	bl	3b98 <__errno>
    2300:	movs	r3, #33	; 0x21
    2302:	str	r3, [r0, #0]
    2304:	ldr	r3, [sp, #32]
    2306:	cmp	r3, #0
    2308:	beq.n	22e4 <acos+0x70>
    230a:	bl	3b98 <__errno>
    230e:	ldr	r3, [sp, #32]
    2310:	str	r3, [r0, #0]
    2312:	b.n	22e4 <acos+0x70>
    2314:	.word	0x200003fc
    2318:	.word	0x20000348
    231c:	.word	0x20000354

00002320 <asin>:
    2320:	push	{r4, lr}
    2322:	vpush	{d8-d9}
    2326:	vmov.f64	d8, d0
    232a:	ldr	r4, [pc, #148]	; (23c0 <asin+0xa0>)
    232c:	sub	sp, #40	; 0x28
    232e:	bl	29b8 <__ieee754_asin>
    2332:	ldrsb.w	r3, [r4]
    2336:	vmov.f64	d9, d0
    233a:	adds	r3, #1
    233c:	beq.n	239c <asin+0x7c>
    233e:	vcmp.f64	d8, d8
    2342:	vmrs	APSR_nzcv, fpscr
    2346:	bvs.n	239c <asin+0x7c>
    2348:	vmov.f64	d0, d8
    234c:	bl	390c <fabs>
    2350:	vmov.f64	d7, #112	; 0x3f800000  1.0
    2354:	vcmpe.f64	d0, d7
    2358:	vmrs	APSR_nzcv, fpscr
    235c:	ble.n	239c <asin+0x7c>
    235e:	movs	r3, #1
    2360:	ldr	r2, [pc, #96]	; (23c4 <asin+0xa4>)
    2362:	str	r3, [sp, #0]
    2364:	ldr	r0, [pc, #96]	; (23c8 <asin+0xa8>)
    2366:	str	r2, [sp, #4]
    2368:	movs	r3, #0
    236a:	str	r3, [sp, #32]
    236c:	vstr	d8, [sp, #16]
    2370:	vstr	d8, [sp, #8]
    2374:	bl	3930 <nan>
    2378:	ldrsb.w	r3, [r4]
    237c:	cmp	r3, #2
    237e:	vstr	d0, [sp, #24]
    2382:	beq.n	23a8 <asin+0x88>
    2384:	mov	r0, sp
    2386:	bl	392c <matherr>
    238a:	cbz	r0, 23a8 <asin+0x88>
    238c:	ldr	r3, [sp, #32]
    238e:	cbnz	r3, 23b6 <asin+0x96>
    2390:	vldr	d0, [sp, #24]
    2394:	add	sp, #40	; 0x28
    2396:	vpop	{d8-d9}
    239a:	pop	{r4, pc}
    239c:	vmov.f64	d0, d9
    23a0:	add	sp, #40	; 0x28
    23a2:	vpop	{d8-d9}
    23a6:	pop	{r4, pc}
    23a8:	bl	3b98 <__errno>
    23ac:	movs	r3, #33	; 0x21
    23ae:	str	r3, [r0, #0]
    23b0:	ldr	r3, [sp, #32]
    23b2:	cmp	r3, #0
    23b4:	beq.n	2390 <asin+0x70>
    23b6:	bl	3b98 <__errno>
    23ba:	ldr	r3, [sp, #32]
    23bc:	str	r3, [r0, #0]
    23be:	b.n	2390 <asin+0x70>
    23c0:	.word	0x200003fc
    23c4:	.word	0x20000350
    23c8:	.word	0x20000354

000023cc <atan2>:
    23cc:	b.w	2c20 <__ieee754_atan2>

000023d0 <pow>:
    23d0:	push	{r4, r5, r6, r7, lr}
    23d2:	vpush	{d8-d11}
    23d6:	vmov.f64	d10, d0
    23da:	vmov.f64	d9, d1
    23de:	ldr	r4, [pc, #600]	; (2638 <pow+0x268>)
    23e0:	sub	sp, #44	; 0x2c
    23e2:	bl	2e00 <__ieee754_pow>
    23e6:	ldrsb.w	r3, [r4]
    23ea:	vmov.f64	d8, d0
    23ee:	adds	r2, r3, #1
    23f0:	beq.n	245c <pow+0x8c>
    23f2:	vcmp.f64	d9, d9
    23f6:	vmrs	APSR_nzcv, fpscr
    23fa:	bvs.n	245c <pow+0x8c>
    23fc:	vcmp.f64	d10, d10
    2400:	vmrs	APSR_nzcv, fpscr
    2404:	bvs.n	24f4 <pow+0x124>
    2406:	vldr	d11, [pc, #552]	; 2630 <pow+0x260>
    240a:	vcmp.f64	d10, d11
    240e:	vmrs	APSR_nzcv, fpscr
    2412:	bne.n	2468 <pow+0x98>
    2414:	vcmp.f64	d9, d11
    2418:	vmrs	APSR_nzcv, fpscr
    241c:	bne.n	2446 <pow+0x76>
    241e:	movs	r2, #1
    2420:	ldr	r1, [pc, #536]	; (263c <pow+0x26c>)
    2422:	str	r2, [sp, #0]
    2424:	movs	r2, #0
    2426:	vstr	d10, [sp, #8]
    242a:	vstr	d9, [sp, #16]
    242e:	vstr	d11, [sp, #24]
    2432:	str	r1, [sp, #4]
    2434:	str	r2, [sp, #32]
    2436:	cmp	r3, #0
    2438:	beq.n	24d2 <pow+0x102>
    243a:	vmov.f64	d0, #112	; 0x3f800000  1.0
    243e:	add	sp, #44	; 0x2c
    2440:	vpop	{d8-d11}
    2444:	pop	{r4, r5, r6, r7, pc}
    2446:	vmov.f64	d0, d9
    244a:	bl	391c <finite>
    244e:	cbz	r0, 245c <pow+0x8c>
    2450:	vcmpe.f64	d9, #0.0
    2454:	vmrs	APSR_nzcv, fpscr
    2458:	bmi.w	259c <pow+0x1cc>
    245c:	vmov.f64	d0, d8
    2460:	add	sp, #44	; 0x2c
    2462:	vpop	{d8-d11}
    2466:	pop	{r4, r5, r6, r7, pc}
    2468:	bl	391c <finite>
    246c:	mov	r5, r0
    246e:	cmp	r0, #0
    2470:	beq.n	2522 <pow+0x152>
    2472:	vcmp.f64	d8, #0.0
    2476:	vmrs	APSR_nzcv, fpscr
    247a:	mov.w	r6, #0
    247e:	mov.w	r7, #0
    2482:	bne.n	245c <pow+0x8c>
    2484:	vmov.f64	d0, d10
    2488:	bl	391c <finite>
    248c:	cmp	r0, #0
    248e:	beq.n	245c <pow+0x8c>
    2490:	vmov.f64	d0, d9
    2494:	bl	391c <finite>
    2498:	cmp	r0, #0
    249a:	beq.n	245c <pow+0x8c>
    249c:	ldr	r2, [pc, #412]	; (263c <pow+0x26c>)
    249e:	str	r2, [sp, #4]
    24a0:	vstr	d10, [sp, #8]
    24a4:	vstr	d9, [sp, #16]
    24a8:	strd	r6, r7, [sp, #24]
    24ac:	movs	r1, #4
    24ae:	movs	r2, #0
    24b0:	ldrsb.w	r3, [r4]
    24b4:	str	r1, [sp, #0]
    24b6:	str	r2, [sp, #32]
    24b8:	cmp	r3, #2
    24ba:	beq.n	24c4 <pow+0xf4>
    24bc:	mov	r0, sp
    24be:	bl	392c <matherr>
    24c2:	cbnz	r0, 24dc <pow+0x10c>
    24c4:	bl	3b98 <__errno>
    24c8:	movs	r3, #34	; 0x22
    24ca:	str	r3, [r0, #0]
    24cc:	b.n	24dc <pow+0x10c>
    24ce:	vstr	d11, [sp, #24]
    24d2:	mov	r0, sp
    24d4:	bl	392c <matherr>
    24d8:	cmp	r0, #0
    24da:	beq.n	25c4 <pow+0x1f4>
    24dc:	ldr	r3, [sp, #32]
    24de:	cbz	r3, 24e8 <pow+0x118>
    24e0:	bl	3b98 <__errno>
    24e4:	ldr	r3, [sp, #32]
    24e6:	str	r3, [r0, #0]
    24e8:	vldr	d0, [sp, #24]
    24ec:	add	sp, #44	; 0x2c
    24ee:	vpop	{d8-d11}
    24f2:	pop	{r4, r5, r6, r7, pc}
    24f4:	vcmp.f64	d9, #0.0
    24f8:	vmrs	APSR_nzcv, fpscr
    24fc:	bne.n	245c <pow+0x8c>
    24fe:	vmov.f64	d0, #112	; 0x3f800000  1.0
    2502:	movs	r2, #1
    2504:	ldr	r1, [pc, #308]	; (263c <pow+0x26c>)
    2506:	str	r2, [sp, #0]
    2508:	cmp	r3, #2
    250a:	mov.w	r2, #0
    250e:	vstr	d10, [sp, #8]
    2512:	vstr	d9, [sp, #16]
    2516:	str	r1, [sp, #4]
    2518:	str	r2, [sp, #32]
    251a:	vstr	d0, [sp, #24]
    251e:	bne.n	24d2 <pow+0x102>
    2520:	b.n	2460 <pow+0x90>
    2522:	vmov.f64	d0, d10
    2526:	bl	391c <finite>
    252a:	cmp	r0, #0
    252c:	beq.n	2472 <pow+0xa2>
    252e:	vmov.f64	d0, d9
    2532:	bl	391c <finite>
    2536:	cmp	r0, #0
    2538:	beq.n	2472 <pow+0xa2>
    253a:	vcmp.f64	d8, d8
    253e:	vmrs	APSR_nzcv, fpscr
    2542:	ldrsb.w	r3, [r4]
    2546:	ldr	r2, [pc, #244]	; (263c <pow+0x26c>)
    2548:	str	r5, [sp, #32]
    254a:	bvs.n	260a <pow+0x23a>
    254c:	movs	r1, #3
    254e:	vstr	d10, [sp, #8]
    2552:	vstr	d9, [sp, #16]
    2556:	stmia.w	sp, {r1, r2}
    255a:	cmp	r3, #0
    255c:	bne.n	25ce <pow+0x1fe>
    255e:	vcmpe.f64	d10, #0.0
    2562:	ldr	r3, [pc, #220]	; (2640 <pow+0x270>)
    2564:	mov.w	r2, #3758096384	; 0xe0000000
    2568:	vmrs	APSR_nzcv, fpscr
    256c:	strd	r2, r3, [sp, #24]
    2570:	bpl.n	24bc <pow+0xec>
    2572:	vmov.f64	d7, #96	; 0x3f000000  0.5
    2576:	vmul.f64	d9, d9, d7
    257a:	vmov.f64	d0, d9
    257e:	bl	3940 <rint>
    2582:	vcmp.f64	d9, d0
    2586:	vmrs	APSR_nzcv, fpscr
    258a:	beq.n	2604 <pow+0x234>
    258c:	ldr	r1, [pc, #180]	; (2644 <pow+0x274>)
    258e:	ldrsb.w	r3, [r4]
    2592:	mov.w	r0, #3758096384	; 0xe0000000
    2596:	strd	r0, r1, [sp, #24]
    259a:	b.n	24b8 <pow+0xe8>
    259c:	ldr	r2, [pc, #156]	; (263c <pow+0x26c>)
    259e:	ldrsb.w	r3, [r4]
    25a2:	str	r2, [sp, #4]
    25a4:	movs	r1, #1
    25a6:	movs	r2, #0
    25a8:	vstr	d10, [sp, #8]
    25ac:	vstr	d9, [sp, #16]
    25b0:	str	r1, [sp, #0]
    25b2:	str	r2, [sp, #32]
    25b4:	cmp	r3, #0
    25b6:	beq.n	24ce <pow+0xfe>
    25b8:	ldr	r1, [pc, #140]	; (2648 <pow+0x278>)
    25ba:	movs	r0, #0
    25bc:	cmp	r3, #2
    25be:	strd	r0, r1, [sp, #24]
    25c2:	bne.n	24d2 <pow+0x102>
    25c4:	bl	3b98 <__errno>
    25c8:	movs	r3, #33	; 0x21
    25ca:	str	r3, [r0, #0]
    25cc:	b.n	24dc <pow+0x10c>
    25ce:	ldr	r1, [pc, #124]	; (264c <pow+0x27c>)
    25d0:	vcmpe.f64	d10, #0.0
    25d4:	movs	r0, #0
    25d6:	vmrs	APSR_nzcv, fpscr
    25da:	strd	r0, r1, [sp, #24]
    25de:	bpl.w	24b8 <pow+0xe8>
    25e2:	vmov.f64	d7, #96	; 0x3f000000  0.5
    25e6:	vmul.f64	d9, d9, d7
    25ea:	vmov.f64	d0, d9
    25ee:	bl	3940 <rint>
    25f2:	vcmp.f64	d9, d0
    25f6:	vmrs	APSR_nzcv, fpscr
    25fa:	beq.n	2604 <pow+0x234>
    25fc:	ldr	r3, [pc, #72]	; (2648 <pow+0x278>)
    25fe:	movs	r2, #0
    2600:	strd	r2, r3, [sp, #24]
    2604:	ldrsb.w	r3, [r4]
    2608:	b.n	24b8 <pow+0xe8>
    260a:	movs	r1, #1
    260c:	vstr	d10, [sp, #8]
    2610:	vstr	d9, [sp, #16]
    2614:	stmia.w	sp, {r1, r2}
    2618:	cmp	r3, #0
    261a:	beq.w	24ce <pow+0xfe>
    261e:	vdiv.f64	d7, d11, d11
    2622:	cmp	r3, #2
    2624:	vstr	d7, [sp, #24]
    2628:	beq.n	25c4 <pow+0x1f4>
    262a:	b.n	24d2 <pow+0x102>
    262c:	nop.w
	...
    2638:	.word	0x200003fc
    263c:	.word	0x20000358
    2640:	.word	0x47efffff
    2644:	.word	0xc7efffff
    2648:	.word	0xfff00000
    264c:	.word	0x7ff00000

00002650 <sqrt>:
    2650:	push	{lr}
    2652:	vpush	{d8}
    2656:	vmov.f64	d8, d0
    265a:	sub	sp, #44	; 0x2c
    265c:	bl	3584 <__ieee754_sqrt>
    2660:	ldr	r3, [pc, #140]	; (26f0 <sqrt+0xa0>)
    2662:	ldrsb.w	r3, [r3]
    2666:	adds	r2, r3, #1
    2668:	beq.n	2682 <sqrt+0x32>
    266a:	vcmp.f64	d8, d8
    266e:	vmrs	APSR_nzcv, fpscr
    2672:	bvs.n	2682 <sqrt+0x32>
    2674:	vldr	d7, [pc, #112]	; 26e8 <sqrt+0x98>
    2678:	vcmpe.f64	d8, d7
    267c:	vmrs	APSR_nzcv, fpscr
    2680:	bmi.n	268c <sqrt+0x3c>
    2682:	add	sp, #44	; 0x2c
    2684:	vpop	{d8}
    2688:	ldr.w	pc, [sp], #4
    268c:	movs	r2, #1
    268e:	ldr	r1, [pc, #100]	; (26f4 <sqrt+0xa4>)
    2690:	str	r2, [sp, #0]
    2692:	movs	r2, #0
    2694:	vstr	d8, [sp, #16]
    2698:	vstr	d8, [sp, #8]
    269c:	str	r1, [sp, #4]
    269e:	str	r2, [sp, #32]
    26a0:	cbz	r3, 26c8 <sqrt+0x78>
    26a2:	vdiv.f64	d6, d7, d7
    26a6:	cmp	r3, #2
    26a8:	vstr	d6, [sp, #24]
    26ac:	bne.n	26cc <sqrt+0x7c>
    26ae:	bl	3b98 <__errno>
    26b2:	movs	r3, #33	; 0x21
    26b4:	str	r3, [r0, #0]
    26b6:	ldr	r3, [sp, #32]
    26b8:	cbnz	r3, 26d8 <sqrt+0x88>
    26ba:	vldr	d0, [sp, #24]
    26be:	add	sp, #44	; 0x2c
    26c0:	vpop	{d8}
    26c4:	ldr.w	pc, [sp], #4
    26c8:	vstr	d7, [sp, #24]
    26cc:	mov	r0, sp
    26ce:	bl	392c <matherr>
    26d2:	cmp	r0, #0
    26d4:	bne.n	26b6 <sqrt+0x66>
    26d6:	b.n	26ae <sqrt+0x5e>
    26d8:	bl	3b98 <__errno>
    26dc:	ldr	r3, [sp, #32]
    26de:	str	r3, [r0, #0]
    26e0:	b.n	26ba <sqrt+0x6a>
    26e2:	nop
    26e4:	nop.w
	...
    26f0:	.word	0x200003fc
    26f4:	.word	0x2000035c

000026f8 <__ieee754_acos>:
    26f8:	push	{lr}
    26fa:	vpush	{d8-d9}
    26fe:	sub	sp, #12
    2700:	vstr	d0, [sp]
    2704:	ldr	r2, [sp, #4]
    2706:	ldr	r1, [pc, #672]	; (29a8 <__ieee754_acos+0x2b0>)
    2708:	bic.w	r3, r2, #2147483648	; 0x80000000
    270c:	cmp	r3, r1
    270e:	ble.n	2738 <__ieee754_acos+0x40>
    2710:	add.w	r3, r3, #3221225472	; 0xc0000000
    2714:	ldr	r1, [sp, #0]
    2716:	add.w	r3, r3, #1048576	; 0x100000
    271a:	orrs	r3, r1
    271c:	bne.n	2804 <__ieee754_acos+0x10c>
    271e:	vldr	d7, [pc, #528]	; 2930 <__ieee754_acos+0x238>
    2722:	vldr	d0, [pc, #532]	; 2938 <__ieee754_acos+0x240>
    2726:	cmp	r2, #0
    2728:	it	gt
    272a:	vmovgt.f64	d0, d7
    272e:	add	sp, #12
    2730:	vpop	{d8-d9}
    2734:	ldr.w	pc, [sp], #4
    2738:	ldr	r1, [pc, #624]	; (29ac <__ieee754_acos+0x2b4>)
    273a:	cmp	r3, r1
    273c:	ble.n	27f0 <__ieee754_acos+0xf8>
    273e:	cmp	r2, #0
    2740:	ldrd	r0, r1, [sp]
    2744:	blt.w	289c <__ieee754_acos+0x1a4>
    2748:	vmov.f64	d7, #96	; 0x3f000000  0.5
    274c:	vmov.f64	d9, #112	; 0x3f800000  1.0
    2750:	vmov	d6, r0, r1
    2754:	vsub.f64	d8, d9, d6
    2758:	vmul.f64	d8, d8, d7
    275c:	vmov.f64	d0, d8
    2760:	bl	3584 <__ieee754_sqrt>
    2764:	vldr	d5, [pc, #472]	; 2940 <__ieee754_acos+0x248>
    2768:	vldr	d6, [pc, #476]	; 2948 <__ieee754_acos+0x250>
    276c:	vldr	d7, [pc, #480]	; 2950 <__ieee754_acos+0x258>
    2770:	vfma.f64	d6, d8, d5
    2774:	vldr	d5, [pc, #480]	; 2958 <__ieee754_acos+0x260>
    2778:	vfma.f64	d7, d8, d6
    277c:	vldr	d6, [pc, #480]	; 2960 <__ieee754_acos+0x268>
    2780:	vfma.f64	d5, d8, d7
    2784:	vldr	d7, [pc, #480]	; 2968 <__ieee754_acos+0x270>
    2788:	vfma.f64	d6, d8, d5
    278c:	vstr	d0, [sp]
    2790:	vfma.f64	d7, d8, d6
    2794:	vmul.f64	d4, d7, d8
    2798:	ldrd	r2, r3, [sp]
    279c:	vldr	d3, [pc, #464]	; 2970 <__ieee754_acos+0x278>
    27a0:	vldr	d7, [pc, #468]	; 2978 <__ieee754_acos+0x280>
    27a4:	vldr	d5, [pc, #472]	; 2980 <__ieee754_acos+0x288>
    27a8:	vfma.f64	d7, d8, d3
    27ac:	vmov.f64	d3, d8
    27b0:	movs	r2, #0
    27b2:	vldr	d6, [pc, #468]	; 2988 <__ieee754_acos+0x290>
    27b6:	vfma.f64	d5, d8, d7
    27ba:	vmov	d7, r2, r3
    27be:	vfma.f64	d6, d8, d5
    27c2:	vfms.f64	d3, d7, d7
    27c6:	vadd.f64	d5, d0, d7
    27ca:	vdiv.f64	d0, d3, d5
    27ce:	vldr	d5, [sp]
    27d2:	vfma.f64	d9, d8, d6
    27d6:	vdiv.f64	d6, d4, d9
    27da:	vfma.f64	d0, d5, d6
    27de:	vadd.f64	d0, d0, d7
    27e2:	vadd.f64	d0, d0, d0
    27e6:	add	sp, #12
    27e8:	vpop	{d8-d9}
    27ec:	ldr.w	pc, [sp], #4
    27f0:	ldr	r2, [pc, #444]	; (29b0 <__ieee754_acos+0x2b8>)
    27f2:	cmp	r3, r2
    27f4:	bgt.n	281a <__ieee754_acos+0x122>
    27f6:	vldr	d0, [pc, #408]	; 2990 <__ieee754_acos+0x298>
    27fa:	add	sp, #12
    27fc:	vpop	{d8-d9}
    2800:	ldr.w	pc, [sp], #4
    2804:	vldr	d7, [sp]
    2808:	vsub.f64	d7, d7, d7
    280c:	vdiv.f64	d0, d7, d7
    2810:	add	sp, #12
    2812:	vpop	{d8-d9}
    2816:	ldr.w	pc, [sp], #4
    281a:	vldr	d7, [sp]
    281e:	vmov.f64	d5, #112	; 0x3f800000  1.0
    2822:	vldr	d3, [pc, #284]	; 2940 <__ieee754_acos+0x248>
    2826:	vmul.f64	d7, d7, d7
    282a:	vldr	d4, [pc, #284]	; 2948 <__ieee754_acos+0x250>
    282e:	vldr	d6, [pc, #288]	; 2950 <__ieee754_acos+0x258>
    2832:	vfma.f64	d4, d7, d3
    2836:	vldr	d3, [pc, #288]	; 2958 <__ieee754_acos+0x260>
    283a:	vfma.f64	d6, d7, d4
    283e:	vldr	d4, [pc, #288]	; 2960 <__ieee754_acos+0x268>
    2842:	vfma.f64	d3, d7, d6
    2846:	vldr	d6, [pc, #288]	; 2968 <__ieee754_acos+0x270>
    284a:	vfma.f64	d4, d7, d3
    284e:	vldr	d1, [pc, #288]	; 2970 <__ieee754_acos+0x278>
    2852:	vfma.f64	d6, d7, d4
    2856:	vmul.f64	d6, d6, d7
    285a:	vldr	d2, [pc, #284]	; 2978 <__ieee754_acos+0x280>
    285e:	vldr	d3, [pc, #288]	; 2980 <__ieee754_acos+0x288>
    2862:	vfma.f64	d2, d7, d1
    2866:	vldr	d4, [pc, #288]	; 2988 <__ieee754_acos+0x290>
    286a:	vfma.f64	d3, d7, d2
    286e:	vldr	d0, [pc, #296]	; 2998 <__ieee754_acos+0x2a0>
    2872:	vfma.f64	d4, d7, d3
    2876:	vfma.f64	d5, d7, d4
    287a:	vldr	d7, [pc, #276]	; 2990 <__ieee754_acos+0x298>
    287e:	vdiv.f64	d4, d6, d5
    2882:	vldr	d6, [sp]
    2886:	vfms.f64	d0, d6, d4
    288a:	vsub.f64	d0, d6, d0
    288e:	vsub.f64	d0, d7, d0
    2892:	add	sp, #12
    2894:	vpop	{d8-d9}
    2898:	ldr.w	pc, [sp], #4
    289c:	vmov	d5, r0, r1
    28a0:	vmov.f64	d6, #112	; 0x3f800000  1.0
    28a4:	vldr	d4, [pc, #152]	; 2940 <__ieee754_acos+0x248>
    28a8:	vadd.f64	d8, d5, d6
    28ac:	vmov.f64	d7, #96	; 0x3f000000  0.5
    28b0:	vldr	d5, [pc, #148]	; 2948 <__ieee754_acos+0x250>
    28b4:	vmul.f64	d7, d8, d7
    28b8:	vmov.f64	d0, d7
    28bc:	vldr	d3, [pc, #144]	; 2950 <__ieee754_acos+0x258>
    28c0:	vfma.f64	d5, d7, d4
    28c4:	vldr	d8, [pc, #160]	; 2968 <__ieee754_acos+0x270>
    28c8:	vfma.f64	d3, d7, d5
    28cc:	vldr	d4, [pc, #136]	; 2958 <__ieee754_acos+0x260>
    28d0:	vldr	d5, [pc, #140]	; 2960 <__ieee754_acos+0x268>
    28d4:	vfma.f64	d4, d7, d3
    28d8:	vldr	d2, [pc, #148]	; 2970 <__ieee754_acos+0x278>
    28dc:	vfma.f64	d5, d7, d4
    28e0:	vfma.f64	d8, d7, d5
    28e4:	vldr	d3, [pc, #144]	; 2978 <__ieee754_acos+0x280>
    28e8:	vmul.f64	d8, d8, d7
    28ec:	vldr	d4, [pc, #144]	; 2980 <__ieee754_acos+0x288>
    28f0:	vfma.f64	d3, d7, d2
    28f4:	vldr	d5, [pc, #144]	; 2988 <__ieee754_acos+0x290>
    28f8:	vfma.f64	d4, d7, d3
    28fc:	vfma.f64	d5, d7, d4
    2900:	vfma.f64	d6, d7, d5
    2904:	vmov.f64	d9, d6
    2908:	bl	3584 <__ieee754_sqrt>
    290c:	vdiv.f64	d4, d8, d9
    2910:	vmov.f64	d5, #0	; 0x40000000  2.0
    2914:	vldr	d6, [pc, #136]	; 29a0 <__ieee754_acos+0x2a8>
    2918:	vldr	d7, [pc, #28]	; 2938 <__ieee754_acos+0x240>
    291c:	vfma.f64	d6, d0, d4
    2920:	vadd.f64	d0, d6, d0
    2924:	vfms.f64	d7, d0, d5
    2928:	vmov.f64	d0, d7
    292c:	b.n	272e <__ieee754_acos+0x36>
    292e:	nop
	...
    2938:	.word	0x54442d18
    293c:	.word	0x400921fb
    2940:	.word	0x0dfdf709
    2944:	.word	0x3f023de1
    2948:	.word	0x7501b288
    294c:	.word	0x3f49efe0
    2950:	.word	0xb5688f3b
    2954:	.word	0xbfa48228
    2958:	.word	0x0e884455
    295c:	.word	0x3fc9c155
    2960:	.word	0x03eb6f7d
    2964:	.word	0xbfd4d612
    2968:	.word	0x55555555
    296c:	.word	0x3fc55555
    2970:	.word	0xb12e9282
    2974:	.word	0x3fb3b8c5
    2978:	.word	0x1b8d0159
    297c:	.word	0xbfe6066c
    2980:	.word	0x9c598ac8
    2984:	.word	0x40002ae5
    2988:	.word	0x1c8a2d4b
    298c:	.word	0xc0033a27
    2990:	.word	0x54442d18
    2994:	.word	0x3ff921fb
    2998:	.word	0x33145c07
    299c:	.word	0x3c91a626
    29a0:	.word	0x33145c07
    29a4:	.word	0xbc91a626
    29a8:	.word	0x3fefffff
    29ac:	.word	0x3fdfffff
    29b0:	.word	0x3c600000
    29b4:	.word	0x00000000

000029b8 <__ieee754_asin>:
    29b8:	push	{r4, r5, lr}
    29ba:	vmov	r5, s1
    29be:	vpush	{d8-d10}
    29c2:	ldr	r3, [pc, #588]	; (2c10 <__ieee754_asin+0x258>)
    29c4:	bic.w	r4, r5, #2147483648	; 0x80000000
    29c8:	cmp	r4, r3
    29ca:	sub	sp, #12
    29cc:	ble.n	29f0 <__ieee754_asin+0x38>
    29ce:	add.w	r4, r4, #3221225472	; 0xc0000000
    29d2:	vmov	r3, s0
    29d6:	add.w	r4, r4, #1048576	; 0x100000
    29da:	orrs	r3, r4
    29dc:	beq.w	2af0 <__ieee754_asin+0x138>
    29e0:	vsub.f64	d7, d0, d0
    29e4:	vdiv.f64	d0, d7, d7
    29e8:	add	sp, #12
    29ea:	vpop	{d8-d10}
    29ee:	pop	{r4, r5, pc}
    29f0:	ldr	r3, [pc, #544]	; (2c14 <__ieee754_asin+0x25c>)
    29f2:	cmp	r4, r3
    29f4:	bgt.n	2a14 <__ieee754_asin+0x5c>
    29f6:	cmp.w	r4, #1044381696	; 0x3e400000
    29fa:	bge.w	2b2e <__ieee754_asin+0x176>
    29fe:	vmov.f64	d6, #112	; 0x3f800000  1.0
    2a02:	vldr	d7, [pc, #404]	; 2b98 <__ieee754_asin+0x1e0>
    2a06:	vadd.f64	d7, d0, d7
    2a0a:	vcmpe.f64	d7, d6
    2a0e:	vmrs	APSR_nzcv, fpscr
    2a12:	bgt.n	29e8 <__ieee754_asin+0x30>
    2a14:	bl	390c <fabs>
    2a18:	vmov.f64	d7, #112	; 0x3f800000  1.0
    2a1c:	vmov.f64	d6, #96	; 0x3f000000  0.5
    2a20:	vsub.f64	d0, d7, d0
    2a24:	vldr	d5, [pc, #376]	; 2ba0 <__ieee754_asin+0x1e8>
    2a28:	vmul.f64	d8, d0, d6
    2a2c:	vmov.f64	d0, d8
    2a30:	vldr	d6, [pc, #372]	; 2ba8 <__ieee754_asin+0x1f0>
    2a34:	vldr	d4, [pc, #376]	; 2bb0 <__ieee754_asin+0x1f8>
    2a38:	vfma.f64	d6, d8, d5
    2a3c:	vldr	d9, [pc, #376]	; 2bb8 <__ieee754_asin+0x200>
    2a40:	vfma.f64	d4, d8, d6
    2a44:	vldr	d5, [pc, #376]	; 2bc0 <__ieee754_asin+0x208>
    2a48:	vldr	d6, [pc, #380]	; 2bc8 <__ieee754_asin+0x210>
    2a4c:	vfma.f64	d5, d8, d4
    2a50:	vldr	d3, [pc, #380]	; 2bd0 <__ieee754_asin+0x218>
    2a54:	vfma.f64	d6, d8, d5
    2a58:	vfma.f64	d9, d8, d6
    2a5c:	vldr	d4, [pc, #376]	; 2bd8 <__ieee754_asin+0x220>
    2a60:	vmul.f64	d9, d9, d8
    2a64:	vldr	d5, [pc, #376]	; 2be0 <__ieee754_asin+0x228>
    2a68:	vfma.f64	d4, d8, d3
    2a6c:	vldr	d6, [pc, #376]	; 2be8 <__ieee754_asin+0x230>
    2a70:	vfma.f64	d5, d8, d4
    2a74:	vfma.f64	d6, d8, d5
    2a78:	vfma.f64	d7, d8, d6
    2a7c:	vmov.f64	d10, d7
    2a80:	bl	3584 <__ieee754_sqrt>
    2a84:	ldr	r3, [pc, #400]	; (2c18 <__ieee754_asin+0x260>)
    2a86:	cmp	r4, r3
    2a88:	vstr	d0, [sp]
    2a8c:	bgt.n	2b0c <__ieee754_asin+0x154>
    2a8e:	vmov.f64	d5, #0	; 0x40000000  2.0
    2a92:	vdiv.f64	d4, d9, d10
    2a96:	ldrd	r2, r3, [sp]
    2a9a:	vldr	d6, [sp]
    2a9e:	vldr	d7, [pc, #336]	; 2bf0 <__ieee754_asin+0x238>
    2aa2:	vadd.f64	d2, d6, d6
    2aa6:	vldr	d1, [sp]
    2aaa:	movs	r2, #0
    2aac:	vldr	d0, [pc, #328]	; 2bf8 <__ieee754_asin+0x240>
    2ab0:	vmov	d6, r2, r3
    2ab4:	vneg.f64	d3, d6
    2ab8:	vfma.f64	d8, d3, d6
    2abc:	vadd.f64	d6, d1, d6
    2ac0:	vmov.f64	d1, d7
    2ac4:	vfma.f64	d1, d3, d5
    2ac8:	vmov.f64	d3, d1
    2acc:	vdiv.f64	d1, d8, d6
    2ad0:	vfms.f64	d0, d1, d5
    2ad4:	vfnms.f64	d0, d4, d2
    2ad8:	vsub.f64	d0, d0, d3
    2adc:	vsub.f64	d0, d7, d0
    2ae0:	cmp	r5, #0
    2ae2:	it	le
    2ae4:	vnegle.f64	d0, d0
    2ae8:	add	sp, #12
    2aea:	vpop	{d8-d10}
    2aee:	pop	{r4, r5, pc}
    2af0:	vldr	d6, [pc, #268]	; 2c00 <__ieee754_asin+0x248>
    2af4:	vldr	d7, [pc, #256]	; 2bf8 <__ieee754_asin+0x240>
    2af8:	vmul.f64	d7, d0, d7
    2afc:	vfma.f64	d7, d0, d6
    2b00:	vmov.f64	d0, d7
    2b04:	add	sp, #12
    2b06:	vpop	{d8-d10}
    2b0a:	pop	{r4, r5, pc}
    2b0c:	vldr	d5, [sp]
    2b10:	vdiv.f64	d7, d9, d10
    2b14:	vmov.f64	d6, #0	; 0x40000000  2.0
    2b18:	vfma.f64	d5, d5, d7
    2b1c:	vldr	d0, [pc, #232]	; 2c08 <__ieee754_asin+0x250>
    2b20:	vldr	d7, [pc, #220]	; 2c00 <__ieee754_asin+0x248>
    2b24:	vfma.f64	d0, d5, d6
    2b28:	vsub.f64	d0, d7, d0
    2b2c:	b.n	2ae0 <__ieee754_asin+0x128>
    2b2e:	vldr	d4, [pc, #112]	; 2ba0 <__ieee754_asin+0x1e8>
    2b32:	vmul.f64	d7, d0, d0
    2b36:	vmov.f64	d2, #112	; 0x3f800000  1.0
    2b3a:	vldr	d5, [pc, #108]	; 2ba8 <__ieee754_asin+0x1f0>
    2b3e:	vldr	d6, [pc, #112]	; 2bb0 <__ieee754_asin+0x1f8>
    2b42:	vfma.f64	d5, d7, d4
    2b46:	vldr	d4, [pc, #120]	; 2bc0 <__ieee754_asin+0x208>
    2b4a:	vfma.f64	d6, d7, d5
    2b4e:	vldr	d5, [pc, #120]	; 2bc8 <__ieee754_asin+0x210>
    2b52:	vfma.f64	d4, d7, d6
    2b56:	vldr	d6, [pc, #96]	; 2bb8 <__ieee754_asin+0x200>
    2b5a:	vfma.f64	d5, d7, d4
    2b5e:	vldr	d1, [pc, #112]	; 2bd0 <__ieee754_asin+0x218>
    2b62:	vfma.f64	d6, d7, d5
    2b66:	vmul.f64	d6, d6, d7
    2b6a:	vldr	d3, [pc, #108]	; 2bd8 <__ieee754_asin+0x220>
    2b6e:	vldr	d4, [pc, #112]	; 2be0 <__ieee754_asin+0x228>
    2b72:	vfma.f64	d3, d7, d1
    2b76:	vldr	d5, [pc, #112]	; 2be8 <__ieee754_asin+0x230>
    2b7a:	vfma.f64	d4, d7, d3
    2b7e:	vfma.f64	d5, d7, d4
    2b82:	vfma.f64	d2, d7, d5
    2b86:	vdiv.f64	d5, d6, d2
    2b8a:	vfma.f64	d0, d0, d5
    2b8e:	add	sp, #12
    2b90:	vpop	{d8-d10}
    2b94:	pop	{r4, r5, pc}
    2b96:	nop
    2b98:	.word	0x8800759c
    2b9c:	.word	0x7e37e43c
    2ba0:	.word	0x0dfdf709
    2ba4:	.word	0x3f023de1
    2ba8:	.word	0x7501b288
    2bac:	.word	0x3f49efe0
    2bb0:	.word	0xb5688f3b
    2bb4:	.word	0xbfa48228
    2bb8:	.word	0x55555555
    2bbc:	.word	0x3fc55555
    2bc0:	.word	0x0e884455
    2bc4:	.word	0x3fc9c155
    2bc8:	.word	0x03eb6f7d
    2bcc:	.word	0xbfd4d612
    2bd0:	.word	0xb12e9282
    2bd4:	.word	0x3fb3b8c5
    2bd8:	.word	0x1b8d0159
    2bdc:	.word	0xbfe6066c
    2be0:	.word	0x9c598ac8
    2be4:	.word	0x40002ae5
    2be8:	.word	0x1c8a2d4b
    2bec:	.word	0xc0033a27
    2bf0:	.word	0x54442d18
    2bf4:	.word	0x3fe921fb
    2bf8:	.word	0x33145c07
    2bfc:	.word	0x3c91a626
    2c00:	.word	0x54442d18
    2c04:	.word	0x3ff921fb
    2c08:	.word	0x33145c07
    2c0c:	.word	0xbc91a626
    2c10:	.word	0x3fefffff
    2c14:	.word	0x3fdfffff
    2c18:	.word	0x3fef3332
    2c1c:	.word	0x00000000

00002c20 <__ieee754_atan2>:
    2c20:	push	{r4, r5, r6, r7, lr}
    2c22:	sub	sp, #20
    2c24:	vstr	d1, [sp, #8]
    2c28:	ldr	r2, [sp, #8]
    2c2a:	ldr	r0, [sp, #12]
    2c2c:	ldr	r1, [pc, #456]	; (2df8 <__ieee754_atan2+0x1d8>)
    2c2e:	negs	r3, r2
    2c30:	vstr	d0, [sp]
    2c34:	orrs	r3, r2
    2c36:	bic.w	r5, r0, #2147483648	; 0x80000000
    2c3a:	orr.w	r3, r5, r3, lsr #31
    2c3e:	cmp	r3, r1
    2c40:	ldmia.w	sp, {r4, r7}
    2c44:	bhi.n	2ccc <__ieee754_atan2+0xac>
    2c46:	negs	r3, r4
    2c48:	orrs	r3, r4
    2c4a:	bic.w	lr, r7, #2147483648	; 0x80000000
    2c4e:	orr.w	r3, lr, r3, lsr #31
    2c52:	cmp	r3, r1
    2c54:	bhi.n	2ccc <__ieee754_atan2+0xac>
    2c56:	add.w	r3, r0, #3221225472	; 0xc0000000
    2c5a:	add.w	r3, r3, #1048576	; 0x100000
    2c5e:	orrs	r3, r2
    2c60:	beq.n	2d0a <__ieee754_atan2+0xea>
    2c62:	asrs	r6, r0, #30
    2c64:	and.w	r6, r6, #2
    2c68:	orrs.w	r3, r4, lr
    2c6c:	orr.w	r6, r6, r7, lsr #31
    2c70:	beq.n	2cdc <__ieee754_atan2+0xbc>
    2c72:	orrs.w	r3, r2, r5
    2c76:	beq.n	2cf6 <__ieee754_atan2+0xd6>
    2c78:	cmp	r5, r1
    2c7a:	beq.n	2d22 <__ieee754_atan2+0x102>
    2c7c:	cmp	lr, r1
    2c7e:	beq.n	2cf6 <__ieee754_atan2+0xd6>
    2c80:	rsb	r5, r5, lr
    2c84:	asrs	r5, r5, #20
    2c86:	cmp	r5, #60	; 0x3c
    2c88:	bgt.n	2d14 <__ieee754_atan2+0xf4>
    2c8a:	cmp	r0, #0
    2c8c:	blt.n	2d66 <__ieee754_atan2+0x146>
    2c8e:	ldrd	r2, r3, [sp]
    2c92:	vldr	d0, [sp, #8]
    2c96:	vmov	d7, r2, r3
    2c9a:	vdiv.f64	d0, d7, d0
    2c9e:	bl	390c <fabs>
    2ca2:	bl	3708 <atan>
    2ca6:	vmov	r2, r3, d0
    2caa:	cmp	r6, #1
    2cac:	beq.n	2d5c <__ieee754_atan2+0x13c>
    2cae:	cmp	r6, #2
    2cb0:	beq.n	2d46 <__ieee754_atan2+0x126>
    2cb2:	cmp	r6, #0
    2cb4:	beq.n	2d40 <__ieee754_atan2+0x120>
    2cb6:	vldr	d7, [pc, #232]	; 2da0 <__ieee754_atan2+0x180>
    2cba:	vldr	d6, [pc, #236]	; 2da8 <__ieee754_atan2+0x188>
    2cbe:	vmov	d5, r2, r3
    2cc2:	vsub.f64	d7, d5, d7
    2cc6:	vsub.f64	d0, d7, d6
    2cca:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2ccc:	vldr	d7, [sp, #8]
    2cd0:	vldr	d6, [sp]
    2cd4:	vadd.f64	d0, d7, d6
    2cd8:	add	sp, #20
    2cda:	pop	{r4, r5, r6, r7, pc}
    2cdc:	cmp	r6, #2
    2cde:	beq.n	2d1c <__ieee754_atan2+0xfc>
    2ce0:	vldr	d0, [pc, #204]	; 2db0 <__ieee754_atan2+0x190>
    2ce4:	vldr	d7, [sp]
    2ce8:	cmp	r6, #3
    2cea:	it	eq
    2cec:	vmoveq.f64	d7, d0
    2cf0:	vmov.f64	d0, d7
    2cf4:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2cf6:	vldr	d7, [pc, #192]	; 2db8 <__ieee754_atan2+0x198>
    2cfa:	vldr	d0, [pc, #196]	; 2dc0 <__ieee754_atan2+0x1a0>
    2cfe:	cmp	r7, #0
    2d00:	it	ge
    2d02:	vmovge.f64	d0, d7
    2d06:	add	sp, #20
    2d08:	pop	{r4, r5, r6, r7, pc}
    2d0a:	add	sp, #20
    2d0c:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d10:	b.w	3708 <atan>
    2d14:	add	r3, pc, #160	; (adr r3, 2db8 <__ieee754_atan2+0x198>)
    2d16:	ldrd	r2, r3, [r3]
    2d1a:	b.n	2caa <__ieee754_atan2+0x8a>
    2d1c:	vldr	d0, [pc, #136]	; 2da8 <__ieee754_atan2+0x188>
    2d20:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d22:	cmp	lr, r5
    2d24:	beq.n	2d70 <__ieee754_atan2+0x150>
    2d26:	cmp	r6, #2
    2d28:	beq.n	2d1c <__ieee754_atan2+0xfc>
    2d2a:	cmp	r6, #3
    2d2c:	beq.n	2d8a <__ieee754_atan2+0x16a>
    2d2e:	vldr	d7, [pc, #152]	; 2dc8 <__ieee754_atan2+0x1a8>
    2d32:	vldr	d0, [pc, #156]	; 2dd0 <__ieee754_atan2+0x1b0>
    2d36:	cmp	r6, #1
    2d38:	it	eq
    2d3a:	vmoveq.f64	d0, d7
    2d3e:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d40:	vmov	d0, r2, r3
    2d44:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d46:	vldr	d7, [pc, #88]	; 2da0 <__ieee754_atan2+0x180>
    2d4a:	vldr	d6, [pc, #92]	; 2da8 <__ieee754_atan2+0x188>
    2d4e:	vmov	d5, r2, r3
    2d52:	vsub.f64	d7, d5, d7
    2d56:	vsub.f64	d0, d6, d7
    2d5a:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d5c:	add.w	r3, r3, #2147483648	; 0x80000000
    2d60:	vmov	d0, r2, r3
    2d64:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d66:	adds	r5, #60	; 0x3c
    2d68:	bge.n	2c8e <__ieee754_atan2+0x6e>
    2d6a:	movs	r2, #0
    2d6c:	movs	r3, #0
    2d6e:	b.n	2caa <__ieee754_atan2+0x8a>
    2d70:	cmp	r6, #2
    2d72:	beq.n	2d96 <__ieee754_atan2+0x176>
    2d74:	cmp	r6, #3
    2d76:	beq.n	2d90 <__ieee754_atan2+0x170>
    2d78:	vldr	d7, [pc, #92]	; 2dd8 <__ieee754_atan2+0x1b8>
    2d7c:	vldr	d0, [pc, #96]	; 2de0 <__ieee754_atan2+0x1c0>
    2d80:	cmp	r6, #1
    2d82:	it	eq
    2d84:	vmoveq.f64	d0, d7
    2d88:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d8a:	vldr	d0, [pc, #36]	; 2db0 <__ieee754_atan2+0x190>
    2d8e:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d90:	vldr	d0, [pc, #84]	; 2de8 <__ieee754_atan2+0x1c8>
    2d94:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d96:	vldr	d0, [pc, #88]	; 2df0 <__ieee754_atan2+0x1d0>
    2d9a:	b.n	2cd8 <__ieee754_atan2+0xb8>
    2d9c:	nop.w
    2da0:	.word	0x33145c07
    2da4:	.word	0x3ca1a626
    2da8:	.word	0x54442d18
    2dac:	.word	0x400921fb
    2db0:	.word	0x54442d18
    2db4:	.word	0xc00921fb
    2db8:	.word	0x54442d18
    2dbc:	.word	0x3ff921fb
    2dc0:	.word	0x54442d18
    2dc4:	.word	0xbff921fb
    2dc8:	.word	0x00000000
    2dcc:	.word	0x80000000
	...
    2dd8:	.word	0x54442d18
    2ddc:	.word	0xbfe921fb
    2de0:	.word	0x54442d18
    2de4:	.word	0x3fe921fb
    2de8:	.word	0x7f3321d2
    2dec:	.word	0xc002d97c
    2df0:	.word	0x7f3321d2
    2df4:	.word	0x4002d97c
    2df8:	.word	0x7ff00000
    2dfc:	.word	0x00000000

00002e00 <__ieee754_pow>:
    2e00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e04:	vmov	r0, r1, d1
    2e08:	vpush	{d8-d11}
    2e0c:	bic.w	r5, r1, #2147483648	; 0x80000000
    2e10:	orrs.w	r4, r5, r0
    2e14:	sub	sp, #28
    2e16:	beq.n	2e8e <__ieee754_pow+0x8e>
    2e18:	vmov	r2, r3, d0
    2e1c:	ldr	r7, [pc, #424]	; (2fc8 <__ieee754_pow+0x1c8>)
    2e1e:	bic.w	r4, r3, #2147483648	; 0x80000000
    2e22:	cmp	r4, r7
    2e24:	vmov	sl, s0
    2e28:	mov	r9, r3
    2e2a:	bgt.n	2e80 <__ieee754_pow+0x80>
    2e2c:	mov	r8, r1
    2e2e:	vmov	r6, s2
    2e32:	beq.n	2e7e <__ieee754_pow+0x7e>
    2e34:	cmp	r5, r7
    2e36:	bgt.n	2e80 <__ieee754_pow+0x80>
    2e38:	ldr	r7, [pc, #396]	; (2fc8 <__ieee754_pow+0x1c8>)
    2e3a:	cmp	r5, r7
    2e3c:	beq.n	2f34 <__ieee754_pow+0x134>
    2e3e:	cmp.w	r9, #0
    2e42:	blt.n	2f3a <__ieee754_pow+0x13a>
    2e44:	mov.w	fp, #0
    2e48:	cbnz	r6, 2eb4 <__ieee754_pow+0xb4>
    2e4a:	ldr	r6, [pc, #380]	; (2fc8 <__ieee754_pow+0x1c8>)
    2e4c:	cmp	r5, r6
    2e4e:	beq.w	2f72 <__ieee754_pow+0x172>
    2e52:	ldr	r6, [pc, #376]	; (2fcc <__ieee754_pow+0x1cc>)
    2e54:	cmp	r5, r6
    2e56:	beq.n	2f26 <__ieee754_pow+0x126>
    2e58:	cmp.w	r8, #1073741824	; 0x40000000
    2e5c:	beq.w	330e <__ieee754_pow+0x50e>
    2e60:	ldr	r6, [pc, #364]	; (2fd0 <__ieee754_pow+0x1d0>)
    2e62:	cmp	r8, r6
    2e64:	bne.n	2eb4 <__ieee754_pow+0xb4>
    2e66:	cmp.w	r9, #0
    2e6a:	blt.n	2eb4 <__ieee754_pow+0xb4>
    2e6c:	vmov	d0, r2, r3
    2e70:	add	sp, #28
    2e72:	vpop	{d8-d11}
    2e76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e7a:	b.w	3584 <__ieee754_sqrt>
    2e7e:	cbz	r2, 2e9c <__ieee754_pow+0x9c>
    2e80:	add.w	r4, r4, #3221225472	; 0xc0000000
    2e84:	add.w	r4, r4, #1048576	; 0x100000
    2e88:	orrs.w	r3, r4, sl
    2e8c:	bne.n	2ea0 <__ieee754_pow+0xa0>
    2e8e:	vmov.f64	d0, #112	; 0x3f800000  1.0
    2e92:	add	sp, #28
    2e94:	vpop	{d8-d11}
    2e98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e9c:	cmp	r5, r4
    2e9e:	ble.n	2e38 <__ieee754_pow+0x38>
    2ea0:	ldr	r0, [pc, #304]	; (2fd4 <__ieee754_pow+0x1d4>)
    2ea2:	add	sp, #28
    2ea4:	vpop	{d8-d11}
    2ea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eac:	b.w	3930 <nan>
    2eb0:	mov.w	fp, #0
    2eb4:	mov	r6, r2
    2eb6:	mov	r7, r3
    2eb8:	vmov	d0, r6, r7
    2ebc:	strd	r0, r1, [sp, #8]
    2ec0:	bl	390c <fabs>
    2ec4:	vstr	d0, [sp]
    2ec8:	cmp.w	sl, #0
    2ecc:	beq.n	2f04 <__ieee754_pow+0x104>
    2ece:	mov.w	r9, r9, lsr #31
    2ed2:	add.w	r9, r9, #4294967295
    2ed6:	orrs.w	r3, fp, r9
    2eda:	beq.n	2f9a <__ieee754_pow+0x19a>
    2edc:	ldr	r3, [pc, #248]	; (2fd8 <__ieee754_pow+0x1d8>)
    2ede:	cmp	r5, r3
    2ee0:	ble.w	2fe4 <__ieee754_pow+0x1e4>
    2ee4:	add.w	r3, r3, #34603008	; 0x2100000
    2ee8:	cmp	r5, r3
    2eea:	ble.w	3422 <__ieee754_pow+0x622>
    2eee:	ldr	r3, [pc, #236]	; (2fdc <__ieee754_pow+0x1dc>)
    2ef0:	cmp	r4, r3
    2ef2:	ble.n	2fa8 <__ieee754_pow+0x1a8>
    2ef4:	cmp.w	r8, #0
    2ef8:	ble.n	2fae <__ieee754_pow+0x1ae>
    2efa:	vldr	d0, [pc, #188]	; 2fb8 <__ieee754_pow+0x1b8>
    2efe:	vmul.f64	d0, d0, d0
    2f02:	b.n	2e92 <__ieee754_pow+0x92>
    2f04:	cbz	r4, 2f10 <__ieee754_pow+0x110>
    2f06:	ldr	r3, [pc, #196]	; (2fcc <__ieee754_pow+0x1cc>)
    2f08:	bic.w	r2, r9, #3221225472	; 0xc0000000
    2f0c:	cmp	r2, r3
    2f0e:	bne.n	2ece <__ieee754_pow+0xce>
    2f10:	cmp.w	r8, #0
    2f14:	blt.w	3410 <__ieee754_pow+0x610>
    2f18:	cmp.w	r9, #0
    2f1c:	blt.w	32ec <__ieee754_pow+0x4ec>
    2f20:	vldr	d0, [sp]
    2f24:	b.n	2e92 <__ieee754_pow+0x92>
    2f26:	cmp.w	r8, #0
    2f2a:	blt.w	34a6 <__ieee754_pow+0x6a6>
    2f2e:	vmov	d0, r2, r3
    2f32:	b.n	2e92 <__ieee754_pow+0x92>
    2f34:	cmp	r6, #0
    2f36:	beq.n	2e3e <__ieee754_pow+0x3e>
    2f38:	b.n	2e80 <__ieee754_pow+0x80>
    2f3a:	ldr	r7, [pc, #164]	; (2fe0 <__ieee754_pow+0x1e0>)
    2f3c:	cmp	r5, r7
    2f3e:	bgt.n	2f94 <__ieee754_pow+0x194>
    2f40:	sub.w	r7, r7, #55574528	; 0x3500000
    2f44:	cmp	r5, r7
    2f46:	ble.w	2e44 <__ieee754_pow+0x44>
    2f4a:	asrs	r7, r5, #20
    2f4c:	subw	r7, r7, #1023	; 0x3ff
    2f50:	cmp	r7, #20
    2f52:	ble.w	34c2 <__ieee754_pow+0x6c2>
    2f56:	rsb	r7, r7, #52	; 0x34
    2f5a:	lsr.w	lr, r6, r7
    2f5e:	lsl.w	r7, lr, r7
    2f62:	cmp	r6, r7
    2f64:	bne.w	2e44 <__ieee754_pow+0x44>
    2f68:	and.w	lr, lr, #1
    2f6c:	rsb	fp, lr, #2
    2f70:	b.n	2e48 <__ieee754_pow+0x48>
    2f72:	add.w	r3, r4, #3221225472	; 0xc0000000
    2f76:	add.w	r3, r3, #1048576	; 0x100000
    2f7a:	orrs.w	r3, r3, sl
    2f7e:	beq.n	2e8e <__ieee754_pow+0x8e>
    2f80:	ldr	r3, [pc, #88]	; (2fdc <__ieee754_pow+0x1dc>)
    2f82:	cmp	r4, r3
    2f84:	ble.w	33fe <__ieee754_pow+0x5fe>
    2f88:	cmp.w	r8, #0
    2f8c:	blt.n	2fae <__ieee754_pow+0x1ae>
    2f8e:	vmov	d0, r0, r1
    2f92:	b.n	2e92 <__ieee754_pow+0x92>
    2f94:	mov.w	fp, #2
    2f98:	b.n	2e48 <__ieee754_pow+0x48>
    2f9a:	vmov	d7, r6, r7
    2f9e:	vsub.f64	d7, d7, d7
    2fa2:	vdiv.f64	d0, d7, d7
    2fa6:	b.n	2e92 <__ieee754_pow+0x92>
    2fa8:	cmp.w	r8, #0
    2fac:	blt.n	2efa <__ieee754_pow+0xfa>
    2fae:	vldr	d0, [pc, #16]	; 2fc0 <__ieee754_pow+0x1c0>
    2fb2:	b.n	2e92 <__ieee754_pow+0x92>
    2fb4:	nop.w
    2fb8:	.word	0x8800759c
    2fbc:	.word	0x7e37e43c
	...
    2fc8:	.word	0x7ff00000
    2fcc:	.word	0x3ff00000
    2fd0:	.word	0x3fe00000
    2fd4:	.word	0x20000354
    2fd8:	.word	0x41e00000
    2fdc:	.word	0x3fefffff
    2fe0:	.word	0x433fffff
    2fe4:	cmp.w	r4, #1048576	; 0x100000
    2fe8:	bge.w	34a2 <__ieee754_pow+0x6a2>
    2fec:	vldr	d6, [sp]
    2ff0:	vldr	d7, [pc, #804]	; 3318 <__ieee754_pow+0x518>
    2ff4:	vmul.f64	d7, d6, d7
    2ff8:	vstr	d7, [sp]
    2ffc:	ldr	r4, [sp, #4]
    2ffe:	mvn.w	r6, #52	; 0x34
    3002:	ldr	r2, [pc, #948]	; (33b8 <__ieee754_pow+0x5b8>)
    3004:	asrs	r3, r4, #20
    3006:	ubfx	r4, r4, #0, #20
    300a:	subw	r3, r3, #1023	; 0x3ff
    300e:	orr.w	r1, r4, #1069547520	; 0x3fc00000
    3012:	cmp	r4, r2
    3014:	add	r6, r3
    3016:	orr.w	r1, r1, #3145728	; 0x300000
    301a:	ble.w	3492 <__ieee754_pow+0x692>
    301e:	ldr	r3, [pc, #924]	; (33bc <__ieee754_pow+0x5bc>)
    3020:	cmp	r4, r3
    3022:	ble.w	34fe <__ieee754_pow+0x6fe>
    3026:	vmov.f64	d7, #112	; 0x3f800000  1.0
    302a:	vldr	d3, [pc, #756]	; 3320 <__ieee754_pow+0x520>
    302e:	adds	r6, #1
    3030:	sub.w	r1, r1, #1048576	; 0x100000
    3034:	movs	r5, #0
    3036:	vmov.f64	d0, d3
    303a:	ldrd	r2, r3, [sp]
    303e:	vmov.f64	d4, #112	; 0x3f800000  1.0
    3042:	mov	r3, r1
    3044:	vmov	d1, r2, r3
    3048:	asrs	r4, r1, #1
    304a:	vadd.f64	d6, d1, d7
    304e:	vsub.f64	d2, d1, d7
    3052:	vdiv.f64	d5, d4, d6
    3056:	vmul.f64	d6, d2, d5
    305a:	vstr	d6, [sp]
    305e:	ldrd	r2, r3, [sp]
    3062:	orr.w	r4, r4, #536870912	; 0x20000000
    3066:	add.w	r4, r4, #524288	; 0x80000
    306a:	movs	r2, #0
    306c:	movs	r0, #0
    306e:	adds	r1, r4, r5
    3070:	vmov	d4, r2, r3
    3074:	vmov	d6, r0, r1
    3078:	vneg.f64	d10, d4
    307c:	vsub.f64	d7, d6, d7
    3080:	vfma.f64	d2, d10, d6
    3084:	vsub.f64	d7, d1, d7
    3088:	vmov.f64	d6, d2
    308c:	vfma.f64	d6, d10, d7
    3090:	vldr	d7, [sp]
    3094:	vmul.f64	d2, d6, d5
    3098:	vldr	d6, [sp]
    309c:	vadd.f64	d7, d7, d4
    30a0:	vmul.f64	d11, d6, d6
    30a4:	vldr	d9, [pc, #640]	; 3328 <__ieee754_pow+0x528>
    30a8:	vmul.f64	d6, d7, d2
    30ac:	vldr	d8, [pc, #640]	; 3330 <__ieee754_pow+0x530>
    30b0:	vldr	d1, [pc, #644]	; 3338 <__ieee754_pow+0x538>
    30b4:	vfma.f64	d8, d11, d9
    30b8:	vldr	d7, [pc, #644]	; 3340 <__ieee754_pow+0x540>
    30bc:	vfma.f64	d1, d11, d8
    30c0:	vmul.f64	d8, d11, d11
    30c4:	vldr	d5, [pc, #640]	; 3348 <__ieee754_pow+0x548>
    30c8:	vfma.f64	d7, d11, d1
    30cc:	vfma.f64	d5, d11, d7
    30d0:	vldr	d7, [pc, #636]	; 3350 <__ieee754_pow+0x550>
    30d4:	vfma.f64	d7, d11, d5
    30d8:	vmov.f64	d5, #8	; 0x40400000  3.0
    30dc:	vfma.f64	d6, d8, d7
    30e0:	vmov.f64	d7, d5
    30e4:	vfma.f64	d7, d4, d4
    30e8:	vadd.f64	d7, d7, d6
    30ec:	vstr	d7, [sp, #16]
    30f0:	str	r2, [sp, #16]
    30f2:	vldr	d9, [sp, #16]
    30f6:	vsub.f64	d5, d9, d5
    30fa:	vfma.f64	d5, d10, d4
    30fe:	vsub.f64	d5, d6, d5
    3102:	vldr	d6, [sp]
    3106:	vmul.f64	d6, d5, d6
    310a:	vfma.f64	d6, d2, d9
    310e:	vmov.f64	d5, d6
    3112:	vfma.f64	d5, d4, d9
    3116:	vstr	d5, [sp]
    311a:	str	r2, [sp, #0]
    311c:	vldr	d4, [sp]
    3120:	vldr	d2, [pc, #564]	; 3358 <__ieee754_pow+0x558>
    3124:	vmov.f64	d5, d4
    3128:	vfma.f64	d5, d10, d9
    312c:	vldr	d7, [pc, #560]	; 3360 <__ieee754_pow+0x560>
    3130:	vsub.f64	d6, d6, d5
    3134:	vldr	d8, [pc, #560]	; 3368 <__ieee754_pow+0x568>
    3138:	vmul.f64	d7, d6, d7
    313c:	vmov	s3, r6
    3140:	vfma.f64	d7, d4, d8
    3144:	vcvt.f64.s32	d1, s3
    3148:	vadd.f64	d7, d7, d0
    314c:	vmov.f64	d6, d7
    3150:	vfma.f64	d6, d4, d2
    3154:	vadd.f64	d6, d6, d3
    3158:	vadd.f64	d6, d6, d1
    315c:	vstr	d6, [sp]
    3160:	str	r2, [sp, #0]
    3162:	vldr	d5, [sp]
    3166:	vsub.f64	d6, d5, d1
    316a:	vsub.f64	d6, d6, d3
    316e:	vfms.f64	d6, d4, d2
    3172:	vsub.f64	d6, d7, d6
    3176:	ldrd	r3, r4, [sp, #8]
    317a:	vmov.f64	d0, #240	; 0xbf800000 -1.0
    317e:	mov	r1, r4
    3180:	movs	r0, #0
    3182:	vmov	d7, r3, r4
    3186:	vmov	d4, r0, r1
    318a:	vmul.f64	d6, d6, d7
    318e:	vsub.f64	d7, d7, d4
    3192:	vfma.f64	d6, d5, d7
    3196:	vmul.f64	d5, d5, d4
    319a:	vadd.f64	d7, d6, d5
    319e:	vstr	d7, [sp]
    31a2:	vmov.f64	d7, #112	; 0x3f800000  1.0
    31a6:	ldr	r3, [pc, #536]	; (33c0 <__ieee754_pow+0x5c0>)
    31a8:	ldr	r2, [sp, #4]
    31aa:	add.w	fp, fp, #4294967295
    31ae:	orrs.w	r4, fp, r9
    31b2:	ite	ne
    31b4:	vmovne.f64	d8, d7
    31b8:	vmoveq.f64	d8, d0
    31bc:	cmp	r2, r3
    31be:	ldr	r4, [sp, #0]
    31c0:	ble.w	33c8 <__ieee754_pow+0x5c8>
    31c4:	add.w	r3, r2, #3204448256	; 0xbf000000
    31c8:	add.w	r3, r3, #7340032	; 0x700000
    31cc:	orrs	r3, r4
    31ce:	bne.w	34b4 <__ieee754_pow+0x6b4>
    31d2:	vadd.f64	d4, d6, d5
    31d6:	vsub.f64	d4, d4, d5
    31da:	vldr	d7, [pc, #404]	; 3370 <__ieee754_pow+0x570>
    31de:	vadd.f64	d7, d6, d7
    31e2:	vcmpe.f64	d7, d4
    31e6:	vmrs	APSR_nzcv, fpscr
    31ea:	bgt.w	34b4 <__ieee754_pow+0x6b4>
    31ee:	mov	r3, r2
    31f0:	asrs	r3, r3, #20
    31f2:	mov.w	r1, #1048576	; 0x100000
    31f6:	subw	r3, r3, #1022	; 0x3fe
    31fa:	asr.w	r3, r1, r3
    31fe:	adds	r1, r3, r2
    3200:	ubfx	r0, r1, #20, #11
    3204:	ldr	r6, [pc, #444]	; (33c4 <__ieee754_pow+0x5c4>)
    3206:	subw	r0, r0, #1023	; 0x3ff
    320a:	asrs	r6, r0
    320c:	bic.w	r5, r1, r6
    3210:	movs	r4, #0
    3212:	ubfx	r3, r1, #0, #20
    3216:	vmov	d7, r4, r5
    321a:	rsb	r0, r0, #20
    321e:	orr.w	r3, r3, #1048576	; 0x100000
    3222:	asr.w	r0, r3, r0
    3226:	cmp	r2, #0
    3228:	vsub.f64	d5, d5, d7
    322c:	vadd.f64	d7, d6, d5
    3230:	vstr	d7, [sp]
    3234:	it	lt
    3236:	neglt	r0, r0
    3238:	lsls	r1, r0, #20
    323a:	ldrd	r2, r3, [sp]
    323e:	vmov.f64	d2, #0	; 0x40000000  2.0
    3242:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3246:	vldr	d1, [pc, #304]	; 3378 <__ieee754_pow+0x578>
    324a:	vldr	d0, [pc, #308]	; 3380 <__ieee754_pow+0x580>
    324e:	movs	r2, #0
    3250:	vldr	d4, [pc, #308]	; 3388 <__ieee754_pow+0x588>
    3254:	vmov	d3, r2, r3
    3258:	vldr	d9, [pc, #308]	; 3390 <__ieee754_pow+0x590>
    325c:	vmul.f64	d4, d3, d4
    3260:	vsub.f64	d5, d3, d5
    3264:	vsub.f64	d5, d6, d5
    3268:	vmov.f64	d6, d4
    326c:	vfma.f64	d6, d5, d0
    3270:	vldr	d5, [pc, #292]	; 3398 <__ieee754_pow+0x598>
    3274:	vmov.f64	d4, d6
    3278:	vfma.f64	d4, d3, d1
    327c:	vmov.f64	d0, d4
    3280:	vfms.f64	d0, d3, d1
    3284:	vsub.f64	d6, d6, d0
    3288:	vldr	d0, [pc, #276]	; 33a0 <__ieee754_pow+0x5a0>
    328c:	vmul.f64	d3, d4, d4
    3290:	vfma.f64	d5, d3, d9
    3294:	vldr	d1, [pc, #272]	; 33a8 <__ieee754_pow+0x5a8>
    3298:	vfma.f64	d0, d3, d5
    329c:	vfma.f64	d6, d4, d6
    32a0:	vldr	d5, [pc, #268]	; 33b0 <__ieee754_pow+0x5b0>
    32a4:	vfma.f64	d1, d3, d0
    32a8:	vfma.f64	d5, d3, d1
    32ac:	vmov.f64	d1, d4
    32b0:	vfms.f64	d1, d3, d5
    32b4:	vmul.f64	d3, d4, d1
    32b8:	vsub.f64	d2, d1, d2
    32bc:	vdiv.f64	d5, d3, d2
    32c0:	vsub.f64	d6, d5, d6
    32c4:	vsub.f64	d6, d6, d4
    32c8:	vsub.f64	d7, d7, d6
    32cc:	vstr	d7, [sp]
    32d0:	ldr	r3, [sp, #4]
    32d2:	add	r1, r3
    32d4:	cmp.w	r1, #1048576	; 0x100000
    32d8:	blt.w	3510 <__ieee754_pow+0x710>
    32dc:	ldrd	r2, r3, [sp]
    32e0:	mov	r3, r1
    32e2:	vmov	d0, r2, r3
    32e6:	vmul.f64	d0, d0, d8
    32ea:	b.n	2e92 <__ieee754_pow+0x92>
    32ec:	add.w	r4, r4, #3221225472	; 0xc0000000
    32f0:	add.w	r4, r4, #1048576	; 0x100000
    32f4:	orrs.w	r3, r4, fp
    32f8:	beq.w	34f0 <__ieee754_pow+0x6f0>
    32fc:	cmp.w	fp, #1
    3300:	bne.w	2f20 <__ieee754_pow+0x120>
    3304:	vldr	d7, [sp]
    3308:	vneg.f64	d0, d7
    330c:	b.n	2e92 <__ieee754_pow+0x92>
    330e:	vmov	d7, r2, r3
    3312:	vmul.f64	d0, d7, d7
    3316:	b.n	2e92 <__ieee754_pow+0x92>
    3318:	.word	0x00000000
    331c:	.word	0x43400000
	...
    3328:	.word	0x4a454eef
    332c:	.word	0x3fca7e28
    3330:	.word	0x93c9db65
    3334:	.word	0x3fcd864a
    3338:	.word	0xa91d4101
    333c:	.word	0x3fd17460
    3340:	.word	0x518f264d
    3344:	.word	0x3fd55555
    3348:	.word	0xdb6fabff
    334c:	.word	0x3fdb6db6
    3350:	.word	0x33333303
    3354:	.word	0x3fe33333
    3358:	.word	0xe0000000
    335c:	.word	0x3feec709
    3360:	.word	0xdc3a03fd
    3364:	.word	0x3feec709
    3368:	.word	0x145b01f5
    336c:	.word	0xbe3e2fe0
    3370:	.word	0x652b82fe
    3374:	.word	0x3c971547
    3378:	.word	0x00000000
    337c:	.word	0x3fe62e43
    3380:	.word	0xfefa39ef
    3384:	.word	0x3fe62e42
    3388:	.word	0x0ca86c39
    338c:	.word	0xbe205c61
    3390:	.word	0x72bea4d0
    3394:	.word	0x3e663769
    3398:	.word	0xc5d26bf1
    339c:	.word	0xbebbbd41
    33a0:	.word	0xaf25de2c
    33a4:	.word	0x3f11566a
    33a8:	.word	0x16bebd93
    33ac:	.word	0xbf66c16c
    33b0:	.word	0x5555553e
    33b4:	.word	0x3fc55555
    33b8:	.word	0x0003988e
    33bc:	.word	0x000bb679
    33c0:	.word	0x408fffff
    33c4:	.word	0x000fffff
    33c8:	ldr	r5, [pc, #420]	; (3570 <__ieee754_pow+0x770>)
    33ca:	bic.w	r3, r2, #2147483648	; 0x80000000
    33ce:	cmp	r3, r5
    33d0:	ble.w	34dc <__ieee754_pow+0x6dc>
    33d4:	ldr	r1, [pc, #412]	; (3574 <__ieee754_pow+0x774>)
    33d6:	add	r1, r2
    33d8:	orrs	r1, r4
    33da:	bne.n	33f0 <__ieee754_pow+0x5f0>
    33dc:	vadd.f64	d7, d6, d5
    33e0:	vsub.f64	d7, d7, d5
    33e4:	vcmpe.f64	d6, d7
    33e8:	vmrs	APSR_nzcv, fpscr
    33ec:	bhi.w	31f0 <__ieee754_pow+0x3f0>
    33f0:	vldr	d0, [pc, #308]	; 3528 <__ieee754_pow+0x728>
    33f4:	vmul.f64	d7, d8, d0
    33f8:	vmul.f64	d0, d7, d0
    33fc:	b.n	2e92 <__ieee754_pow+0x92>
    33fe:	cmp.w	r8, #0
    3402:	bge.w	2fae <__ieee754_pow+0x1ae>
    3406:	vmov	d7, r0, r1
    340a:	vneg.f64	d0, d7
    340e:	b.n	2e92 <__ieee754_pow+0x92>
    3410:	vldr	d5, [sp]
    3414:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3418:	vdiv.f64	d6, d7, d5
    341c:	vstr	d6, [sp]
    3420:	b.n	2f18 <__ieee754_pow+0x118>
    3422:	ldr	r3, [pc, #340]	; (3578 <__ieee754_pow+0x778>)
    3424:	cmp	r4, r3
    3426:	ble.w	2fa8 <__ieee754_pow+0x1a8>
    342a:	ldr	r3, [pc, #336]	; (357c <__ieee754_pow+0x77c>)
    342c:	cmp	r4, r3
    342e:	bgt.w	2ef4 <__ieee754_pow+0xf4>
    3432:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3436:	vmov.f64	d8, #80	; 0x3e800000  0.250
    343a:	vldr	d5, [sp]
    343e:	vldr	d2, [pc, #240]	; 3530 <__ieee754_pow+0x730>
    3442:	vsub.f64	d7, d5, d7
    3446:	vmov.f64	d5, #96	; 0x3f000000  0.5
    344a:	vldr	d3, [pc, #236]	; 3538 <__ieee754_pow+0x738>
    344e:	vneg.f64	d4, d7
    3452:	vmul.f64	d0, d7, d7
    3456:	vldr	d6, [pc, #232]	; 3540 <__ieee754_pow+0x740>
    345a:	vfma.f64	d3, d4, d8
    345e:	vfma.f64	d5, d4, d3
    3462:	vldr	d1, [pc, #228]	; 3548 <__ieee754_pow+0x748>
    3466:	vmul.f64	d5, d5, d0
    346a:	vnmul.f64	d6, d6, d5
    346e:	vfma.f64	d6, d7, d1
    3472:	vmov.f64	d5, d6
    3476:	vfma.f64	d5, d7, d2
    347a:	vmov	r2, r3, d5
    347e:	movs	r2, #0
    3480:	vmov	d5, r2, r3
    3484:	vmov.f64	d7, d5
    3488:	vfma.f64	d7, d4, d2
    348c:	vsub.f64	d6, d6, d7
    3490:	b.n	3176 <__ieee754_pow+0x376>
    3492:	vldr	d3, [pc, #188]	; 3550 <__ieee754_pow+0x750>
    3496:	vmov.f64	d7, #112	; 0x3f800000  1.0
    349a:	vmov.f64	d0, d3
    349e:	movs	r5, #0
    34a0:	b.n	303a <__ieee754_pow+0x23a>
    34a2:	movs	r6, #0
    34a4:	b.n	3002 <__ieee754_pow+0x202>
    34a6:	vmov	d6, r2, r3
    34aa:	vmov.f64	d7, #112	; 0x3f800000  1.0
    34ae:	vdiv.f64	d0, d7, d6
    34b2:	b.n	2e92 <__ieee754_pow+0x92>
    34b4:	vldr	d0, [pc, #160]	; 3558 <__ieee754_pow+0x758>
    34b8:	vmul.f64	d7, d8, d0
    34bc:	vmul.f64	d0, d7, d0
    34c0:	b.n	2e92 <__ieee754_pow+0x92>
    34c2:	cmp	r6, #0
    34c4:	bne.w	2eb0 <__ieee754_pow+0xb0>
    34c8:	rsb	r7, r7, #20
    34cc:	asr.w	lr, r5, r7
    34d0:	lsl.w	r7, lr, r7
    34d4:	cmp	r5, r7
    34d6:	beq.n	351a <__ieee754_pow+0x71a>
    34d8:	mov	fp, r6
    34da:	b.n	2e52 <__ieee754_pow+0x52>
    34dc:	ldr	r4, [pc, #160]	; (3580 <__ieee754_pow+0x780>)
    34de:	cmp	r3, r4
    34e0:	bgt.w	31f0 <__ieee754_pow+0x3f0>
    34e4:	vadd.f64	d7, d6, d5
    34e8:	mov	r1, r0
    34ea:	vstr	d7, [sp]
    34ee:	b.n	323a <__ieee754_pow+0x43a>
    34f0:	vldr	d7, [sp]
    34f4:	vsub.f64	d7, d7, d7
    34f8:	vdiv.f64	d0, d7, d7
    34fc:	b.n	2e92 <__ieee754_pow+0x92>
    34fe:	vldr	d3, [pc, #96]	; 3560 <__ieee754_pow+0x760>
    3502:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    3506:	vldr	d0, [pc, #96]	; 3568 <__ieee754_pow+0x768>
    350a:	mov.w	r5, #262144	; 0x40000
    350e:	b.n	303a <__ieee754_pow+0x23a>
    3510:	vmov.f64	d0, d7
    3514:	bl	3a60 <scalbn>
    3518:	b.n	32e6 <__ieee754_pow+0x4e6>
    351a:	and.w	lr, lr, #1
    351e:	rsb	fp, lr, #2
    3522:	b.n	2e52 <__ieee754_pow+0x52>
    3524:	nop.w
    3528:	.word	0xc2f8f359
    352c:	.word	0x01a56e1f
    3530:	.word	0x60000000
    3534:	.word	0x3ff71547
    3538:	.word	0x55555555
    353c:	.word	0x3fd55555
    3540:	.word	0x652b82fe
    3544:	.word	0x3ff71547
    3548:	.word	0xf85ddf44
    354c:	.word	0x3e54ae0b
	...
    3558:	.word	0x8800759c
    355c:	.word	0x7e37e43c
    3560:	.word	0x40000000
    3564:	.word	0x3fe2b803
    3568:	.word	0x43cfd006
    356c:	.word	0x3e4cfdeb
    3570:	.word	0x4090cbff
    3574:	.word	0x3f6f3400
    3578:	.word	0x3feffffe
    357c:	.word	0x3ff00000
    3580:	.word	0x3fe00000

00003584 <__ieee754_sqrt>:
    3584:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3588:	sub	sp, #8
    358a:	vstr	d0, [sp]
    358e:	ldr	r1, [pc, #372]	; (3704 <__ieee754_sqrt+0x180>)
    3590:	ldr	r3, [sp, #4]
    3592:	ldr	r0, [sp, #0]
    3594:	mov	r4, r1
    3596:	ands	r1, r3
    3598:	cmp	r1, r4
    359a:	beq.w	36ce <__ieee754_sqrt+0x14a>
    359e:	cmp	r3, #0
    35a0:	mov	r2, r0
    35a2:	ble.n	3694 <__ieee754_sqrt+0x110>
    35a4:	asrs	r7, r3, #20
    35a6:	beq.w	36ae <__ieee754_sqrt+0x12a>
    35aa:	subw	r7, r7, #1023	; 0x3ff
    35ae:	ubfx	r3, r3, #0, #20
    35b2:	lsls	r1, r7, #31
    35b4:	orr.w	r3, r3, #1048576	; 0x100000
    35b8:	bmi.n	368a <__ieee754_sqrt+0x106>
    35ba:	add.w	r1, r3, r2, lsr #31
    35be:	movs	r6, #0
    35c0:	add	r3, r1
    35c2:	asrs	r7, r7, #1
    35c4:	lsls	r2, r2, #1
    35c6:	mov	lr, r6
    35c8:	movs	r0, #22
    35ca:	mov.w	r1, #2097152	; 0x200000
    35ce:	add.w	r4, lr, r1
    35d2:	cmp	r4, r3
    35d4:	mov.w	r5, r2, lsr #31
    35d8:	mov.w	r2, r2, lsl #1
    35dc:	bgt.n	35e6 <__ieee754_sqrt+0x62>
    35de:	subs	r3, r3, r4
    35e0:	add.w	lr, r4, r1
    35e4:	add	r6, r1
    35e6:	subs	r0, #1
    35e8:	add.w	r3, r5, r3, lsl #1
    35ec:	mov.w	r1, r1, lsr #1
    35f0:	bne.n	35ce <__ieee754_sqrt+0x4a>
    35f2:	mov	ip, r0
    35f4:	movs	r4, #32
    35f6:	mov.w	r1, #2147483648	; 0x80000000
    35fa:	b.n	3610 <__ieee754_sqrt+0x8c>
    35fc:	beq.n	3640 <__ieee754_sqrt+0xbc>
    35fe:	add.w	r5, r3, r2, lsr #31
    3602:	subs	r4, #1
    3604:	mov.w	r1, r1, lsr #1
    3608:	add	r3, r5
    360a:	mov.w	r2, r2, lsl #1
    360e:	beq.n	3652 <__ieee754_sqrt+0xce>
    3610:	cmp	lr, r3
    3612:	add.w	r5, r1, ip
    3616:	bge.n	35fc <__ieee754_sqrt+0x78>
    3618:	cmp	r5, #0
    361a:	add.w	ip, r5, r1
    361e:	blt.n	3634 <__ieee754_sqrt+0xb0>
    3620:	mov	r8, lr
    3622:	cmp	r5, r2
    3624:	rsb	r3, lr, r3
    3628:	bls.n	362c <__ieee754_sqrt+0xa8>
    362a:	subs	r3, #1
    362c:	subs	r2, r2, r5
    362e:	add	r0, r1
    3630:	mov	lr, r8
    3632:	b.n	35fe <__ieee754_sqrt+0x7a>
    3634:	cmp.w	ip, #0
    3638:	blt.n	3620 <__ieee754_sqrt+0x9c>
    363a:	add.w	r8, lr, #1
    363e:	b.n	3622 <__ieee754_sqrt+0x9e>
    3640:	cmp	r5, r2
    3642:	bhi.n	367a <__ieee754_sqrt+0xf6>
    3644:	cmp	r5, #0
    3646:	add.w	ip, r5, r1
    364a:	blt.n	36de <__ieee754_sqrt+0x15a>
    364c:	mov	r8, r3
    364e:	movs	r3, #0
    3650:	b.n	362c <__ieee754_sqrt+0xa8>
    3652:	orrs	r3, r2
    3654:	bne.n	367e <__ieee754_sqrt+0xfa>
    3656:	lsrs	r0, r0, #1
    3658:	asrs	r1, r6, #1
    365a:	lsls	r3, r6, #31
    365c:	add.w	r1, r1, #1069547520	; 0x3fc00000
    3660:	add.w	r1, r1, #2097152	; 0x200000
    3664:	it	mi
    3666:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    366a:	add.w	r3, r1, r7, lsl #20
    366e:	mov	r2, r0
    3670:	vmov	d0, r2, r3
    3674:	add	sp, #8
    3676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    367a:	mov	r3, lr
    367c:	b.n	35fe <__ieee754_sqrt+0x7a>
    367e:	adds	r2, r0, #1
    3680:	beq.n	36e6 <__ieee754_sqrt+0x162>
    3682:	and.w	r3, r0, #1
    3686:	add	r0, r3
    3688:	b.n	3656 <__ieee754_sqrt+0xd2>
    368a:	lsls	r3, r3, #1
    368c:	add.w	r3, r3, r2, lsr #31
    3690:	lsls	r2, r2, #1
    3692:	b.n	35ba <__ieee754_sqrt+0x36>
    3694:	bic.w	r1, r3, #2147483648	; 0x80000000
    3698:	orrs	r1, r0
    369a:	beq.n	36d8 <__ieee754_sqrt+0x154>
    369c:	cbnz	r3, 36f6 <__ieee754_sqrt+0x172>
    369e:	mov	r7, r3
    36a0:	lsrs	r3, r2, #11
    36a2:	subs	r7, #21
    36a4:	lsls	r2, r2, #21
    36a6:	cmp	r3, #0
    36a8:	beq.n	36a0 <__ieee754_sqrt+0x11c>
    36aa:	lsls	r5, r3, #11
    36ac:	bmi.n	36ec <__ieee754_sqrt+0x168>
    36ae:	movs	r1, #0
    36b0:	b.n	36b4 <__ieee754_sqrt+0x130>
    36b2:	mov	r1, r0
    36b4:	lsls	r3, r3, #1
    36b6:	lsls	r4, r3, #11
    36b8:	add.w	r0, r1, #1
    36bc:	bpl.n	36b2 <__ieee754_sqrt+0x12e>
    36be:	rsb	r4, r0, #32
    36c2:	lsr.w	r4, r2, r4
    36c6:	orrs	r3, r4
    36c8:	subs	r7, r7, r1
    36ca:	lsls	r2, r0
    36cc:	b.n	35aa <__ieee754_sqrt+0x26>
    36ce:	vfma.f64	d0, d0, d0
    36d2:	add	sp, #8
    36d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36d8:	vldr	d0, [sp]
    36dc:	b.n	3674 <__ieee754_sqrt+0xf0>
    36de:	cmp.w	ip, #0
    36e2:	bge.n	363a <__ieee754_sqrt+0xb6>
    36e4:	b.n	364c <__ieee754_sqrt+0xc8>
    36e6:	adds	r6, #1
    36e8:	mov	r0, r4
    36ea:	b.n	3658 <__ieee754_sqrt+0xd4>
    36ec:	movs	r4, #32
    36ee:	mov.w	r1, #4294967295
    36f2:	movs	r0, #0
    36f4:	b.n	36c2 <__ieee754_sqrt+0x13e>
    36f6:	vldr	d7, [sp]
    36fa:	vsub.f64	d7, d7, d7
    36fe:	vdiv.f64	d0, d7, d7
    3702:	b.n	3674 <__ieee754_sqrt+0xf0>
    3704:	.word	0x7ff00000

00003708 <atan>:
    3708:	push	{r3, r4, r5, lr}
    370a:	vmov.f64	d7, d0
    370e:	vmov	r5, s15
    3712:	ldr	r3, [pc, #476]	; (38f0 <atan+0x1e8>)
    3714:	bic.w	r4, r5, #2147483648	; 0x80000000
    3718:	cmp	r4, r3
    371a:	ble.n	373a <atan+0x32>
    371c:	ldr	r3, [pc, #468]	; (38f4 <atan+0x1ec>)
    371e:	cmp	r4, r3
    3720:	vmov	r2, s0
    3724:	bgt.n	37e0 <atan+0xd8>
    3726:	beq.n	37dc <atan+0xd4>
    3728:	vldr	d7, [pc, #340]	; 3880 <atan+0x178>
    372c:	vldr	d0, [pc, #344]	; 3888 <atan+0x180>
    3730:	cmp	r5, #0
    3732:	it	gt
    3734:	vmovgt.f64	d0, d7
    3738:	pop	{r3, r4, r5, pc}
    373a:	ldr	r3, [pc, #444]	; (38f8 <atan+0x1f0>)
    373c:	cmp	r4, r3
    373e:	bgt.n	3802 <atan+0xfa>
    3740:	sub.w	r3, r3, #29097984	; 0x1bc0000
    3744:	cmp	r4, r3
    3746:	ble.n	37e6 <atan+0xde>
    3748:	mov.w	r3, #4294967295
    374c:	vldr	d2, [pc, #320]	; 3890 <atan+0x188>
    3750:	vmul.f64	d4, d7, d7
    3754:	vmul.f64	d6, d4, d4
    3758:	vldr	d3, [pc, #316]	; 3898 <atan+0x190>
    375c:	vldr	d5, [pc, #320]	; 38a0 <atan+0x198>
    3760:	vfma.f64	d3, d6, d2
    3764:	vldr	d2, [pc, #320]	; 38a8 <atan+0x1a0>
    3768:	vfma.f64	d5, d6, d3
    376c:	vldr	d3, [pc, #320]	; 38b0 <atan+0x1a8>
    3770:	vfma.f64	d2, d6, d5
    3774:	vldr	d5, [pc, #320]	; 38b8 <atan+0x1b0>
    3778:	vfma.f64	d3, d6, d2
    377c:	vldr	d1, [pc, #320]	; 38c0 <atan+0x1b8>
    3780:	vfma.f64	d5, d6, d3
    3784:	vmul.f64	d5, d5, d4
    3788:	vldr	d2, [pc, #316]	; 38c8 <atan+0x1c0>
    378c:	vldr	d4, [pc, #320]	; 38d0 <atan+0x1c8>
    3790:	vldr	d3, [pc, #324]	; 38d8 <atan+0x1d0>
    3794:	vfma.f64	d4, d6, d1
    3798:	vfma.f64	d2, d6, d4
    379c:	vldr	d4, [pc, #320]	; 38e0 <atan+0x1d8>
    37a0:	vfma.f64	d3, d6, d2
    37a4:	adds	r2, r3, #1
    37a6:	vfma.f64	d4, d6, d3
    37aa:	vmul.f64	d6, d4, d6
    37ae:	beq.n	3832 <atan+0x12a>
    37b0:	vadd.f64	d5, d5, d6
    37b4:	ldr	r2, [pc, #324]	; (38fc <atan+0x1f4>)
    37b6:	ldr	r1, [pc, #328]	; (3900 <atan+0x1f8>)
    37b8:	lsls	r3, r3, #3
    37ba:	add	r2, r3
    37bc:	add	r3, r1
    37be:	vldr	d6, [r2]
    37c2:	vldr	d0, [r3]
    37c6:	vfnms.f64	d6, d7, d5
    37ca:	vsub.f64	d7, d6, d7
    37ce:	cmp	r5, #0
    37d0:	vsub.f64	d7, d0, d7
    37d4:	blt.n	382c <atan+0x124>
    37d6:	vmov.f64	d0, d7
    37da:	pop	{r3, r4, r5, pc}
    37dc:	cmp	r2, #0
    37de:	beq.n	3728 <atan+0x20>
    37e0:	vadd.f64	d0, d7, d7
    37e4:	pop	{r3, r4, r5, pc}
    37e6:	vldr	d6, [pc, #256]	; 38e8 <atan+0x1e0>
    37ea:	vmov.f64	d5, #112	; 0x3f800000  1.0
    37ee:	vadd.f64	d6, d0, d6
    37f2:	vcmpe.f64	d6, d5
    37f6:	vmrs	APSR_nzcv, fpscr
    37fa:	ble.n	3748 <atan+0x40>
    37fc:	vmov.f64	d0, d7
    3800:	pop	{r3, r4, r5, pc}
    3802:	bl	390c <fabs>
    3806:	ldr	r3, [pc, #252]	; (3904 <atan+0x1fc>)
    3808:	cmp	r4, r3
    380a:	bgt.n	3840 <atan+0x138>
    380c:	sub.w	r3, r3, #851968	; 0xd0000
    3810:	cmp	r4, r3
    3812:	bgt.n	386a <atan+0x162>
    3814:	vmov.f64	d7, #0	; 0x40000000  2.0
    3818:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    381c:	vadd.f64	d5, d0, d7
    3820:	vfma.f64	d6, d0, d7
    3824:	movs	r3, #0
    3826:	vdiv.f64	d7, d6, d5
    382a:	b.n	374c <atan+0x44>
    382c:	vneg.f64	d0, d7
    3830:	pop	{r3, r4, r5, pc}
    3832:	vadd.f64	d6, d5, d6
    3836:	vfms.f64	d7, d7, d6
    383a:	vmov.f64	d0, d7
    383e:	pop	{r3, r4, r5, pc}
    3840:	ldr	r3, [pc, #196]	; (3908 <atan+0x200>)
    3842:	cmp	r4, r3
    3844:	bgt.n	385e <atan+0x156>
    3846:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    384a:	vmov.f64	d6, #112	; 0x3f800000  1.0
    384e:	vsub.f64	d5, d0, d7
    3852:	vfma.f64	d6, d0, d7
    3856:	movs	r3, #2
    3858:	vdiv.f64	d7, d5, d6
    385c:	b.n	374c <atan+0x44>
    385e:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    3862:	movs	r3, #3
    3864:	vdiv.f64	d7, d6, d0
    3868:	b.n	374c <atan+0x44>
    386a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    386e:	movs	r3, #1
    3870:	vsub.f64	d6, d0, d7
    3874:	vadd.f64	d0, d0, d7
    3878:	vdiv.f64	d7, d6, d0
    387c:	b.n	374c <atan+0x44>
    387e:	nop
    3880:	.word	0x54442d18
    3884:	.word	0x3ff921fb
    3888:	.word	0x54442d18
    388c:	.word	0xbff921fb
    3890:	.word	0xe322da11
    3894:	.word	0x3f90ad3a
    3898:	.word	0x24760deb
    389c:	.word	0x3fa97b4b
    38a0:	.word	0xa0d03d51
    38a4:	.word	0x3fb10d66
    38a8:	.word	0xc54c206e
    38ac:	.word	0x3fb745cd
    38b0:	.word	0x920083ff
    38b4:	.word	0x3fc24924
    38b8:	.word	0x5555550d
    38bc:	.word	0x3fd55555
    38c0:	.word	0x2c6a6c2f
    38c4:	.word	0xbfa2b444
    38c8:	.word	0xaf749a6d
    38cc:	.word	0xbfb3b0f2
    38d0:	.word	0x52defd9a
    38d4:	.word	0xbfadde2d
    38d8:	.word	0xfe231671
    38dc:	.word	0xbfbc71c6
    38e0:	.word	0x9998ebc4
    38e4:	.word	0xbfc99999
    38e8:	.word	0x8800759c
    38ec:	.word	0x7e37e43c
    38f0:	.word	0x440fffff
    38f4:	.word	0x7ff00000
    38f8:	.word	0x3fdbffff
    38fc:	.word	0x20000368
    3900:	.word	0x20000388
    3904:	.word	0x3ff2ffff
    3908:	.word	0x40037fff

0000390c <fabs>:
    390c:	vmov	r2, r3, d0
    3910:	bic.w	r3, r3, #2147483648	; 0x80000000
    3914:	vmov	d0, r2, r3
    3918:	bx	lr
    391a:	nop

0000391c <finite>:
    391c:	vmov	r3, s1
    3920:	orr.w	r0, r3, #2147483648	; 0x80000000
    3924:	add.w	r0, r0, #1048576	; 0x100000
    3928:	lsrs	r0, r0, #31
    392a:	bx	lr

0000392c <matherr>:
    392c:	movs	r0, #0
    392e:	bx	lr

00003930 <nan>:
    3930:	vldr	d0, [pc, #4]	; 3938 <nan+0x8>
    3934:	bx	lr
    3936:	nop
    3938:	.word	0x00000000
    393c:	.word	0x7ff80000

00003940 <rint>:
    3940:	push	{r4, r5, r6, r7}
    3942:	vmov	r2, r3, d0
    3946:	ubfx	r5, r3, #20, #11
    394a:	subw	r0, r5, #1023	; 0x3ff
    394e:	cmp	r0, #19
    3950:	sub	sp, #16
    3952:	mov	r1, r3
    3954:	mov.w	r7, r3, lsr #31
    3958:	vmov	r4, s0
    395c:	bgt.n	39b8 <rint+0x78>
    395e:	cmp	r0, #0
    3960:	blt.n	39f2 <rint+0xb2>
    3962:	ldr	r5, [pc, #240]	; (3a54 <rint+0x114>)
    3964:	asrs	r5, r0
    3966:	and.w	r6, r3, r5
    396a:	orrs	r6, r2
    396c:	beq.n	39c2 <rint+0x82>
    396e:	lsrs	r5, r5, #1
    3970:	ands	r3, r5
    3972:	orrs	r4, r3
    3974:	beq.n	3990 <rint+0x50>
    3976:	mov.w	r3, #262144	; 0x40000
    397a:	cmp	r0, #19
    397c:	bic.w	r5, r1, r5
    3980:	asr.w	r1, r3, r0
    3984:	orr.w	r1, r1, r5
    3988:	ite	eq
    398a:	moveq.w	r4, #2147483648	; 0x80000000
    398e:	movne	r4, #0
    3990:	ldr	r0, [pc, #196]	; (3a58 <rint+0x118>)
    3992:	add.w	r7, r0, r7, lsl #3
    3996:	vldr	d0, [r7]
    399a:	mov	r3, r1
    399c:	mov	r2, r4
    399e:	vmov	d7, r2, r3
    39a2:	vadd.f64	d7, d7, d0
    39a6:	vstr	d7, [sp, #8]
    39aa:	vldr	d7, [sp, #8]
    39ae:	vsub.f64	d0, d7, d0
    39b2:	add	sp, #16
    39b4:	pop	{r4, r5, r6, r7}
    39b6:	bx	lr
    39b8:	cmp	r0, #51	; 0x33
    39ba:	ble.n	39cc <rint+0x8c>
    39bc:	cmp.w	r0, #1024	; 0x400
    39c0:	beq.n	3a4c <rint+0x10c>
    39c2:	vmov	d0, r2, r3
    39c6:	add	sp, #16
    39c8:	pop	{r4, r5, r6, r7}
    39ca:	bx	lr
    39cc:	subw	r5, r5, #1043	; 0x413
    39d0:	mov.w	r0, #4294967295
    39d4:	lsrs	r0, r5
    39d6:	tst	r2, r0
    39d8:	beq.n	39c2 <rint+0x82>
    39da:	lsrs	r0, r0, #1
    39dc:	tst	r2, r0
    39de:	beq.n	3990 <rint+0x50>
    39e0:	mov.w	r3, #1073741824	; 0x40000000
    39e4:	bic.w	r0, r4, r0
    39e8:	asr.w	r5, r3, r5
    39ec:	orr.w	r4, r5, r0
    39f0:	b.n	3990 <rint+0x50>
    39f2:	bic.w	r0, r3, #2147483648	; 0x80000000
    39f6:	orrs	r0, r2
    39f8:	vmov	r6, s0
    39fc:	beq.n	39c2 <rint+0x82>
    39fe:	ubfx	r0, r3, #0, #20
    3a02:	orrs	r6, r0
    3a04:	negs	r0, r6
    3a06:	orrs	r6, r0
    3a08:	ldr	r0, [pc, #76]	; (3a58 <rint+0x118>)
    3a0a:	lsrs	r1, r3, #17
    3a0c:	lsrs	r6, r6, #12
    3a0e:	lsls	r1, r1, #17
    3a10:	and.w	r6, r6, #524288	; 0x80000
    3a14:	add.w	r0, r0, r7, lsl #3
    3a18:	orr.w	r3, r6, r1
    3a1c:	vldr	d6, [r0]
    3a20:	vmov	d7, r2, r3
    3a24:	vadd.f64	d7, d7, d6
    3a28:	vstr	d7, [sp, #8]
    3a2c:	vldr	d7, [sp, #8]
    3a30:	vsub.f64	d7, d7, d6
    3a34:	vstr	d7, [sp]
    3a38:	ldr	r1, [sp, #4]
    3a3a:	ldrd	r2, r3, [sp]
    3a3e:	bic.w	r1, r1, #2147483648	; 0x80000000
    3a42:	orr.w	r3, r1, r7, lsl #31
    3a46:	vmov	d0, r2, r3
    3a4a:	b.n	39c6 <rint+0x86>
    3a4c:	vadd.f64	d0, d0, d0
    3a50:	b.n	39c6 <rint+0x86>
    3a52:	nop
    3a54:	.word	0x000fffff
    3a58:	.word	0x200003a8
    3a5c:	.word	0x00000000

00003a60 <scalbn>:
    3a60:	push	{r4, lr}
    3a62:	vpush	{d8}
    3a66:	sub	sp, #8
    3a68:	vstr	d0, [sp]
    3a6c:	ldr	r3, [sp, #4]
    3a6e:	ldr	r1, [sp, #0]
    3a70:	ubfx	r2, r3, #20, #11
    3a74:	cbnz	r2, 3ac2 <scalbn+0x62>
    3a76:	bic.w	r3, r3, #2147483648	; 0x80000000
    3a7a:	orrs	r3, r1
    3a7c:	beq.n	3ada <scalbn+0x7a>
    3a7e:	vldr	d7, [pc, #216]	; 3b58 <scalbn+0xf8>
    3a82:	ldr	r2, [pc, #244]	; (3b78 <scalbn+0x118>)
    3a84:	vmul.f64	d7, d0, d7
    3a88:	cmp	r0, r2
    3a8a:	vstr	d7, [sp]
    3a8e:	ldr	r3, [sp, #4]
    3a90:	blt.n	3ae6 <scalbn+0x86>
    3a92:	ubfx	r2, r3, #20, #11
    3a96:	subs	r2, #54	; 0x36
    3a98:	adds	r4, r0, r2
    3a9a:	movw	r2, #2046	; 0x7fe
    3a9e:	cmp	r4, r2
    3aa0:	bgt.n	3b04 <scalbn+0xa4>
    3aa2:	cmp	r4, #0
    3aa4:	ble.n	3af6 <scalbn+0x96>
    3aa6:	bic.w	r1, r3, #2139095040	; 0x7f800000
    3aaa:	ldrd	r2, r3, [sp]
    3aae:	bic.w	r1, r1, #7340032	; 0x700000
    3ab2:	orr.w	r3, r1, r4, lsl #20
    3ab6:	vmov	d0, r2, r3
    3aba:	add	sp, #8
    3abc:	vpop	{d8}
    3ac0:	pop	{r4, pc}
    3ac2:	movw	r1, #2047	; 0x7ff
    3ac6:	cmp	r2, r1
    3ac8:	bne.n	3a98 <scalbn+0x38>
    3aca:	vldr	d7, [sp]
    3ace:	vadd.f64	d0, d7, d7
    3ad2:	add	sp, #8
    3ad4:	vpop	{d8}
    3ad8:	pop	{r4, pc}
    3ada:	vldr	d0, [sp]
    3ade:	add	sp, #8
    3ae0:	vpop	{d8}
    3ae4:	pop	{r4, pc}
    3ae6:	vldr	d0, [pc, #120]	; 3b60 <scalbn+0x100>
    3aea:	vmul.f64	d0, d7, d0
    3aee:	add	sp, #8
    3af0:	vpop	{d8}
    3af4:	pop	{r4, pc}
    3af6:	cmn.w	r4, #53	; 0x35
    3afa:	bge.n	3b20 <scalbn+0xc0>
    3afc:	movw	r3, #50000	; 0xc350
    3b00:	cmp	r0, r3
    3b02:	ble.n	3b40 <scalbn+0xe0>
    3b04:	vldr	d8, [pc, #96]	; 3b68 <scalbn+0x108>
    3b08:	vldr	d1, [sp]
    3b0c:	vmov.f64	d0, d8
    3b10:	bl	3b7c <copysign>
    3b14:	vmul.f64	d0, d0, d8
    3b18:	add	sp, #8
    3b1a:	vpop	{d8}
    3b1e:	pop	{r4, pc}
    3b20:	bic.w	r1, r3, #2139095040	; 0x7f800000
    3b24:	ldrd	r2, r3, [sp]
    3b28:	bic.w	r1, r1, #7340032	; 0x700000
    3b2c:	adds	r4, #54	; 0x36
    3b2e:	orr.w	r3, r1, r4, lsl #20
    3b32:	vldr	d0, [pc, #60]	; 3b70 <scalbn+0x110>
    3b36:	vmov	d7, r2, r3
    3b3a:	vmul.f64	d0, d7, d0
    3b3e:	b.n	3aba <scalbn+0x5a>
    3b40:	vldr	d8, [pc, #28]	; 3b60 <scalbn+0x100>
    3b44:	vldr	d1, [sp]
    3b48:	vmov.f64	d0, d8
    3b4c:	bl	3b7c <copysign>
    3b50:	vmul.f64	d0, d0, d8
    3b54:	b.n	3aba <scalbn+0x5a>
    3b56:	nop
    3b58:	.word	0x00000000
    3b5c:	.word	0x43500000
    3b60:	.word	0xc2f8f359
    3b64:	.word	0x01a56e1f
    3b68:	.word	0x8800759c
    3b6c:	.word	0x7e37e43c
    3b70:	.word	0x00000000
    3b74:	.word	0x3c900000
    3b78:	.word	0xffff3cb0

00003b7c <copysign>:
    3b7c:	vmov	r2, r3, d0
    3b80:	vmov	r0, s3
    3b84:	bic.w	r1, r3, #2147483648	; 0x80000000
    3b88:	and.w	r0, r0, #2147483648	; 0x80000000
    3b8c:	orr.w	r3, r1, r0
    3b90:	vmov	d0, r2, r3
    3b94:	bx	lr
    3b96:	nop

00003b98 <__errno>:
    3b98:	ldr	r3, [pc, #4]	; (3ba0 <__errno+0x8>)
    3b9a:	ldr	r0, [r3, #0]
    3b9c:	bx	lr
    3b9e:	nop
    3ba0:	.word	0x20000828

00003ba4 <__libc_init_array>:
    3ba4:	push	{r4, r5, r6, lr}
    3ba6:	ldr	r6, [pc, #60]	; (3be4 <__libc_init_array+0x40>)
    3ba8:	ldr	r5, [pc, #60]	; (3be8 <__libc_init_array+0x44>)
    3baa:	subs	r6, r6, r5
    3bac:	asrs	r6, r6, #2
    3bae:	it	ne
    3bb0:	movne	r4, #0
    3bb2:	beq.n	3bc0 <__libc_init_array+0x1c>
    3bb4:	adds	r4, #1
    3bb6:	ldr.w	r3, [r5], #4
    3bba:	blx	r3
    3bbc:	cmp	r6, r4
    3bbe:	bne.n	3bb4 <__libc_init_array+0x10>
    3bc0:	ldr	r6, [pc, #40]	; (3bec <__libc_init_array+0x48>)
    3bc2:	ldr	r5, [pc, #44]	; (3bf0 <__libc_init_array+0x4c>)
    3bc4:	subs	r6, r6, r5
    3bc6:	bl	3c90 <___init_veneer>
    3bca:	asrs	r6, r6, #2
    3bcc:	it	ne
    3bce:	movne	r4, #0
    3bd0:	beq.n	3be0 <__libc_init_array+0x3c>
    3bd2:	adds	r4, #1
    3bd4:	ldr.w	r3, [r5], #4
    3bd8:	blx	r3
    3bda:	cmp	r6, r4
    3bdc:	bne.n	3bd2 <__libc_init_array+0x2e>
    3bde:	pop	{r4, r5, r6, pc}
    3be0:	pop	{r4, r5, r6, pc}
    3be2:	nop
    3be4:	.word	0x60001740
    3be8:	.word	0x60001740
    3bec:	.word	0x60001748
    3bf0:	.word	0x60001740

00003bf4 <memset>:
    3bf4:	push	{r4, r5, r6}
    3bf6:	lsls	r4, r0, #30
    3bf8:	beq.n	3c88 <memset+0x94>
    3bfa:	subs	r4, r2, #1
    3bfc:	cmp	r2, #0
    3bfe:	beq.n	3c84 <memset+0x90>
    3c00:	uxtb	r5, r1
    3c02:	mov	r3, r0
    3c04:	b.n	3c0c <memset+0x18>
    3c06:	subs	r2, r4, #1
    3c08:	cbz	r4, 3c84 <memset+0x90>
    3c0a:	mov	r4, r2
    3c0c:	strb.w	r5, [r3], #1
    3c10:	lsls	r2, r3, #30
    3c12:	bne.n	3c06 <memset+0x12>
    3c14:	cmp	r4, #3
    3c16:	bls.n	3c76 <memset+0x82>
    3c18:	uxtb	r5, r1
    3c1a:	orr.w	r5, r5, r5, lsl #8
    3c1e:	cmp	r4, #15
    3c20:	orr.w	r5, r5, r5, lsl #16
    3c24:	bls.n	3c5a <memset+0x66>
    3c26:	add.w	r2, r3, #16
    3c2a:	mov	r6, r4
    3c2c:	subs	r6, #16
    3c2e:	cmp	r6, #15
    3c30:	str.w	r5, [r2, #-16]
    3c34:	str.w	r5, [r2, #-12]
    3c38:	str.w	r5, [r2, #-8]
    3c3c:	str.w	r5, [r2, #-4]
    3c40:	add.w	r2, r2, #16
    3c44:	bhi.n	3c2c <memset+0x38>
    3c46:	sub.w	r2, r4, #16
    3c4a:	bic.w	r2, r2, #15
    3c4e:	and.w	r4, r4, #15
    3c52:	adds	r2, #16
    3c54:	cmp	r4, #3
    3c56:	add	r3, r2
    3c58:	bls.n	3c76 <memset+0x82>
    3c5a:	mov	r6, r3
    3c5c:	mov	r2, r4
    3c5e:	subs	r2, #4
    3c60:	cmp	r2, #3
    3c62:	str.w	r5, [r6], #4
    3c66:	bhi.n	3c5e <memset+0x6a>
    3c68:	subs	r2, r4, #4
    3c6a:	bic.w	r2, r2, #3
    3c6e:	adds	r2, #4
    3c70:	add	r3, r2
    3c72:	and.w	r4, r4, #3
    3c76:	cbz	r4, 3c84 <memset+0x90>
    3c78:	uxtb	r1, r1
    3c7a:	add	r4, r3
    3c7c:	strb.w	r1, [r3], #1
    3c80:	cmp	r3, r4
    3c82:	bne.n	3c7c <memset+0x88>
    3c84:	pop	{r4, r5, r6}
    3c86:	bx	lr
    3c88:	mov	r4, r2
    3c8a:	mov	r3, r0
    3c8c:	b.n	3c14 <memset+0x20>
    3c8e:	nop

00003c90 <___init_veneer>:
    3c90:	ldr.w	pc, [pc]	; 3c94 <___init_veneer+0x4>
    3c94:	.word	0x600016e9
	...

Disassembly of section .fini:

00003ca0 <_fini>:
    3ca0:	push	{r3, r4, r5, r6, r7, lr}
    3ca2:	nop
