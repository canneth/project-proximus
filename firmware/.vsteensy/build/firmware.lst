
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000033b0 l    d  .fini	00000000 .fini
000033b4 l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200005d0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00001624 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
000020c4 l     F .text.itcm	0000005c schedule_transfer
00002120 l     F .text.itcm	00000036 run_callbacks
00002158 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
000021fc l     F .text.itcm	00000698 isr
20000b24 l     O .bss	00000004 endpointN_notify_mask
20000b28 l     O .bss	00000001 sof_usage
20000b34 l     O .bss	00000004 endpoint0_notify_mask
20000b38 l     O .bss	00000001 usb_reboot_timer
20000b40 l     O .bss	00000008 endpoint0_setupdata
20000b48 l     O .bss	00000008 reply_buffer
20000b50 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20000b68 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20000b6c l     O .bss	00000004 s_hotTemp
20000b70 l     O .bss	00000004 s_hot_ROOM
20000b74 l     O .bss	00000004 s_roomC_hotC
20000b78 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
600017c0 l     O .text.progmem	0000000a qualifier_descriptor
20000590 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200005d0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200005d4 l       .bss	00000000 object.8610
60001820 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000000dc l     F .text.itcm	00000068 _GLOBAL__sub_I_matrix_printer
00000000 l    df *ABS*	00000000 Leg.cpp
00000000 l    df *ABS*	00000000 IMU.cpp
00000000 l    df *ABS*	00000000 Robot.cpp
00000000 l    df *ABS*	00000000 Command.cpp
00000000 l    df *ABS*	00000000 SparkFun_BNO080_Arduino_Library.cpp
00000390 l     F .text.itcm	00000068 BNO080::printHeader() [clone .part.7]
000003f8 l     F .text.itcm	000001e4 BNO080::printPacket() [clone .part.6]
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000016c0 l     F .text.itcm	0000006c rx_queue_transfer
0000172c l     F .text.itcm	000000b4 rx_event
000017e0 l     F .text.itcm	00000098 usb_serial_flush_callback
00001878 l     F .text.itcm	0000017c usb_serial_write.part.1
20000934 l     O .bss	00000010 rx_index
20000944 l     O .bss	00000002 tx_packet_size
20000946 l     O .bss	00000001 tx_noautoflush
20000947 l     O .bss	00000001 tx_head
20000960 l     O .bss	00000100 rx_transfer
20000a60 l     O .bss	00000001 rx_tail
20000a64 l     O .bss	00000009 rx_list
20000a6e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20000a70 l     O .bss	00000010 rx_count
20000a80 l     O .bss	00000004 rx_available
20000a84 l     O .bss	00000001 rx_head
20000a85 l     O .bss	00000001 transmit_previous_timeout
20000a86 l     O .bss	00000002 tx_available
20000aa0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00002d88 l     F .text.itcm	00000024 digitalWrite.part.0
00002dac l     F .text.itcm	0000001c digitalRead.part.1
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20000b7c l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20203050 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600017d8 l     F .text.progmem	00000008 ____libc_init_array_veneer
600017e0 l     F .text.progmem	00000008 __startup_late_hook_veneer
600017e8 l     F .text.progmem	00000008 __pwm_init_veneer
600017f0 l     F .text.progmem	00000008 __delay_veneer
600017f8 l     F .text.progmem	00000008 __main_veneer
60001800 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001808 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001810 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001818 l     F .text.progmem	00000008 __memset_veneer
000033a0 l     F .text.itcm	00000008 ___init_veneer
00001c30 g     F .text.itcm	0000000c usb_serial_available
00001630 g     F .text.itcm	00000002 startup_default_late_hook
00002ec8  w    F .text.itcm	000000a0 yield
00000e68 g     F .text.itcm	00000030 BNO080::softReset()
20000b2c g     O .bss	00000004 usb_timer1_callback
6000171c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20000b9c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
000005dc g     F .text.itcm	0000006c BNO080::waitForI2C()
00003184 g     F .text.itcm	00000020 Print::println()
600014ac g     F .text.progmem	00000058 analog_init
00000144 g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
00000330 g     F .text.itcm	00000034 project_namespace::Command::Command()
2000058c g     O .data	00000004 F_CPU_ACTUAL
0000328c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00003098 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000b94 g     O .bss	00000001 EventResponder::runningFromYield
60001000 g     O .text.progmem	00000020 ImageVectorTable
20000b80 g     O .bss	00000004 EventResponder::firstInterrupt
000029dc g     F .text.itcm	00000004 usb_transfer_status
00000330 g     F .text.itcm	00000034 project_namespace::Command::Command()
200005ba g     O .data	00000001 usb_enable_serial_event_processing
20000800 g     O .bss	00000004 imu
00003168  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000200 g     O .data	00000280 digital_pin_to_info_PGM
6000166c g     O .text.progmem	0000004c TwoWire::i2c3_hardware
000033b0 g       .text.itcm	00000000 _etext
200005d0 g       .bss	00000000 _sbss
00002dd4 g     F .text.itcm	0000000c digitalRead
60001830 g       *ABS*	00000000 _stextload
000000d4 g     F .text.itcm	00000008 loop
00002894 g     F .text.itcm	00000064 usb_config_rx
00003030 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000124c g     F .text.itcm	000000e0 TwoWire::endTransmission(unsigned char)
00000e5c g     F .text.itcm	0000000a BNO080::enableGyro(unsigned short)
20000b84 g     O .bss	00000004 EventResponder::lastInterrupt
000014e0 g     F .text.itcm	00000134 memcpy
00000b88 g     F .text.itcm	00000288 BNO080::sendPacket(unsigned char, unsigned char)
20000b64 g     O .bss	00000004 systick_millis_count
00001210 g     F .text.itcm	0000003c TwoWire::wait_idle()
20000b58 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
6000171c  w    O .text.progmem	00000018 usb_string_manufacturer_name
600016b8 g     O .text.progmem	0000004c TwoWire::i2c1_hardware
00000370  w    F .text.itcm	0000001e TwoWire::read()
000014c4  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600013c0 g     F .text.progmem	000000ec usb_init
00000144 g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
20002280 g     O .bss	00000004 systick_safe_read
000010f8 g     F .text.itcm	00000118 TwoWire::force_clock()
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
6000177c g     O .text.progmem	00000043 usb_config_descriptor_480
0000162c g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
00001cb0 g     F .text.itcm	00000020 usb_serial_getchar
20000ec0 g     O .bss	00000008 usb_cdc_line_coding
00002dc8 g     F .text.itcm	0000000a digitalWrite
20000b8c g     O .bss	00000004 EventResponder::lastYield
200005ec g     O .bss	00000030 command
00002de0 g     F .text.itcm	00000080 pinMode
20280000 g       .bss.dma	00000000 _heap_end
20000b90 g     O .bss	00000004 EventResponder::firstYield
000032b4 g     F .text.itcm	00000050 __libc_init_array
00000364  w    F .text.itcm	0000000c TwoWire::available()
00001634  w    F .text.itcm	0000008c HardFault_HandlerC
0000132c g     F .text.itcm	00000120 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
00003150  w    F .text.itcm	00000004 usb_serial_class::clear()
60004be4 g       *ABS*	00000000 _sdataload
20000b98 g     O .bss	00000004 MillisTimer::listWaiting
20000a88 g     O .bss	00000001 usb_cdc_line_rtsdtr
600017cc g     F .text.progmem	00000000 _init
000019f4 g     F .text.itcm	00000002 usb_serial_reset
60001738 g     O .text.progmem	00000043 usb_config_descriptor_12
200001dc g     O .data	00000024 vtable for TwoWire
200022c0 g       .bss	00000000 _ebss
60001620 g     O .text.progmem	0000004c TwoWire::i2c4_hardware
00000001 g       *ABS*	00000000 _itcm_block_count
20001000 g     O .bss	00000020 endpoint0_transfer_data
00002ad0 g     F .text.itcm	000002b8 pwm_init
6000135c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20001020 g     O .bss	00000020 endpoint0_transfer_ack
20000ec8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00002990 g     F .text.itcm	00000028 usb_transmit
00003130 g     F .text.itcm	00000020 systick_isr
200005bc g     O .data	00000010 Serial
20000bb8 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00003170  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000162c  w    F .text.itcm	00000002 startup_early_hook
00001bec g     F .text.itcm	00000044 usb_serial_peekchar
00001e00 g     F .text.itcm	000002c4 set_arm_clock
20000b5c g     O .bss	00000004 systick_cycle_count
200005a4 g     O .data	00000016 usb_string_serial_number_default
00003160  w    F .text.itcm	00000004 usb_serial_class::flush()
00003158  w    F .text.itcm	00000004 usb_serial_class::read()
00002960 g     F .text.itcm	0000002e usb_prepare_transfer
00001614 g     F .text.itcm	00000018 unused_interrupt_vector
20000b20 g     O .bss	00000004 usb_timer0_callback
60001504 g     F .text.progmem	0000011c tempmon_init
00003178  w    F .text.itcm	0000000c serialEvent()
00001c3c g     F .text.itcm	00000074 usb_serial_flush_input
00001cd0 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
200004ec  w    O .data	00000028 vtable for usb_serial_class
20000620 g     O .bss	000001e0 robot
20000b60 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20000b88 g     O .bss	00000004 MillisTimer::listActive
00001d60 g     F .text.itcm	000000a0 usb_serial_flush_output
00000184 g     F .text.itcm	000001ac project_namespace::Robot::Robot()
20000c00 g     O .bss	000002c0 _VectorsRam
20000b30 g     O .bss	00000001 usb_high_speed
00003304 g     F .text.itcm	0000009a memset
00002eb8 g     F .text.itcm	00000010 main
00000808 g     F .text.itcm	00000380 BNO080::receivePacket()
000006b8 g     F .text.itcm	00000150 BNO080::getData(unsigned short)
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
00002e60 g     F .text.itcm	00000058 usb_init_serialnumber
60001828 g       .text.progmem	00000000 __init_array_end
20000064  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00002f68 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
0000144c g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60001734 g     O .text.progmem	00000004 string0
00001cfc g     F .text.itcm	00000018 usb_serial_write
00001630  w    F .text.itcm	00000002 startup_late_hook
00000e98 g     F .text.itcm	00000100 BNO080::begin(unsigned char, TwoWire&, unsigned char)
0000315c  w    F .text.itcm	00000004 usb_serial_class::available()
20002000 g     O .bss	00000280 endpoint_queue_head
60001704  w    O .text.progmem	00000016 usb_string_product_name
00000180 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
000029e0 g     F .text.itcm	000000cc delay
000033b0 g     F .fini	00000000 _fini
00000fb8 g     F .text.itcm	00000030 TwoWire::write(unsigned char)
60001020 g     O .text.progmem	0000000c BootData
00003224 g     F .text.itcm	00000016 Print::print(long)
00002aac g     F .text.itcm	00000024 Panic_Temp_isr
20000518 g     O .data	00000070 Wire
60001820 g       .text.progmem	00000000 __preinit_array_end
20000804 g     O .bss	00000130 imu_hardware
00000f9c  w    F .text.itcm	00000018 TwoWire::peek()
00000fb4  w    F .text.itcm	00000002 TwoWire::flush()
0000007c g     F .text.itcm	00000058 setup
20000480 g     O .data	0000006c usb_descriptor_list
20078000 g       .bss.dma	00000000 _estack
00001d14 g     F .text.itcm	0000004c usb_serial_write_buffer_free
000019f8 g     F .text.itcm	00000108 usb_serial_configure
00000fe8 g     F .text.itcm	0000003a TwoWire::write(unsigned char const*, unsigned int)
200005d0 g       .data	00000000 _edata
00003164  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000323c g     F .text.itcm	0000004e ultoa
00000648 g     F .text.itcm	00000070 BNO080::waitForSPI()
00001024 g     F .text.itcm	000000d4 TwoWire::begin()
00000e10 g     F .text.itcm	0000004c BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)
00002fe8 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
00003154  w    F .text.itcm	00000004 usb_serial_class::peek()
60001820 g       .text.progmem	00000000 __init_array_start
20000588 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
60001704 g     O .text.progmem	00000016 usb_string_product_name_default
00000180 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
6000129c g     F .text.progmem	000000c0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001820 g       .text.progmem	00000000 __preinit_array_start
000029b8 g     F .text.itcm	00000024 usb_receive
000051b0 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
0000302c g     F .text.itcm	00000004 pendablesrvreq_isr
00000f98  w    F .text.itcm	00000004 Print::availableForWrite()
00000184 g     F .text.itcm	000001ac project_namespace::Robot::Robot()
00001b00 g     F .text.itcm	000000ec usb_serial_read
000031a4 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000028f8 g     F .text.itcm	00000068 usb_config_tx
200005a4  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.Q......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001810 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001808 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013c0 <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	600017e8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600017e0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	600017d8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	600017f8 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaab
60001210:	.word	0x00200007
60001214:	.word	0x20078000
60001218:	.word	0x00000000
6000121c:	.word	0x60001830
60001220:	.word	0x000033b0
60001224:	.word	0x20000000
60001228:	.word	0x60004be4
6000122c:	.word	0x200005d0
60001230:	.word	0x200005d0
60001234:	.word	0x200022c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x20000bfc
60001240:	.word	0x00001615
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x0000302d
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x00003131
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20000b5c
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20000b64
60001290:	.word	0x20000c00
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	dsb	sy
	asm("isb");
60001300:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	ldr.w	r3, [r2, #-136]
60001308:	orr.w	r3, r3, #196608	; 0x30000
6000130c:	str.w	r3, [r2, #-136]
60001310:	pop	{r4, r5, r6, r7, pc}
60001312:	nop
60001314:	.word	0xe000ed9c
60001318:	.word	0xe000eda0
6000131c:	.word	0xe000ed94
60001320:	.word	0x03080025
60001324:	.word	0x00200011
60001328:	.word	0x07020021
6000132c:	.word	0x20000012
60001330:	.word	0x13080025
60001334:	.word	0x20200013
60001338:	.word	0x130b0027
6000133c:	.word	0x40000014
60001340:	.word	0x13100033
60001344:	.word	0x60000015
60001348:	.word	0x070b002f
6000134c:	.word	0x70000016
60001350:	.word	0x070b0035
60001354:	.word	0x70000017
60001358:	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	tst.w	r3, #2
6000137c:	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	tst.w	r3, #2
6000138a:	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	tst.w	r3, #8192	; 0x2000
60001390:	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	str	r5, [r2, #20]
			continue;
60001394:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	tst.w	r3, #4096	; 0x1000
6000139a:	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	str	r6, [r2, #20]
			continue;
6000139e:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	cmp	r3, #0
600013a2:	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	tst.w	r3, #65536	; 0x10000
600013a8:	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	str	r1, [r2, #24]
			continue;
600013ac:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	lsls	r3, r3, #25
600013b0:	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	str	r7, [r2, #20]
			continue;
600013b4:	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	pop	{r4, r5, r6, r7}
600013b8:	bx	lr
600013ba:	nop
600013bc:	.word	0x400d8000

600013c0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c0:	ldr	r3, [pc, #192]	; (60001484 <usb_init+0xc4>)
600013c2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013c6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013cc:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013d0:	bl	60001800 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d4:	ldr	r1, [pc, #176]	; (60001488 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013d6:	ldr	r0, [pc, #180]	; (6000148c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013dc:	ldr	r4, [pc, #176]	; (60001490 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013de:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013e2:	ldr	r3, [pc, #176]	; (60001494 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013e4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013e8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013ec:	ldr	r2, [r4, #0]
600013ee:	ands	r3, r2
600013f0:	cbnz	r3, 600013fa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013f2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013f6:	lsls	r2, r3, #30
600013f8:	beq.n	60001430 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013fa:	ldr	r3, [pc, #144]	; (6000148c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013fc:	mov.w	r1, #2147483648	; 0x80000000
60001400:	ldr	r2, [pc, #140]	; (60001490 <usb_init+0xd0>)
60001402:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001404:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001406:	ldr.w	r1, [r3, #320]	; 0x140
6000140a:	orr.w	r1, r1, #2
6000140e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001412:	ldr.w	r3, [r2, #320]	; 0x140
60001416:	lsls	r3, r3, #30
60001418:	bmi.n	60001412 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000141a:	mov.w	r0, #131072	; 0x20000
6000141e:	ldr	r1, [pc, #120]	; (60001498 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001420:	ldr	r3, [pc, #108]	; (60001490 <usb_init+0xd0>)
60001422:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001426:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001428:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000142a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000142c:	bl	600017f0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001430:	ldr	r5, [pc, #104]	; (6000149c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001432:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001434:	ldr	r3, [pc, #88]	; (60001490 <usb_init+0xd0>)
60001436:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000143a:	ldr	r4, [pc, #80]	; (6000148c <usb_init+0xcc>)
6000143c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000143e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001440:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001442:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001444:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001446:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000144a:	mov.w	r2, #640	; 0x280
6000144e:	bl	60001818 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001452:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001456:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000145a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000145e:	ldr	r2, [pc, #64]	; (600014a0 <usb_init+0xe0>)
60001460:	ldr	r1, [pc, #64]	; (600014a4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001462:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001464:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001466:	str.w	r5, [r4, #344]	; 0x158
6000146a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000146e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001472:	ldr	r2, [pc, #52]	; (600014a8 <usb_init+0xe8>)
60001474:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001478:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000147a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000147c:	str.w	r3, [r4, #320]	; 0x140
60001480:	pop	{r4, r5, r6, pc}
60001482:	nop
60001484:	.word	0x400d8000
60001488:	.word	0x400fc000
6000148c:	.word	0x402e0000
60001490:	.word	0x400d9000
60001494:	.word	0x001e1c00
60001498:	.word	0xe000e28c
6000149c:	.word	0x20002000
600014a0:	.word	0x20000c00
600014a4:	.word	0x000021fd
600014a8:	.word	0xe000e10c

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x20000b68

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x20000b74
60001600:	.word	0x20000b78
60001604:	.word	0x20000b70
60001608:	.word	0x20000c00
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x00002aad
60001618:	.word	0xe000e108
6000161c:	.word	0x20000b6c

60001620 <TwoWire::i2c4_hardware>:
60001620:	...@............
60001630:	...@............
	...
60001648:	...........@....
60001658:	................
60001668:	....

6000166c <TwoWire::i2c3_hardware>:
6000166c:	p..@............
6000167c:	...@....$.......
6000168c:	...@............
6000169c:	...@....%.......
600016ac:	...@........

600016b8 <TwoWire::i2c1_hardware>:
600016b8:	p..@............
600016c8:	...@............
	...
600016e0:	...........@....
600016f0:	................
60001700:	....

60001704 <usb_string_product_name_default>:
60001704:	..U.S.B. .S.e.r.
60001714:	i.a.l...

6000171c <usb_string_manufacturer_name_default>:
6000171c:	..T.e.e.n.s.y.d.
6000172c:	u.i.n.o.

60001734 <string0>:
60001734:	....

60001738 <usb_config_descriptor_12>:
60001738:	..C.....2.......
60001748:	...$....$....$..
60001758:	.$..............
60001768:	.........@......
60001778:	@...

6000177c <usb_config_descriptor_480>:
6000177c:	..C.....2.......
6000178c:	...$....$....$..
6000179c:	.$..............
600017ac:	................
600017bc:	....

600017c0 <qualifier_descriptor>:
600017c0:	.......@....

600017cc <_init>:
600017cc:	push	{r3, r4, r5, r6, r7, lr}
600017ce:	nop
600017d0:	pop	{r3, r4, r5, r6, r7}
600017d2:	pop	{r3}
600017d4:	mov	lr, r3
600017d6:	bx	lr

600017d8 <____libc_init_array_veneer>:
600017d8:	ldr.w	pc, [pc]	; 600017dc <____libc_init_array_veneer+0x4>
600017dc:	.word	0x000032b5

600017e0 <__startup_late_hook_veneer>:
600017e0:	ldr.w	pc, [pc]	; 600017e4 <__startup_late_hook_veneer+0x4>
600017e4:	.word	0x00001631

600017e8 <__pwm_init_veneer>:
600017e8:	ldr.w	pc, [pc]	; 600017ec <__pwm_init_veneer+0x4>
600017ec:	.word	0x00002ad1

600017f0 <__delay_veneer>:
600017f0:	ldr.w	pc, [pc]	; 600017f4 <__delay_veneer+0x4>
600017f4:	.word	0x000029e1

600017f8 <__main_veneer>:
600017f8:	ldr.w	pc, [pc]	; 600017fc <__main_veneer+0x4>
600017fc:	.word	0x00002eb9

60001800 <__usb_init_serialnumber_veneer>:
60001800:	ldr.w	pc, [pc]	; 60001804 <__usb_init_serialnumber_veneer+0x4>
60001804:	.word	0x00002e61

60001808 <__startup_early_hook_veneer>:
60001808:	ldr.w	pc, [pc]	; 6000180c <__startup_early_hook_veneer+0x4>
6000180c:	.word	0x0000162d

60001810 <__set_arm_clock_veneer>:
60001810:	ldr.w	pc, [pc]	; 60001814 <__set_arm_clock_veneer+0x4>
60001814:	.word	0x00001e01

60001818 <__memset_veneer>:
60001818:	ldr.w	pc, [pc]	; 6000181c <__memset_veneer+0x4>
6000181c:	.word	0x00003305

60001820 <__init_array_start>:
60001820:	.word	0x00000045
60001824:	.word	0x000000dd

60001828 <__init_array_end>:
60001828:	.word	0xffffffff
6000182c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	.word	0x200005d0
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	adds	r3, #180	; 0xb4
	...

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	.short	0xbf00
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsls	r4, r2, #23
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	adds	r3, #180	; 0xb4
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	.word	0x200005d0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	movs	r0, r0
	...

0000007c <setup>:
/////////////////////
// Test classes

/////////////////////

void setup() {
      7c:	.word	0x2101b510
    pinMode(led_pin, OUTPUT);
      80:	movs	r0, #13
    Serial.begin(600000000);
    
    // IMU SETUP
    Wire.begin();
    if (imu.imu_hardware.begin() == false)
      82:	ldr	r4, [pc, #60]	; (c0 <setup+0x44>)
// Test classes

/////////////////////

void setup() {
    pinMode(led_pin, OUTPUT);
      84:	bl	2de0 <pinMode>
    Serial.begin(600000000);
    
    // IMU SETUP
    Wire.begin();
      88:	.word	0xf000480e
      8c:	vmlal.u8	q11, d11, d16
    if (imu.imu_hardware.begin() == false)
      90:	.word	0x4a0c23ff
      94:	movs	r1, #75	; 0x4b
      96:	.short	0xf000
      98:	mrc2	9, 7, fp, cr15, cr8, {1}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      9c:	.word	0x480a2160
      a0:	bl	1cfc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      a4:	.word	0xf0034809
      a8:	str??.w	lr, [sp, <undefined>]
    {
        Serial.println("BNO080 not detected at default I2C address. Check your jumpers and the hookup guide. Freezing...");
        while (1);
    }
    Wire.setClock(400000); // Increase I2C data rate to 400kHz
      ac:	ldr	r1, [pc, #32]	; (d0 <setup+0x54>)
      ae:	.short	0x4805
      b0:	bl	144c <TwoWire::setClock(unsigned long)>
    // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    imu.imu_hardware.enableGyro(50); // Send data update every 50ms
      b4:	.word	0x21326820
}
      b8:	ldmia.w	sp!, {r4, lr}
        while (1);
    }
    Wire.setClock(400000); // Increase I2C data rate to 400kHz
    // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    imu.imu_hardware.enableGyro(50); // Send data update every 50ms
      bc:	b.w	e5c <BNO080::enableGyro(unsigned short)>
      c0:	.word	0x20000800
      c4:	lsls	r0, r3, #20
      c6:	.short	0x2000
      c8:	movs	r0, r0
      ca:	movs	r0, #0
      cc:	.word	0x200005bc
      d0:	subs	r0, r0, r2
      d2:	.short	0x0006

000000d4 <loop>:
}

void loop() {
    delay(1000);
      d4:	mov.w	r0, #1000	; 0x3e8
      d8:	.word	0xbc82f002

000000dc <_GLOBAL__sub_I_matrix_printer>:
      dc:	push	{r3, r4, r5, r6, r7, lr}

const int led_pin = 13;

MatrixPrinter matrix_printer;

Robot robot;
      de:	ldr	r0, [pc, #84]	; (134 <_GLOBAL__sub_I_matrix_printer+0x58>)
#define CALIBRATE_STOP 5

#define MAX_PACKET_SIZE 128 //Packets can be up to 32k but we don't have that much RAM.
#define MAX_METADATA_SIZE 9 //This is in words. There can be many but we mostly only care about the first 9 (Qs, range, etc)

class BNO080
      e0:	.word	0xf000240e
      e4:	str.w	r4, [pc, #-2068]	; fffff8d4 <_flexram_bank_config+0x55554e29>
Command command;
      e8:	.word	0xf922f000
      ec:	ldr	r3, [pc, #76]	; (13c <_GLOBAL__sub_I_matrix_printer+0x60>)
      ee:	.short	0x2200
      f0:	movs	r1, #12
      f2:	.short	0x2009
      f4:	movs	r7, #4
      f6:	.short	0x260a
      f8:	strh.w	r4, [r3, #288]	; 0x120
      fc:	.word	0xf8a32408
     100:	asrs	r2, r4, #4
     102:	strh.w	r0, [r3, #296]	; 0x128

BNO080 imu_hardware;
IMU imu(imu_hardware);
     106:	.short	0x4619
     108:	strh.w	r7, [r3, #298]	; 0x12a
     10c:	.word	0x612cf8a3
     110:	strh.w	r2, [r3, #136]	; 0x88
     114:	.word	0x2084f8c3
     118:	strb.w	r2, [r3, #138]	; 0x8a
     11c:	.word	0x20bcf883
     120:	strh.w	r4, [r3, #292]	; 0x124
     124:	.word	0x4126f8a3
     128:	ldr	r0, [pc, #20]	; (140 <_GLOBAL__sub_I_matrix_printer+0x64>)
    imu.imu_hardware.enableGyro(50); // Send data update every 50ms
}

void loop() {
    delay(1000);
     12a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

Robot robot;
Command command;

BNO080 imu_hardware;
IMU imu(imu_hardware);
     12e:	.short	0xf000
     130:			; <UNDEFINED> instruction: 0xb827
     132:	.short	0xbf00
     134:	lsls	r0, r4, #24
     136:	.short	0x2000
     138:	lsls	r4, r5, #23
     13a:	.short	0x2000
     13c:	lsrs	r4, r0, #32
     13e:	.short	0x2000
     140:	lsrs	r0, r0, #32
     142:	movs	r0, #0

00000144 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>:
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;
     144:	push	{r4, r5}
     146:	mov	r3, r0
     148:	vstr	s0, [r0]
     14c:	vstr	s1, [r0, #4]
     150:	.word	0xed802400
     154:	subs	r2, r0, r0
     156:	.short	0xf100

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     158:	lsls	r0, r3, #20
     15a:	.short	0xedc0

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     15c:	subs	r3, r0, r0
     15e:	.short	0xed80
    }
    EIGEN_DEVICE_FUNC
    explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
      : m_data(internal::constructor_without_unaligned_array_assert()) {}
    EIGEN_DEVICE_FUNC 
    DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
     160:	cmp	r2, #4
     162:	.short	0xedc0
    joint_angles(1) = theta_2;
     164:	cmp	r2, #5
     166:	.short	0xc907

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     168:	stmia.w	r5, {r0, r1, r2}
    joint_angles(1) = theta_2;
     16c:	str	r4, [r3, #36]	; 0x24
     16e:	mov	r0, r3
     170:	str	r4, [r3, #40]	; 0x28
     172:	str	r4, [r3, #44]	; 0x2c

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     174:	str	r4, [r3, #48]	; 0x30
     176:	.short	0x635c
    joint_angles(1) = theta_2;
    joint_angles(2) = theta_3;
     178:	str	r4, [r3, #56]	; 0x38
     17a:	pop	{r4, r5}
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     17c:	bx	lr
     17e:	nop

00000180 <project_namespace::IMU::IMU(BNO080&)>:
#include "IMU.h"

using namespace project_namespace;

IMU::IMU(BNO080& imu_hardware_init):
    imu_hardware(imu_hardware_init)
     180:	.word	0x47706001

00000184 <project_namespace::Robot::Robot()>:
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     184:	movs	r3, #0
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
     186:	.short	0x2200
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     188:	push	{r4, r5, lr}
     18a:	.short	0x4604
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     18c:	movs	r5, #1
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     18e:	.short	0x30f0
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     190:	vpush	{d8-d12}
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     194:	.word	0x8a5ded9f
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     198:	sub	sp, #20
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     19a:	.short	0xed9f
     19c:	rev16	r5, r3
     19e:	.short	0xed9f
     1a0:	ldmia	r2, {r0, r2, r3, r4, r6}
     1a2:	.short	0xa901
     1a4:	vldr	s21, [pc, #368]	; 318 <project_namespace::Robot::Robot()+0x194>
     1a8:	vmov.f32	s5, s16
     1ac:	vldr	s23, [pc, #364]	; 31c <project_namespace::Robot::Robot()+0x198>
     1b0:	.word	0x2a48eeb0
     1b4:	vldr	s20, [pc, #360]	; 320 <project_namespace::Robot::Robot()+0x19c>
     1b8:	.word	0x1a4beef0
     1bc:	vldr	s18, [pc, #356]	; 324 <project_namespace::Robot::Robot()+0x1a0>
     1c0:	vmov.f32	s2, s24
     1c4:	str	r3, [r4, #0]
     1c6:	vmov.f32	s1, s21
     1ca:	str	r3, [r4, #4]
     1cc:	vmov.f32	s0, s23
     1d0:	str	r3, [r4, #8]
     1d2:	str	r3, [r4, #12]
     1d4:	str	r3, [r4, #16]
     1d6:	str	r3, [r4, #20]
     1d8:	str	r3, [r4, #32]
     1da:	str	r3, [r4, #36]	; 0x24
     1dc:	str	r3, [r4, #40]	; 0x28
     1de:	str	r3, [r4, #44]	; 0x2c
     1e0:	str	r3, [r4, #48]	; 0x30
     1e2:	str	r3, [r4, #52]	; 0x34
     1e4:	str	r3, [r4, #56]	; 0x38
     1e6:	str	r3, [r4, #60]	; 0x3c
     1e8:	str	r3, [r4, #64]	; 0x40
     1ea:	str	r3, [r4, #68]	; 0x44
     1ec:	str	r3, [r4, #72]	; 0x48
     1ee:	str	r3, [r4, #76]	; 0x4c
     1f0:	str	r3, [r4, #80]	; 0x50
     1f2:	str	r3, [r4, #84]	; 0x54
     1f4:	str	r3, [r4, #88]	; 0x58
     1f6:	str	r3, [r4, #92]	; 0x5c
     1f8:	str	r3, [r4, #96]	; 0x60
     1fa:	str	r3, [r4, #100]	; 0x64
     1fc:	str	r3, [r4, #104]	; 0x68
     1fe:	str	r3, [r4, #108]	; 0x6c
     200:	str	r3, [r4, #112]	; 0x70
     202:	str	r3, [r4, #116]	; 0x74
     204:	str	r3, [r4, #120]	; 0x78
     206:	str	r3, [r4, #124]	; 0x7c
     208:	vldr	s19, [pc, #284]	; 328 <project_namespace::Robot::Robot()+0x1a4>
     20c:	str.w	r3, [r4, #128]	; 0x80
     210:	vldr	s17, [pc, #280]	; 32c <project_namespace::Robot::Robot()+0x1a8>
     214:	str.w	r2, [r4, #224]	; 0xe0
     218:	str.w	r2, [r4, #228]	; 0xe4
     21c:	str.w	r2, [r4, #232]	; 0xe8
     220:	str.w	r2, [r4, #236]	; 0xec
     224:	str.w	r3, [r4, #132]	; 0x84
     228:	str.w	r3, [r4, #136]	; 0x88
     22c:	str.w	r3, [r4, #140]	; 0x8c
     230:	str.w	r3, [r4, #144]	; 0x90
     234:	str.w	r3, [r4, #148]	; 0x94
     238:	str.w	r3, [r4, #152]	; 0x98
     23c:	str.w	r3, [r4, #156]	; 0x9c
     240:	str.w	r3, [r4, #160]	; 0xa0
     244:	str.w	r3, [r4, #164]	; 0xa4
     248:	str.w	r3, [r4, #168]	; 0xa8
     24c:	str.w	r3, [r4, #172]	; 0xac
     250:	str.w	r3, [r4, #176]	; 0xb0
     254:	str.w	r3, [r4, #180]	; 0xb4
     258:	str.w	r3, [r4, #184]	; 0xb8
     25c:	str.w	r3, [r4, #188]	; 0xbc
     260:	str.w	r3, [r4, #192]	; 0xc0
     264:	str.w	r3, [r4, #196]	; 0xc4
     268:	str.w	r3, [r4, #200]	; 0xc8
     26c:	str.w	r3, [r4, #204]	; 0xcc
     270:	str.w	r3, [r4, #208]	; 0xd0
     274:	str.w	r3, [r4, #212]	; 0xd4
     278:	str.w	r3, [r4, #216]	; 0xd8
     27c:	str.w	r3, [r4, #220]	; 0xdc
     280:	str	r5, [sp, #4]
      m_storage.data()[1] = y;
     282:	str	r5, [sp, #8]
      m_storage.data()[2] = z;
     284:	str	r5, [sp, #12]
     286:	bl	144 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     28a:	vmov.f32	s2, s24
     28e:	add	r1, sp, #4
     290:	vmov.f32	s0, s23
     294:	add.w	r0, r4, #300	; 0x12c
     298:	vmov.f32	s5, s16
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     29c:	str	r5, [sp, #4]
     29e:	vmov.f32	s4, s16
      m_storage.data()[1] = y;
     2a2:	str	r5, [sp, #8]
     2a4:	vmov.f32	s3, s20
      m_storage.data()[2] = z;
     2a8:	str	r5, [sp, #12]
     2aa:	vmov.f32	s1, s18
     2ae:	bl	144 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     2b2:	vmov.f32	s3, s22
     2b6:	vmov.f32	s1, s21
     2ba:	add	r1, sp, #4
     2bc:	vmov.f32	s5, s16
     2c0:	add.w	r0, r4, #360	; 0x168
     2c4:	vmov.f32	s4, s16
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     2c8:	str	r5, [sp, #4]
     2ca:	vmov.f32	s2, s19
      m_storage.data()[1] = y;
     2ce:	str	r5, [sp, #8]
     2d0:	vmov.f32	s0, s17
      m_storage.data()[2] = z;
     2d4:	str	r5, [sp, #12]
     2d6:	bl	144 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     2da:	add	r1, sp, #4
     2dc:	vmov.f32	s3, s20
     2e0:	add.w	r0, r4, #420	; 0x1a4
     2e4:	vmov.f32	s2, s19
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     2e8:	str	r5, [sp, #4]
     2ea:	vmov.f32	s1, s18
      m_storage.data()[1] = y;
     2ee:	str	r5, [sp, #8]
     2f0:	vmov.f32	s0, s17
      m_storage.data()[2] = z;
     2f4:	str	r5, [sp, #12]
     2f6:	vmov.f32	s5, s16
     2fa:	vmov.f32	s4, s16
     2fe:	bl	144 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
{}
     302:	mov	r0, r4
     304:	add	sp, #20
     306:	vpop	{d8-d12}
     30a:	pop	{r4, r5, pc}
     30c:	.word	0x3e23d70a
     310:	.word	0x3d916873
     314:	.word	0x3d1ba5e3
     318:	.word	0x3d23d70a
     31c:	.word	0x3e1eb852
     320:	.word	0xbd916873
     324:	.word	0xbd23d70a
     328:	.word	0xbd1ba5e3
     32c:	.word	0xbe1eb852

00000330 <project_namespace::Command::Command()>:

    body_velocity(Eigen::Vector3f::Zero()),
    gait_yaw_speed(0.0),
    swing_height(0.1),

    mode(Mode::REST)
     330:	movs	r2, #0
     332:	ldr	r1, [pc, #36]	; (358 <project_namespace::Command::Command()+0x28>)

using namespace project_namespace;


// CONSTRUCTORS
Command::Command():
     334:	push	{r4, r5, r6}

    body_velocity(Eigen::Vector3f::Zero()),
    gait_yaw_speed(0.0),
    swing_height(0.1),

    mode(Mode::REST)
     336:	ldr	r6, [pc, #36]	; (35c <project_namespace::Command::Command()+0x2c>)
     338:	movs	r4, #0
     33a:	ldr	r5, [pc, #36]	; (360 <project_namespace::Command::Command()+0x30>)
     33c:	str	r6, [r0, #4]
     33e:	str	r5, [r0, #40]	; 0x28
     340:	str	r4, [r0, #44]	; 0x2c
     342:	str	r1, [r0, #0]
     344:	str	r1, [r0, #8]
     346:	str	r2, [r0, #12]
     348:	str	r2, [r0, #16]
     34a:	str	r2, [r0, #20]
     34c:	str	r2, [r0, #24]
     34e:	str	r2, [r0, #28]
     350:	str	r2, [r0, #32]
     352:	str	r2, [r0, #36]	; 0x24
{}
     354:	pop	{r4, r5, r6}
     356:	bx	lr
     358:	.word	0x3e4ccccd
     35c:	.word	0x3db851ec
     360:	.word	0x3dcccccd

00000364 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     364:	ldrb.w	r2, [r0, #59]	; 0x3b
     368:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
     36c:	subs	r0, r2, r0
     36e:	bx	lr

00000370 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     370:	ldrb.w	r3, [r0, #58]	; 0x3a
     374:	ldrb.w	r2, [r0, #59]	; 0x3b
     378:	cmp	r2, r3
     37a:	bls.n	388 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     37c:	adds	r2, r3, #1
     37e:	add	r3, r0
     380:	strb.w	r2, [r0, #58]	; 0x3a
     384:	ldrb	r0, [r3, #26]
     386:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     388:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
     38c:	bx	lr
     38e:	nop

00000390 <BNO080::printHeader() [clone .part.7]>:
		_debugPort->println();
	}
}

//Pretty prints the contents of the current shtp header (only)
void BNO080::printHeader(void)
     390:	push	{r4, r5, r6, lr}
     392:	mov	r4, r0
{
	if (_printDebug == true)
	{
		//Print the four byte header
		_debugPort->print(F("Header:"));
     394:	ldr.w	r0, [r0, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     398:	movs	r2, #7
     39a:	ldr	r1, [pc, #80]	; (3ec <BNO080::printHeader() [clone .part.7]+0x5c>)
     39c:	ldr	r3, [r0, #0]
     39e:	subs	r5, r4, #1
     3a0:	adds	r6, r4, #3
     3a2:	ldr	r3, [r3, #4]
     3a4:	blx	r3
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
     3a6:	ldr.w	r0, [r4, #184]	; 0xb8
     3aa:	movs	r2, #1
     3ac:	ldr	r1, [pc, #64]	; (3f0 <BNO080::printHeader() [clone .part.7]+0x60>)
     3ae:	ldr	r3, [r0, #0]
     3b0:	ldr	r3, [r3, #4]
     3b2:	blx	r3
			if (shtpHeader[x] < 0x10)
     3b4:	ldrb.w	r1, [r5, #1]!
     3b8:	cmp	r1, #15
     3ba:	bls.n	3d8 <BNO080::printHeader() [clone .part.7]+0x48>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     3bc:	movs	r3, #0
     3be:	movs	r2, #16
     3c0:	ldr.w	r0, [r4, #184]	; 0xb8
     3c4:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	if (_printDebug == true)
	{
		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
     3c8:	cmp	r5, r6
     3ca:	bne.n	3a6 <BNO080::printHeader() [clone .part.7]+0x16>
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}
		_debugPort->println();
     3cc:	ldr.w	r0, [r4, #184]	; 0xb8
	}
}
     3d0:	ldmia.w	sp!, {r4, r5, r6, lr}
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}
		_debugPort->println();
     3d4:	b.w	3184 <Print::println()>
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
     3d8:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     3dc:	movs	r2, #1
     3de:	ldr	r1, [pc, #20]	; (3f4 <BNO080::printHeader() [clone .part.7]+0x64>)
     3e0:	ldr	r3, [r0, #0]
     3e2:	ldr	r3, [r3, #4]
     3e4:	blx	r3
     3e6:	ldrb	r1, [r5, #0]
     3e8:	b.n	3bc <BNO080::printHeader() [clone .part.7]+0x2c>
     3ea:	nop
     3ec:	.word	0x20000074
     3f0:	.word	0x2000007c
     3f4:	.word	0x20000080

000003f8 <BNO080::printPacket() [clone .part.6]>:

	return (true);
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
     3f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
     3fc:	ldrb	r3, [r0, #0]

	return (true);
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
     3fe:	mov	r5, r0
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
     400:	ldrb	r7, [r0, #1]
     402:	subs	r6, r0, #1

		//Print the four byte header
		_debugPort->print(F("Header:"));
     404:	ldr.w	r0, [r0, #184]	; 0xb8
     408:	movs	r2, #7
//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
     40a:	orr.w	r7, r3, r7, lsl #8
     40e:	ldr	r1, [pc, #408]	; (5a8 <BNO080::printPacket() [clone .part.6]+0x1b0>)
     410:	ldr	r3, [r0, #0]
     412:	adds	r4, r5, #3
     414:	sxth	r7, r7
     416:	ldr	r3, [r3, #4]
     418:	uxth.w	r8, r7
     41c:	blx	r3

		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
     41e:	ldr.w	r0, [r5, #184]	; 0xb8
     422:	movs	r2, #1
     424:	ldr	r1, [pc, #388]	; (5ac <BNO080::printPacket() [clone .part.6]+0x1b4>)
     426:	ldr	r3, [r0, #0]
     428:	ldr	r3, [r3, #4]
     42a:	blx	r3
			if (shtpHeader[x] < 0x10)
     42c:	ldrb.w	r1, [r6, #1]!
     430:	cmp	r1, #15
     432:	bls.n	4a0 <BNO080::printPacket() [clone .part.6]+0xa8>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     434:	movs	r3, #0
     436:	movs	r2, #16
     438:	ldr.w	r0, [r5, #184]	; 0xb8
     43c:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];

		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
     440:	cmp	r4, r6
     442:	bne.n	41e <BNO080::printPacket() [clone .part.6]+0x26>
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}

		uint8_t printLength = packetLength - 4;
     444:	subs	r6, r7, #4
		if (printLength > 40)
			printLength = 40; //Artificial limit. We don't want the phone book.

		_debugPort->print(F(" Body:"));
     446:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     44a:	movs	r2, #6
     44c:	ldr	r1, [pc, #352]	; (5b0 <BNO080::printPacket() [clone .part.6]+0x1b8>)
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}

		uint8_t printLength = packetLength - 4;
     44e:	uxtb	r6, r6
     450:	ldr	r3, [r0, #0]
     452:	cmp	r6, #40	; 0x28
     454:	ldr	r3, [r3, #4]
     456:	it	cs
     458:	movcs	r6, #40	; 0x28
     45a:	blx	r3
		if (printLength > 40)
			printLength = 40; //Artificial limit. We don't want the phone book.

		_debugPort->print(F(" Body:"));
		for (uint8_t x = 0; x < printLength; x++)
     45c:	cbz	r6, 4b2 <BNO080::printPacket() [clone .part.6]+0xba>
     45e:	subs	r6, #1
     460:	uxtb	r6, r6
     462:	adds	r6, #4
     464:	add	r6, r5
     466:	b.n	478 <BNO080::printPacket() [clone .part.6]+0x80>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     468:	movs	r3, #0
     46a:	movs	r2, #16
     46c:	ldr.w	r0, [r5, #184]	; 0xb8
     470:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     474:	cmp	r6, r4
     476:	beq.n	4b2 <BNO080::printPacket() [clone .part.6]+0xba>
		{
			_debugPort->print(F(" "));
     478:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     47c:	movs	r2, #1
     47e:	ldr	r1, [pc, #300]	; (5ac <BNO080::printPacket() [clone .part.6]+0x1b4>)
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #4]
     484:	blx	r3
			if (shtpData[x] < 0x10)
     486:	ldrb.w	r1, [r4, #1]!
     48a:	cmp	r1, #15
     48c:	bhi.n	468 <BNO080::printPacket() [clone .part.6]+0x70>
				_debugPort->print(F("0"));
     48e:	ldr.w	r0, [r5, #184]	; 0xb8
     492:	movs	r2, #1
     494:	ldr	r1, [pc, #284]	; (5b4 <BNO080::printPacket() [clone .part.6]+0x1bc>)
     496:	ldr	r3, [r0, #0]
     498:	ldr	r3, [r3, #4]
     49a:	blx	r3
     49c:	ldrb	r1, [r4, #0]
     49e:	b.n	468 <BNO080::printPacket() [clone .part.6]+0x70>
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
     4a0:	ldr.w	r0, [r5, #184]	; 0xb8
     4a4:	movs	r2, #1
     4a6:	ldr	r1, [pc, #268]	; (5b4 <BNO080::printPacket() [clone .part.6]+0x1bc>)
     4a8:	ldr	r3, [r0, #0]
     4aa:	ldr	r3, [r3, #4]
     4ac:	blx	r3
     4ae:	ldrb	r1, [r6, #0]
     4b0:	b.n	434 <BNO080::printPacket() [clone .part.6]+0x3c>
			if (shtpData[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpData[x], HEX);
		}

		if (packetLength & 1 << 15)
     4b2:	cmp	r7, #0
     4b4:	blt.n	536 <BNO080::printPacket() [clone .part.6]+0x13e>
		{
			_debugPort->println(F(" [Continued packet] "));
			packetLength &= ~(1 << 15);
		}

		_debugPort->print(F(" Length:"));
     4b6:	ldr.w	r0, [r5, #184]	; 0xb8
     4ba:	movs	r2, #8
     4bc:	ldr	r1, [pc, #248]	; (5b8 <BNO080::printPacket() [clone .part.6]+0x1c0>)
     4be:	ldr	r3, [r0, #0]
     4c0:	ldr	r3, [r3, #4]
     4c2:	blx	r3
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     4c4:	mov	r1, r8
     4c6:	ldr.w	r0, [r5, #184]	; 0xb8
     4ca:	bl	3224 <Print::print(long)>
		_debugPort->print(packetLength);

		_debugPort->print(F(" Channel:"));
     4ce:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     4d2:	ldr	r1, [pc, #232]	; (5bc <BNO080::printPacket() [clone .part.6]+0x1c4>)
     4d4:	movs	r2, #9
     4d6:	ldr	r3, [r0, #0]
     4d8:	ldr	r3, [r3, #4]
     4da:	blx	r3
		if (shtpHeader[2] == 0)
     4dc:	ldrb	r1, [r5, #2]
     4de:	cbz	r1, 50c <BNO080::printPacket() [clone .part.6]+0x114>
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
     4e0:	cmp	r1, #1
     4e2:	beq.n	56c <BNO080::printPacket() [clone .part.6]+0x174>
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
     4e4:	cmp	r1, #2
     4e6:	beq.n	586 <BNO080::printPacket() [clone .part.6]+0x18e>
			_debugPort->print(F("Control"));
		else if (shtpHeader[2] == 3)
     4e8:	cmp	r1, #3
     4ea:	beq.n	526 <BNO080::printPacket() [clone .part.6]+0x12e>
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
     4ec:	cmp	r1, #4
     4ee:	beq.n	596 <BNO080::printPacket() [clone .part.6]+0x19e>
			_debugPort->print(F("Wake-report"));
		else if (shtpHeader[2] == 5)
     4f0:	cmp	r1, #5
     4f2:	beq.n	552 <BNO080::printPacket() [clone .part.6]+0x15a>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     4f4:	movs	r3, #0
     4f6:	movs	r2, #10
     4f8:	ldr.w	r0, [r5, #184]	; 0xb8
     4fc:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     500:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
     504:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     508:	b.w	3184 <Print::println()>
		_debugPort->print(F(" Length:"));
		_debugPort->print(packetLength);

		_debugPort->print(F(" Channel:"));
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
     50c:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     510:	movs	r2, #7
     512:	ldr	r1, [pc, #172]	; (5c0 <BNO080::printPacket() [clone .part.6]+0x1c8>)
     514:	ldr	r3, [r0, #0]
     516:	ldr	r3, [r3, #4]
     518:	blx	r3
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     51a:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
     51e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     522:	b.w	3184 <Print::println()>
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
			_debugPort->print(F("Control"));
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
     526:	ldr.w	r0, [r5, #184]	; 0xb8
     52a:	movs	r2, #13
     52c:	ldr	r1, [pc, #148]	; (5c4 <BNO080::printPacket() [clone .part.6]+0x1cc>)
     52e:	ldr	r3, [r0, #0]
     530:	ldr	r3, [r3, #4]
     532:	blx	r3
     534:	b.n	500 <BNO080::printPacket() [clone .part.6]+0x108>
			_debugPort->print(shtpData[x], HEX);
		}

		if (packetLength & 1 << 15)
		{
			_debugPort->println(F(" [Continued packet] "));
     536:	ldr.w	r4, [r5, #184]	; 0xb8
     53a:	movs	r2, #20
     53c:	ldr	r1, [pc, #136]	; (5c8 <BNO080::printPacket() [clone .part.6]+0x1d0>)
			packetLength &= ~(1 << 15);
     53e:	ubfx	r8, r8, #0, #15
     542:	ldr	r3, [r4, #0]
     544:	mov	r0, r4
     546:	ldr	r3, [r3, #4]
     548:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     54a:	mov	r0, r4
     54c:	bl	3184 <Print::println()>
     550:	b.n	4b6 <BNO080::printPacket() [clone .part.6]+0xbe>
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
			_debugPort->print(F("Wake-report"));
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
     552:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     556:	movs	r2, #11
     558:	ldr	r1, [pc, #112]	; (5cc <BNO080::printPacket() [clone .part.6]+0x1d4>)
     55a:	ldr	r3, [r0, #0]
     55c:	ldr	r3, [r3, #4]
     55e:	blx	r3
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     560:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
     564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     568:	b.w	3184 <Print::println()>

		_debugPort->print(F(" Channel:"));
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
     56c:	ldr.w	r0, [r5, #184]	; 0xb8
     570:	movs	r2, #10
     572:	ldr	r1, [pc, #92]	; (5d0 <BNO080::printPacket() [clone .part.6]+0x1d8>)
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #4]
     578:	blx	r3
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     57a:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
     57e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
     582:	b.w	3184 <Print::println()>
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
			_debugPort->print(F("Control"));
     586:	ldr.w	r0, [r5, #184]	; 0xb8
     58a:	movs	r2, #7
     58c:	ldr	r1, [pc, #68]	; (5d4 <BNO080::printPacket() [clone .part.6]+0x1dc>)
     58e:	ldr	r3, [r0, #0]
     590:	ldr	r3, [r3, #4]
     592:	blx	r3
     594:	b.n	500 <BNO080::printPacket() [clone .part.6]+0x108>
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
			_debugPort->print(F("Wake-report"));
     596:	ldr.w	r0, [r5, #184]	; 0xb8
     59a:	movs	r2, #11
     59c:	ldr	r1, [pc, #56]	; (5d8 <BNO080::printPacket() [clone .part.6]+0x1e0>)
     59e:	ldr	r3, [r0, #0]
     5a0:	ldr	r3, [r3, #4]
     5a2:	blx	r3
     5a4:	b.n	500 <BNO080::printPacket() [clone .part.6]+0x108>
     5a6:	nop
     5a8:	.word	0x20000074
     5ac:	.word	0x2000007c
     5b0:	.word	0x20000084
     5b4:	.word	0x20000080
     5b8:	.word	0x200000a4
     5bc:	.word	0x200000b0
     5c0:	.word	0x200000bc
     5c4:	.word	0x200000d8
     5c8:	.word	0x2000008c
     5cc:	.word	0x200000f4
     5d0:	.word	0x200000c4
     5d4:	.word	0x200000d0
     5d8:	.word	0x200000e8

000005dc <BNO080::waitForI2C()>:
}

//Wait a certain time for incoming I2C bytes before giving up
//Returns false if failed
boolean BNO080::waitForI2C()
{
     5dc:	push	{r4, r5, r6, lr}
     5de:	mov	r5, r0
     5e0:	movs	r4, #100	; 0x64
     5e2:	ldr	r6, [pc, #92]	; (640 <BNO080::waitForI2C()+0x64>)
     5e4:	b.n	602 <BNO080::waitForI2C()+0x26>
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     5e6:	ldrb.w	r3, [r0, #59]	; 0x3b
     5ea:	ldrb.w	r2, [r0, #58]	; 0x3a
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
			return (true);
		delay(1);
     5ee:	movs	r0, #1
     5f0:	subs	r3, r3, r2
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
     5f2:	cmp	r3, #0
     5f4:	bgt.n	618 <BNO080::waitForI2C()+0x3c>
			return (true);
		delay(1);
     5f6:	bl	29e0 <delay>
     5fa:	subs	r3, r4, #1

//Wait a certain time for incoming I2C bytes before giving up
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
     5fc:	ands.w	r4, r3, #255	; 0xff
     600:	beq.n	61c <BNO080::waitForI2C()+0x40>
	{
		if (_i2cPort->available() > 0)
     602:	ldr.w	r0, [r5, #176]	; 0xb0
     606:	ldr	r3, [r0, #0]
     608:	ldr	r3, [r3, #16]
     60a:	cmp	r3, r6
     60c:	beq.n	5e6 <BNO080::waitForI2C()+0xa>
     60e:	blx	r3
     610:	mov	r3, r0
			return (true);
		delay(1);
     612:	movs	r0, #1
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
     614:	cmp	r3, #0
     616:	ble.n	5f6 <BNO080::waitForI2C()+0x1a>
			return (true);
     618:	movs	r0, #1
	}

	if (_printDebug == true)
		_debugPort->println(F("I2C timeout"));
	return (false);
}
     61a:	pop	{r4, r5, r6, pc}
		if (_i2cPort->available() > 0)
			return (true);
		delay(1);
	}

	if (_printDebug == true)
     61c:	ldrb.w	r0, [r5, #188]	; 0xbc
     620:	cmp	r0, #0
     622:	beq.n	61a <BNO080::waitForI2C()+0x3e>
		_debugPort->println(F("I2C timeout"));
     624:	ldr.w	r5, [r5, #184]	; 0xb8
     628:	movs	r2, #11
     62a:	ldr	r1, [pc, #24]	; (644 <BNO080::waitForI2C()+0x68>)
     62c:	ldr	r3, [r5, #0]
     62e:	mov	r0, r5
     630:	ldr	r3, [r3, #4]
     632:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     634:	mov	r0, r5
     636:	bl	3184 <Print::println()>
     63a:	mov	r0, r4
     63c:	pop	{r4, r5, r6, pc}
     63e:	nop
     640:	.word	0x00000365
     644:	.word	0x2000011c

00000648 <BNO080::waitForSPI()>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
boolean BNO080::waitForSPI()
{
     648:	push	{r4, r5, r6, lr}
     64a:	mov	r5, r0
     64c:	movs	r4, #125	; 0x7d
     64e:	b.n	65e <BNO080::waitForSPI()+0x16>
	{
		if (digitalRead(_int) == LOW)
			return (true);
		if (_printDebug == true)
			_debugPort->println(F("SPI Wait"));
		delay(1);
     650:	movs	r0, #1
     652:	bl	29e0 <delay>
     656:	subs	r3, r4, #1
//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
boolean BNO080::waitForSPI()
{
	for (uint8_t counter = 0; counter < 125; counter++) //Don't got more than 255
     658:	ands.w	r4, r3, #255	; 0xff
     65c:	beq.n	68c <BNO080::waitForSPI()+0x44>
	{
		if (digitalRead(_int) == LOW)
     65e:	ldrb.w	r0, [r5, #202]	; 0xca
     662:	bl	2dd4 <digitalRead>
     666:	cbz	r0, 688 <BNO080::waitForSPI()+0x40>
			return (true);
		if (_printDebug == true)
     668:	ldrb.w	r3, [r5, #188]	; 0xbc
     66c:	cmp	r3, #0
     66e:	beq.n	650 <BNO080::waitForSPI()+0x8>
			_debugPort->println(F("SPI Wait"));
     670:	ldr.w	r6, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     674:	movs	r2, #8
     676:	ldr	r1, [pc, #56]	; (6b0 <BNO080::waitForSPI()+0x68>)
     678:	ldr	r3, [r6, #0]
     67a:	mov	r0, r6
     67c:	ldr	r3, [r3, #4]
     67e:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     680:	mov	r0, r6
     682:	bl	3184 <Print::println()>
     686:	b.n	650 <BNO080::waitForSPI()+0x8>
boolean BNO080::waitForSPI()
{
	for (uint8_t counter = 0; counter < 125; counter++) //Don't got more than 255
	{
		if (digitalRead(_int) == LOW)
			return (true);
     688:	movs	r0, #1
	}

	if (_printDebug == true)
		_debugPort->println(F("SPI INT timeout"));
	return (false);
}
     68a:	pop	{r4, r5, r6, pc}
		if (_printDebug == true)
			_debugPort->println(F("SPI Wait"));
		delay(1);
	}

	if (_printDebug == true)
     68c:	ldrb.w	r0, [r5, #188]	; 0xbc
     690:	cmp	r0, #0
     692:	beq.n	68a <BNO080::waitForSPI()+0x42>
		_debugPort->println(F("SPI INT timeout"));
     694:	ldr.w	r5, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     698:	movs	r2, #15
     69a:	ldr	r1, [pc, #24]	; (6b4 <BNO080::waitForSPI()+0x6c>)
     69c:	ldr	r3, [r5, #0]
     69e:	mov	r0, r5
     6a0:	ldr	r3, [r3, #4]
     6a2:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     6a4:	mov	r0, r5
     6a6:	bl	3184 <Print::println()>
     6aa:	mov	r0, r4
     6ac:	pop	{r4, r5, r6, pc}
     6ae:	nop
     6b0:	.word	0x20000128
     6b4:	.word	0x20000134

000006b8 <BNO080::getData(unsigned short)>:
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
     6b8:	cmp	r1, #0
     6ba:	beq.w	7fe <BNO080::getData(unsigned short)+0x146>

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
boolean BNO080::getData(uint16_t bytesRemaining)
{
     6be:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6c2:	mov	r6, r0
     6c4:	mov	r9, r1
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
     6c6:	movs	r5, #0
     6c8:	ldr	r7, [pc, #312]	; (804 <BNO080::getData(unsigned short)+0x14c>)
     6ca:	cmp.w	r9, #28
     6ce:	mov	r8, r9
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
     6d0:	mov.w	r3, #1
     6d4:	ldrb.w	r1, [r6, #180]	; 0xb4
     6d8:	it	cs
     6da:	movcs.w	r8, #28
     6de:	ldr.w	r0, [r6, #176]	; 0xb0
     6e2:	add.w	r2, r8, #4
     6e6:	uxtb	r2, r2
     6e8:	bl	132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		uint16_t numberOfBytesToRead = bytesRemaining;
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);

		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
		if (waitForI2C() == false)
     6ec:	mov	r0, r6
     6ee:	bl	5dc <BNO080::waitForI2C()>
     6f2:	cmp	r0, #0
     6f4:	beq.w	7fa <BNO080::getData(unsigned short)+0x142>
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
     6f8:	ldr.w	r0, [r6, #176]	; 0xb0
     6fc:	ldr	r3, [r0, #0]
     6fe:	ldr	r3, [r3, #20]
     700:	cmp	r3, r7
     702:	bne.n	7ee <BNO080::getData(unsigned short)+0x136>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     704:	ldrb.w	r2, [r0, #58]	; 0x3a
     708:	ldrb.w	r1, [r0, #59]	; 0x3b
     70c:	cmp	r1, r2
     70e:	bls.n	71e <BNO080::getData(unsigned short)+0x66>
		return rxBuffer[rxBufferIndex++];
     710:	adds	r2, #1
     712:	strb.w	r2, [r0, #58]	; 0x3a
     716:	ldr.w	r0, [r6, #176]	; 0xb0
     71a:	ldr	r3, [r0, #0]
     71c:	ldr	r3, [r3, #20]
     71e:	cmp	r3, r7
     720:	bne.n	7e2 <BNO080::getData(unsigned short)+0x12a>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     722:	ldrb.w	r2, [r0, #58]	; 0x3a
     726:	ldrb.w	r1, [r0, #59]	; 0x3b
     72a:	cmp	r1, r2
     72c:	bls.n	7d2 <BNO080::getData(unsigned short)+0x11a>
		return rxBuffer[rxBufferIndex++];
     72e:	adds	r2, #1
     730:	strb.w	r2, [r0, #58]	; 0x3a
     734:	ldr.w	r0, [r6, #176]	; 0xb0
     738:	ldr	r3, [r0, #0]
     73a:	ldr	r3, [r3, #20]
     73c:	cmp	r3, r7
     73e:	bne.n	7de <BNO080::getData(unsigned short)+0x126>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     740:	ldrb.w	r2, [r0, #58]	; 0x3a
     744:	ldrb.w	r1, [r0, #59]	; 0x3b
     748:	cmp	r1, r2
     74a:	bls.n	7d2 <BNO080::getData(unsigned short)+0x11a>
		return rxBuffer[rxBufferIndex++];
     74c:	adds	r2, #1
     74e:	strb.w	r2, [r0, #58]	; 0x3a
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
     752:	ldr.w	r0, [r6, #176]	; 0xb0
     756:	ldr	r3, [r0, #0]
     758:	ldr	r3, [r3, #20]
     75a:	cmp	r3, r7
     75c:	bne.n	7d6 <BNO080::getData(unsigned short)+0x11e>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     75e:	ldrb.w	r3, [r0, #58]	; 0x3a
     762:	ldrb.w	r2, [r0, #59]	; 0x3b
     766:	cmp	r2, r3
     768:	bls.n	774 <BNO080::getData(unsigned short)+0xbc>
		return rxBuffer[rxBufferIndex++];
     76a:	adds	r3, #1
     76c:	strb.w	r3, [r0, #58]	; 0x3a
     770:	ldr.w	r0, [r6, #176]	; 0xb0
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
     774:	movs	r4, #0
     776:	b.n	7ac <BNO080::getData(unsigned short)+0xf4>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     778:	ldrb.w	r3, [r0, #58]	; 0x3a
     77c:	ldrb.w	r2, [r0, #59]	; 0x3b
		return rxBuffer[rxBufferIndex++];
     780:	add.w	lr, r3, #1
     784:	adds	r1, r0, r3
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     786:	cmp	r2, r3
     788:	bls.n	7ce <BNO080::getData(unsigned short)+0x116>
		return rxBuffer[rxBufferIndex++];
     78a:	strb.w	lr, [r0, #58]	; 0x3a
     78e:	ldrb	r0, [r1, #26]
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
     790:	adds	r4, #1
		{
			uint8_t incoming = _i2cPort->read();
			if (dataSpot < MAX_PACKET_SIZE)
     792:	cmp	r5, #127	; 0x7f
			{
				shtpData[dataSpot++] = incoming; //Store data into the shtpData array
     794:	add.w	r2, r5, #1
     798:	add.w	r3, r6, r5
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
     79c:	uxtb	r4, r4
		{
			uint8_t incoming = _i2cPort->read();
			if (dataSpot < MAX_PACKET_SIZE)
     79e:	bhi.n	7a4 <BNO080::getData(unsigned short)+0xec>
			{
				shtpData[dataSpot++] = incoming; //Store data into the shtpData array
     7a0:	uxth	r5, r2
     7a2:	strb	r0, [r3, #4]
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
     7a4:	cmp	r4, r8
     7a6:	bcs.n	7ba <BNO080::getData(unsigned short)+0x102>
     7a8:	ldr.w	r0, [r6, #176]	; 0xb0
		{
			uint8_t incoming = _i2cPort->read();
     7ac:	ldr	r3, [r0, #0]
     7ae:	ldr	r3, [r3, #20]
     7b0:	cmp	r3, r7
     7b2:	beq.n	778 <BNO080::getData(unsigned short)+0xc0>
     7b4:	blx	r3
     7b6:	uxtb	r0, r0
     7b8:	b.n	790 <BNO080::getData(unsigned short)+0xd8>
			{
				//Do nothing with the data
			}
		}

		bytesRemaining -= numberOfBytesToRead;
     7ba:	rsb	r9, r8, r9
     7be:	uxth.w	r9, r9
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
     7c2:	cmp.w	r9, #0
     7c6:	bne.n	6ca <BNO080::getData(unsigned short)+0x12>
			}
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
     7c8:	movs	r0, #1
     7ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     7ce:	movs	r0, #255	; 0xff
     7d0:	b.n	790 <BNO080::getData(unsigned short)+0xd8>
     7d2:	cmp	r3, r7
     7d4:	beq.n	774 <BNO080::getData(unsigned short)+0xbc>

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
     7d6:	blx	r3
     7d8:	ldr.w	r0, [r6, #176]	; 0xb0
     7dc:	b.n	774 <BNO080::getData(unsigned short)+0xbc>
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
     7de:	blx	r3
     7e0:	b.n	752 <BNO080::getData(unsigned short)+0x9a>
		if (waitForI2C() == false)
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
     7e2:	blx	r3
     7e4:	ldr.w	r0, [r6, #176]	; 0xb0
     7e8:	ldr	r3, [r0, #0]
     7ea:	ldr	r3, [r3, #20]
     7ec:	b.n	73c <BNO080::getData(unsigned short)+0x84>
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
		if (waitForI2C() == false)
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
     7ee:	blx	r3
     7f0:	ldr.w	r0, [r6, #176]	; 0xb0
     7f4:	ldr	r3, [r0, #0]
     7f6:	ldr	r3, [r3, #20]
     7f8:	b.n	71e <BNO080::getData(unsigned short)+0x66>
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
}
     7fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
     7fe:	movs	r0, #1
}
     800:	bx	lr
     802:	nop
     804:	.word	0x00000371

00000808 <BNO080::receivePacket()>:
}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
boolean BNO080::receivePacket(void)
{
     808:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     80c:	mov	r4, r0
	if (_i2cPort == NULL) //Do SPI
     80e:	ldr.w	r0, [r0, #176]	; 0xb0
     812:	cmp	r0, #0
     814:	beq.n	90a <BNO080::receivePacket()+0x102>
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
     816:	movs	r3, #1
     818:	movs	r2, #4
     81a:	ldrb.w	r1, [r4, #180]	; 0xb4
     81e:	bl	132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		printPacket();
	}
	else //Do I2C
	{
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
     822:	mov	r0, r4
     824:	bl	5dc <BNO080::waitForI2C()>
     828:	mov	r5, r0
     82a:	cbnz	r0, 834 <BNO080::receivePacket()+0x2c>
boolean BNO080::receivePacket(void)
{
	if (_i2cPort == NULL) //Do SPI
	{
		if (digitalRead(_int) == HIGH)
			return (false); //Data is not available
     82c:	movs	r5, #0

		getData(dataLength);
	}

	return (true); //We're done!
}
     82e:	mov	r0, r5
     830:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
     834:	ldr.w	r3, [r4, #176]	; 0xb0
     838:	ldr	r7, [pc, #592]	; (a8c <BNO080::receivePacket()+0x284>)
     83a:	ldr	r2, [r3, #0]
     83c:	ldr	r2, [r2, #20]
     83e:	cmp	r2, r7
     840:	bne.w	a4a <BNO080::receivePacket()+0x242>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     844:	ldrb.w	r1, [r3, #58]	; 0x3a
     848:	ldrb.w	r0, [r3, #59]	; 0x3b
     84c:	cmp	r0, r1
     84e:	bls.w	b42 <BNO080::receivePacket()+0x33a>
		return rxBuffer[rxBufferIndex++];
     852:	adds	r2, r1, #1
     854:	add	r1, r3
     856:	strb.w	r2, [r3, #58]	; 0x3a
     85a:	ldr.w	r3, [r4, #176]	; 0xb0
     85e:	ldrb.w	r9, [r1, #26]
     862:	ldr	r2, [r3, #0]
     864:	sxth.w	sl, r9
     868:	ldr	r2, [r2, #20]
     86a:	cmp	r2, r7
     86c:	bne.w	a60 <BNO080::receivePacket()+0x258>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     870:	ldrb.w	r0, [r3, #58]	; 0x3a
     874:	ldrb.w	r1, [r3, #59]	; 0x3b
     878:	cmp	r1, r0
     87a:	bls.w	b4a <BNO080::receivePacket()+0x342>
		return rxBuffer[rxBufferIndex++];
     87e:	adds	r2, r0, #1
     880:	add	r0, r3
     882:	strb.w	r2, [r3, #58]	; 0x3a
     886:	ldrb.w	fp, [r0, #26]
     88a:	ldr.w	r3, [r4, #176]	; 0xb0
     88e:	mov.w	r1, fp, lsl #8
     892:	ldr	r2, [r3, #0]
     894:	sxth	r6, r1
     896:	ldr	r2, [r2, #20]
     898:	cmp	r2, r7
     89a:	bne.w	a82 <BNO080::receivePacket()+0x27a>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     89e:	ldrb.w	r1, [r3, #58]	; 0x3a
     8a2:	ldrb.w	r0, [r3, #59]	; 0x3b
     8a6:	cmp	r0, r1
     8a8:	bls.w	b52 <BNO080::receivePacket()+0x34a>
		return rxBuffer[rxBufferIndex++];
     8ac:	adds	r2, r1, #1
     8ae:	add	r1, r3
     8b0:	strb.w	r2, [r3, #58]	; 0x3a
     8b4:	ldrb	r0, [r1, #26]
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
     8b6:	ldr.w	r3, [r4, #176]	; 0xb0
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
     8ba:	uxtb.w	r8, r0
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
     8be:	ldr	r2, [r3, #0]
     8c0:	ldr	r2, [r2, #20]
     8c2:	cmp	r2, r7
     8c4:	bne.w	a7a <BNO080::receivePacket()+0x272>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     8c8:	ldrb.w	r2, [r3, #58]	; 0x3a
     8cc:	ldrb.w	r1, [r3, #59]	; 0x3b
     8d0:	cmp	r1, r2
     8d2:	bls.w	b5c <BNO080::receivePacket()+0x354>
		return rxBuffer[rxBufferIndex++];
     8d6:	adds	r1, r2, #1
     8d8:	add	r2, r3
     8da:	strb.w	r1, [r3, #58]	; 0x3a
     8de:	ldrb	r0, [r2, #26]
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
     8e0:	orr.w	r1, r6, sl
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not

		//Store the header info.
		shtpHeader[0] = packetLSB;
     8e4:	strb.w	r9, [r4]
		shtpHeader[1] = packetMSB;
     8e8:	strb.w	fp, [r4, #1]
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
     8ec:	ubfx	r1, r1, #0, #15
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not

		//Store the header info.
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
     8f0:	strb.w	r8, [r4, #2]
		shtpHeader[3] = sequenceNumber;
     8f4:	strb	r0, [r4, #3]
		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
     8f6:	cmp	r1, #0
     8f8:	beq.n	82c <BNO080::receivePacket()+0x24>
			//Packet is empty
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count

		getData(dataLength);
     8fa:	subs	r1, #4
     8fc:	mov	r0, r4
     8fe:	uxth	r1, r1
     900:	bl	6b8 <BNO080::getData(unsigned short)>
	}

	return (true); //We're done!
}
     904:	mov	r0, r5
     906:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
//Read the contents of the incoming packet into the shtpData array
boolean BNO080::receivePacket(void)
{
	if (_i2cPort == NULL) //Do SPI
	{
		if (digitalRead(_int) == HIGH)
     90a:	ldrb.w	r0, [r4, #202]	; 0xca
     90e:	bl	2dd4 <digitalRead>
     912:	cmp	r0, #1
     914:	beq.n	82c <BNO080::receivePacket()+0x24>

		//Old way: if (waitForSPI() == false) return (false); //Something went wrong

		//Get first four bytes to find out how much data we need to read

		_spiPort->beginTransaction(SPISettings(_spiPortSpeed, MSBFIRST, SPI_MODE3));
     916:	ldr.w	r3, [r4, #192]	; 0xc0
     91a:	ldr.w	r0, [r4, #196]	; 0xc4

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     91e:	ldrb	r2, [r3, #19]
     920:	cmp	r2, #0
     922:	beq.n	982 <BNO080::receivePacket()+0x17a>
			__disable_irq();
     924:	cpsid	i
			if (interruptMasksUsed & 0x01) {
     926:	ldrb	r2, [r3, #19]
     928:	lsls	r7, r2, #31
     92a:	bpl.n	93a <BNO080::receivePacket()+0x132>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     92c:	ldr	r1, [pc, #352]	; (a90 <BNO080::receivePacket()+0x288>)
     92e:	ldr	r2, [r3, #20]
     930:	ldr	r5, [r1, #0]
     932:	ands	r2, r5
     934:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     936:	str	r2, [r1, #0]
     938:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
     93a:	lsls	r6, r2, #30
     93c:	bpl.n	94c <BNO080::receivePacket()+0x144>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     93e:	ldr	r1, [pc, #340]	; (a94 <BNO080::receivePacket()+0x28c>)
     940:	ldr	r2, [r3, #24]
     942:	ldr	r5, [r1, #0]
     944:	ands	r2, r5
     946:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     948:	str	r2, [r1, #0]
     94a:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
     94c:	lsls	r5, r2, #29
     94e:	bpl.n	95e <BNO080::receivePacket()+0x156>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     950:	ldr	r1, [pc, #324]	; (a98 <BNO080::receivePacket()+0x290>)
     952:	ldr	r2, [r3, #28]
     954:	ldr	r5, [r1, #0]
     956:	ands	r2, r5
     958:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     95a:	str	r2, [r1, #0]
     95c:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
     95e:	lsls	r1, r2, #28
     960:	bpl.n	970 <BNO080::receivePacket()+0x168>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     962:	ldr	r1, [pc, #312]	; (a9c <BNO080::receivePacket()+0x294>)
     964:	ldr	r2, [r3, #32]
     966:	ldr	r5, [r1, #0]
     968:	ands	r2, r5
     96a:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     96c:	str	r2, [r1, #0]
     96e:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
     970:	lsls	r7, r2, #27
     972:	bpl.n	980 <BNO080::receivePacket()+0x178>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     974:	ldr	r1, [pc, #296]	; (aa0 <BNO080::receivePacket()+0x298>)
     976:	ldr	r2, [r3, #36]	; 0x24
     978:	ldr	r5, [r1, #0]
     97a:	ands	r2, r5
     97c:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     97e:	str	r2, [r1, #0]
			}
			__enable_irq();
     980:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     982:	ldr	r2, [r3, #8]
     984:	cmp	r0, r2
     986:	beq.w	b36 <BNO080::receivePacket()+0x32e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     98a:	ldr	r2, [pc, #280]	; (aa4 <BNO080::receivePacket()+0x29c>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     98c:	str	r0, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
     98e:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     990:	ldr	r1, [pc, #276]	; (aa8 <BNO080::receivePacket()+0x2a0>)
     992:	ubfx	r5, r2, #4, #2
     996:	ubfx	r2, r2, #26, #3
     99a:	ldr.w	r1, [r1, r5, lsl #2]
     99e:	adds	r2, #1
     9a0:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     9a4:	cmp	r0, #0
     9a6:	beq.n	a88 <BNO080::receivePacket()+0x280>
     9a8:	udiv	r2, r1, r0

			if (d && clkhz/d > _clock) d++;
     9ac:	cbz	r2, 9c4 <BNO080::receivePacket()+0x1bc>
     9ae:	udiv	r1, r1, r2
     9b2:	cmp	r0, r1
     9b4:	it	cc
     9b6:	addcc	r2, #1
			if (d > 257) d= 257;  // max div
     9b8:	cmp.w	r2, #258	; 0x102
     9bc:	bcc.w	b60 <BNO080::receivePacket()+0x358>
     9c0:	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
     9c4:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     9c6:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     9c8:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     9ca:	movs	r1, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     9cc:	ldr	r6, [pc, #220]	; (aac <BNO080::receivePacket()+0x2a4>)
		port().CR = LPSPI_CR_MEN;
     9ce:	movs	r0, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     9d0:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     9d2:	str	r1, [r3, #36]	; 0x24
		digitalWrite(_cs, LOW);
     9d4:	mov	r1, r5
		port().CCR = _ccr;
     9d6:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     9d8:	str	r6, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     9da:	str	r0, [r3, #16]
     9dc:	ldrb.w	r0, [r4, #200]	; 0xc8
     9e0:	bl	2dc8 <digitalWrite>

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _spiPort->transfer(0);
     9e4:	ldr.w	r6, [r4, #192]	; 0xc0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     9e8:	ldr	r3, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     9ea:	str	r5, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     9ec:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     9ee:	tst.w	r2, #2031616	; 0x1f0000
     9f2:	beq.n	9ec <BNO080::receivePacket()+0x1e4>
     9f4:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     9f6:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     9f8:	uxtb	r1, r1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     9fa:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     9fc:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     9fe:	tst.w	r2, #2031616	; 0x1f0000
     a02:	beq.n	9fc <BNO080::receivePacket()+0x1f4>
     a04:	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a06:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     a08:	uxtb	r7, r5
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a0a:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a0c:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a0e:	tst.w	r2, #2031616	; 0x1f0000
     a12:	beq.n	a0c <BNO080::receivePacket()+0x204>
     a14:	ldr	r0, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a16:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     a18:	uxtb	r0, r0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a1a:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a1c:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a1e:	tst.w	r2, #2031616	; 0x1f0000
     a22:	beq.n	a1c <BNO080::receivePacket()+0x214>
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
     a24:	lsls	r5, r5, #8
     a26:	ldr	r3, [r3, #116]	; 0x74
		uint8_t packetMSB = _spiPort->transfer(0);
		uint8_t channelNumber = _spiPort->transfer(0);
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
     a28:	strb	r1, [r4, #0]
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
     a2a:	and.w	r5, r5, #32512	; 0x7f00

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;
     a2e:	strb	r3, [r4, #3]
		uint8_t channelNumber = _spiPort->transfer(0);
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
     a30:	strb	r7, [r4, #1]
		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
     a32:	orrs	r5, r1
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
     a34:	strb	r0, [r4, #2]
		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
     a36:	bne.n	ab0 <BNO080::receivePacket()+0x2a8>
}

//Pretty prints the contents of the current shtp header (only)
void BNO080::printHeader(void)
{
	if (_printDebug == true)
     a38:	ldrb.w	r3, [r4, #188]	; 0xbc
     a3c:	cmp	r3, #0
     a3e:	beq.w	82c <BNO080::receivePacket()+0x24>
     a42:	mov	r0, r4
     a44:	bl	390 <BNO080::printHeader() [clone .part.7]>
     a48:	b.n	82e <BNO080::receivePacket()+0x26>
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
     a4a:	mov	r0, r3
     a4c:	blx	r2
     a4e:	ldr.w	r3, [r4, #176]	; 0xb0
     a52:	uxtb.w	r9, r0
     a56:	ldr	r2, [r3, #0]
     a58:	sxth.w	sl, r9
     a5c:	ldr	r2, [r2, #20]
     a5e:	b.n	86a <BNO080::receivePacket()+0x62>
		uint8_t packetMSB = _i2cPort->read();
     a60:	mov	r0, r3
     a62:	blx	r2
     a64:	ldr.w	r3, [r4, #176]	; 0xb0
     a68:	lsls	r1, r0, #8
     a6a:	ldr	r2, [r3, #0]
     a6c:	uxtb.w	fp, r0
     a70:	sxth	r6, r1
     a72:	ldr	r2, [r2, #20]
     a74:	b.n	898 <BNO080::receivePacket()+0x90>
		uint8_t channelNumber = _i2cPort->read();
     a76:	mov.w	r8, #255	; 0xff
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
     a7a:	mov	r0, r3
     a7c:	blx	r2
     a7e:	uxtb	r0, r0
     a80:	b.n	8e0 <BNO080::receivePacket()+0xd8>
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
     a82:	mov	r0, r3
     a84:	blx	r2
     a86:	b.n	8b6 <BNO080::receivePacket()+0xae>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     a88:	mov	r2, r1
     a8a:	b.n	9ac <BNO080::receivePacket()+0x1a4>
     a8c:	.word	0x00000371
     a90:	.word	0xe000e180
     a94:	.word	0xe000e184
     a98:	.word	0xe000e188
     a9c:	.word	0xe000e18c
     aa0:	.word	0xe000e190
     aa4:	.word	0x400fc000
     aa8:	.word	0x20000064
     aac:	.word	0xc0000007
		{
			//Packet is empty
			printHeader();
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count
     ab0:	subs	r5, #4
     ab2:	uxth	r0, r5

		//Read incoming data into the shtpData array
		for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
     ab4:	cbz	r0, ae0 <BNO080::receivePacket()+0x2d8>
     ab6:	adds	r5, r4, #4
     ab8:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     aba:	movs	r7, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     abc:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     abe:	str	r7, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     ac0:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     ac2:	tst.w	r3, #2031616	; 0x1f0000
     ac6:	beq.n	ac0 <BNO080::receivePacket()+0x2b8>
		{
			uint8_t incoming = _spiPort->transfer(0xFF);
			if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
     ac8:	cmp	r1, #127	; 0x7f
     aca:	ldr	r3, [r2, #116]	; 0x74
     acc:	add.w	r1, r1, #1
     ad0:	add.w	r5, r5, #1
				shtpData[dataSpot] = incoming; //Store data into the shtpData array
     ad4:	it	ls
     ad6:	strbls.w	r3, [r5, #-1]
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count

		//Read incoming data into the shtpData array
		for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
     ada:	uxth	r3, r1
     adc:	cmp	r0, r3
     ade:	bhi.n	abc <BNO080::receivePacket()+0x2b4>
			uint8_t incoming = _spiPort->transfer(0xFF);
			if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
				shtpData[dataSpot] = incoming; //Store data into the shtpData array
		}

		digitalWrite(_cs, HIGH); //Release BNO080
     ae0:	movs	r1, #1
     ae2:	ldrb.w	r0, [r4, #200]	; 0xc8
     ae6:	bl	2dc8 <digitalWrite>

		_spiPort->endTransaction();
     aea:	ldr.w	r2, [r4, #192]	; 0xc0
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     aee:	ldrb	r3, [r2, #19]
     af0:	cbz	r3, b2c <BNO080::receivePacket()+0x324>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     af2:	lsls	r6, r3, #31
     af4:	bpl.n	afe <BNO080::receivePacket()+0x2f6>
     af6:	ldr	r3, [pc, #124]	; (b74 <BNO080::receivePacket()+0x36c>)
     af8:	ldr	r1, [r2, #40]	; 0x28
     afa:	str	r1, [r3, #0]
     afc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     afe:	lsls	r5, r3, #30
     b00:	bpl.n	b0a <BNO080::receivePacket()+0x302>
     b02:	ldr	r3, [pc, #116]	; (b78 <BNO080::receivePacket()+0x370>)
     b04:	ldr	r1, [r2, #44]	; 0x2c
     b06:	str	r1, [r3, #0]
     b08:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     b0a:	lsls	r0, r3, #29
     b0c:	bpl.n	b16 <BNO080::receivePacket()+0x30e>
     b0e:	ldr	r3, [pc, #108]	; (b7c <BNO080::receivePacket()+0x374>)
     b10:	ldr	r1, [r2, #48]	; 0x30
     b12:	str	r1, [r3, #0]
     b14:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     b16:	lsls	r1, r3, #28
     b18:	bpl.n	b22 <BNO080::receivePacket()+0x31a>
     b1a:	ldr	r3, [pc, #100]	; (b80 <BNO080::receivePacket()+0x378>)
     b1c:	ldr	r1, [r2, #52]	; 0x34
     b1e:	str	r1, [r3, #0]
     b20:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     b22:	lsls	r3, r3, #27
     b24:	bpl.n	b2c <BNO080::receivePacket()+0x324>
     b26:	ldr	r2, [r2, #56]	; 0x38
     b28:	ldr	r3, [pc, #88]	; (b84 <BNO080::receivePacket()+0x37c>)
     b2a:	str	r2, [r3, #0]
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
{
	if (_printDebug == true)
     b2c:	ldrb.w	r5, [r4, #188]	; 0xbc
     b30:	cbnz	r5, b3a <BNO080::receivePacket()+0x332>
		dataLength -= 4; //Remove the header bytes from the data count

		getData(dataLength);
	}

	return (true); //We're done!
     b32:	movs	r5, #1
     b34:	b.n	82e <BNO080::receivePacket()+0x26>
     b36:	ldr	r2, [r3, #12]
     b38:	b.n	9c6 <BNO080::receivePacket()+0x1be>
     b3a:	mov	r0, r4
     b3c:	bl	3f8 <BNO080::printPacket() [clone .part.6]>
     b40:	b.n	82e <BNO080::receivePacket()+0x26>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     b42:	mov.w	sl, #255	; 0xff
     b46:	mov	r9, sl
     b48:	b.n	86a <BNO080::receivePacket()+0x62>
     b4a:	mvn.w	r6, #255	; 0xff
     b4e:	mov.w	fp, #255	; 0xff
     b52:	cmp	r2, r7
     b54:	bne.n	a76 <BNO080::receivePacket()+0x26e>
     b56:	movs	r0, #255	; 0xff
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
     b58:	mov	r8, r0
     b5a:	b.n	8e0 <BNO080::receivePacket()+0xd8>
     b5c:	movs	r0, #255	; 0xff
     b5e:	b.n	8e0 <BNO080::receivePacket()+0xd8>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     b60:	cmp	r2, #2
     b62:	bls.n	b6e <BNO080::receivePacket()+0x366>
     b64:	subs	r2, #2
     b66:	lsrs	r1, r2, #1
     b68:	orr.w	r2, r2, r1, lsl #8
     b6c:	b.n	9c4 <BNO080::receivePacket()+0x1bc>
     b6e:	movs	r2, #0
     b70:	b.n	9c4 <BNO080::receivePacket()+0x1bc>
     b72:	nop
     b74:	.word	0xe000e100
     b78:	.word	0xe000e104
     b7c:	.word	0xe000e108
     b80:	.word	0xe000e10c
     b84:	.word	0xe000e110

00000b88 <BNO080::sendPacket(unsigned char, unsigned char)>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
boolean BNO080::sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
     b88:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
     b8c:	add.w	r8, r2, #4

	if (_i2cPort == NULL) //Do SPI
     b90:	ldr.w	r3, [r0, #176]	; 0xb0

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
boolean BNO080::sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
     b94:	mov	r5, r2
     b96:	mov	r6, r0
     b98:	mov	r7, r1
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
     b9a:	uxtb.w	r8, r8

	if (_i2cPort == NULL) //Do SPI
     b9e:	cmp	r3, #0
     ba0:	beq.n	c24 <BNO080::sendPacket(unsigned char, unsigned char)+0x9c>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     ba2:	ldrb.w	r2, [r0, #180]	; 0xb4
		transmitting = 1;
     ba6:	movs	r0, #1
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     ba8:	mov	r1, r8
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     baa:	lsls	r2, r0
		transmitting = 1;
     bac:	strb.w	r0, [r3, #96]	; 0x60
		txBufferLength = 1;
     bb0:	strb.w	r0, [r3, #95]	; 0x5f
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     bb4:	strb.w	r2, [r3, #61]	; 0x3d
		//if(packetLength > I2C_BUFFER_LENGTH) return(false); //You are trying to send too much. Break into smaller packets.

		_i2cPort->beginTransmission(_deviceAddress);

		//Send the 4 byte packet header
		_i2cPort->write(packetLength & 0xFF);			  //Packet length LSB
     bb8:	ldr.w	r0, [r6, #176]	; 0xb0
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     bbc:	ldr	r3, [r0, #0]
     bbe:	ldr	r3, [r3, #0]
     bc0:	blx	r3
		_i2cPort->write(packetLength >> 8);				  //Packet length MSB
     bc2:	ldr.w	r0, [r6, #176]	; 0xb0
     bc6:	movs	r1, #0
     bc8:	ldr	r3, [r0, #0]
     bca:	ldr	r3, [r3, #0]
     bcc:	blx	r3
		_i2cPort->write(channelNumber);					  //Channel number
     bce:	ldr.w	r0, [r6, #176]	; 0xb0
     bd2:	mov	r1, r7
		_i2cPort->write(sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
     bd4:	add	r7, r6
		_i2cPort->beginTransmission(_deviceAddress);

		//Send the 4 byte packet header
		_i2cPort->write(packetLength & 0xFF);			  //Packet length LSB
		_i2cPort->write(packetLength >> 8);				  //Packet length MSB
		_i2cPort->write(channelNumber);					  //Channel number
     bd6:	ldr	r3, [r0, #0]
     bd8:	ldr	r3, [r3, #0]
     bda:	blx	r3
		_i2cPort->write(sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
     bdc:	ldr.w	r0, [r6, #176]	; 0xb0
     be0:	ldrb.w	r1, [r7, #132]	; 0x84
     be4:	ldr	r3, [r0, #0]
     be6:	adds	r2, r1, #1
     be8:	ldr	r3, [r3, #0]
     bea:	strb.w	r2, [r7, #132]	; 0x84
     bee:	blx	r3

		//Send the user's data packet
		for (uint8_t i = 0; i < dataLength; i++)
     bf0:	cbz	r5, c0e <BNO080::sendPacket(unsigned char, unsigned char)+0x86>
     bf2:	subs	r5, #1
     bf4:	adds	r4, r6, #3
     bf6:	uxtb	r5, r5
     bf8:	adds	r5, #4
     bfa:	add	r5, r6
		{
			_i2cPort->write(shtpData[i]);
     bfc:	ldr.w	r0, [r6, #176]	; 0xb0
     c00:	ldrb.w	r1, [r4, #1]!
     c04:	ldr	r3, [r0, #0]
     c06:	ldr	r3, [r3, #0]
     c08:	blx	r3
		_i2cPort->write(packetLength >> 8);				  //Packet length MSB
		_i2cPort->write(channelNumber);					  //Channel number
		_i2cPort->write(sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel

		//Send the user's data packet
		for (uint8_t i = 0; i < dataLength; i++)
     c0a:	cmp	r4, r5
     c0c:	bne.n	bfc <BNO080::sendPacket(unsigned char, unsigned char)+0x74>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     c0e:	ldr.w	r0, [r6, #176]	; 0xb0
     c12:	movs	r1, #1
     c14:	bl	124c <TwoWire::endTransmission(unsigned char)>
		{
			_i2cPort->write(shtpData[i]);
		}
		if (_i2cPort->endTransmission() != 0)
     c18:	clz	r4, r0
     c1c:	lsrs	r4, r4, #5
			return (false);
		}
	}

	return (true);
}
     c1e:	mov	r0, r4
     c20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header

	if (_i2cPort == NULL) //Do SPI
	{
		//Wait for BNO080 to indicate it is available for communication
		if (waitForSPI() == false)
     c24:	bl	648 <BNO080::waitForSPI()>
     c28:	mov	r4, r0
     c2a:	cmp	r0, #0
     c2c:	beq.n	c1e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
			return (false); //Something went wrong

		//BNO080 has max CLK of 3MHz, MSB first,
		//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
		_spiPort->beginTransaction(SPISettings(_spiPortSpeed, MSBFIRST, SPI_MODE3));
     c2e:	ldr.w	r3, [r6, #192]	; 0xc0
     c32:	ldr.w	r9, [r6, #196]	; 0xc4

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     c36:	ldrb	r2, [r3, #19]
     c38:	cmp	r2, #0
     c3a:	beq.n	c9a <BNO080::sendPacket(unsigned char, unsigned char)+0x112>
			__disable_irq();
     c3c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
     c3e:	ldrb	r2, [r3, #19]
     c40:	lsls	r0, r2, #31
     c42:	bpl.n	c52 <BNO080::sendPacket(unsigned char, unsigned char)+0xca>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     c44:	ldr	r1, [pc, #404]	; (ddc <BNO080::sendPacket(unsigned char, unsigned char)+0x254>)
     c46:	ldr	r0, [r3, #20]
     c48:	ldr	r2, [r1, #0]
     c4a:	ands	r2, r0
     c4c:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     c4e:	str	r2, [r1, #0]
     c50:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
     c52:	lsls	r1, r2, #30
     c54:	bpl.n	c64 <BNO080::sendPacket(unsigned char, unsigned char)+0xdc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     c56:	ldr	r1, [pc, #392]	; (de0 <BNO080::sendPacket(unsigned char, unsigned char)+0x258>)
     c58:	ldr	r0, [r3, #24]
     c5a:	ldr	r2, [r1, #0]
     c5c:	ands	r2, r0
     c5e:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     c60:	str	r2, [r1, #0]
     c62:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
     c64:	lsls	r0, r2, #29
     c66:	bpl.n	c76 <BNO080::sendPacket(unsigned char, unsigned char)+0xee>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     c68:	ldr	r1, [pc, #376]	; (de4 <BNO080::sendPacket(unsigned char, unsigned char)+0x25c>)
     c6a:	ldr	r0, [r3, #28]
     c6c:	ldr	r2, [r1, #0]
     c6e:	ands	r2, r0
     c70:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     c72:	str	r2, [r1, #0]
     c74:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
     c76:	lsls	r1, r2, #28
     c78:	bpl.n	c88 <BNO080::sendPacket(unsigned char, unsigned char)+0x100>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     c7a:	ldr	r1, [pc, #364]	; (de8 <BNO080::sendPacket(unsigned char, unsigned char)+0x260>)
     c7c:	ldr	r0, [r3, #32]
     c7e:	ldr	r2, [r1, #0]
     c80:	ands	r2, r0
     c82:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     c84:	str	r2, [r1, #0]
     c86:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
     c88:	lsls	r2, r2, #27
     c8a:	bpl.n	c98 <BNO080::sendPacket(unsigned char, unsigned char)+0x110>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     c8c:	ldr	r1, [pc, #348]	; (dec <BNO080::sendPacket(unsigned char, unsigned char)+0x264>)
     c8e:	ldr	r0, [r3, #36]	; 0x24
     c90:	ldr	r2, [r1, #0]
     c92:	ands	r2, r0
     c94:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     c96:	str	r2, [r1, #0]
			}
			__enable_irq();
     c98:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     c9a:	ldr	r2, [r3, #8]
     c9c:	cmp	r9, r2
     c9e:	beq.w	dc6 <BNO080::sendPacket(unsigned char, unsigned char)+0x23e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     ca2:	ldr	r2, [pc, #332]	; (df0 <BNO080::sendPacket(unsigned char, unsigned char)+0x268>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     ca4:	str.w	r9, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
     ca8:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     caa:	ldr.w	lr, [pc, #348]	; e08 <BNO080::sendPacket(unsigned char, unsigned char)+0x280>
     cae:	ubfx	r1, r2, #26, #3
     cb2:	ubfx	ip, r2, #4, #2
     cb6:	adds	r1, #1
     cb8:	ldr.w	r2, [lr, ip, lsl #2]
     cbc:	udiv	r1, r2, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     cc0:	cmp.w	r9, #0
     cc4:	beq.n	dc2 <BNO080::sendPacket(unsigned char, unsigned char)+0x23a>
     cc6:	udiv	r2, r1, r9

			if (d && clkhz/d > _clock) d++;
     cca:	cbz	r2, ce0 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
     ccc:	udiv	r1, r1, r2
     cd0:	cmp	r9, r1
     cd2:	it	cc
     cd4:	addcc	r2, #1
			if (d > 257) d= 257;  // max div
     cd6:	cmp.w	r2, #258	; 0x102
     cda:	bcc.n	dca <BNO080::sendPacket(unsigned char, unsigned char)+0x242>
     cdc:	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
     ce0:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     ce2:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     ce4:	movs	r1, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     ce6:	mov.w	ip, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     cea:	ldr.w	lr, [pc, #288]	; e0c <BNO080::sendPacket(unsigned char, unsigned char)+0x284>
		port().CR = LPSPI_CR_MEN;
     cee:	movs	r0, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     cf0:	str	r1, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     cf2:	str.w	ip, [r3, #36]	; 0x24
		port().CCR = _ccr;
     cf6:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     cf8:	str.w	lr, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     cfc:	str	r0, [r3, #16]
		digitalWrite(_cs, LOW);
     cfe:	ldrb.w	r0, [r6, #200]	; 0xc8
     d02:	bl	2dc8 <digitalWrite>

		//Send the 4 byte packet header
		_spiPort->transfer(packetLength & 0xFF);			 //Packet length LSB
     d06:	ldr.w	r1, [r6, #192]	; 0xc0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     d0a:	ldr	r3, [r1, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d0c:	str.w	r8, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d10:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d12:	tst.w	r2, #2031616	; 0x1f0000
     d16:	beq.n	d10 <BNO080::sendPacket(unsigned char, unsigned char)+0x188>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d18:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     d1a:	ldr	r0, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d1c:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d1e:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d20:	tst.w	r2, #2031616	; 0x1f0000
     d24:	beq.n	d1e <BNO080::sendPacket(unsigned char, unsigned char)+0x196>
     d26:	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d28:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d2a:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d2c:	tst.w	r2, #2031616	; 0x1f0000
     d30:	beq.n	d2a <BNO080::sendPacket(unsigned char, unsigned char)+0x1a2>
		_spiPort->transfer(packetLength >> 8);				 //Packet length MSB
		_spiPort->transfer(channelNumber);					 //Channel number
		_spiPort->transfer(sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
     d32:	add	r7, r6
     d34:	ldr	r3, [r3, #116]	; 0x74
     d36:	ldrb.w	r3, [r7, #132]	; 0x84
     d3a:	adds	r2, r3, #1
     d3c:	strb.w	r2, [r7, #132]	; 0x84
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     d40:	ldr	r1, [r1, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d42:	str	r3, [r1, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d44:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d46:	tst.w	r3, #2031616	; 0x1f0000
     d4a:	beq.n	d44 <BNO080::sendPacket(unsigned char, unsigned char)+0x1bc>
     d4c:	ldr	r3, [r1, #116]	; 0x74

		//Send the user's data packet
		for (uint8_t i = 0; i < dataLength; i++)
     d4e:	cbz	r5, d6e <BNO080::sendPacket(unsigned char, unsigned char)+0x1e6>
     d50:	subs	r0, r5, #1
     d52:	adds	r2, r6, #3
     d54:	uxtb	r0, r0
     d56:	adds	r0, #4
     d58:	add	r0, r6
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d5a:	ldrb.w	r3, [r2, #1]!
     d5e:	str	r3, [r1, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d60:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d62:	tst.w	r3, #2031616	; 0x1f0000
     d66:	beq.n	d60 <BNO080::sendPacket(unsigned char, unsigned char)+0x1d8>
     d68:	cmp	r0, r2
     d6a:	ldr	r3, [r1, #116]	; 0x74
     d6c:	bne.n	d5a <BNO080::sendPacket(unsigned char, unsigned char)+0x1d2>
		{
			_spiPort->transfer(shtpData[i]);
		}

		digitalWrite(_cs, HIGH);
     d6e:	movs	r1, #1
     d70:	ldrb.w	r0, [r6, #200]	; 0xc8
     d74:	bl	2dc8 <digitalWrite>
		_spiPort->endTransaction();
     d78:	ldr.w	r3, [r6, #192]	; 0xc0
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     d7c:	ldrb	r2, [r3, #19]
     d7e:	cmp	r2, #0
     d80:	beq.w	c1e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     d84:	lsls	r6, r2, #31
     d86:	bpl.n	d90 <BNO080::sendPacket(unsigned char, unsigned char)+0x208>
     d88:	ldr	r2, [pc, #104]	; (df4 <BNO080::sendPacket(unsigned char, unsigned char)+0x26c>)
     d8a:	ldr	r1, [r3, #40]	; 0x28
     d8c:	str	r1, [r2, #0]
     d8e:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     d90:	lsls	r5, r2, #30
     d92:	bpl.n	d9c <BNO080::sendPacket(unsigned char, unsigned char)+0x214>
     d94:	ldr	r2, [pc, #96]	; (df8 <BNO080::sendPacket(unsigned char, unsigned char)+0x270>)
     d96:	ldr	r1, [r3, #44]	; 0x2c
     d98:	str	r1, [r2, #0]
     d9a:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     d9c:	lsls	r0, r2, #29
     d9e:	bpl.n	da8 <BNO080::sendPacket(unsigned char, unsigned char)+0x220>
     da0:	ldr	r2, [pc, #88]	; (dfc <BNO080::sendPacket(unsigned char, unsigned char)+0x274>)
     da2:	ldr	r1, [r3, #48]	; 0x30
     da4:	str	r1, [r2, #0]
     da6:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     da8:	lsls	r1, r2, #28
     daa:	bpl.n	db4 <BNO080::sendPacket(unsigned char, unsigned char)+0x22c>
     dac:	ldr	r2, [pc, #80]	; (e00 <BNO080::sendPacket(unsigned char, unsigned char)+0x278>)
     dae:	ldr	r1, [r3, #52]	; 0x34
     db0:	str	r1, [r2, #0]
     db2:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     db4:	lsls	r2, r2, #27
     db6:	bpl.w	c1e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>
     dba:	ldr	r2, [r3, #56]	; 0x38
     dbc:	ldr	r3, [pc, #68]	; (e04 <BNO080::sendPacket(unsigned char, unsigned char)+0x27c>)
     dbe:	str	r2, [r3, #0]
     dc0:	b.n	c1e <BNO080::sendPacket(unsigned char, unsigned char)+0x96>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     dc2:	mov	r2, r1
     dc4:	b.n	cca <BNO080::sendPacket(unsigned char, unsigned char)+0x142>
     dc6:	ldr	r2, [r3, #12]
     dc8:	b.n	ce2 <BNO080::sendPacket(unsigned char, unsigned char)+0x15a>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     dca:	cmp	r2, #2
     dcc:	bhi.n	dd2 <BNO080::sendPacket(unsigned char, unsigned char)+0x24a>
     dce:	movs	r2, #0
     dd0:	b.n	ce0 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
     dd2:	subs	r2, #2
     dd4:	lsrs	r1, r2, #1
     dd6:	orr.w	r2, r2, r1, lsl #8
     dda:	b.n	ce0 <BNO080::sendPacket(unsigned char, unsigned char)+0x158>
     ddc:	.word	0xe000e180
     de0:	.word	0xe000e184
     de4:	.word	0xe000e188
     de8:	.word	0xe000e18c
     dec:	.word	0xe000e190
     df0:	.word	0x400fc000
     df4:	.word	0xe000e100
     df8:	.word	0xe000e104
     dfc:	.word	0xe000e108
     e00:	.word	0xe000e10c
     e04:	.word	0xe000e110
     e08:	.word	0x20000064
     e0c:	.word	0xc0000007

00000e10 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080::setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
     e10:	push	{r4, r5, r6, r7, lr}
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
     e12:	mov.w	r5, #1000	; 0x3e8

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
     e16:	strb	r1, [r0, #5]
	shtpData[9] = 0;								   //Batch Interval (LSB)
	shtpData[10] = 0;								   //Batch Interval
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
     e18:	lsrs	r7, r3, #8
//Also sets the specific config word. Useful for personal activity classifier
void BNO080::setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
	long microsBetweenReports = (long)timeBetweenReports * 1000L;

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
     e1a:	mov.w	lr, #253	; 0xfd

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080::setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
     e1e:	mul.w	r2, r5, r2
	shtpData[10] = 0;								   //Batch Interval
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
     e22:	lsrs	r6, r3, #16
{
	long microsBetweenReports = (long)timeBetweenReports * 1000L;

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
	shtpData[2] = 0;								   //Feature flags
     e24:	movs	r5, #0
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
	shtpData[9] = 0;								   //Batch Interval (LSB)
	shtpData[10] = 0;								   //Batch Interval
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
     e26:	strb	r3, [r0, #17]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
	shtpData[2] = 0;								   //Feature flags
	shtpData[3] = 0;								   //Change sensitivity (LSB)
	shtpData[4] = 0;								   //Change sensitivity (MSB)
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
     e28:	asrs	r1, r2, #8
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
	shtpData[2] = 0;								   //Feature flags
	shtpData[3] = 0;								   //Change sensitivity (LSB)
	shtpData[4] = 0;								   //Change sensitivity (MSB)
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
     e2a:	strb	r2, [r0, #9]
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
     e2c:	lsrs	r3, r3, #24
//Also sets the specific config word. Useful for personal activity classifier
void BNO080::setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
	long microsBetweenReports = (long)timeBetweenReports * 1000L;

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
     e2e:	strb.w	lr, [r0, #4]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
	shtpData[2] = 0;								   //Feature flags
	shtpData[3] = 0;								   //Change sensitivity (LSB)
	shtpData[4] = 0;								   //Change sensitivity (MSB)
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
     e32:	strb	r1, [r0, #10]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
     e34:	asrs	r1, r2, #16
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
     e36:	lsrs	r2, r2, #24
	shtpData[9] = 0;								   //Batch Interval (LSB)
	shtpData[10] = 0;								   //Batch Interval
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
     e38:	strb	r7, [r0, #18]
	shtpData[2] = 0;								   //Feature flags
	shtpData[3] = 0;								   //Change sensitivity (LSB)
	shtpData[4] = 0;								   //Change sensitivity (MSB)
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
     e3a:	strb	r1, [r0, #11]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
     e3c:	movs	r1, #2
	shtpData[3] = 0;								   //Change sensitivity (LSB)
	shtpData[4] = 0;								   //Change sensitivity (MSB)
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
     e3e:	strb	r2, [r0, #12]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
     e40:	movs	r2, #17
	shtpData[10] = 0;								   //Batch Interval
	shtpData[11] = 0;								   //Batch Interval
	shtpData[12] = 0;								   //Batch Interval (MSB)
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
     e42:	strb	r6, [r0, #19]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
     e44:	strb	r3, [r0, #20]
{
	long microsBetweenReports = (long)timeBetweenReports * 1000L;

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
	shtpData[2] = 0;								   //Feature flags
     e46:	strb	r5, [r0, #6]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
     e48:	strb	r5, [r0, #7]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
     e4a:	strb	r5, [r0, #8]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
	shtpData[9] = 0;								   //Batch Interval (LSB)
     e4c:	strb	r5, [r0, #13]
	shtpData[10] = 0;								   //Batch Interval
     e4e:	strb	r5, [r0, #14]
	shtpData[11] = 0;								   //Batch Interval
     e50:	strb	r5, [r0, #15]
	shtpData[12] = 0;								   //Batch Interval (MSB)
     e52:	strb	r5, [r0, #16]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
}
     e54:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
     e58:	b.w	b88 <BNO080::sendPacket(unsigned char, unsigned char)>

00000e5c <BNO080::enableGyro(unsigned short)>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void BNO080::setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports)
{
	setFeatureCommand(reportID, timeBetweenReports, 0); //No specific config
     e5c:	mov	r2, r1
     e5e:	movs	r3, #0
     e60:	movs	r1, #2
     e62:	b.w	e10 <BNO080::setFeatureCommand(unsigned char, unsigned short, unsigned long)>
     e66:	nop

00000e68 <BNO080::softReset()>:
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void BNO080::softReset(void)
{
	shtpData[0] = 1; //Reset
     e68:	movs	r2, #1
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void BNO080::softReset(void)
{
     e6a:	push	{r4, lr}
	shtpData[0] = 1; //Reset

	//Attempt to start communication with sensor
	sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
     e6c:	mov	r1, r2
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void BNO080::softReset(void)
{
	shtpData[0] = 1; //Reset
     e6e:	strb	r2, [r0, #4]
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void BNO080::softReset(void)
{
     e70:	mov	r4, r0
	shtpData[0] = 1; //Reset

	//Attempt to start communication with sensor
	sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
     e72:	bl	b88 <BNO080::sendPacket(unsigned char, unsigned char)>

	//Read all incoming data and flush it
	delay(50);
     e76:	movs	r0, #50	; 0x32
     e78:	bl	29e0 <delay>
	while (receivePacket() == true)
     e7c:	mov	r0, r4
     e7e:	bl	808 <BNO080::receivePacket()>
     e82:	cmp	r0, #0
     e84:	bne.n	e7c <BNO080::softReset()+0x14>
		;
	delay(50);
     e86:	movs	r0, #50	; 0x32
     e88:	bl	29e0 <delay>
	while (receivePacket() == true)
     e8c:	mov	r0, r4
     e8e:	bl	808 <BNO080::receivePacket()>
     e92:	cmp	r0, #0
     e94:	bne.n	e8c <BNO080::softReset()+0x24>
		;
}
     e96:	pop	{r4, pc}

00000e98 <BNO080::begin(unsigned char, TwoWire&, unsigned char)>:
#include "SparkFun_BNO080_Arduino_Library.h"

//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
boolean BNO080::begin(uint8_t deviceAddress, TwoWire &wirePort, uint8_t intPin)
{
     e98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_deviceAddress = deviceAddress; //If provided, store the I2C address from user
     e9c:	strb.w	r1, [r0, #180]	; 0xb4
#include "SparkFun_BNO080_Arduino_Library.h"

//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
boolean BNO080::begin(uint8_t deviceAddress, TwoWire &wirePort, uint8_t intPin)
{
     ea0:	mov	r4, r0
	_deviceAddress = deviceAddress; //If provided, store the I2C address from user
	_i2cPort = &wirePort;			//Grab which port the user wants us to use
     ea2:	str.w	r2, [r0, #176]	; 0xb0
	//Begin by resetting the IMU
	softReset();

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
	shtpData[1] = 0;							  //Reserved
     ea6:	movs	r5, #0
//Return true if we got a 'Polo' back from Marco
boolean BNO080::begin(uint8_t deviceAddress, TwoWire &wirePort, uint8_t intPin)
{
	_deviceAddress = deviceAddress; //If provided, store the I2C address from user
	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
     ea8:	strb.w	r3, [r0, #202]	; 0xca
	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();

	//Begin by resetting the IMU
	softReset();
     eac:	bl	e68 <BNO080::softReset()>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
     eb0:	movs	r3, #249	; 0xf9
	shtpData[1] = 0;							  //Reserved

	//Transmit packet on channel 2, 2 bytes
	sendPacket(CHANNEL_CONTROL, 2);
     eb2:	movs	r2, #2
	//Begin by resetting the IMU
	softReset();

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
	shtpData[1] = 0;							  //Reserved
     eb4:	strb	r5, [r4, #5]

	//Begin by resetting the IMU
	softReset();

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
     eb6:	strb	r3, [r4, #4]
	shtpData[1] = 0;							  //Reserved

	//Transmit packet on channel 2, 2 bytes
	sendPacket(CHANNEL_CONTROL, 2);
     eb8:	mov	r0, r4
     eba:	mov	r1, r2
     ebc:	bl	b88 <BNO080::sendPacket(unsigned char, unsigned char)>

	//Now we wait for response
	if (receivePacket() == true)
     ec0:	mov	r0, r4
     ec2:	bl	808 <BNO080::receivePacket()>
     ec6:	cbz	r0, ed0 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x38>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
     ec8:	ldrb	r3, [r4, #4]
     eca:	cmp	r3, #248	; 0xf8
     ecc:	beq.n	ed4 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x3c>
			}
			return (true);
		}
	}

	return (false); //Something went wrong
     ece:	mov	r0, r5
}
     ed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	//Now we wait for response
	if (receivePacket() == true)
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
		{
			if (_printDebug == true)
     ed4:	ldrb.w	r6, [r4, #188]	; 0xbc
     ed8:	cmp	r6, #0
     eda:	beq.n	ed0 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0x38>
			{
				_debugPort->print(F("SW Version Major: 0x"));
     edc:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     ee0:	movs	r2, #20
     ee2:	ldr	r1, [pc, #160]	; (f84 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xec>)
     ee4:	ldr	r3, [r0, #0]
     ee6:	ldr	r3, [r3, #4]
     ee8:	blx	r3
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     eea:	mov	r3, r5
     eec:	ldrb	r1, [r4, #6]
     eee:	movs	r2, #16
     ef0:	ldr.w	r0, [r4, #184]	; 0xb8
     ef4:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				_debugPort->print(shtpData[2], HEX);
				_debugPort->print(F(" SW Version Minor: 0x"));
     ef8:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     efc:	movs	r2, #21
     efe:	ldr	r1, [pc, #136]	; (f88 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf0>)
     f00:	ldr	r3, [r0, #0]
     f02:	ldr	r3, [r3, #4]
     f04:	blx	r3
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f06:	mov	r3, r5
     f08:	ldrb	r1, [r4, #7]
     f0a:	movs	r2, #16
     f0c:	ldr.w	r0, [r4, #184]	; 0xb8
     f10:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				_debugPort->print(shtpData[3], HEX);
				uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
				_debugPort->print(F(" SW Part Number: 0x"));
     f14:	ldr.w	r0, [r4, #184]	; 0xb8
			{
				_debugPort->print(F("SW Version Major: 0x"));
				_debugPort->print(shtpData[2], HEX);
				_debugPort->print(F(" SW Version Minor: 0x"));
				_debugPort->print(shtpData[3], HEX);
				uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
     f18:	ldr	r7, [r4, #8]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f1a:	movs	r2, #19
     f1c:	ldr	r3, [r0, #0]
     f1e:	ldr	r1, [pc, #108]	; (f8c <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf4>)
     f20:	ldr	r3, [r3, #4]
     f22:	blx	r3

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     f24:	mov	r3, r5
     f26:	mov	r1, r7
     f28:	movs	r2, #16
     f2a:	ldr.w	r0, [r4, #184]	; 0xb8
     f2e:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				_debugPort->print(F(" SW Part Number: 0x"));
				_debugPort->print(SW_Part_Number, HEX);
				uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
				_debugPort->print(F(" SW Build Number: 0x"));
     f32:	ldr.w	r0, [r4, #184]	; 0xb8
				_debugPort->print(F(" SW Version Minor: 0x"));
				_debugPort->print(shtpData[3], HEX);
				uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
				_debugPort->print(F(" SW Part Number: 0x"));
				_debugPort->print(SW_Part_Number, HEX);
				uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
     f36:	ldr	r7, [r4, #12]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f38:	movs	r2, #20
     f3a:	ldr	r3, [r0, #0]
     f3c:	ldr	r1, [pc, #80]	; (f90 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xf8>)
     f3e:	ldr	r3, [r3, #4]
     f40:	blx	r3

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     f42:	mov	r3, r5
     f44:	mov	r1, r7
     f46:	movs	r2, #16
     f48:	ldr.w	r0, [r4, #184]	; 0xb8
     f4c:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				_debugPort->print(F(" SW Build Number: 0x"));
				_debugPort->print(SW_Build_Number, HEX);
				uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
				_debugPort->print(F(" SW Version Patch: 0x"));
     f50:	ldr.w	r0, [r4, #184]	; 0xb8
				_debugPort->print(F(" SW Part Number: 0x"));
				_debugPort->print(SW_Part_Number, HEX);
				uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
				_debugPort->print(F(" SW Build Number: 0x"));
				_debugPort->print(SW_Build_Number, HEX);
				uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
     f54:	ldrb	r3, [r4, #16]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f56:	movs	r2, #21
     f58:	ldr	r1, [r0, #0]
     f5a:	ldrb	r7, [r4, #17]
     f5c:	ldr.w	r8, [r1, #4]
     f60:	ldr	r1, [pc, #48]	; (f94 <BNO080::begin(unsigned char, TwoWire&, unsigned char)+0xfc>)
     f62:	orr.w	r7, r3, r7, lsl #8
     f66:	blx	r8
				_debugPort->print(F(" SW Version Patch: 0x"));
				_debugPort->println(SW_Version_Patch, HEX);
     f68:	ldr.w	r4, [r4, #184]	; 0xb8
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     f6c:	mov	r1, r7
     f6e:	mov	r3, r5
     f70:	movs	r2, #16
     f72:	mov	r0, r4
     f74:	bl	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
     f78:	mov	r0, r4
     f7a:	bl	3184 <Print::println()>
			}
			return (true);
     f7e:	mov	r0, r6
     f80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f84:	.word	0x20000144
     f88:	.word	0x2000015c
     f8c:	.word	0x20000174
     f90:	.word	0x20000188
     f94:	.word	0x200001a0

00000f98 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     f98:	movs	r0, #0
     f9a:	bx	lr

00000f9c <TwoWire::peek()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     f9c:	ldrb.w	r3, [r0, #58]	; 0x3a
     fa0:	ldrb.w	r2, [r0, #59]	; 0x3b
     fa4:	cmp	r2, r3
     fa6:	bls.n	fae <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     fa8:	add	r3, r0
     faa:	ldrb	r0, [r3, #26]
     fac:	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     fae:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
     fb2:	bx	lr

00000fb4 <TwoWire::flush()>:
	virtual void flush(void) {
     fb4:	bx	lr
     fb6:	nop

00000fb8 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
     fb8:	ldrh.w	r3, [r0, #96]	; 0x60
     fbc:	cbz	r3, fe4 <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     fbe:	ldrb.w	r3, [r0, #95]	; 0x5f
     fc2:	cmp	r3, #32
     fc4:	bhi.n	fde <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     fc6:	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
     fc8:	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     fca:	adds	r4, r3, #1
		return 1;
     fcc:	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     fce:	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
     fd2:	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     fd4:	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
     fd8:	ldr.w	r4, [sp], #4
     fdc:	bx	lr
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     fde:	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
     fe0:	movs	r3, #0
     fe2:	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
     fe4:	mov	r0, r3
     fe6:	bx	lr

00000fe8 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     fe8:	push	{r3, r4, r5, lr}
     fea:	mov	r5, r0
	if (transmitting || slave_mode) {
     fec:	ldrh.w	r0, [r0, #96]	; 0x60
     ff0:	cbz	r0, 1018 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     ff2:	ldrb.w	r3, [r5, #95]	; 0x5f
     ff6:	mov	r4, r2
     ff8:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
     ffc:	cmp	r4, r2
     ffe:	bhi.n	101a <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    1000:	add.w	r0, r5, #61	; 0x3d
    1004:	mov	r2, r4
    1006:	add	r0, r3
    1008:	bl	14e0 <memcpy>
		txBufferLength += quantity;
    100c:	ldrb.w	r3, [r5, #95]	; 0x5f
    1010:	mov	r0, r4
    1012:	add	r4, r3
    1014:	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    1018:	pop	{r3, r4, r5, pc}
    101a:	mov	r4, r2
    101c:	movs	r2, #1
    101e:	strb	r2, [r5, #4]
    1020:	b.n	1000 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    1022:	nop

00001024 <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    1024:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1028:	ldr	r7, [pc, #188]	; (10e8 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    102a:	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    102c:	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    102e:	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1030:	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    1032:	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1036:	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1038:	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    103c:	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    1040:	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    1042:	ldr.w	ip, [pc, #176]	; 10f4 <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1046:	orr.w	r1, r1, #262144	; 0x40000
    104a:	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    104c:	ldr	r1, [r6, #0]
    104e:	ldr	r7, [r2, #4]
    1050:	orrs	r1, r7
    1052:	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1054:	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    1058:	ldr	r6, [pc, #144]	; (10ec <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    105a:	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    105e:	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    1060:	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1064:	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    1066:	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    1068:	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    106c:	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    1070:	ldr	r7, [r3, #72]	; 0x48
    1072:	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    1074:	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1076:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1078:	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    107a:	ldrb	r1, [r0, #24]
    107c:	ldr	r3, [pc, #112]	; (10f0 <TwoWire::begin()+0xcc>)
    107e:	add.w	r1, r2, r1, lsl #4
    1082:	ldrb	r1, [r1, #8]
    1084:	add.w	r1, r3, r1, lsl #4
    1088:	ldr	r1, [r1, #8]
    108a:	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    108c:	ldrb	r1, [r0, #24]
    108e:	add.w	r1, r2, r1, lsl #4
    1092:	ldrb	r4, [r1, #8]
    1094:	ldr	r5, [r1, #12]
    1096:	add.w	r1, r3, r4, lsl #4
    109a:	ldr	r1, [r1, #4]
    109c:	str	r5, [r1, #0]
    109e:	ldrb	r1, [r0, #24]
    10a0:	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    10a4:	ldr	r4, [r1, #16]
    10a6:	cbz	r4, 10ac <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    10a8:	ldr	r1, [r1, #20]
    10aa:	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    10ac:	ldrb	r1, [r0, #25]
    10ae:	movw	r4, #63585	; 0xf861
    10b2:	add.w	r1, r2, r1, lsl #4
    10b6:	ldrb.w	r1, [r1, #40]	; 0x28
    10ba:	add.w	r1, r3, r1, lsl #4
    10be:	ldr	r1, [r1, #8]
    10c0:	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    10c2:	ldrb	r1, [r0, #25]
    10c4:	add.w	r1, r2, r1, lsl #4
    10c8:	ldrb.w	r4, [r1, #40]	; 0x28
    10cc:	ldr	r1, [r1, #44]	; 0x2c
    10ce:	add.w	r3, r3, r4, lsl #4
    10d2:	ldr	r3, [r3, #4]
    10d4:	str	r1, [r3, #0]
    10d6:	ldrb	r3, [r0, #25]
    10d8:	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    10dc:	ldr	r3, [r2, #48]	; 0x30
    10de:	cbz	r3, 10e4 <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    10e0:	ldr	r2, [r2, #52]	; 0x34
    10e2:	str	r2, [r3, #0]
    10e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10e8:	.word	0x400fc000
    10ec:	.word	0x05050bb8
    10f0:	.word	0x20000200
    10f4:	.word	0x1928373b

000010f8 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    10f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10fc:	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    10fe:	ldr	r0, [pc, #256]	; (1200 <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    1100:	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    1102:	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    1104:	ldr.w	sl, [fp, #20]
    1108:	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    110c:	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    1110:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1114:	ldr	r1, [pc, #236]	; (1204 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    1116:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    111a:	ldr.w	lr, [pc, #236]	; 1208 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    111e:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1120:	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    1122:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    1126:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1128:	ldr.w	r9, [pc, #224]	; 120c <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    112c:	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    112e:	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    1130:	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    1134:	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    1138:	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    113a:	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    113c:	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    113e:	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    1142:	str	r3, [sp, #0]
    1144:	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    1146:	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    114a:	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    114e:	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    1152:	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    1154:	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    1156:	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    115a:	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    115c:	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    1160:	ldr	r3, [r6, #4]
    1162:	orrs	r3, r7
    1164:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1166:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1168:	ldr.w	r3, [lr]
    116c:	umull	r3, r2, r9, r3
    1170:	lsrs	r2, r2, #18
    1172:	add.w	r2, r2, r2, lsl #2
    1176:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1178:	ldr	r3, [r4, #0]
    117a:	subs	r3, r3, r1
    117c:	cmp	r2, r3
    117e:	bhi.n	1178 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1180:	ldr	r2, [pc, #128]	; (1204 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1182:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1184:	ldr.w	ip, [pc, #132]	; 120c <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1188:	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    118a:	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    118e:	tst	r0, r3
    1190:	beq.n	1198 <TwoWire::force_clock()+0xa0>
    1192:	ldr	r3, [r6, #8]
    1194:	tst	r7, r3
    1196:	bne.n	11fc <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    1198:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    119c:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    119e:	ldr.w	r1, [lr]
    11a2:	umull	r3, r1, ip, r1
    11a6:	lsrs	r1, r1, #18
    11a8:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11ac:	ldr	r3, [r2, #0]
    11ae:	subs	r3, r3, r4
    11b0:	cmp	r1, r3
    11b2:	bhi.n	11ac <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    11b4:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    11b8:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    11bc:	ldr.w	r1, [lr]
    11c0:	umull	r3, r1, ip, r1
    11c4:	lsrs	r1, r1, #18
    11c6:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11ca:	ldr	r3, [r2, #0]
    11cc:	subs	r3, r3, r4
    11ce:	cmp	r1, r3
    11d0:	bhi.n	11ca <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    11d2:	subs	r5, #1
    11d4:	bne.n	118a <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    11d6:	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    11d8:	ldrb.w	r3, [fp, #24]
    11dc:	ldr	r2, [sp, #0]
    11de:	add.w	r3, sl, r3, lsl #4
    11e2:	ldr	r3, [r3, #12]
    11e4:	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    11e6:	ldrb.w	r3, [fp, #25]
    11ea:	ldr	r2, [sp, #4]
    11ec:	add.w	sl, sl, r3, lsl #4
    11f0:	ldr.w	r3, [sl, #44]	; 0x2c
    11f4:	str	r3, [r2, #0]
	return ret;
}
    11f6:	add	sp, #12
    11f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    11fc:	movs	r0, #1
    11fe:	b.n	11d8 <TwoWire::force_clock()+0xe0>
    1200:	.word	0x20000200
    1204:	.word	0xe0001004
    1208:	.word	0x2000058c
    120c:	.word	0x431bde83

00001210 <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1210:	ldr	r1, [pc, #52]	; (1248 <TwoWire::wait_idle()+0x38>)
    1212:	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    1214:	push	{r4, lr}
    1216:	ldr	r4, [r1, #0]
    1218:	b.n	1226 <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    121a:	lsls	r3, r3, #7
    121c:	bmi.n	122e <TwoWire::wait_idle()+0x1e>
    121e:	ldr	r3, [r1, #0]
		if (timeout > 16) {
    1220:	subs	r3, r3, r4
    1222:	cmp	r3, #16
    1224:	bhi.n	1238 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    1226:	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    1228:	tst.w	r3, #33554432	; 0x2000000
    122c:	bne.n	121a <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    122e:	mov.w	r3, #32512	; 0x7f00
	return true;
    1232:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    1234:	str	r3, [r2, #20]
	return true;
}
    1236:	pop	{r4, pc}
    1238:	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    123a:	bl	10f8 <TwoWire::force_clock()>
    123e:	cmp	r0, #0
    1240:	beq.n	1236 <TwoWire::wait_idle()+0x26>
    1242:	ldr	r2, [r4, #16]
    1244:	b.n	122e <TwoWire::wait_idle()+0x1e>
    1246:	nop
    1248:	.word	0x20000b64

0000124c <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    124c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    1250:	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    1254:	cmp.w	sl, #0
    1258:	bne.n	1260 <TwoWire::endTransmission(unsigned char)+0x14>
    125a:	movs	r0, #4
    125c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1260:	mov	r5, r0
    1262:	mov	r6, r1
	if (!wait_idle()) return 4;
    1264:	bl	1210 <TwoWire::wait_idle()>
    1268:	cmp	r0, #0
    126a:	beq.n	125a <TwoWire::endTransmission(unsigned char)+0xe>
    126c:	ldr	r7, [pc, #184]	; (1328 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    126e:	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1270:	mov.w	r9, #512	; 0x200
    1274:	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    1278:	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    127a:	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    127c:	bhi.n	12b4 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    127e:	ldr	r3, [r1, #92]	; 0x5c
    1280:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    1284:	cmp	r3, #3
    1286:	bls.n	129c <TwoWire::endTransmission(unsigned char)+0x50>
    1288:	b.n	12b4 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    128a:	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    128e:	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    1290:	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1292:	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    1296:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1298:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    129a:	beq.n	12b4 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    129c:	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    129e:	cmp	r4, #0
    12a0:	beq.n	128a <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    12a2:	cmp	sl, r4
    12a4:	bls.n	12f6 <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    12a6:	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    12a8:	ldrb.w	r2, [r2, #61]	; 0x3d
    12ac:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    12ae:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    12b0:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    12b2:	bne.n	129c <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    12b4:	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    12b6:	lsls	r0, r3, #20
    12b8:	bmi.n	1300 <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    12ba:	lsls	r2, r3, #21
    12bc:	bmi.n	130e <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    12be:	lsls	r0, r3, #18
    12c0:	bmi.n	12cc <TwoWire::endTransmission(unsigned char)+0x80>
    12c2:	ldr	r2, [r7, #0]
    12c4:	rsb	r2, r8, r2
    12c8:	cmp	r2, #50	; 0x32
    12ca:	bls.n	12e0 <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12cc:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12ce:	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    12d2:	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12d4:	orr.w	r3, r3, #768	; 0x300
    12d8:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12da:	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    12dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    12e0:	cmp	r4, sl
    12e2:	bls.n	12f0 <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    12e4:	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    12e6:	lsls	r2, r2, #29
    12e8:	bne.n	12f0 <TwoWire::endTransmission(unsigned char)+0xa4>
    12ea:	lsls	r3, r3, #22
    12ec:	bmi.n	1322 <TwoWire::endTransmission(unsigned char)+0xd6>
    12ee:	cbz	r6, 1322 <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    12f0:	bl	2ec8 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    12f4:	b.n	1278 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    12f6:	cbz	r6, 12fc <TwoWire::endTransmission(unsigned char)+0xb0>
    12f8:	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    12fc:	adds	r4, #1
					break;
    12fe:	b.n	12b4 <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1300:	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    1302:	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1304:	orr.w	r3, r3, #768	; 0x300
    1308:	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    130a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    130e:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    1310:	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    1314:	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1316:	orr.w	r3, r3, #768	; 0x300
    131a:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    131c:	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    131e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    1322:	movs	r0, #0
    1324:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1328:	.word	0x20000b64

0000132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
		yield();
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    132c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1330:	mov	r4, r1
    1332:	mov	r5, r2
    1334:	mov	r8, r3
    1336:	mov	r9, r0
	if (!wait_idle()) return 4;
    1338:	bl	1210 <TwoWire::wait_idle()>
    133c:	cbnz	r0, 1344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
    133e:	movs	r0, #4
    1340:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    1344:	movs	r2, #0
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
    1346:	lsls	r3, r4, #1
	if (length < 1) length = 1;
    1348:	cmp	r5, #0
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    134a:	movw	sl, #1025	; 0x401
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    134e:	mov	r4, r2
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1350:	uxtb	r3, r3
    1352:	ldr	r6, [pc, #244]	; (1448 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>)

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
    1354:	it	eq
    1356:	moveq	r5, #1
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    1358:	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    135a:	orr.w	sl, r3, sl
    135e:	ldr.w	fp, [r6]
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    1362:	strb.w	r2, [r9, #58]	; 0x3a
	rxBufferLength = 0;
    1366:	strb.w	r2, [r9, #59]	; 0x3b
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    136a:	bls.n	13fe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
    136c:	ldr.w	r3, [r9, #16]
				tx_state++;
				tx_fifo--;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
    1370:	ldrb.w	r2, [r9, #59]	; 0x3b
    1374:	cmp	r2, #31
    1376:	bhi.n	139e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1378:	ldr	r1, [r3, #92]	; 0x5c
    137a:	ubfx	r1, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    137e:	cbnz	r1, 1386 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
    1380:	b.n	139e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1382:	cmp	r2, #32
    1384:	beq.n	139e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
				rxBuffer[rxBufferLength++] = port->MRDR;
    1386:	add.w	lr, r2, #1
    138a:	add.w	r0, r9, r2
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    138e:	subs	r1, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    1390:	uxtb.w	r2, lr
    1394:	strb.w	r2, [r9, #59]	; 0x3b
    1398:	ldr	r7, [r3, #112]	; 0x70
    139a:	strb	r7, [r0, #26]
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    139c:	bne.n	1382 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
				rxBuffer[rxBufferLength++] = port->MRDR;
				rx_fifo--;
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
    139e:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    13a0:	lsls	r0, r2, #20
    13a2:	bmi.n	143e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    13a4:	tst.w	r2, #9216	; 0x2400
    13a8:	bne.n	13b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    13aa:	ldr	r1, [r6, #0]
    13ac:	rsb	r1, fp, r1
    13b0:	cmp	r1, #50	; 0x32
    13b2:	bls.n	13da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13b4:	ldr	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    13b6:	mov.w	r1, #512	; 0x200
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13ba:	orr.w	r2, r2, #768	; 0x300
    13be:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    13c0:	str	r1, [r3, #96]	; 0x60
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13c2:	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    13c4:	tst.w	r2, #458752	; 0x70000
    13c8:	beq.n	13d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    13ca:	ldr	r2, [r3, #16]
    13cc:	orr.w	r2, r2, #512	; 0x200
    13d0:	str	r2, [r3, #16]
	return rxBufferLength;
    13d2:	ldrb.w	r0, [r9, #59]	; 0x3b
    13d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
    13da:	ldrb.w	r1, [r9, #59]	; 0x3b
    13de:	cmp	r1, r5
    13e0:	bcc.n	13f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    13e2:	cmp	r4, #2
    13e4:	bls.n	13f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
			uint32_t tx_fifo = port->MFSR & 0x07;
    13e6:	ldr	r1, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    13e8:	lsls	r1, r1, #29
    13ea:	bne.n	13f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    13ec:	lsls	r2, r2, #22
    13ee:	bmi.n	13c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    13f0:	cmp.w	r8, #0
    13f4:	beq.n	13c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
				break;
			}
		}
		yield();
    13f6:	bl	2ec8 <yield>
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    13fa:	cmp	r4, #2
    13fc:	bhi.n	136c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    13fe:	ldr.w	r2, [r9, #16]
    1402:	ldr	r3, [r2, #92]	; 0x5c
    1404:	and.w	r3, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    1408:	cmp	r3, #3
    140a:	bhi.n	1428 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    140c:	subs	r1, r5, #1
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    140e:	mov.w	r0, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    1412:	orr.w	r1, r1, #256	; 0x100
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
    1416:	cbnz	r4, 142c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1418:	str.w	sl, [r2, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
				tx_fifo--;
    141c:	subs	r3, #1
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
    141e:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
    1420:	cmp	r3, #3
    1422:	bhi.n	1428 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    1424:	cmp	r4, #2
    1426:	bls.n	1416 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
    1428:	mov	r3, r2
    142a:	b.n	1370 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
    142c:	cmp	r4, #1
    142e:	beq.n	143a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1430:	cmp.w	r8, #0
    1434:	beq.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    1436:	str	r0, [r2, #96]	; 0x60
    1438:	b.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    143a:	str	r1, [r2, #96]	; 0x60
    143c:	b.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    143e:	ldr	r2, [r3, #16]
    1440:	orr.w	r2, r2, #768	; 0x300
    1444:	str	r2, [r3, #16]
    1446:	b.n	13c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    1448:	.word	0x20000b64

0000144c <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    144c:	ldr	r3, [r0, #16]
    144e:	movs	r2, #0
	if (frequency < 400000) {
    1450:	ldr	r0, [pc, #76]	; (14a0 <TwoWire::setClock(unsigned long)+0x54>)
    1452:	cmp	r1, r0
// Timeout if a device stretches SCL this long, in microseconds
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
    1454:	push	{r4}
	port->MCR = 0;
    1456:	str	r2, [r3, #16]
	if (frequency < 400000) {
    1458:	bls.n	148c <TwoWire::setClock(unsigned long)+0x40>
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
    145a:	ldr	r0, [pc, #72]	; (14a4 <TwoWire::setClock(unsigned long)+0x58>)
    145c:	cmp	r1, r0
    145e:	bls.n	1486 <TwoWire::setClock(unsigned long)+0x3a>
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    1460:	ldr	r4, [pc, #68]	; (14a8 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    1462:	ldr	r0, [pc, #72]	; (14ac <TwoWire::setClock(unsigned long)+0x60>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    1464:	ldr	r1, [pc, #72]	; (14b0 <TwoWire::setClock(unsigned long)+0x64>)
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    1466:	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    1468:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    146a:	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    146c:	str	r1, [r3, #44]	; 0x2c
	}
	port->MCCR1 = port->MCCR0;
    146e:	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    1470:	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1472:	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    1476:	movs	r2, #1
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    1478:	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    147a:	str	r0, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    147c:	ldr.w	r4, [sp], #4
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1480:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1482:	str	r2, [r3, #16]
}
    1484:	bx	lr
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
    1486:	ldr	r4, [pc, #44]	; (14b4 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
    1488:	ldr	r0, [pc, #44]	; (14b8 <TwoWire::setClock(unsigned long)+0x6c>)
    148a:	b.n	1464 <TwoWire::setClock(unsigned long)+0x18>
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    148c:	ldr	r4, [pc, #44]	; (14bc <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    148e:	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    1490:	ldr	r1, [pc, #44]	; (14c0 <TwoWire::setClock(unsigned long)+0x74>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1492:	mov.w	r2, #180224	; 0x2c000
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    1496:	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1498:	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    149a:	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    149c:	str	r2, [r3, #44]	; 0x2c
    149e:	b.n	146e <TwoWire::setClock(unsigned long)+0x22>
    14a0:	.word	0x00061a7f
    14a4:	.word	0x000f423f
    14a8:	.word	0x0407090a
    14ac:	.word	0x01010960
    14b0:	.word	0x00057f00
    14b4:	.word	0x0c121a1c
    14b8:	.word	0x02020e10
    14bc:	.word	0x1928373b
    14c0:	.word	0x05050bb8

000014c4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    14c4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    14c6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    14c8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    14ca:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    14cc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    14ce:	beq.n	14d8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    14d0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    14d4:	b.w	2f68 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    14d8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    14da:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    14de:	bx	r3

000014e0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    14e0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    14e2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    14e6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    14ea:	bne.n	15c8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    14ec:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    14ee:	bcc.n	1574 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    14f0:	ldr.w	r3, [r1], #4
    14f4:	str.w	r3, [r0], #4
    14f8:	ldr.w	r3, [r1], #4
    14fc:	str.w	r3, [r0], #4
    1500:	ldr.w	r3, [r1], #4
    1504:	str.w	r3, [r0], #4
    1508:	ldr.w	r3, [r1], #4
    150c:	str.w	r3, [r0], #4
    1510:	ldr.w	r3, [r1], #4
    1514:	str.w	r3, [r0], #4
    1518:	ldr.w	r3, [r1], #4
    151c:	str.w	r3, [r0], #4
    1520:	ldr.w	r3, [r1], #4
    1524:	str.w	r3, [r0], #4
    1528:	ldr.w	r3, [r1], #4
    152c:	str.w	r3, [r0], #4
    1530:	ldr.w	r3, [r1], #4
    1534:	str.w	r3, [r0], #4
    1538:	ldr.w	r3, [r1], #4
    153c:	str.w	r3, [r0], #4
    1540:	ldr.w	r3, [r1], #4
    1544:	str.w	r3, [r0], #4
    1548:	ldr.w	r3, [r1], #4
    154c:	str.w	r3, [r0], #4
    1550:	ldr.w	r3, [r1], #4
    1554:	str.w	r3, [r0], #4
    1558:	ldr.w	r3, [r1], #4
    155c:	str.w	r3, [r0], #4
    1560:	ldr.w	r3, [r1], #4
    1564:	str.w	r3, [r0], #4
    1568:	ldr.w	r3, [r1], #4
    156c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1570:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1572:	bcs.n	14f0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1574:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1576:	bcc.n	159c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1578:	ldr.w	r3, [r1], #4
    157c:	str.w	r3, [r0], #4
    1580:	ldr.w	r3, [r1], #4
    1584:	str.w	r3, [r0], #4
    1588:	ldr.w	r3, [r1], #4
    158c:	str.w	r3, [r0], #4
    1590:	ldr.w	r3, [r1], #4
    1594:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1598:	subs	r2, #16
	bhs	.Lmid_block_loop
    159a:	bcs.n	1578 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    159c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    159e:	bcc.n	15ac <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    15a0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    15a4:	str.w	r3, [r0], #4
	subs	r2, #4
    15a8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    15aa:	bcs.n	15a0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    15ac:	adds	r2, #4
	beq	.Ldone
    15ae:	beq.n	15c2 <memcpy+0xe2>

	lsls	r2, r2, #31
    15b0:	lsls	r2, r2, #31
	itt ne
    15b2:	itt	ne
	ldrbne  r3, [r1], #1
    15b4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    15b8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    15bc:	bcc.n	15c2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    15be:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    15c0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    15c2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    15c4:	bx	lr
    15c6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    15c8:	cmp	r2, #8
	blo	.Lbyte_copy
    15ca:	bcc.n	15f4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    15cc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    15ce:	beq.n	14ec <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    15d0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    15d4:	beq.n	14ec <memcpy+0xc>

	rsb	r3, #4
    15d6:	rsb	r3, r3, #4
	subs	r2, r3
    15da:	subs	r2, r2, r3

	lsls    r3, r3, #31
    15dc:	lsls	r3, r3, #31
	itt ne
    15de:	itt	ne
	ldrbne  r3, [r1], #1
    15e0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    15e4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    15e8:	bcc.n	14ec <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    15ea:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    15ee:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    15f2:	b.n	14ec <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    15f4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    15f6:	bcc.n	15ac <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    15f8:	subs	r2, #1
	ldrb    r3, [r1], #1
    15fa:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    15fe:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1602:	bcs.n	15f8 <memcpy+0x118>

	ldrb	r3, [r1]
    1604:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1606:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1608:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    160a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    160c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    160e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1610:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1612:	bx	lr

00001614 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    1614:	movs	r0, #4
    1616:	mov	r1, lr
    1618:	tst	r0, r1
    161a:	beq.n	1624 <_MSP>
    161c:	mrs	r0, PSP
    1620:	b.w	1634 <HardFault_HandlerC>

00001624 <_MSP>:
    1624:	mrs	r0, MSP
    1628:	b.w	1634 <HardFault_HandlerC>

0000162c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    162c:	bx	lr
    162e:	nop

00001630 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    1630:	bx	lr
    1632:	nop

00001634 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1634:	ldr	r3, [pc, #108]	; (16a4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    1636:	movs	r1, #5
    1638:	ldr	r2, [pc, #108]	; (16a8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    163a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    163c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    163e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    1642:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    1644:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    1648:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    164a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    164c:	ldr	r4, [pc, #92]	; (16ac <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    164e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    1650:	ldr	r0, [pc, #92]	; (16b0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    1652:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    1654:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    1658:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    165c:	ldr	r3, [r4, #0]
    165e:	cmp	r3, r0
    1660:	bls.n	1668 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    1662:	ldr	r0, [pc, #80]	; (16b4 <HardFault_HandlerC+0x80>)
    1664:	bl	1e00 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1668:	ldr	r5, [pc, #56]	; (16a4 <HardFault_HandlerC+0x70>)
    166a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    166c:	movs	r0, #0
    166e:	ldr	r2, [pc, #72]	; (16b8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    1670:	ldr	r1, [pc, #72]	; (16bc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    1672:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    1676:	str	r0, [sp, #4]
    1678:	ldr	r3, [sp, #4]
    167a:	cmp	r3, r2
    167c:	bhi.n	168a <HardFault_HandlerC+0x56>
    167e:	ldr	r3, [sp, #4]
    1680:	adds	r3, #1
    1682:	str	r3, [sp, #4]
    1684:	ldr	r3, [sp, #4]
    1686:	cmp	r3, r2
    1688:	bls.n	167e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    168a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    168e:	str	r0, [sp, #4]
    1690:	ldr	r3, [sp, #4]
    1692:	cmp	r3, r1
    1694:	bhi.n	1672 <HardFault_HandlerC+0x3e>
    1696:	ldr	r3, [sp, #4]
    1698:	adds	r3, #1
    169a:	str	r3, [sp, #4]
    169c:	ldr	r3, [sp, #4]
    169e:	cmp	r3, r1
    16a0:	bls.n	1696 <HardFault_HandlerC+0x62>
    16a2:	b.n	1672 <HardFault_HandlerC+0x3e>
    16a4:	.word	0x401bc000
    16a8:	.word	0x401f8000
    16ac:	.word	0x2000058c
    16b0:	.word	0x23c345ff
    16b4:	.word	0x11e1a300
    16b8:	.word	0x000f423f
    16bc:	.word	0x0089543f

000016c0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    16c0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    16c2:	ldr	r1, [pc, #80]	; (1714 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    16c4:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    16c8:	ldr	r5, [pc, #76]	; (1718 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    16ca:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    16cc:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    16d0:	ldr	r6, [pc, #72]	; (171c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    16d2:	ldr	r2, [pc, #76]	; (1720 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    16d4:	add.w	r5, r5, r0, lsl #5
    16d8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    16da:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    16dc:	mov	r0, r5
    16de:	ldrh	r2, [r6, #0]
    16e0:	bl	2960 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    16e4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    16e6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    16ea:	add	r1, r4
	asm("dsb");
    16ec:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    16f0:	ldr	r2, [pc, #48]	; (1724 <rx_queue_transfer+0x64>)
    16f2:	str	r3, [r2, #0]
		location += 32;
    16f4:	adds	r3, #32
	} while (location < end_addr);
    16f6:	cmp	r1, r3
    16f8:	bhi.n	16f2 <rx_queue_transfer+0x32>
	asm("dsb");
    16fa:	dsb	sy
	asm("isb");
    16fe:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1702:	movs	r0, #3
    1704:	mov	r1, r5
    1706:	bl	29b8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    170a:	ldr	r3, [pc, #28]	; (1728 <rx_queue_transfer+0x68>)
    170c:	mov.w	r2, #131072	; 0x20000
    1710:	str	r2, [r3, #0]
    1712:	pop	{r3, r4, r5, r6, r7, pc}
    1714:	.word	0x20200000
    1718:	.word	0x20000960
    171c:	.word	0x20000a6e
    1720:	.word	0xe000e18c
    1724:	.word	0xe000ef5c
    1728:	.word	0xe000e10c

0000172c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    172c:	ldr	r2, [pc, #144]	; (17c0 <rx_event+0x94>)
    172e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1730:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1734:	ubfx	r3, r3, #16, #15
    1738:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    173a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    173c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    173e:	cmp	r4, #0
    1740:	ble.n	17b4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    1742:	ldr	r1, [pc, #128]	; (17c4 <rx_event+0x98>)
		if (head != rx_tail) {
    1744:	ldr	r2, [pc, #128]	; (17c8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1746:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1748:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    174a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    174c:	ldr	r0, [pc, #124]	; (17cc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    174e:	ldr	r6, [pc, #128]	; (17d0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    1750:	cmp	r3, r2
    1752:	beq.n	1764 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1754:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1758:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    175c:	rsb	r2, r7, #512	; 0x200
    1760:	cmp	r4, r2
    1762:	bls.n	178a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1764:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    1766:	movs	r2, #0
    1768:	ldr	r7, [pc, #104]	; (17d4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    176a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    176c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    1770:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1774:	ldr	r6, [pc, #96]	; (17d8 <rx_event+0xac>)
    1776:	ite	ls
    1778:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    177a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    177c:	strb	r2, [r1, #0]
		rx_available += len;
    177e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1780:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    1782:	add	r4, r2
    1784:	str	r4, [r6, #0]
    1786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    178a:	ldr	r3, [pc, #80]	; (17dc <rx_event+0xb0>)
    178c:	add.w	r0, r7, r8, lsl #9
    1790:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    1792:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1794:	add.w	r1, r3, r5, lsl #9
    1798:	add	r0, r3
    179a:	bl	14e0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    179e:	ldr	r2, [pc, #56]	; (17d8 <rx_event+0xac>)
				rx_queue_transfer(i);
    17a0:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    17a2:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    17a6:	ldr	r3, [r2, #0]
    17a8:	add	r4, r3
    17aa:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    17ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    17b0:	b.w	16c0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    17b4:	mov	r0, r5
	}
}
    17b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    17ba:	b.w	16c0 <rx_queue_transfer>
    17be:	nop
    17c0:	.word	0x20000a6e
    17c4:	.word	0x20000a84
    17c8:	.word	0x20000a60
    17cc:	.word	0x20000a64
    17d0:	.word	0x20000a70
    17d4:	.word	0x20000934
    17d8:	.word	0x20000a80
    17dc:	.word	0x20200000

000017e0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    17e0:	ldr	r3, [pc, #120]	; (185c <usb_serial_flush_callback+0x7c>)
    17e2:	ldrb	r2, [r3, #0]
    17e4:	cbnz	r2, 17fe <usb_serial_flush_callback+0x1e>
    17e6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    17ea:	ldr	r2, [pc, #116]	; (1860 <usb_serial_flush_callback+0x80>)
    17ec:	ldrb	r2, [r2, #0]
    17ee:	cbz	r2, 17fe <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    17f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    17f4:	ldr	r5, [pc, #108]	; (1864 <usb_serial_flush_callback+0x84>)
    17f6:	ldrh	r2, [r5, #0]
    17f8:	cbnz	r2, 1800 <usb_serial_flush_callback+0x20>
    17fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17fe:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1800:	ldr	r6, [pc, #100]	; (1868 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1802:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1806:	ldr	r7, [pc, #100]	; (186c <usb_serial_flush_callback+0x8c>)
    1808:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    180a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    180c:	ldr	r4, [pc, #96]	; (1870 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    180e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1812:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1816:	mov	r0, r7
    1818:	mov	r1, r4
    181a:	bl	2960 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    181e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1822:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    1826:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    182a:	ldr	r3, [pc, #72]	; (1874 <usb_serial_flush_callback+0x94>)
    182c:	str	r1, [r3, #0]
		location += 32;
    182e:	adds	r1, #32
	} while (location < end_addr);
    1830:	cmp	r2, r1
    1832:	bhi.n	182c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    1834:	dsb	sy
	asm("isb");
    1838:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    183c:	movs	r0, #4
    183e:	mov	r1, r7
    1840:	bl	2990 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1844:	ldrb	r3, [r6, #0]
    1846:	ldr	r2, [pc, #32]	; (1868 <usb_serial_flush_callback+0x88>)
    1848:	adds	r3, #1
    184a:	uxtb	r3, r3
    184c:	cmp	r3, #3
    184e:	it	hi
    1850:	movhi	r3, #0
    1852:	strb	r3, [r2, #0]
	tx_available = 0;
    1854:	movs	r3, #0
    1856:	strh	r3, [r5, #0]
    1858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    185c:	.word	0x20000946
    1860:	.word	0x20000b58
    1864:	.word	0x20000a86
    1868:	.word	0x20000947
    186c:	.word	0x20000aa0
    1870:	.word	0x20201000
    1874:	.word	0xe000ef70

00001878 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    1878:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    187c:	sub	sp, #20
    187e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1880:	str	r1, [sp, #4]
    1882:	cmp	r1, #0
    1884:	beq.w	19cc <usb_serial_write.part.1+0x154>
    1888:	movs	r3, #0
    188a:	ldr.w	r8, [pc, #348]	; 19e8 <usb_serial_write.part.1+0x170>
    188e:	ldr.w	r9, [pc, #332]	; 19dc <usb_serial_write.part.1+0x164>
    1892:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1894:	ldr	r6, [pc, #312]	; (19d0 <usb_serial_write.part.1+0x158>)
    1896:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    189a:	ldr.w	sl, [pc, #336]	; 19ec <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    189e:	ldr.w	fp, [pc, #336]	; 19f0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    18a2:	ldr	r2, [pc, #304]	; (19d4 <usb_serial_write.part.1+0x15c>)
    18a4:	ldrb	r4, [r2, #0]
    18a6:	ldr	r2, [pc, #304]	; (19d8 <usb_serial_write.part.1+0x160>)
    18a8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    18ac:	cmp	r3, #0
    18ae:	bne.n	198e <usb_serial_write.part.1+0x116>
    18b0:	mov	r5, r3
    18b2:	mov	r4, r3
    18b4:	b.n	18e0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    18b6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    18ba:	cbnz	r4, 18be <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    18bc:	ldr	r5, [r6, #0]
    18be:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    18c0:	cmp	r3, #0
    18c2:	bne.n	1982 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    18c4:	ldr	r3, [r6, #0]
    18c6:	subs	r3, r3, r5
    18c8:	cmp	r3, #120	; 0x78
    18ca:	bhi.n	19c0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    18cc:	ldrb.w	r3, [sl]
    18d0:	cmp	r3, #0
    18d2:	beq.n	1982 <usb_serial_write.part.1+0x10a>
			yield();
    18d4:	bl	2ec8 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    18d8:	ldrh.w	r3, [r8]
    18dc:	cmp	r3, #0
    18de:	bne.n	198a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    18e0:	mov	r0, r7
    18e2:	bl	29dc <usb_transfer_status>
			if (!(status & 0x80)) {
    18e6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    18ea:	ldr	r2, [pc, #240]	; (19dc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    18ec:	bne.n	18b6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    18ee:	mov.w	r3, #2048	; 0x800
    18f2:	ldr	r2, [pc, #224]	; (19d4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    18f4:	strb.w	r0, [r9]
    18f8:	ldrb	r4, [r2, #0]
    18fa:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    18fc:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1900:	lsls	r4, r4, #11
		if (size >= tx_available) {
    1902:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1904:	ldr	r1, [pc, #216]	; (19e0 <usb_serial_write.part.1+0x168>)
    1906:	add	r0, r4
		if (size >= tx_available) {
    1908:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    190a:	add	r0, r1
		if (size >= tx_available) {
    190c:	bcc.n	1996 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    190e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1910:	ldr	r1, [sp, #8]
    1912:	bl	14e0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1916:	movs	r3, #0
    1918:	mov	r1, r4
    191a:	mov.w	r2, #2048	; 0x800
    191e:	mov	r0, r7
    1920:	bl	2960 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1924:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1928:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    192c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1930:	str.w	r3, [fp]
		location += 32;
    1934:	adds	r3, #32
	} while (location < end_addr);
    1936:	cmp	r4, r3
    1938:	bhi.n	1930 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    193a:	dsb	sy
	asm("isb");
    193e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1942:	movs	r0, #4
    1944:	mov	r1, r7
    1946:	bl	2990 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    194a:	ldr	r3, [pc, #136]	; (19d4 <usb_serial_write.part.1+0x15c>)
    194c:	ldr	r2, [pc, #132]	; (19d4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    194e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1950:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1952:	ldr	r0, [pc, #144]	; (19e4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1954:	adds	r3, #1
    1956:	uxtb	r3, r3
    1958:	cmp	r3, #3
    195a:	it	hi
    195c:	movhi	r3, #0
    195e:	strb	r3, [r2, #0]
			size -= tx_available;
    1960:	ldrh.w	r2, [r8]
			sent += tx_available;
    1964:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    1966:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    196a:	add	r3, r2
    196c:	str	r3, [sp, #0]
			data += tx_available;
    196e:	ldr	r3, [sp, #8]
    1970:	add	r3, r2
    1972:	str	r3, [sp, #8]
    1974:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1976:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    197a:	ldr	r1, [sp, #4]
    197c:	subs	r2, r1, r2
    197e:	str	r2, [sp, #4]
    1980:	bne.n	18a2 <usb_serial_write.part.1+0x2a>
    1982:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1984:	add	sp, #20
    1986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    198a:	ldr	r2, [pc, #72]	; (19d4 <usb_serial_write.part.1+0x15c>)
    198c:	ldrb	r4, [r2, #0]
    198e:	mov	r2, r3
    1990:	rsb	r0, r3, #2048	; 0x800
    1994:	b.n	1900 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1996:	ldr	r4, [sp, #4]
    1998:	ldr	r1, [sp, #8]
    199a:	mov	r2, r4
    199c:	str	r3, [sp, #12]
    199e:	bl	14e0 <memcpy>
			tx_available -= size;
    19a2:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19a4:	ldr	r2, [pc, #60]	; (19e4 <usb_serial_write.part.1+0x16c>)
    19a6:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    19aa:	subs	r3, r3, r4
    19ac:	strh.w	r3, [r8]
    19b0:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19b2:	str.w	r1, [r2, #132]	; 0x84
    19b6:	mov	r0, r3
    19b8:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    19ba:	add	sp, #20
    19bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    19c0:	movs	r3, #1
				return sent;
    19c2:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    19c4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    19c6:	add	sp, #20
    19c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    19cc:	ldr	r0, [sp, #4]
    19ce:	b.n	1984 <usb_serial_write.part.1+0x10c>
    19d0:	.word	0x20000b64
    19d4:	.word	0x20000947
    19d8:	.word	0x20000aa0
    19dc:	.word	0x20000a85
    19e0:	.word	0x20201000
    19e4:	.word	0x402e0000
    19e8:	.word	0x20000a86
    19ec:	.word	0x20000b58
    19f0:	.word	0xe000ef70

000019f4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    19f4:	bx	lr
    19f6:	nop

000019f8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    19f8:	ldr	r3, [pc, #196]	; (1ac0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    19fa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    19fe:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    1a00:	ldr	r7, [pc, #192]	; (1ac4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1a02:	cmp	r3, #0
    1a04:	beq.n	1ab0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1a06:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1a0a:	ldr.w	r8, [pc, #236]	; 1af8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    1a0e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1a10:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1a14:	movs	r1, #0
    1a16:	movs	r2, #128	; 0x80
    1a18:	ldr	r0, [pc, #172]	; (1ac8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    1a1a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1a1c:	ldr	r6, [pc, #172]	; (1acc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1a1e:	bl	3304 <memset>
	tx_head = 0;
    1a22:	ldr	r4, [pc, #172]	; (1ad0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    1a24:	ldr	r3, [pc, #172]	; (1ad4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1a26:	mov	r1, r5
    1a28:	mov.w	r2, #256	; 0x100
    1a2c:	ldr	r0, [pc, #168]	; (1ad8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1a2e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1a30:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1a32:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1a34:	bl	3304 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1a38:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1a3a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1a3c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1a3e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1a40:	str	r5, [r6, #8]
    1a42:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1a44:	ldr	r1, [pc, #148]	; (1adc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1a46:	ldr	r6, [pc, #152]	; (1ae0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1a48:	ldr	r0, [pc, #152]	; (1ae4 <usb_serial_configure+0xec>)
	rx_available = 0;
    1a4a:	ldr.w	lr, [pc, #176]	; 1afc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1a4e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1a50:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1a52:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1a54:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1a56:	str	r5, [r6, #0]
    1a58:	str	r5, [r6, #4]
    1a5a:	str	r5, [r6, #8]
    1a5c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1a5e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1a62:	bl	28f8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1a66:	ldrh.w	r1, [r8]
    1a6a:	mov	r2, r5
    1a6c:	ldr	r3, [pc, #120]	; (1ae8 <usb_serial_configure+0xf0>)
    1a6e:	movs	r0, #3
    1a70:	bl	2894 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1a74:	mov	r3, r5
    1a76:	ldrh	r1, [r7, #0]
    1a78:	movs	r2, #1
    1a7a:	movs	r0, #4
    1a7c:	bl	28f8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1a80:	mov	r0, r4
    1a82:	adds	r4, #1
    1a84:	bl	16c0 <rx_queue_transfer>
    1a88:	cmp	r4, #8
    1a8a:	bne.n	1a80 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1a8c:	ldr	r3, [pc, #92]	; (1aec <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    1a8e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1a90:	ldr	r0, [pc, #92]	; (1af0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    1a92:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1a94:	ldr	r4, [pc, #92]	; (1af4 <usb_serial_configure+0xfc>)
    1a96:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1a98:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1a9c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1aa0:	ldr.w	r2, [r3, #328]	; 0x148
    1aa4:	orr.w	r2, r2, #16777216	; 0x1000000
    1aa8:	str.w	r2, [r3, #328]	; 0x148
    1aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1ab0:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    1ab2:	ldr.w	r8, [pc, #68]	; 1af8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1ab6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1ab8:	strh.w	r3, [r8]
    1abc:	b.n	1a14 <usb_serial_configure+0x1c>
    1abe:	nop
    1ac0:	.word	0x20000b30
    1ac4:	.word	0x20000944
    1ac8:	.word	0x20000aa0
    1acc:	.word	0x20000a70
    1ad0:	.word	0x20000947
    1ad4:	.word	0x20000a86
    1ad8:	.word	0x20000960
    1adc:	.word	0x20000a84
    1ae0:	.word	0x20000934
    1ae4:	.word	0x20000a60
    1ae8:	.word	0x0000172d
    1aec:	.word	0x402e0000
    1af0:	.word	0x20000b20
    1af4:	.word	0x000017e1
    1af8:	.word	0x20000a6e
    1afc:	.word	0x20000a80

00001b00 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b00:	ldr	r3, [pc, #196]	; (1bc8 <usb_serial_read+0xc8>)
    1b02:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1b06:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b0a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1b0c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1b0e:	ldr	r3, [pc, #188]	; (1bcc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1b10:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1b12:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1b14:	cmp	r1, #0
    1b16:	beq.n	1bc0 <usb_serial_read+0xc0>
    1b18:	ldr	r3, [pc, #180]	; (1bd0 <usb_serial_read+0xd0>)
    1b1a:	uxtb	r4, r4
    1b1c:	ldrb	r3, [r3, #0]
    1b1e:	cmp	r4, r3
    1b20:	beq.n	1bc4 <usb_serial_read+0xc4>
    1b22:	mov	sl, r0
    1b24:	movs	r7, #0
    1b26:	ldr.w	fp, [pc, #192]	; 1be8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1b2a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1b2c:	ldr	r3, [pc, #164]	; (1bd4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1b2e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b32:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1b34:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1b36:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1b38:	ldr	r3, [pc, #156]	; (1bd8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1b3a:	it	cs
    1b3c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1b3e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1b40:	ldr	r3, [pc, #144]	; (1bd4 <usb_serial_read+0xd4>)
    1b42:	ldrh.w	lr, [r3, r5, lsl #1]
    1b46:	ldr	r3, [pc, #148]	; (1bdc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b48:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1b4c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b50:	ldr	r3, [pc, #140]	; (1be0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1b52:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b56:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1b58:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b5a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    1b5c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1b5e:	bcs.n	1b94 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1b60:	add.w	r1, lr, r5, lsl #9
    1b64:	mov	r2, r8
    1b66:	add	r1, r3
    1b68:	bl	14e0 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    1b6c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1b6e:	ldr.w	r1, [fp]
    1b72:	mov	r0, r9
			rx_index[i] += len;
    1b74:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1b78:	rsb	r1, r8, r1
			rx_index[i] += len;
    1b7c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1b7e:	str.w	r1, [fp]
			rx_index[i] += len;
    1b82:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1b86:	ldr	r3, [pc, #92]	; (1be4 <usb_serial_read+0xe4>)
    1b88:	mov.w	r2, #131072	; 0x20000
    1b8c:	str	r2, [r3, #0]
	return count;
}
    1b8e:	add	sp, #12
    1b90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1b94:	bl	14e0 <memcpy>
			p += avail;
			rx_available -= avail;
    1b98:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1b9c:	uxtb	r3, r4
			rx_queue_transfer(i);
    1b9e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1ba0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1ba2:	add	sl, r6
			rx_available -= avail;
    1ba4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1ba8:	ldr	r2, [pc, #32]	; (1bcc <usb_serial_read+0xcc>)
    1baa:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1bac:	bl	16c0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1bb0:	cmp	r9, r7
    1bb2:	bls.n	1bbc <usb_serial_read+0xbc>
    1bb4:	ldr	r3, [pc, #24]	; (1bd0 <usb_serial_read+0xd0>)
    1bb6:	ldrb	r3, [r3, #0]
    1bb8:	cmp	r4, r3
    1bba:	bne.n	1b2a <usb_serial_read+0x2a>
    1bbc:	mov	r0, r7
    1bbe:	b.n	1b86 <usb_serial_read+0x86>
    1bc0:	mov	r0, r1
    1bc2:	b.n	1b86 <usb_serial_read+0x86>
    1bc4:	movs	r0, #0
    1bc6:	b.n	1b86 <usb_serial_read+0x86>
    1bc8:	.word	0xe000e18c
    1bcc:	.word	0x20000a60
    1bd0:	.word	0x20000a84
    1bd4:	.word	0x20000934
    1bd8:	.word	0x20000a64
    1bdc:	.word	0x20000a70
    1be0:	.word	0x20200000
    1be4:	.word	0xe000e10c
    1be8:	.word	0x20000a80

00001bec <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1bec:	ldr	r3, [pc, #44]	; (1c1c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1bee:	ldr	r2, [pc, #48]	; (1c20 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1bf0:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1bf2:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1bf4:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1bf6:	cmp	r3, r2
    1bf8:	beq.n	1c16 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1bfa:	adds	r3, #1
	uint32_t i = rx_list[tail];
    1bfc:	ldr	r0, [pc, #36]	; (1c24 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1bfe:	ldr	r2, [pc, #40]	; (1c28 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1c00:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1c02:	ldr	r1, [pc, #40]	; (1c2c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1c04:	it	cs
    1c06:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1c08:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1c0a:	ldrh.w	r1, [r1, r3, lsl #1]
    1c0e:	add.w	r3, r2, r3, lsl #9
    1c12:	ldrb	r0, [r3, r1]
    1c14:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1c16:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1c1a:	bx	lr
    1c1c:	.word	0x20000a60
    1c20:	.word	0x20000a84
    1c24:	.word	0x20000a64
    1c28:	.word	0x20200000
    1c2c:	.word	0x20000934

00001c30 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1c30:	ldr	r3, [pc, #4]	; (1c38 <usb_serial_available+0x8>)
    1c32:	ldr	r0, [r3, #0]
}
    1c34:	bx	lr
    1c36:	nop
    1c38:	.word	0x20000a80

00001c3c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1c3c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1c40:	ldr	r6, [pc, #84]	; (1c98 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    1c42:	ldr	r5, [pc, #88]	; (1c9c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1c44:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    1c46:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1c48:	uxtb	r4, r4
	while (tail != rx_head) {
    1c4a:	cmp	r4, r3
    1c4c:	beq.n	1c92 <usb_serial_flush_input+0x56>
    1c4e:	ldr.w	r9, [pc, #84]	; 1ca4 <usb_serial_flush_input+0x68>
    1c52:	ldr.w	fp, [pc, #84]	; 1ca8 <usb_serial_flush_input+0x6c>
    1c56:	ldr.w	r8, [pc, #84]	; 1cac <usb_serial_flush_input+0x70>
    1c5a:	ldr	r7, [pc, #68]	; (1ca0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    1c5c:	adds	r4, #1
    1c5e:	cmp	r4, #8
    1c60:	uxtb.w	sl, r4
    1c64:	bls.n	1c6a <usb_serial_flush_input+0x2e>
    1c66:	movs	r4, #0
    1c68:	mov	sl, r4
		uint32_t i = rx_list[tail];
    1c6a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1c6e:	ldr.w	r2, [fp]
    1c72:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    1c76:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1c78:	ldrh.w	r1, [r7, r1, lsl #1]
    1c7c:	subs	r3, r3, r1
    1c7e:	subs	r3, r2, r3
    1c80:	str.w	r3, [fp]
		rx_queue_transfer(i);
    1c84:	bl	16c0 <rx_queue_transfer>
		rx_tail = tail;
    1c88:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1c8c:	ldrb	r3, [r5, #0]
    1c8e:	cmp	r4, r3
    1c90:	bne.n	1c5c <usb_serial_flush_input+0x20>
    1c92:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c96:	nop
    1c98:	.word	0x20000a60
    1c9c:	.word	0x20000a84
    1ca0:	.word	0x20000934
    1ca4:	.word	0x20000a64
    1ca8:	.word	0x20000a80
    1cac:	.word	0x20000a70

00001cb0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1cb0:	push	{lr}
    1cb2:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    1cb4:	movs	r1, #1
    1cb6:	add.w	r0, sp, #7
    1cba:	bl	1b00 <usb_serial_read>
    1cbe:	cbz	r0, 1cca <usb_serial_getchar+0x1a>
    1cc0:	ldrb.w	r0, [sp, #7]
	return -1;
}
    1cc4:	add	sp, #12
    1cc6:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1cca:	mov.w	r0, #4294967295
    1cce:	b.n	1cc4 <usb_serial_getchar+0x14>

00001cd0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1cd0:	ldr	r3, [pc, #36]	; (1cf8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cd2:	push	{lr}
    1cd4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1cd6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cd8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1cdc:	cbnz	r3, 1ce8 <usb_serial_putchar+0x18>
    1cde:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    1ce2:	add	sp, #12
    1ce4:	ldr.w	pc, [sp], #4
    1ce8:	movs	r1, #1
    1cea:	add.w	r0, sp, #7
    1cee:	bl	1878 <usb_serial_write.part.1>
    1cf2:	add	sp, #12
    1cf4:	ldr.w	pc, [sp], #4
    1cf8:	.word	0x20000b58

00001cfc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1cfc:	ldr	r3, [pc, #16]	; (1d10 <usb_serial_write+0x14>)
    1cfe:	ldrb	r3, [r3, #0]
    1d00:	and.w	r2, r3, #255	; 0xff
    1d04:	cbz	r3, 1d0a <usb_serial_write+0xe>
    1d06:	b.w	1878 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1d0a:	mov	r0, r2
    1d0c:	bx	lr
    1d0e:	nop
    1d10:	.word	0x20000b58

00001d14 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1d14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1d18:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1d1a:	ldr.w	r8, [pc, #64]	; 1d5c <usb_serial_write_buffer_free+0x48>
    1d1e:	movs	r3, #1
    1d20:	ldr	r5, [pc, #48]	; (1d54 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    1d22:	mov	r7, r4
    1d24:	ldr	r6, [pc, #48]	; (1d58 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1d26:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1d2a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1d2c:	mov	r0, r5
    1d2e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1d30:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1d32:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1d36:	beq.n	1d44 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1d38:	bl	29dc <usb_transfer_status>
    1d3c:	lsls	r3, r0, #24
    1d3e:	it	pl
    1d40:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1d44:	cmp	r4, #4
    1d46:	bne.n	1d2a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1d48:	movs	r3, #0
	return sum;
}
    1d4a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1d4c:	strb.w	r3, [r8]
	return sum;
}
    1d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d54:	.word	0x20000aa0
    1d58:	.word	0x20000947
    1d5c:	.word	0x20000946

00001d60 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1d60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1d64:	ldr	r3, [pc, #124]	; (1de4 <usb_serial_flush_output+0x84>)
    1d66:	ldrb	r3, [r3, #0]
    1d68:	cbz	r3, 1d70 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1d6a:	ldr	r5, [pc, #124]	; (1de8 <usb_serial_flush_output+0x88>)
    1d6c:	ldrh	r2, [r5, #0]
    1d6e:	cbnz	r2, 1d74 <usb_serial_flush_output+0x14>
    1d70:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1d74:	ldr.w	r8, [pc, #132]	; 1dfc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1d78:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1d7c:	ldr	r6, [pc, #108]	; (1dec <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1d7e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    1d82:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1d86:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1d88:	ldr	r4, [pc, #100]	; (1df0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1d8a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1d8c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1d90:	ldr	r7, [pc, #96]	; (1df4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1d92:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1d96:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1d98:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1d9c:	mov	r1, r4
    1d9e:	bl	2960 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1da2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1da6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    1daa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1dae:	ldr	r3, [pc, #72]	; (1df8 <usb_serial_flush_output+0x98>)
    1db0:	str	r1, [r3, #0]
		location += 32;
    1db2:	adds	r1, #32
	} while (location < end_addr);
    1db4:	cmp	r2, r1
    1db6:	bhi.n	1db0 <usb_serial_flush_output+0x50>
	asm("dsb");
    1db8:	dsb	sy
	asm("isb");
    1dbc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1dc0:	movs	r0, #4
    1dc2:	mov	r1, r6
    1dc4:	bl	2990 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1dc8:	ldrb.w	r3, [r8]
    1dcc:	ldr	r2, [pc, #44]	; (1dfc <usb_serial_flush_output+0x9c>)
    1dce:	adds	r3, #1
    1dd0:	uxtb	r3, r3
    1dd2:	cmp	r3, #3
    1dd4:	it	hi
    1dd6:	movhi	r3, #0
    1dd8:	strb	r3, [r2, #0]
	tx_available = 0;
    1dda:	movs	r3, #0
    1ddc:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1dde:	strb	r3, [r7, #0]
    1de0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1de4:	.word	0x20000b58
    1de8:	.word	0x20000a86
    1dec:	.word	0x20000aa0
    1df0:	.word	0x20201000
    1df4:	.word	0x20000946
    1df8:	.word	0xe000ef70
    1dfc:	.word	0x20000947

00001e00 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e00:	ldr	r2, [pc, #600]	; (205c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e02:	ldr	r3, [pc, #604]	; (2060 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e04:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1e06:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1e0a:	ldr	r4, [pc, #600]	; (2064 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e0c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1e10:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1e12:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e14:	bls.n	1e50 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1e16:	ldr	r3, [pc, #592]	; (2068 <set_arm_clock+0x268>)
    1e18:	cmp	r0, r3
    1e1a:	bls.w	2048 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1e1e:	ldr	r3, [pc, #588]	; (206c <set_arm_clock+0x26c>)
    1e20:	movw	r5, #1575	; 0x627
    1e24:	ldr	r7, [pc, #584]	; (2070 <set_arm_clock+0x270>)
    1e26:	add	r3, r0
    1e28:	ldr	r4, [pc, #584]	; (2074 <set_arm_clock+0x274>)
    1e2a:	lsrs	r2, r3, #8
    1e2c:	umull	r3, r2, r7, r2
    1e30:	lsrs	r3, r2, #7
    1e32:	add.w	r3, r3, r3, lsl #2
    1e36:	add.w	r2, r3, r3, lsl #2
    1e3a:	addw	r3, r2, #1250	; 0x4e2
    1e3e:	cmp	r3, r5
    1e40:	it	cs
    1e42:	movcs	r3, r5
    1e44:	sub.w	r3, r3, #800	; 0x320
    1e48:	umull	r3, r5, r4, r3
    1e4c:	lsrs	r5, r5, #3
    1e4e:	b.n	1e5a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1e50:	ldr	r5, [pc, #548]	; (2078 <set_arm_clock+0x278>)
    1e52:	cmp	r0, r5
    1e54:	ite	ls
    1e56:	movls	r5, #6
    1e58:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e5a:	ldr	r2, [pc, #516]	; (2060 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e5c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e60:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e64:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e66:	orr.w	r3, r3, #192	; 0xc0
    1e6a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e6e:	bcs.n	1e86 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1e70:	ldr	r3, [pc, #496]	; (2064 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1e72:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e76:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1e78:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1e7a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e7c:	ldr	r3, [r2, #0]
    1e7e:	cmp	r3, #0
    1e80:	bge.n	1e7c <set_arm_clock+0x7c>
    1e82:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1e86:	ands.w	r3, lr, #33554432	; 0x2000000
    1e8a:	bne.n	1ef0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1e8c:	ldr	r4, [pc, #492]	; (207c <set_arm_clock+0x27c>)
    1e8e:	ldr	r2, [pc, #496]	; (2080 <set_arm_clock+0x280>)
    1e90:	ldr.w	ip, [r4, #16]
    1e94:	mov	r4, r2
    1e96:	and.w	r2, ip, r2
    1e9a:	cmp	r2, r4
    1e9c:	itet	eq
    1e9e:	moveq.w	r3, #402653184	; 0x18000000
    1ea2:	movne.w	r2, #4096	; 0x1000
    1ea6:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1ea8:	eor.w	r4, lr, r3
    1eac:	tst.w	r4, #939524096	; 0x38000000
    1eb0:	beq.n	1ec4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1eb2:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1eb6:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1eba:	ldr	r4, [pc, #420]	; (2060 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1ebc:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1ec0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1ec4:	eor.w	r3, r1, r2
    1ec8:	tst.w	r3, #12288	; 0x3000
    1ecc:	beq.n	1ee0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ece:	ldr	r3, [pc, #400]	; (2060 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1ed0:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1ed4:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1ed6:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ed8:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1eda:	ldr	r3, [r2, #72]	; 0x48
    1edc:	lsls	r4, r3, #28
    1ede:	bmi.n	1eda <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1ee0:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1ee4:	ldr	r2, [pc, #376]	; (2060 <set_arm_clock+0x260>)
    1ee6:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1eea:	ldr	r3, [r2, #72]	; 0x48
    1eec:	lsls	r1, r3, #26
    1eee:	bmi.n	1eea <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1ef0:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1ef2:	ldr	r4, [pc, #400]	; (2084 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1ef4:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1ef6:	mul.w	r3, r1, r2
    1efa:	mul.w	r3, r0, r3
    1efe:	cmp	r3, r4
    1f00:	bhi.n	1f16 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1f02:	cmp	r2, #7
    1f04:	bhi.w	2032 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1f08:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f0a:	mul.w	r3, r1, r2
    1f0e:	mul.w	r3, r0, r3
    1f12:	cmp	r3, r4
    1f14:	bls.n	1f02 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1f16:	ldr	r0, [pc, #368]	; (2088 <set_arm_clock+0x288>)
    1f18:	ldr	r4, [pc, #368]	; (208c <set_arm_clock+0x28c>)
    1f1a:	add	r0, r3
    1f1c:	umull	r0, r3, r4, r0
    1f20:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1f22:	cmp	r3, #108	; 0x6c
    1f24:	bhi.w	203e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1f28:	cmp	r3, #53	; 0x35
    1f2a:	bhi.w	204c <set_arm_clock+0x24c>
    1f2e:	ldr.w	r8, [pc, #392]	; 20b8 <set_arm_clock+0x2b8>
    1f32:	movs	r3, #54	; 0x36
    1f34:	ldr	r0, [pc, #344]	; (2090 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f36:	ldr.w	ip, [pc, #324]	; 207c <set_arm_clock+0x27c>
    1f3a:	ldr	r4, [pc, #344]	; (2094 <set_arm_clock+0x294>)
    1f3c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f40:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f44:	and.w	r4, r9, r4
    1f48:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f4a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f4e:	beq.n	1f68 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1f50:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f54:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f58:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f5a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1f5e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f62:	ldr	r3, [r4, #0]
    1f64:	cmp	r3, #0
    1f66:	bge.n	1f62 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1f68:	ldr.w	ip, [pc, #244]	; 2060 <set_arm_clock+0x260>
    1f6c:	subs	r2, #1
    1f6e:	ldr.w	r3, [ip, #16]
    1f72:	and.w	r3, r3, #7
    1f76:	cmp	r3, r2
    1f78:	beq.n	1f8a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f7a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f7e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f80:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f84:	ldr	r3, [r4, #72]	; 0x48
    1f86:	lsls	r3, r3, #15
    1f88:	bmi.n	1f84 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1f8a:	subs	r1, #1
    1f8c:	lsls	r1, r1, #10
    1f8e:	eor.w	r3, lr, r1
    1f92:	tst.w	r3, #7168	; 0x1c00
    1f96:	beq.n	1fb2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1f98:	ldr	r3, [pc, #196]	; (2060 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1f9a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1f9e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fa2:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fa4:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1fa8:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fac:	ldr	r3, [r2, #72]	; 0x48
    1fae:	lsls	r1, r3, #30
    1fb0:	bmi.n	1fac <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1fb2:	ldr	r3, [pc, #228]	; (2098 <set_arm_clock+0x298>)
    1fb4:	ldr	r1, [pc, #228]	; (209c <set_arm_clock+0x29c>)
    1fb6:	add	r3, r0
    1fb8:	lsrs	r3, r3, #7
    1fba:	umull	r3, r1, r1, r3
    1fbe:	lsrs	r1, r1, #12
    1fc0:	cmp	r1, #4
    1fc2:	it	cs
    1fc4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1fc6:	subs	r3, r1, #1
    1fc8:	lsls	r3, r3, #8
    1fca:	eor.w	r2, lr, r3
    1fce:	tst.w	r2, #768	; 0x300
    1fd2:	beq.n	1fe4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1fd4:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fd8:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1fdc:	ldr	r2, [pc, #128]	; (2060 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fde:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1fe2:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fe4:	ldr	r3, [pc, #120]	; (2060 <set_arm_clock+0x260>)
    1fe6:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1fe8:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fea:	bic.w	r4, r4, #33554432	; 0x2000000
    1fee:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ff0:	ldr	r3, [r2, #72]	; 0x48
    1ff2:	lsls	r3, r3, #26
    1ff4:	bmi.n	1ff0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1ff6:	ldr	r3, [pc, #168]	; (20a0 <set_arm_clock+0x2a0>)
    1ff8:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1ffc:	ldr	r4, [pc, #164]	; (20a4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1ffe:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2000:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2004:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2006:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    200a:	ldr	r4, [pc, #156]	; (20a8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    200c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2010:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2014:	ldr	r2, [pc, #148]	; (20ac <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2016:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2018:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    201a:	bcs.n	202e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    201c:	ldr	r3, [pc, #68]	; (2064 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    201e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2022:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2024:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2026:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2028:	ldr	r3, [r2, #0]
    202a:	cmp	r3, #0
    202c:	bge.n	2028 <set_arm_clock+0x228>
	}

	return frequency;
}
    202e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2032:	cmp	r1, #4
    2034:	bhi.w	1f16 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2038:	adds	r1, #1
				div_arm = 1;
    203a:	movs	r2, #1
    203c:	b.n	1ef6 <set_arm_clock+0xf6>
    203e:	ldr.w	r8, [pc, #124]	; 20bc <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2042:	movs	r3, #108	; 0x6c
    2044:	ldr	r0, [pc, #104]	; (20b0 <set_arm_clock+0x2b0>)
    2046:	b.n	1f36 <set_arm_clock+0x136>
    2048:	movs	r5, #18
    204a:	b.n	1e5a <set_arm_clock+0x5a>
    204c:	ldr	r0, [pc, #100]	; (20b4 <set_arm_clock+0x2b4>)
    204e:	ldr.w	r8, [pc, #112]	; 20c0 <set_arm_clock+0x2c0>
    2052:	mul.w	r0, r0, r3
    2056:	orr.w	r8, r3, r8
    205a:	b.n	1f36 <set_arm_clock+0x136>
    205c:	.word	0x1f78a400
    2060:	.word	0x400fc000
    2064:	.word	0x40080000
    2068:	.word	0x23c34600
    206c:	.word	0xdc3cba00
    2070:	.word	0x004cb223
    2074:	.word	0x51eb851f
    2078:	.word	0x016e3600
    207c:	.word	0x400d8000
    2080:	.word	0x80003040
    2084:	.word	0x269fb1ff
    2088:	.word	0x005b8d80
    208c:	.word	0x165e9f81
    2090:	.word	0x269fb200
    2094:	.word	0x8001307f
    2098:	.word	0x08f0d17f
    209c:	.word	0x00e5109f
    20a0:	.word	0x431bde83
    20a4:	.word	0x2000058c
    20a8:	.word	0x20000588
    20ac:	.word	0x20000b60
    20b0:	.word	0x4d3f6400
    20b4:	.word	0x00b71b00
    20b8:	.word	0x80002036
    20bc:	.word	0x8000206c
    20c0:	.word	0x80002000

000020c4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    20c4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    20c6:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    20c8:	cbz	r3, 20d2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    20ca:	ldr	r3, [r2, #4]
    20cc:	orr.w	r3, r3, #32768	; 0x8000
    20d0:	str	r3, [r2, #4]
	}
	__disable_irq();
    20d2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    20d4:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    20d6:	cbz	r4, 2100 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    20d8:	ldr	r3, [pc, #64]	; (211c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    20da:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    20dc:	ldr.w	r4, [r3, #432]	; 0x1b0
    20e0:	tst	r4, r1
    20e2:	bne.n	2114 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    20e4:	ldr.w	r4, [r3, #320]	; 0x140
    20e8:	orr.w	r4, r4, #16384	; 0x4000
    20ec:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    20f0:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    20f4:	ldr.w	r4, [r3, #320]	; 0x140
    20f8:	lsls	r4, r4, #17
    20fa:	bpl.n	20e4 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    20fc:	tst	r1, r5
    20fe:	bne.n	2114 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2100:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    2102:	ldr	r4, [pc, #24]	; (211c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2104:	str	r2, [r0, #8]
	endpoint->status = 0;
    2106:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2108:	ldr.w	r3, [r4, #432]	; 0x1b0
    210c:	orrs	r1, r3
    210e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2112:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2114:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2116:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2118:	pop	{r4, r5}
    211a:	bx	lr
    211c:	.word	0x402e0000

00002120 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2120:	push	{r4, r5, r6, lr}
    2122:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2124:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    2126:	cbz	r0, 214e <run_callbacks+0x2e>
    2128:	mov	r2, r0
    212a:	movs	r4, #0
    212c:	b.n	2136 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    212e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2130:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2132:	cmp	r2, #1
    2134:	beq.n	2150 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2136:	ldr	r3, [r2, #4]
    2138:	ands.w	r3, r3, #128	; 0x80
    213c:	beq.n	212e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    213e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2140:	cbz	r4, 214e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2142:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2144:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    2146:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2148:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    214a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    214c:	bne.n	2142 <run_callbacks+0x22>
    214e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    2150:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    2152:	str	r3, [r6, #52]	; 0x34
			break;
    2154:	b.n	2140 <run_callbacks+0x20>
    2156:	nop

00002158 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2158:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    215a:	cbnz	r1, 219a <endpoint0_transmit.constprop.1+0x42>
    215c:	ldr	r4, [pc, #136]	; (21e8 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    215e:	ldr	r1, [pc, #140]	; (21ec <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2160:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2162:	ldr	r3, [pc, #140]	; (21f0 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2164:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2166:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2168:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    216a:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    216c:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    216e:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2170:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2172:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2176:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2178:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    217c:	ldr	r5, [pc, #116]	; (21f4 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    217e:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2182:	ldr.w	r1, [r3, #432]	; 0x1b0
    2186:	orr.w	r1, r1, #1
    218a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    218e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2190:	ldr.w	r3, [r2, #432]	; 0x1b0
    2194:	cmp	r3, #0
    2196:	bne.n	2190 <endpoint0_transmit.constprop.1+0x38>
}
    2198:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    219a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    219c:	ldr	r3, [pc, #88]	; (21f8 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    219e:	ldr	r5, [pc, #80]	; (21f0 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    21a0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    21a2:	ldr	r4, [pc, #68]	; (21e8 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    21a4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    21a8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    21aa:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    21ac:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    21ae:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    21b2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    21b4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    21b8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    21ba:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    21be:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    21c2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    21c6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    21c8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    21ca:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    21ce:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    21d2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    21d6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    21d8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    21da:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    21de:	ldr.w	r3, [r2, #432]	; 0x1b0
    21e2:	cmp	r3, #0
    21e4:	bne.n	21de <endpoint0_transmit.constprop.1+0x86>
    21e6:	b.n	215e <endpoint0_transmit.constprop.1+0x6>
    21e8:	.word	0x20002000
    21ec:	.word	0x20001020
    21f0:	.word	0x402e0000
    21f4:	.word	0x20000b34
    21f8:	.word	0x20001000

000021fc <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    21fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2200:	ldr	r4, [pc, #752]	; (24f4 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    2202:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2204:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2208:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    220c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2210:	beq.n	22d0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2212:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2216:	cmp	r3, #0
    2218:	beq.n	22c6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    221a:	mov.w	fp, #65537	; 0x10001
    221e:	ldr.w	r9, [pc, #764]	; 251c <isr+0x320>
    2222:	ldr	r6, [pc, #724]	; (24f8 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2224:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2226:	mov	sl, fp
    2228:	ldr	r0, [r6, #40]	; 0x28
    222a:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    222c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2230:	ldr.w	r3, [r4, #320]	; 0x140
    2234:	orr.w	r3, r3, #8192	; 0x2000
    2238:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    223c:	ldr.w	r3, [r4, #320]	; 0x140
    2240:	lsls	r7, r3, #18
    2242:	bpl.n	2230 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2244:	ldr.w	r3, [r5, #320]	; 0x140
    2248:	bic.w	r3, r3, #8192	; 0x2000
    224c:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2250:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2254:	ldr.w	r3, [r4, #436]	; 0x1b4
    2258:	ands.w	r3, r3, #65537	; 0x10001
    225c:	bne.n	2254 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    225e:	uxth	r1, r0
    2260:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2264:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2268:	cmp	r1, r7
    226a:	bhi.w	23b8 <isr+0x1bc>
    226e:	cmp.w	r1, #1664	; 0x680
    2272:	bcs.w	264c <isr+0x450>
    2276:	cmp.w	r1, #258	; 0x102
    227a:	beq.w	2552 <isr+0x356>
    227e:	bhi.w	244a <isr+0x24e>
    2282:	cmp	r1, #128	; 0x80
    2284:	beq.w	2538 <isr+0x33c>
    2288:	cmp	r1, #130	; 0x82
    228a:	bne.w	243a <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    228e:	uxth	r2, r2
    2290:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2294:	cmp	r1, #7
    2296:	bhi.w	243a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    229a:	lsls	r1, r1, #2
    229c:	ldr	r0, [pc, #604]	; (24fc <isr+0x300>)
		reply_buffer[0] = 0;
    229e:	ldr	r7, [pc, #608]	; (2500 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    22a0:	add	r0, r1
    22a2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    22a4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    22a6:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    22a8:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    22aa:	bpl.w	26ca <isr+0x4ce>
    22ae:	lsls	r2, r1, #15
    22b0:	bpl.n	22b6 <isr+0xba>
			reply_buffer[0] = 1;
    22b2:	movs	r3, #1
    22b4:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    22b6:	movs	r1, #2
    22b8:	ldr	r0, [pc, #580]	; (2500 <isr+0x304>)
    22ba:	bl	2158 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    22be:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    22c2:	cmp	r3, #0
    22c4:	bne.n	2228 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    22c6:	ldr	r2, [pc, #556]	; (24f4 <isr+0x2f8>)
    22c8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    22cc:	cmp	r3, #0
    22ce:	bne.n	2372 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    22d0:	tst.w	r8, #64	; 0x40
    22d4:	beq.n	2308 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    22d6:	ldr	r3, [pc, #540]	; (24f4 <isr+0x2f8>)
    22d8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    22dc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    22de:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    22e2:	ldr.w	r1, [r3, #444]	; 0x1bc
    22e6:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    22ea:	ldr.w	r4, [r2, #432]	; 0x1b0
    22ee:	ldr	r3, [pc, #516]	; (24f4 <isr+0x2f8>)
    22f0:	cmp	r4, #0
    22f2:	bne.n	22ea <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    22f4:	mov.w	r2, #4294967295
    22f8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    22fc:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2300:	bl	19f4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2304:	ldr	r3, [pc, #508]	; (2504 <isr+0x308>)
    2306:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2308:	tst.w	r8, #16777216	; 0x1000000
    230c:	beq.n	2316 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    230e:	ldr	r3, [pc, #504]	; (2508 <isr+0x30c>)
    2310:	ldr	r3, [r3, #0]
    2312:	cbz	r3, 2316 <isr+0x11a>
    2314:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2316:	tst.w	r8, #33554432	; 0x2000000
    231a:	beq.n	2324 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    231c:	ldr	r3, [pc, #492]	; (250c <isr+0x310>)
    231e:	ldr	r3, [r3, #0]
    2320:	cbz	r3, 2324 <isr+0x128>
    2322:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2324:	tst.w	r8, #4
    2328:	beq.n	233c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    232a:	ldr	r3, [pc, #456]	; (24f4 <isr+0x2f8>)
    232c:	ldr.w	r3, [r3, #388]	; 0x184
    2330:	ands.w	r3, r3, #512	; 0x200
    2334:	beq.n	23b2 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2336:	ldr	r3, [pc, #472]	; (2510 <isr+0x314>)
    2338:	movs	r2, #1
    233a:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    233c:	ldr	r3, [pc, #436]	; (24f4 <isr+0x2f8>)
    233e:	ldr.w	r2, [r3, #328]	; 0x148
    2342:	lsls	r2, r2, #24
    2344:	bpl.n	236c <isr+0x170>
    2346:	tst.w	r8, #128	; 0x80
    234a:	beq.n	236c <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    234c:	ldr	r1, [pc, #452]	; (2514 <isr+0x318>)
    234e:	ldrb	r2, [r1, #0]
    2350:	cbz	r2, 236c <isr+0x170>
			if (--usb_reboot_timer == 0) {
    2352:	subs	r2, #1
    2354:	uxtb	r2, r2
    2356:	strb	r2, [r1, #0]
    2358:	cbnz	r2, 236c <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    235a:	ldr	r1, [pc, #444]	; (2518 <isr+0x31c>)
    235c:	ldrb	r2, [r1, #0]
    235e:	and.w	r2, r2, #251	; 0xfb
    2362:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2364:	cmp	r2, #0
    2366:	beq.w	27ce <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    236a:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    236c:	add	sp, #12
    236e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2372:	ldr	r1, [pc, #424]	; (251c <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2374:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2378:	ldr	r0, [r1, #0]
    237a:	tst	r3, r0
    237c:	bne.w	2756 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2380:	ldr	r2, [pc, #384]	; (2504 <isr+0x308>)
    2382:	ldr	r4, [r2, #0]
			if (completestatus) {
    2384:	ands	r4, r3
    2386:	beq.n	22d0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2388:	lsls	r3, r4, #29
    238a:	bmi.w	27ec <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    238e:	lsls	r7, r4, #13
    2390:	bmi.w	27e4 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2394:	lsls	r6, r4, #28
    2396:	bmi.w	27fc <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    239a:	lsls	r5, r4, #12
    239c:	bmi.w	27f4 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    23a0:	lsls	r0, r4, #27
    23a2:	bmi.w	27dc <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    23a6:	lsls	r1, r4, #11
    23a8:	bpl.n	22d0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    23aa:	ldr	r0, [pc, #372]	; (2520 <isr+0x324>)
    23ac:	bl	2120 <run_callbacks>
    23b0:	b.n	22d0 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    23b2:	ldr	r2, [pc, #348]	; (2510 <isr+0x314>)
    23b4:	strb	r3, [r2, #0]
    23b6:	b.n	233c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    23b8:	movw	r7, #8225	; 0x2021
    23bc:	cmp	r1, r7
    23be:	beq.n	2432 <isr+0x236>
    23c0:	bhi.n	24a2 <isr+0x2a6>
    23c2:	cmp.w	r1, #2176	; 0x880
    23c6:	beq.w	2630 <isr+0x434>
    23ca:	cmp.w	r1, #2304	; 0x900
    23ce:	bne.n	243a <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    23d0:	ubfx	r0, r0, #16, #8
    23d4:	ldr	r2, [pc, #332]	; (2524 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    23d6:	ldr	r1, [pc, #336]	; (2528 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    23d8:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    23da:	ldr	r7, [pc, #336]	; (252c <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    23dc:	ldr	r2, [pc, #336]	; (2530 <isr+0x334>)
    23de:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    23e0:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    23e4:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    23e8:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    23ec:	bl	19f8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    23f0:	ldr	r2, [pc, #320]	; (2534 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    23f2:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    23f4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    23f6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    23f8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    23fa:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    23fc:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    23fe:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2402:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2404:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2408:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    240a:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    240e:	ldr.w	r2, [r5, #432]	; 0x1b0
    2412:	orr.w	r2, r2, #65536	; 0x10000
    2416:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    241a:	ldr	r2, [pc, #256]	; (251c <isr+0x320>)
    241c:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    241e:	ldr.w	r3, [r4, #432]	; 0x1b0
    2422:	cmp	r3, #0
    2424:	bne.n	241e <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2426:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    242a:	cmp	r3, #0
    242c:	bne.w	2228 <isr+0x2c>
    2430:	b.n	22c6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    2432:	lsrs	r1, r2, #16
    2434:	cmp	r1, #7
    2436:	beq.w	26d2 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    243a:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    243e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2442:	cmp	r3, #0
    2444:	bne.w	2228 <isr+0x2c>
    2448:	b.n	22c6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    244a:	movw	r7, #770	; 0x302
    244e:	cmp	r1, r7
    2450:	beq.w	25ca <isr+0x3ce>
    2454:	cmp.w	r1, #1280	; 0x500
    2458:	bne.n	243a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    245a:	ldr	r2, [pc, #216]	; (2534 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    245c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    245e:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2460:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2462:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2464:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2466:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    246a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    246c:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2470:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2472:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2476:	ldr.w	r3, [r5, #432]	; 0x1b0
    247a:	orr.w	r3, r3, #65536	; 0x10000
    247e:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2482:	ldr.w	r3, [r4, #432]	; 0x1b0
    2486:	cmp	r3, #0
    2488:	bne.n	2482 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    248a:	lsrs	r3, r0, #16
    248c:	lsls	r3, r3, #25
    248e:	orr.w	r3, r3, #16777216	; 0x1000000
    2492:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2496:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    249a:	cmp	r3, #0
    249c:	bne.w	2228 <isr+0x2c>
    24a0:	b.n	22c6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    24a2:	movw	r3, #8737	; 0x2221
    24a6:	cmp	r1, r3
    24a8:	beq.w	25b8 <isr+0x3bc>
    24ac:	movw	r3, #8993	; 0x2321
    24b0:	cmp	r1, r3
    24b2:	bne.n	243a <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    24b4:	ldr	r3, [pc, #124]	; (2534 <isr+0x338>)
    24b6:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    24b8:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    24ba:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    24bc:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    24be:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    24c0:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    24c4:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    24c6:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    24ca:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    24cc:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    24ce:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    24d2:	ldr.w	r3, [r4, #432]	; 0x1b0
    24d6:	orr.w	r3, r3, #65536	; 0x10000
    24da:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    24de:	ldr.w	r3, [r4, #432]	; 0x1b0
    24e2:	cmp	r3, #0
    24e4:	bne.n	24de <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    24e6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    24ea:	cmp	r3, #0
    24ec:	bne.w	2228 <isr+0x2c>
    24f0:	b.n	22c6 <isr+0xca>
    24f2:	nop
    24f4:	.word	0x402e0000
    24f8:	.word	0x20002000
    24fc:	.word	0x402e01c0
    2500:	.word	0x20000b48
    2504:	.word	0x20000b24
    2508:	.word	0x20000b20
    250c:	.word	0x20000b2c
    2510:	.word	0x20000b30
    2514:	.word	0x20000b38
    2518:	.word	0x20000b28
    251c:	.word	0x20000b34
    2520:	.word	0x20002240
    2524:	.word	0x20000b58
    2528:	.word	0x000200c8
    252c:	.word	0x00cc0002
    2530:	.word	0x00c80002
    2534:	.word	0x20001020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2538:	ldr	r2, [pc, #744]	; (2824 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    253a:	movs	r1, #2
    253c:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    253e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2540:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2542:	bl	2158 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2546:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    254a:	cmp	r3, #0
    254c:	bne.w	2228 <isr+0x2c>
    2550:	b.n	22c6 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2552:	uxth	r2, r2
    2554:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2558:	cmp	r3, #7
    255a:	bhi.w	243a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    255e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2562:	mov.w	r3, r3, lsl #2
    2566:	ldr	r2, [pc, #704]	; (2828 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2568:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    256c:	add	r2, r3
    256e:	ldr	r3, [r2, #0]
    2570:	ite	ne
    2572:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2576:	biceq.w	r3, r3, #1
    257a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    257c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    257e:	ldr	r3, [pc, #684]	; (282c <isr+0x630>)
    2580:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2582:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2584:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2586:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    258a:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    258c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2590:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2592:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2594:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2598:	ldr.w	r3, [r4, #432]	; 0x1b0
    259c:	orr.w	r3, r3, #65536	; 0x10000
    25a0:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    25a4:	ldr.w	r3, [r4, #432]	; 0x1b0
    25a8:	cmp	r3, #0
    25aa:	bne.n	25a4 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    25ac:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    25b0:	cmp	r3, #0
    25b2:	bne.w	2228 <isr+0x2c>
    25b6:	b.n	22c6 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    25b8:	ldr	r3, [pc, #628]	; (2830 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    25ba:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    25be:	ldr	r2, [pc, #628]	; (2834 <isr+0x638>)
    25c0:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    25c2:	ldr	r3, [pc, #628]	; (2838 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    25c4:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    25c6:	strb	r0, [r3, #0]
    25c8:	b.n	24b4 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    25ca:	uxth	r2, r2
    25cc:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    25d0:	cmp	r3, #7
    25d2:	bhi.w	243a <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    25d6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    25da:	mov.w	r3, r3, lsl #2
    25de:	ldr	r2, [pc, #584]	; (2828 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    25e0:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    25e4:	add	r2, r3
    25e6:	ldr	r3, [r2, #0]
    25e8:	ite	ne
    25ea:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    25ee:	orreq.w	r3, r3, #1
    25f2:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    25f4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    25f6:	ldr	r3, [pc, #564]	; (282c <isr+0x630>)
    25f8:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    25fa:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    25fc:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    25fe:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2602:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2604:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2608:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    260a:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    260c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2610:	ldr.w	r3, [r4, #432]	; 0x1b0
    2614:	orr.w	r3, r3, #65536	; 0x10000
    2618:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    261c:	ldr.w	r3, [r4, #432]	; 0x1b0
    2620:	cmp	r3, #0
    2622:	bne.n	261c <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2624:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2628:	cmp	r3, #0
    262a:	bne.w	2228 <isr+0x2c>
    262e:	b.n	22c6 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2630:	ldr	r2, [pc, #520]	; (283c <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2632:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2634:	ldr	r3, [pc, #492]	; (2824 <isr+0x628>)
    2636:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2638:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    263a:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    263c:	bl	2158 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2640:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2644:	cmp	r3, #0
    2646:	bne.w	2228 <isr+0x2c>
    264a:	b.n	22c6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    264c:	ldr	r3, [pc, #496]	; (2840 <isr+0x644>)
    264e:	ldr	r1, [r3, #4]
    2650:	cmp	r1, #0
    2652:	beq.w	243a <isr+0x23e>
    2656:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2658:	uxth.w	lr, r2
    265c:	b.n	2668 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    265e:	adds	r3, #12
    2660:	ldr	r1, [r3, #4]
    2662:	cmp	r1, #0
    2664:	beq.w	243a <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2668:	ldrh	r7, [r3, #0]
    266a:	cmp	r7, r0
    266c:	bne.n	265e <isr+0x462>
    266e:	ldrh	r7, [r3, #2]
    2670:	cmp	r7, lr
    2672:	bne.n	265e <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2674:	lsrs	r7, r0, #8
    2676:	cmp	r7, #3
    2678:	beq.w	2888 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    267c:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    267e:	lsrs	r2, r2, #16
    2680:	cmp	r3, r2
    2682:	it	cs
    2684:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2686:	cmp.w	r0, #512	; 0x200
    268a:	beq.w	2804 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    268e:	cmp.w	r0, #1792	; 0x700
    2692:	beq.w	27a8 <isr+0x5ac>
    2696:	ldr	r7, [pc, #428]	; (2844 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2698:	mov	r2, r3
    269a:	str	r3, [sp, #4]
    269c:	mov	r0, r7
    269e:	bl	14e0 <memcpy>
    26a2:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    26a4:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    26a8:	add	r7, r3
	asm("dsb");
    26aa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    26ae:	ldr	r1, [pc, #408]	; (2848 <isr+0x64c>)
    26b0:	str	r2, [r1, #0]
		location += 32;
    26b2:	adds	r2, #32
	} while (location < end_addr);
    26b4:	cmp	r7, r2
    26b6:	bhi.n	26ae <isr+0x4b2>
	asm("dsb");
    26b8:	dsb	sy
	asm("isb");
    26bc:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    26c0:	ldr	r0, [pc, #384]	; (2844 <isr+0x648>)
    26c2:	mov	r1, r3
    26c4:	bl	2158 <endpoint0_transmit.constprop.1>
    26c8:	b.n	22be <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    26ca:	lsls	r3, r1, #31
    26cc:	bpl.w	22b6 <isr+0xba>
    26d0:	b.n	22b2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    26d2:	ldr	r7, [pc, #376]	; (284c <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26d4:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    26d8:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26da:	ldr	r1, [pc, #372]	; (2850 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26dc:	ldr	r3, [pc, #372]	; (2854 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    26de:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    26e0:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    26e4:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    26e6:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    26ea:	ldr	r1, [pc, #364]	; (2858 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    26ec:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    26ee:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    26f2:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    26f6:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    26fa:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    26fc:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2700:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2704:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2708:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    270a:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    270c:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2710:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2712:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2714:	ldr.w	r3, [r4, #432]	; 0x1b0
    2718:	cmp	r3, #0
    271a:	bne.n	2714 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    271c:	ldr	r2, [pc, #268]	; (282c <isr+0x630>)
    271e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2720:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2724:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2726:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2728:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    272c:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    272e:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2732:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2734:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2738:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    273a:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    273e:	ldr.w	r3, [r5, #432]	; 0x1b0
    2742:	orrs	r3, r0
    2744:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2748:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    274c:	ldr.w	r3, [r4, #432]	; 0x1b0
    2750:	cmp	r3, #0
    2752:	bne.n	274c <isr+0x550>
    2754:	b.n	22be <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2756:	ldr	r4, [pc, #244]	; (284c <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2758:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    275c:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    275e:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2760:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2762:	cmp	r4, r0
    2764:	bne.w	2380 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2768:	ldr	r1, [pc, #236]	; (2858 <isr+0x65c>)
    276a:	ldr	r4, [pc, #240]	; (285c <isr+0x660>)
    276c:	ldmia	r1, {r0, r1}
    276e:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2770:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2772:	str	r0, [r4, #0]
    2774:	strh	r1, [r4, #4]
    2776:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2778:	bne.w	2380 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    277c:	cpsid	i
	sof_usage |= (1 << interface);
    277e:	ldr	r0, [pc, #224]	; (2860 <isr+0x664>)
    2780:	ldrb	r1, [r0, #0]
    2782:	orr.w	r1, r1, #4
    2786:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2788:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    278c:	lsls	r0, r1, #24
    278e:	bmi.n	279e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2790:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2794:	movs	r0, #128	; 0x80
    2796:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    279a:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    279e:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    27a0:	ldr	r2, [pc, #192]	; (2864 <isr+0x668>)
    27a2:	movs	r1, #80	; 0x50
    27a4:	strb	r1, [r2, #0]
    27a6:	b.n	2380 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    27a8:	ldr	r0, [pc, #188]	; (2868 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    27aa:	mov	r2, r3
    27ac:	ldr	r7, [pc, #148]	; (2844 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    27ae:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    27b2:	ldr	r1, [pc, #184]	; (286c <isr+0x670>)
    27b4:	ldr	r0, [pc, #184]	; (2870 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    27b6:	str	r3, [sp, #4]
    27b8:	cmp.w	lr, #0
    27bc:	it	eq
    27be:	moveq	r1, r0
    27c0:	mov	r0, r7
    27c2:	bl	14e0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    27c6:	movs	r2, #7
    27c8:	ldr	r3, [sp, #4]
    27ca:	strb	r2, [r7, #1]
    27cc:	b.n	26a4 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    27ce:	ldr.w	r2, [r3, #328]	; 0x148
    27d2:	bic.w	r2, r2, #128	; 0x80
    27d6:	str.w	r2, [r3, #328]	; 0x148
    27da:	b.n	236a <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    27dc:	ldr	r0, [pc, #148]	; (2874 <isr+0x678>)
    27de:	bl	2120 <run_callbacks>
    27e2:	b.n	23a6 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    27e4:	ldr	r0, [pc, #144]	; (2878 <isr+0x67c>)
    27e6:	bl	2120 <run_callbacks>
    27ea:	b.n	2394 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    27ec:	ldr	r0, [pc, #140]	; (287c <isr+0x680>)
    27ee:	bl	2120 <run_callbacks>
    27f2:	b.n	238e <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    27f4:	ldr	r0, [pc, #136]	; (2880 <isr+0x684>)
    27f6:	bl	2120 <run_callbacks>
    27fa:	b.n	23a0 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    27fc:	ldr	r0, [pc, #132]	; (2884 <isr+0x688>)
    27fe:	bl	2120 <run_callbacks>
    2802:	b.n	239a <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2804:	ldr	r0, [pc, #96]	; (2868 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2806:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2808:	ldr	r1, [pc, #100]	; (2870 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    280a:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    280c:	ldr	r0, [pc, #92]	; (286c <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    280e:	str	r3, [sp, #4]
    2810:	cmp	r7, #0
    2812:	it	eq
    2814:	moveq	r1, r0
    2816:	ldr	r0, [pc, #44]	; (2844 <isr+0x648>)
    2818:	bl	14e0 <memcpy>
    281c:	ldr	r7, [pc, #36]	; (2844 <isr+0x648>)
    281e:	ldr	r3, [sp, #4]
    2820:	b.n	26a4 <isr+0x4a8>
    2822:	nop
    2824:	.word	0x20000b48
    2828:	.word	0x402e01c0
    282c:	.word	0x20001020
    2830:	.word	0x20000b64
    2834:	.word	0x20000ec8
    2838:	.word	0x20000a88
    283c:	.word	0x20000b58
    2840:	.word	0x20000480
    2844:	.word	0x20203000
    2848:	.word	0xe000ef70
    284c:	.word	0x20000b40
    2850:	.word	0x00070080
    2854:	.word	0x20001000
    2858:	.word	0x20000b50
    285c:	.word	0x20000ec0
    2860:	.word	0x20000b28
    2864:	.word	0x20000b38
    2868:	.word	0x20000b30
    286c:	.word	0x60001738
    2870:	.word	0x6000177c
    2874:	.word	0x20002200
    2878:	.word	0x20002140
    287c:	.word	0x20002100
    2880:	.word	0x200021c0
    2884:	.word	0x20002180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2888:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    288a:	ldrb	r3, [r1, #0]
    288c:	cmp	r3, r2
    288e:	it	cs
    2890:	movcs	r3, r2
    2892:	b.n	268e <isr+0x492>

00002894 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2894:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2896:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    289a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    289e:	ite	ne
    28a0:	movne	r7, #0
    28a2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    28a6:	cmp	r2, #2
    28a8:	bls.n	28ae <usb_config_rx+0x1a>
    28aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    28ae:	mov.w	sl, r0, lsl #7
    28b2:	ldr.w	r9, [pc, #64]	; 28f4 <usb_config_rx+0x60>
    28b6:	mov	r5, r1
    28b8:	mov	r4, r0
    28ba:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    28be:	movs	r1, #0
    28c0:	movs	r2, #64	; 0x40
    28c2:	mov	r8, r3
    28c4:	mov	r0, r6
    28c6:	bl	3304 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    28ca:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    28cc:	orr.w	r1, r7, r5, lsl #16
    28d0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    28d4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    28d8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    28da:	cmp.w	r8, #0
    28de:	beq.n	28aa <usb_config_rx+0x16>
    28e0:	ldr	r3, [pc, #12]	; (28f0 <usb_config_rx+0x5c>)
    28e2:	lsls	r0, r4
    28e4:	ldr	r4, [r3, #0]
    28e6:	orrs	r0, r4
    28e8:	str	r0, [r3, #0]
    28ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28ee:	nop
    28f0:	.word	0x20000b24
    28f4:	.word	0x20002000

000028f8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    28f8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    28fa:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    28fe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2902:	ite	ne
    2904:	movne	r7, #0
    2906:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    290a:	cmp	r2, #2
    290c:	bls.n	2912 <usb_config_tx+0x1a>
    290e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2912:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2914:	lsls	r5, r0, #7
    2916:	ldr.w	r9, [pc, #68]	; 295c <usb_config_tx+0x64>
    291a:	mov	r8, r1
    291c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    291e:	movs	r1, #0
    2920:	mov	r4, r0
    2922:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2924:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2928:	mov	r0, sl
    292a:	bl	3304 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    292e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2930:	orr.w	r1, r7, r8, lsl #16
    2934:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2938:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    293c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2940:	cmp	r6, #0
    2942:	beq.n	290e <usb_config_tx+0x16>
    2944:	add.w	r0, r4, #16
    2948:	ldr	r3, [pc, #12]	; (2958 <usb_config_tx+0x60>)
    294a:	lsls	r2, r0
    294c:	ldr	r0, [r3, #0]
    294e:	orrs	r2, r0
    2950:	str	r2, [r3, #0]
    2952:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2956:	nop
    2958:	.word	0x20000b24
    295c:	.word	0x20002000

00002960 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2960:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    2962:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    2964:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2966:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    296a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    296c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    296e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2970:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    2974:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2978:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    297c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2980:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2982:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    2984:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    2986:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2988:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    298a:	pop	{r4, r5, r6, r7}
    298c:	bx	lr
    298e:	nop

00002990 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2990:	subs	r3, r0, #2
    2992:	cmp	r3, #2
    2994:	bls.n	2998 <usb_transmit+0x8>
    2996:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2998:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    299a:	ldr	r3, [pc, #24]	; (29b4 <usb_transmit+0x24>)
    299c:	add.w	r4, r0, #16
    29a0:	movs	r5, #1
    29a2:	mov	r2, r1
    29a4:	add.w	r0, r3, r0, lsl #7
    29a8:	lsl.w	r1, r5, r4
}
    29ac:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    29ae:	b.w	20c4 <schedule_transfer>
    29b2:	nop
    29b4:	.word	0x20002040

000029b8 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    29b8:	subs	r3, r0, #2
    29ba:	cmp	r3, #2
    29bc:	bls.n	29c0 <usb_receive+0x8>
    29be:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    29c0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    29c2:	ldr	r3, [pc, #20]	; (29d8 <usb_receive+0x20>)
    29c4:	movs	r4, #1
    29c6:	mov	r2, r1
    29c8:	lsl.w	r1, r4, r0
    29cc:	add.w	r0, r3, r0, lsl #7
}
    29d0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    29d4:	b.w	20c4 <schedule_transfer>
    29d8:	.word	0x20002000

000029dc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    29dc:	ldr	r0, [r0, #4]
#endif
}
    29de:	bx	lr

000029e0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    29e0:	cmp	r0, #0
    29e2:	beq.n	2a94 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    29e4:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    29e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ea:	sub	sp, #20
    29ec:	mov	fp, r0
    29ee:	ldr	r4, [pc, #168]	; (2a98 <delay+0xb8>)
    29f0:	ldr	r5, [pc, #168]	; (2a9c <delay+0xbc>)
    29f2:	ldr	r6, [pc, #172]	; (2aa0 <delay+0xc0>)
    29f4:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    29f8:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    29fc:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    29fe:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a00:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2a04:	cmp	r1, #0
    2a06:	bne.n	29f8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a08:	ldr	r7, [pc, #152]	; (2aa4 <delay+0xc4>)
    2a0a:	strd	r8, r9, [sp, #8]
    2a0e:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2a10:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a12:	ldr	r2, [pc, #148]	; (2aa8 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2a14:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a18:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a1a:	ldr	r2, [r2, #0]
    2a1c:	movs	r7, #1
    2a1e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2a22:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a26:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    2a28:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a2a:	cmp	r3, r1
    2a2c:	it	eq
    2a2e:	cmpeq	r2, r8
    2a30:	ite	cs
    2a32:	movcs	sl, r8
    2a34:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2a36:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2a3a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2a3e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2a40:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a42:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2a46:	cmp	r3, #0
    2a48:	bne.n	2a3a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a4a:	ldr	r0, [sp, #4]
    2a4c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2a4e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a50:	ldr	r0, [pc, #84]	; (2aa8 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a52:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a56:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a58:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a5c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2a60:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a64:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a68:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    2a6a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a6c:	cmp	r1, r3
    2a6e:	it	eq
    2a70:	cmpeq	r0, r8
    2a72:	ite	cs
    2a74:	movcs	r3, r8
    2a76:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a78:	add	r2, r3
    2a7a:	cmp	r2, lr
    2a7c:	bcc.n	2a8e <delay+0xae>
			if (--msec == 0) return;
    2a7e:	subs.w	fp, fp, #1
			start += 1000;
    2a82:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2a86:	bne.n	2a3a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2a88:	add	sp, #20
    2a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2a8e:	bl	2ec8 <yield>
	}
    2a92:	b.n	2a3a <delay+0x5a>
    2a94:	bx	lr
    2a96:	nop
    2a98:	.word	0x20002280
    2a9c:	.word	0x20000b64
    2aa0:	.word	0x20000b5c
    2aa4:	.word	0xe0001004
    2aa8:	.word	0x20000b60

00002aac <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2aac:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2aae:	ldr	r2, [pc, #24]	; (2ac8 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2ab0:	movs	r1, #7
    2ab2:	ldr	r3, [pc, #24]	; (2acc <Panic_Temp_isr+0x20>)
    2ab4:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2ab6:	ldr	r3, [r2, #56]	; 0x38
    2ab8:	orr.w	r3, r3, #64	; 0x40
    2abc:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    2abe:	dsb	sy
  while (1) asm ("wfi");
    2ac2:	wfi
    2ac4:	b.n	2ac2 <Panic_Temp_isr+0x16>
    2ac6:	nop
    2ac8:	.word	0x400d4000
    2acc:	.word	0x400ac000

00002ad0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2ad0:	ldr	r0, [pc, #656]	; (2d64 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2ad2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2ad6:	ldr	r3, [pc, #656]	; (2d68 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2ad8:	ldr	r2, [r0, #120]	; 0x78
    2ada:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2ade:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2ae0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2ae2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2ae4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2ae8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2aec:	ldr	r4, [pc, #636]	; (2d6c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2aee:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2af2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2af4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2af8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2afa:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2afc:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2b00:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2b04:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2b08:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2b0c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2b10:	ldrh.w	r0, [r3, #392]	; 0x188
    2b14:	uxth	r0, r0
    2b16:	orr.w	r0, r0, #240	; 0xf0
    2b1a:	strh.w	r0, [r3, #392]	; 0x188
    2b1e:	add.w	r0, r1, r1, lsl #1
    2b22:	ldr	r3, [pc, #580]	; (2d68 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2b24:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2b26:	movs	r5, #0
    2b28:	lsls	r0, r0, #5
    2b2a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2b2c:	cmp	r1, #4
    2b2e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2b30:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2b34:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2b36:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2b38:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2b3a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2b3c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2b3e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2b40:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2b42:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2b44:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2b46:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2b48:	bne.n	2b1e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2b4a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2b4e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2b52:	ldr	r3, [pc, #540]	; (2d70 <pwm_init+0x2a0>)
    2b54:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2b58:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2b5a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2b5c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2b60:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2b62:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2b66:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2b6a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2b6e:	ldrh.w	r0, [r4, #392]	; 0x188
    2b72:	uxth	r0, r0
    2b74:	orr.w	r0, r0, #3840	; 0xf00
    2b78:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2b7c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2b80:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2b84:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2b88:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2b8c:	ldrh.w	r0, [r3, #392]	; 0x188
    2b90:	uxth	r0, r0
    2b92:	orr.w	r0, r0, #240	; 0xf0
    2b96:	strh.w	r0, [r3, #392]	; 0x188
    2b9a:	add.w	r0, r1, r1, lsl #1
    2b9e:	ldr	r3, [pc, #464]	; (2d70 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2ba0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2ba2:	movs	r5, #0
    2ba4:	lsls	r0, r0, #5
    2ba6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2ba8:	cmp	r1, #4
    2baa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2bac:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2bae:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2bb2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2bb4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2bb6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2bb8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2bba:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2bbc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2bbe:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2bc0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2bc2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2bc4:	bne.n	2b9a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2bc6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2bca:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2bce:	ldr	r3, [pc, #420]	; (2d74 <pwm_init+0x2a4>)
    2bd0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2bd4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2bd6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2bd8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2bdc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2bde:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2be2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2be6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2bea:	ldrh.w	r0, [r4, #392]	; 0x188
    2bee:	uxth	r0, r0
    2bf0:	orr.w	r0, r0, #3840	; 0xf00
    2bf4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2bf8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2bfc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2c00:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2c04:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2c08:	ldrh.w	r0, [r3, #392]	; 0x188
    2c0c:	uxth	r0, r0
    2c0e:	orr.w	r0, r0, #240	; 0xf0
    2c12:	strh.w	r0, [r3, #392]	; 0x188
    2c16:	add.w	r0, r1, r1, lsl #1
    2c1a:	ldr	r3, [pc, #344]	; (2d74 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    2c1c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2c1e:	movs	r5, #0
    2c20:	lsls	r0, r0, #5
    2c22:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2c24:	cmp	r1, #4
    2c26:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2c28:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2c2a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2c2e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2c30:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2c32:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2c34:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2c36:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2c38:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2c3a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2c3c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2c3e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2c40:	bne.n	2c16 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2c42:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2c46:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2c4a:	ldr	r3, [pc, #300]	; (2d78 <pwm_init+0x2a8>)
    2c4c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2c50:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2c52:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2c54:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2c58:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2c5a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2c5e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2c62:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2c66:	ldrh.w	r0, [r4, #392]	; 0x188
    2c6a:	uxth	r0, r0
    2c6c:	orr.w	r0, r0, #3840	; 0xf00
    2c70:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2c74:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2c78:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2c7c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2c80:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2c84:	ldrh.w	r0, [r3, #392]	; 0x188
    2c88:	uxth	r0, r0
    2c8a:	orr.w	r0, r0, #240	; 0xf0
    2c8e:	strh.w	r0, [r3, #392]	; 0x188
    2c92:	add.w	r0, r1, r1, lsl #1
    2c96:	ldr	r3, [pc, #224]	; (2d78 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    2c98:	adds	r1, #1
    2c9a:	lsls	r0, r0, #5
    2c9c:	mov	r4, r3
    2c9e:	cmp	r1, #4
    2ca0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2ca2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2ca4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2ca8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2caa:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2cac:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2cae:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2cb0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    2cb2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2cb4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2cb6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2cb8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2cba:	bne.n	2c92 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2cbc:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2cc0:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2cc2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2cc4:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2cc8:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2cca:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2cce:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2cd0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2cd4:	orrs	r3, r7
    2cd6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2cda:	ldrh.w	r3, [r4, #392]	; 0x188
    2cde:	uxth	r3, r3
    2ce0:	orr.w	r3, r3, #3840	; 0xf00
    2ce4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2ce8:	lsls	r0, r2, #5
    2cea:	ldr	r3, [pc, #144]	; (2d7c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2cec:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2cee:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2cf0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2cf2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2cf4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2cf6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2cf8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2cfa:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2cfe:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2d00:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2d02:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d04:	bne.n	2ce8 <pwm_init+0x218>
    2d06:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2d08:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2d0a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2d0e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2d12:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2d14:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2d18:	lsls	r0, r2, #5
    2d1a:	ldr	r3, [pc, #100]	; (2d80 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d1c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2d1e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d20:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2d22:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2d24:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2d26:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2d28:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2d2a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2d2c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2d2e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2d30:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d32:	bne.n	2d18 <pwm_init+0x248>
    2d34:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2d36:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2d38:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2d3c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2d40:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2d42:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2d46:	lsls	r0, r2, #5
    2d48:	ldr	r3, [pc, #56]	; (2d84 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d4a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2d4c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d4e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2d50:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2d52:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2d54:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2d56:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2d58:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2d5a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2d5c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2d5e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2d60:	bne.n	2d46 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2d62:	pop	{r4, r5, r6, r7, pc}
    2d64:	.word	0x400fc000
    2d68:	.word	0x403dc000
    2d6c:	.word	0xfc030000
    2d70:	.word	0x403e0000
    2d74:	.word	0x403e4000
    2d78:	.word	0x403e8000
    2d7c:	.word	0x401dc000
    2d80:	.word	0x401e0000
    2d84:	.word	0x401e4000

00002d88 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2d88:	lsls	r0, r0, #4
    2d8a:	ldr	r3, [pc, #28]	; (2da8 <digitalWrite.part.0+0x20>)
    2d8c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    2d8e:	ldr	r3, [r3, r0]
	mask = p->mask;
    2d90:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    2d92:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    2d94:	tst	r0, r2
    2d96:	beq.n	2d9e <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    2d98:	cbnz	r1, 2da0 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    2d9a:	str.w	r2, [r3, #136]	; 0x88
    2d9e:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    2da0:	str.w	r2, [r3, #132]	; 0x84
    2da4:	bx	lr
    2da6:	nop
    2da8:	.word	0x20000200

00002dac <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    2dac:	lsls	r0, r0, #4
    2dae:	ldr	r3, [pc, #20]	; (2dc4 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    2db0:	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    2db2:	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    2db4:	ldr	r2, [r2, #8]
    2db6:	ldr	r3, [r1, #12]
    2db8:	tst	r2, r3
}
    2dba:	ite	ne
    2dbc:	movne	r0, #1
    2dbe:	moveq	r0, #0
    2dc0:	bx	lr
    2dc2:	nop
    2dc4:	.word	0x20000200

00002dc8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2dc8:	cmp	r0, #39	; 0x27
    2dca:	bhi.n	2dd0 <digitalWrite+0x8>
    2dcc:	b.w	2d88 <digitalWrite.part.0>
    2dd0:	bx	lr
    2dd2:	nop

00002dd4 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    2dd4:	cmp	r0, #39	; 0x27
    2dd6:	bhi.n	2ddc <digitalRead+0x8>
    2dd8:	b.w	2dac <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    2ddc:	movs	r0, #0
    2dde:	bx	lr

00002de0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2de0:	cmp	r0, #39	; 0x27
    2de2:	bhi.n	2e1e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2de4:	lsls	r0, r0, #4
    2de6:	ldr	r2, [pc, #104]	; (2e50 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2de8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2dea:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2dee:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2df0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2df2:	beq.n	2e20 <pinMode+0x40>
    2df4:	cmp	r1, #4
    2df6:	beq.n	2e20 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2df8:	ldr	r4, [r3, #12]
    2dfa:	ldr	r2, [r0, #4]
    2dfc:	bic.w	r2, r2, r4
    2e00:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2e02:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2e04:	cbz	r1, 2e42 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    2e06:	cmp	r1, #2
    2e08:	beq.n	2e48 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2e0a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2e0c:	ldr	r3, [r3, #4]
}
    2e0e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2e12:	ite	eq
    2e14:	ldreq	r1, [pc, #60]	; (2e54 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2e16:	ldrne	r1, [pc, #64]	; (2e58 <pinMode+0x78>)
    2e18:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2e1a:	movs	r2, #21
    2e1c:	str	r2, [r3, #0]
}
    2e1e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2e20:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2e22:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2e24:	ldr	r4, [r0, #4]
    2e26:	orr.w	r2, r2, r4
    2e2a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2e2c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2e2e:	beq.n	2e42 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2e30:	movw	r1, #2104	; 0x838
    2e34:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2e36:	ldr	r3, [r3, #4]
    2e38:	movs	r2, #21
}
    2e3a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2e3e:	str	r2, [r3, #0]
}
    2e40:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2e42:	movs	r1, #56	; 0x38
    2e44:	str	r1, [r2, #0]
    2e46:	b.n	2e36 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2e48:	ldr	r1, [pc, #16]	; (2e5c <pinMode+0x7c>)
    2e4a:	str	r1, [r2, #0]
    2e4c:	b.n	2e36 <pinMode+0x56>
    2e4e:	nop
    2e50:	.word	0x20000200
    2e54:	.word	0x00013038
    2e58:	.word	0x00010038
    2e5c:	.word	0x0001f038

00002e60 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2e60:	ldr	r2, [pc, #72]	; (2eac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2e62:	ldr	r3, [pc, #76]	; (2eb0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2e64:	ldr.w	r0, [r2, #544]	; 0x220
    2e68:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2e6c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2e6e:	push	{r4, lr}
    2e70:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2e72:	bhi.n	2e7a <usb_init_serialnumber+0x1a>
    2e74:	add.w	r0, r0, r0, lsl #2
    2e78:	lsls	r0, r0, #1
    2e7a:	ldr	r4, [pc, #56]	; (2eb4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2e7c:	add	r1, sp, #4
    2e7e:	movs	r2, #10
    2e80:	bl	323c <ultoa>
    2e84:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2e86:	movs	r3, #0
    2e88:	mov	r0, r4
		char c = buf[i];
    2e8a:	ldrb.w	r2, [r1], #1
    2e8e:	adds	r3, #1
		if (!c) break;
    2e90:	cbz	r2, 2ea2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2e92:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2e94:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2e98:	bne.n	2e8a <usb_init_serialnumber+0x2a>
    2e9a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2e9c:	strb	r3, [r4, #0]
}
    2e9e:	add	sp, #16
    2ea0:	pop	{r4, pc}
    2ea2:	lsls	r3, r3, #1
    2ea4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2ea6:	strb	r3, [r4, #0]
}
    2ea8:	add	sp, #16
    2eaa:	pop	{r4, pc}
    2eac:	.word	0x401f4400
    2eb0:	.word	0x0098967f
    2eb4:	.word	0x200005a4

00002eb8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2eb8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2eba:	bl	7c <setup>
	while (1) {
		loop();
    2ebe:	bl	d4 <loop>
		yield();
    2ec2:	bl	2ec8 <yield>
    2ec6:	b.n	2ebe <main+0x6>

00002ec8 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2ec8:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2eca:	ldr	r4, [pc, #132]	; (2f50 <yield+0x88>)
    2ecc:	ldrb	r3, [r4, #0]
    2ece:	cbnz	r3, 2ef2 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2ed0:	ldr	r3, [pc, #128]	; (2f54 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2ed2:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2ed4:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2ed6:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2ed8:	cbnz	r3, 2f22 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    2eda:	ldr	r3, [pc, #124]	; (2f58 <yield+0x90>)
    2edc:	ldrb	r3, [r3, #0]
    2ede:	cmp	r3, #0
    2ee0:	bne.n	2f36 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    2ee2:	ldr	r3, [pc, #120]	; (2f5c <yield+0x94>)

	running = 0;
    2ee4:	movs	r1, #0
    2ee6:	ldr	r2, [r3, #0]
    2ee8:	strb	r1, [r4, #0]
    2eea:	cbz	r2, 2ef2 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2eec:	mrs	r2, IPSR
		if (ipsr != 0) return;
    2ef0:	cbz	r2, 2ef4 <yield+0x2c>
    2ef2:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2ef4:	mrs	r0, PRIMASK
		__disable_irq();
    2ef8:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2efa:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2efc:	cbz	r2, 2f3c <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2efe:	ldr	r4, [pc, #96]	; (2f60 <yield+0x98>)
    2f00:	ldrb	r1, [r4, #0]
    2f02:	cbnz	r1, 2f3c <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2f04:	movs	r6, #1
		firstYield = first->_next;
    2f06:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2f08:	strb	r6, [r4, #0]
		firstYield = first->_next;
    2f0a:	str	r5, [r3, #0]
		if (firstYield) {
    2f0c:	cbz	r5, 2f44 <yield+0x7c>
			firstYield->_prev = nullptr;
    2f0e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2f10:	cbnz	r0, 2f14 <yield+0x4c>
    2f12:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2f14:	movs	r5, #0
		(*(first->_function))(*first);
    2f16:	ldr	r3, [r2, #8]
    2f18:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2f1a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2f1c:	blx	r3
		runningFromYield = false;
    2f1e:	strb	r5, [r4, #0]
    2f20:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2f22:	bl	1c30 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2f26:	cmp	r0, #0
    2f28:	beq.n	2eda <yield+0x12>
    2f2a:	bl	3178 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    2f2e:	ldr	r3, [pc, #40]	; (2f58 <yield+0x90>)
    2f30:	ldrb	r3, [r3, #0]
    2f32:	cmp	r3, #0
    2f34:	beq.n	2ee2 <yield+0x1a>
    2f36:	bl	328c <HardwareSerial::processSerialEvents()>
    2f3a:	b.n	2ee2 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2f3c:	cmp	r0, #0
    2f3e:	bne.n	2ef2 <yield+0x2a>
    2f40:	cpsie	i
    2f42:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2f44:	ldr	r3, [pc, #28]	; (2f64 <yield+0x9c>)
    2f46:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2f48:	cmp	r0, #0
    2f4a:	bne.n	2f14 <yield+0x4c>
    2f4c:	b.n	2f12 <yield+0x4a>
    2f4e:	nop
    2f50:	.word	0x20000b7c
    2f54:	.word	0x200005ba
    2f58:	.word	0x20000bb8
    2f5c:	.word	0x20000b90
    2f60:	.word	0x20000b94
    2f64:	.word	0x20000b8c

00002f68 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    2f68:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2f6a:	mrs	r2, PRIMASK
		__disable_irq();
    2f6e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    2f70:	ldrb	r3, [r0, #29]
    2f72:	cbnz	r3, 2f82 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    2f74:	ldrb	r1, [r0, #28]
    2f76:	cmp	r1, #1
    2f78:	beq.n	2f8c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    2f7a:	cmp	r1, #3
    2f7c:	beq.n	2fa0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    2f7e:	movs	r3, #1
    2f80:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2f82:	cbnz	r2, 2f86 <EventResponder::triggerEventNotImmediate()+0x1e>
    2f84:	cpsie	i
	}
	enableInterrupts(irq);
}
    2f86:	ldr.w	r4, [sp], #4
    2f8a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    2f8c:	ldr	r4, [pc, #68]	; (2fd4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    2f8e:	ldr	r1, [r4, #0]
    2f90:	cbz	r1, 2fbc <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    2f92:	ldr	r1, [pc, #68]	; (2fd8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    2f94:	str	r3, [r0, #20]
				_prev = lastYield;
    2f96:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    2f98:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    2f9a:	str	r3, [r0, #24]
				_prev->_next = this;
    2f9c:	str	r0, [r3, #20]
    2f9e:	b.n	2f7e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    2fa0:	ldr	r4, [pc, #56]	; (2fdc <EventResponder::triggerEventNotImmediate()+0x74>)
    2fa2:	ldr	r1, [r4, #0]
    2fa4:	cbz	r1, 2fc8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    2fa6:	ldr	r1, [pc, #56]	; (2fe0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    2fa8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2faa:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    2fac:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    2fae:	str	r3, [r0, #24]
				_prev->_next = this;
    2fb0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2fb2:	ldr	r3, [pc, #48]	; (2fe4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    2fb4:	mov.w	r1, #268435456	; 0x10000000
    2fb8:	str	r1, [r3, #0]
    2fba:	b.n	2f7e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    2fbc:	ldr	r3, [pc, #24]	; (2fd8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    2fbe:	str	r1, [r0, #20]
				_prev = nullptr;
    2fc0:	str	r1, [r0, #24]
				firstYield = this;
    2fc2:	str	r0, [r4, #0]
				lastYield = this;
    2fc4:	str	r0, [r3, #0]
    2fc6:	b.n	2f7e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    2fc8:	ldr	r3, [pc, #20]	; (2fe0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    2fca:	str	r1, [r0, #20]
				_prev = nullptr;
    2fcc:	str	r1, [r0, #24]
				firstInterrupt = this;
    2fce:	str	r0, [r4, #0]
				lastInterrupt = this;
    2fd0:	str	r0, [r3, #0]
    2fd2:	b.n	2fb2 <EventResponder::triggerEventNotImmediate()+0x4a>
    2fd4:	.word	0x20000b90
    2fd8:	.word	0x20000b8c
    2fdc:	.word	0x20000b80
    2fe0:	.word	0x20000b84
    2fe4:	.word	0xe000ed04

00002fe8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2fe8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2fea:	mrs	r1, PRIMASK
		__disable_irq();
    2fee:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2ff0:	ldr	r4, [pc, #48]	; (3024 <EventResponder::runFromInterrupt()+0x3c>)
    2ff2:	ldr	r3, [r4, #0]
		if (first) {
    2ff4:	cbz	r3, 301a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2ff6:	ldr	r6, [pc, #48]	; (3028 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2ff8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2ffa:	ldr	r2, [r3, #20]
    2ffc:	str	r2, [r4, #0]
			if (firstInterrupt) {
    2ffe:	cbz	r2, 3020 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3000:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3002:	cbnz	r1, 3006 <EventResponder::runFromInterrupt()+0x1e>
    3004:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3006:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3008:	mov	r0, r3
    300a:	ldr	r3, [r3, #8]
    300c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    300e:	mrs	r1, PRIMASK
		__disable_irq();
    3012:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3014:	ldr	r3, [r4, #0]
		if (first) {
    3016:	cmp	r3, #0
    3018:	bne.n	2ffa <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    301a:	cbnz	r1, 301e <EventResponder::runFromInterrupt()+0x36>
    301c:	cpsie	i
    301e:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3020:	str	r2, [r6, #0]
    3022:	b.n	3002 <EventResponder::runFromInterrupt()+0x1a>
    3024:	.word	0x20000b80
    3028:	.word	0x20000b84

0000302c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    302c:	b.w	2fe8 <EventResponder::runFromInterrupt()>

00003030 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3030:	ldr	r2, [pc, #96]	; (3094 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3032:	push	{r4, r5}
	if (listActive == nullptr) {
    3034:	ldr	r4, [r2, #0]
    3036:	cmp	r4, #0
    3038:	beq.n	308c <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    303a:	ldr	r3, [r0, #0]
    303c:	ldr	r1, [r4, #0]
    303e:	cmp	r3, r1
    3040:	bcs.n	3062 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3042:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3044:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3046:	str	r4, [r0, #8]
		_prev = nullptr;
    3048:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    304a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    304c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    304e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3050:	movs	r3, #2
}
    3052:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3054:	strb	r3, [r0, #20]
}
    3056:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    3058:	str	r3, [r0, #0]
    305a:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    305c:	ldr	r1, [r2, #0]
    305e:	cmp	r3, r1
    3060:	bcc.n	3074 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3062:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3064:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3066:	cmp	r2, #0
    3068:	bne.n	3058 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    306a:	str	r2, [r0, #8]
		_prev = timer;
    306c:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    306e:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    3070:	str	r0, [r4, #8]
    3072:	b.n	3050 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3074:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    3076:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3078:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    307a:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    307c:	str	r5, [r0, #12]
				timer->_prev = this;
    307e:	str	r0, [r4, #12]
				_prev->_next = this;
    3080:	ldr	r1, [r0, #12]
    3082:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    3084:	str	r3, [r4, #0]
				_state = TimerActive;
    3086:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3088:	pop	{r4, r5}
    308a:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    308c:	str	r4, [r0, #8]
		_prev = nullptr;
    308e:	str	r4, [r0, #12]
		listActive = this;
    3090:	str	r0, [r2, #0]
    3092:	b.n	3050 <MillisTimer::addToActiveList()+0x20>
    3094:	.word	0x20000b88

00003098 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3098:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    309a:	ldr	r6, [pc, #136]	; (3124 <MillisTimer::runFromTimer()+0x8c>)
    309c:	ldr	r4, [r6, #0]
	while (timer) {
    309e:	cbz	r4, 30ec <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    30a0:	ldr	r3, [r4, #0]
    30a2:	cmp	r3, #0
    30a4:	bne.n	311c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    30a6:	mov	r5, r3
    30a8:	ldr	r7, [pc, #124]	; (3128 <MillisTimer::runFromTimer()+0x90>)
    30aa:	b.n	30b6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    30ac:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    30ae:	cbz	r4, 30ec <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    30b0:	ldr	r3, [r4, #0]
    30b2:	cmp	r3, #0
    30b4:	bne.n	311c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    30b6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    30b8:	cbz	r3, 30bc <MillisTimer::runFromTimer()+0x24>
    30ba:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    30bc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    30be:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    30c0:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    30c2:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    30c4:	ldr	r3, [r3, #0]
    30c6:	cmp	r3, r7
    30c8:	bne.n	310e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    30ca:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    30cc:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    30ce:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    30d0:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    30d2:	beq.n	3116 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    30d4:	bl	2f68 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    30d8:	ldr	r3, [r4, #4]
    30da:	cmp	r3, #0
    30dc:	beq.n	30ac <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    30de:	str	r3, [r4, #0]
				timer->addToActiveList();
    30e0:	mov	r0, r4
    30e2:	bl	3030 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    30e6:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    30e8:	cmp	r4, #0
    30ea:	bne.n	30b0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    30ec:	mrs	r3, PRIMASK
		__disable_irq();
    30f0:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    30f2:	ldr	r2, [pc, #56]	; (312c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    30f4:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    30f6:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    30f8:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    30fa:	cbnz	r3, 30fe <MillisTimer::runFromTimer()+0x66>
    30fc:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    30fe:	cbz	r0, 310c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3100:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3102:	bl	3030 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3106:	mov	r0, r4
    3108:	cmp	r0, #0
    310a:	bne.n	3100 <MillisTimer::runFromTimer()+0x68>
    310c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    310e:	mov	r2, r4
    3110:	movs	r1, #0
    3112:	blx	r3
    3114:	b.n	30d8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3116:	ldr	r3, [r0, #8]
    3118:	blx	r3
    311a:	b.n	30d8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    311c:	subs	r3, #1
    311e:	str	r3, [r4, #0]
			break;
    3120:	b.n	30ec <MillisTimer::runFromTimer()+0x54>
    3122:	nop
    3124:	.word	0x20000b88
    3128:	.word	0x000014c5
    312c:	.word	0x20000b98

00003130 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3130:	ldr	r2, [pc, #16]	; (3144 <systick_isr+0x14>)
    3132:	ldr	r3, [pc, #20]	; (3148 <systick_isr+0x18>)
    3134:	ldr	r1, [r2, #0]
	systick_millis_count++;
    3136:	ldr	r2, [pc, #20]	; (314c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3138:	str	r1, [r3, #0]
	systick_millis_count++;
    313a:	ldr	r3, [r2, #0]
    313c:	adds	r3, #1
    313e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3140:	b.w	3098 <MillisTimer::runFromTimer()>
    3144:	.word	0xe0001004
    3148:	.word	0x20000b5c
    314c:	.word	0x20000b64

00003150 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3150:	b.w	1c3c <usb_serial_flush_input>

00003154 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3154:	b.w	1bec <usb_serial_peekchar>

00003158 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3158:	b.w	1cb0 <usb_serial_getchar>

0000315c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    315c:	b.w	1c30 <usb_serial_available>

00003160 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3160:	b.w	1d60 <usb_serial_flush_output>

00003164 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3164:	b.w	1d14 <usb_serial_write_buffer_free>

00003168 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3168:	mov	r0, r1
    316a:	mov	r1, r2
    316c:	b.w	1cfc <usb_serial_write>

00003170 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3170:	mov	r0, r1
    3172:	b.w	1cd0 <usb_serial_putchar>
    3176:	nop

00003178 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    3178:	ldr	r3, [pc, #4]	; (3180 <serialEvent()+0x8>)
    317a:	movs	r2, #0
    317c:	strb	r2, [r3, #0]
    317e:	bx	lr
    3180:	.word	0x200005ba

00003184 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3184:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3186:	ldr	r4, [pc, #24]	; (31a0 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3188:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    318a:	ldr	r3, [r0, #0]
    318c:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    318e:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3190:	add	r1, sp, #4
    3192:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3194:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3198:	blx	r3
}
    319a:	add	sp, #8
    319c:	pop	{r4, pc}
    319e:	nop
    31a0:	.word	0x20000514

000031a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    31a4:	push	{r4, r5, r6, r7, lr}
    31a6:	mov	r6, r0
    31a8:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    31aa:	cmp	r2, #0
    31ac:	beq.n	3216 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    31ae:	cmp	r2, #1
    31b0:	it	eq
    31b2:	moveq	r2, #10
	}


	if (n == 0) {
    31b4:	cbz	r1, 320c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    31b6:	movs	r5, #33	; 0x21
    31b8:	b.n	31bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    31ba:	uxtb	r5, r7
    31bc:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    31be:	udiv	r4, r1, r2
    31c2:	mls	r1, r2, r4, r1
    31c6:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    31c8:	cmp	r1, #9
    31ca:	add.w	r1, r0, #55	; 0x37
    31ce:	add.w	r0, r0, #48	; 0x30
    31d2:	it	hi
    31d4:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    31d6:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    31d8:	add	r4, sp, #40	; 0x28
    31da:	it	ls
    31dc:	uxtbls	r0, r0
    31de:	add	r4, r5
    31e0:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    31e4:	cmp	r1, #0
    31e6:	bne.n	31ba <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    31e8:	cbz	r3, 31f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    31ea:	subs	r5, #1
		buf[i] = '-';
    31ec:	add	r3, sp, #40	; 0x28
    31ee:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    31f0:	uxtb	r5, r5
		buf[i] = '-';
    31f2:	add	r3, r5
    31f4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    31f8:	ldr	r3, [r6, #0]
    31fa:	add	r1, sp, #4
    31fc:	rsb	r2, r5, #34	; 0x22
    3200:	mov	r0, r6
    3202:	add	r1, r5
    3204:	ldr	r3, [r3, #4]
    3206:	blx	r3
}
    3208:	add	sp, #44	; 0x2c
    320a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    320c:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    320e:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3210:	strb.w	r2, [sp, #37]	; 0x25
    3214:	b.n	31e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3216:	ldr	r3, [r0, #0]
    3218:	uxtb	r1, r1
    321a:	ldr	r3, [r3, #0]
    321c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    321e:	add	sp, #44	; 0x2c
    3220:	pop	{r4, r5, r6, r7, pc}
    3222:	nop

00003224 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3224:	cmp	r1, #0
    3226:	blt.n	3230 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    3228:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    322a:	movs	r2, #10
    322c:	b.w	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    3230:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3232:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    3234:	movs	r2, #10
    3236:	b.w	31a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    323a:	nop

0000323c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    323c:	push	{r4, r5, r6, r7}
    323e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3240:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3242:	mov	r7, r6
    3244:	b.n	3248 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3246:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3248:	udiv	r3, r0, r2
    324c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3250:	add.w	r4, r0, #55	; 0x37
    3254:	cmp	r0, #9
    3256:	add.w	r0, r0, #48	; 0x30
    325a:	uxtb	r4, r4
    325c:	it	ls
    325e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3260:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3262:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3266:	cmp	r3, #0
    3268:	bne.n	3246 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    326a:	adds	r2, r1, r5
    326c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    326e:	cbz	r5, 3284 <ultoa+0x48>
    3270:	adds	r3, #1
		t = buf[j];
    3272:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3276:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3278:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    327a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    327c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    327e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3282:	blt.n	3270 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3284:	mov	r0, r1
    3286:	pop	{r4, r5, r6, r7}
    3288:	bx	lr
    328a:	nop

0000328c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    328c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    328e:	ldr	r3, [pc, #28]	; (32ac <HardwareSerial::processSerialEvents()+0x20>)
    3290:	ldrb	r4, [r3, #0]
    3292:	cbz	r4, 32a8 <HardwareSerial::processSerialEvents()+0x1c>
    3294:	ldr	r5, [pc, #24]	; (32b0 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    3296:	ldr.w	r3, [r5, #4]!
    329a:	cmp	r3, #0
    329c:	beq.n	3296 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    329e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    32a0:	subs	r3, r4, #1
    32a2:	ands.w	r4, r3, #255	; 0xff
    32a6:	bne.n	3296 <HardwareSerial::processSerialEvents()+0xa>
    32a8:	pop	{r3, r4, r5, pc}
    32aa:	nop
    32ac:	.word	0x20000bb8
    32b0:	.word	0x20000b98

000032b4 <__libc_init_array>:
    32b4:	push	{r4, r5, r6, lr}
    32b6:	ldr	r6, [pc, #60]	; (32f4 <__libc_init_array+0x40>)
    32b8:	ldr	r5, [pc, #60]	; (32f8 <__libc_init_array+0x44>)
    32ba:	subs	r6, r6, r5
    32bc:	asrs	r6, r6, #2
    32be:	it	ne
    32c0:	movne	r4, #0
    32c2:	beq.n	32d0 <__libc_init_array+0x1c>
    32c4:	adds	r4, #1
    32c6:	ldr.w	r3, [r5], #4
    32ca:	blx	r3
    32cc:	cmp	r6, r4
    32ce:	bne.n	32c4 <__libc_init_array+0x10>
    32d0:	ldr	r6, [pc, #40]	; (32fc <__libc_init_array+0x48>)
    32d2:	ldr	r5, [pc, #44]	; (3300 <__libc_init_array+0x4c>)
    32d4:	subs	r6, r6, r5
    32d6:	bl	33a0 <___init_veneer>
    32da:	asrs	r6, r6, #2
    32dc:	it	ne
    32de:	movne	r4, #0
    32e0:	beq.n	32f0 <__libc_init_array+0x3c>
    32e2:	adds	r4, #1
    32e4:	ldr.w	r3, [r5], #4
    32e8:	blx	r3
    32ea:	cmp	r6, r4
    32ec:	bne.n	32e2 <__libc_init_array+0x2e>
    32ee:	pop	{r4, r5, r6, pc}
    32f0:	pop	{r4, r5, r6, pc}
    32f2:	nop
    32f4:	.word	0x60001820
    32f8:	.word	0x60001820
    32fc:	.word	0x60001828
    3300:	.word	0x60001820

00003304 <memset>:
    3304:	push	{r4, r5, r6}
    3306:	lsls	r4, r0, #30
    3308:	beq.n	3398 <memset+0x94>
    330a:	subs	r4, r2, #1
    330c:	cmp	r2, #0
    330e:	beq.n	3394 <memset+0x90>
    3310:	uxtb	r5, r1
    3312:	mov	r3, r0
    3314:	b.n	331c <memset+0x18>
    3316:	subs	r2, r4, #1
    3318:	cbz	r4, 3394 <memset+0x90>
    331a:	mov	r4, r2
    331c:	strb.w	r5, [r3], #1
    3320:	lsls	r2, r3, #30
    3322:	bne.n	3316 <memset+0x12>
    3324:	cmp	r4, #3
    3326:	bls.n	3386 <memset+0x82>
    3328:	uxtb	r5, r1
    332a:	orr.w	r5, r5, r5, lsl #8
    332e:	cmp	r4, #15
    3330:	orr.w	r5, r5, r5, lsl #16
    3334:	bls.n	336a <memset+0x66>
    3336:	add.w	r2, r3, #16
    333a:	mov	r6, r4
    333c:	subs	r6, #16
    333e:	cmp	r6, #15
    3340:	str.w	r5, [r2, #-16]
    3344:	str.w	r5, [r2, #-12]
    3348:	str.w	r5, [r2, #-8]
    334c:	str.w	r5, [r2, #-4]
    3350:	add.w	r2, r2, #16
    3354:	bhi.n	333c <memset+0x38>
    3356:	sub.w	r2, r4, #16
    335a:	bic.w	r2, r2, #15
    335e:	and.w	r4, r4, #15
    3362:	adds	r2, #16
    3364:	cmp	r4, #3
    3366:	add	r3, r2
    3368:	bls.n	3386 <memset+0x82>
    336a:	mov	r6, r3
    336c:	mov	r2, r4
    336e:	subs	r2, #4
    3370:	cmp	r2, #3
    3372:	str.w	r5, [r6], #4
    3376:	bhi.n	336e <memset+0x6a>
    3378:	subs	r2, r4, #4
    337a:	bic.w	r2, r2, #3
    337e:	adds	r2, #4
    3380:	add	r3, r2
    3382:	and.w	r4, r4, #3
    3386:	cbz	r4, 3394 <memset+0x90>
    3388:	uxtb	r1, r1
    338a:	add	r4, r3
    338c:	strb.w	r1, [r3], #1
    3390:	cmp	r3, r4
    3392:	bne.n	338c <memset+0x88>
    3394:	pop	{r4, r5, r6}
    3396:	bx	lr
    3398:	mov	r4, r2
    339a:	mov	r3, r0
    339c:	b.n	3324 <memset+0x20>
    339e:	nop

000033a0 <___init_veneer>:
    33a0:	ldr.w	pc, [pc]	; 33a4 <___init_veneer+0x4>
    33a4:	.word	0x600017cd
	...

Disassembly of section .fini:

000033b0 <_fini>:
    33b0:	push	{r3, r4, r5, r6, r7, lr}
    33b2:	nop
