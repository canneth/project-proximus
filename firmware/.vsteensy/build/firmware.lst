
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000d9a0 l    d  .fini	00000000 .fini
0000d9a4 l    d  .ARM.exidx	00000000 .ARM.exidx
0000d9ac l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20001b90 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00002cd8 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
000037d0 l     F .text.itcm	0000005c schedule_transfer
0000382c l     F .text.itcm	00000036 run_callbacks
00003864 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
00003908 l     F .text.itcm	00000698 isr
200022a4 l     O .bss	00000004 endpointN_notify_mask
200022a8 l     O .bss	00000001 sof_usage
200022b4 l     O .bss	00000004 endpoint0_notify_mask
200022b8 l     O .bss	00000001 usb_reboot_timer
200022c0 l     O .bss	00000008 endpoint0_setupdata
200022c8 l     O .bss	00000008 reply_buffer
200022d0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
200022e8 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
200022ec l     O .bss	00000004 s_hotTemp
200022f0 l     O .bss	00000004 s_hot_ROOM
200022f4 l     O .bss	00000004 s_roomC_hotC
200022f8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
600016dc l     O .text.progmem	0000000a qualifier_descriptor
200011a8 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001b90 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001b94 l       .bss	00000000 object.8610
60001740 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000001f8 l     F .text.itcm	00000084 _GLOBAL__sub_I_robot
00000000 l    df *ABS*	00000000 LegStanceController.cpp
00000000 l    df *ABS*	00000000 Leg.cpp
00000000 l    df *ABS*	00000000 MyMath.cpp
00000000 l    df *ABS*	00000000 MasterController.cpp
00000000 l    df *ABS*	00000000 GaitConfig.cpp
00000000 l    df *ABS*	00000000 IMU.cpp
00000000 l    df *ABS*	00000000 Robot.cpp
00000000 l    df *ABS*	00000000 LegSwingController.cpp
20000048 l     O .data	000000b7 project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 Command.cpp
00000000 l    df *ABS*	00000000 GaitController.cpp
20000160 l     O .data	0000004f project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)::__PRETTY_FUNCTION__
200001b0 l     O .data	00000044 project_namespace::GaitController::calculateGaitPhaseIndex(int)::__PRETTY_FUNCTION__
20000394 l     O .data	00000053 project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 SparkFun_BNO080_Arduino_Library.cpp
00001cfc l     F .text.itcm	00000068 BNO080::printHeader() [clone .part.7]
00001d64 l     F .text.itcm	000001e4 BNO080::printPacket() [clone .part.6]
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00002dcc l     F .text.itcm	0000006c rx_queue_transfer
00002e38 l     F .text.itcm	000000b4 rx_event
00002eec l     F .text.itcm	00000098 usb_serial_flush_callback
00002f84 l     F .text.itcm	0000017c usb_serial_write.part.1
200020b4 l     O .bss	00000010 rx_index
200020c4 l     O .bss	00000002 tx_packet_size
200020c6 l     O .bss	00000001 tx_noautoflush
200020c7 l     O .bss	00000001 tx_head
200020e0 l     O .bss	00000100 rx_transfer
200021e0 l     O .bss	00000001 rx_tail
200021e4 l     O .bss	00000009 rx_list
200021ee l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
200021f0 l     O .bss	00000010 rx_count
20002200 l     O .bss	00000004 rx_available
20002204 l     O .bss	00000001 rx_head
20002205 l     O .bss	00000001 transmit_previous_timeout
20002206 l     O .bss	00000002 tx_available
20002220 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00004494 l     F .text.itcm	00000024 digitalWrite.part.0
000044b8 l     F .text.itcm	0000001c digitalRead.part.1
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
200022fc l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 w_acos.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 e_acos.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
2000089c l     O .data	00000080 npio2_hw
2000091c l     O .data	00000108 two_over_pi
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_atan2.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
20000a24 l     O .data	00000080 npio2_hw
20000aa4 l     O .data	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
20000dbc l     O .data	00000010 init_jk
20000dd0 l     O .data	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
20000e10 l     O .data	0000000c init_jk
20000e1c l     O .data	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_atan.c
20000e48 l     O .data	00000020 atanlo
20000e68 l     O .data	00000020 atanhi
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
20000e88 l     O .data	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_atan.c
20000e98 l     O .data	00000010 atanlo
20000ea8 l     O .data	00000010 atanhi
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
20000f08 l     O .data	00000010 zeroes.7258
20000f58 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
0000a3d0 l     F .text.itcm	00000078 __sprint_r.part.0
0000b244 l     F .text.itcm	0000006a __sbprintf
20000f68 l     O .data	00000010 zeroes.7252
20000f78 l     O .data	00000010 blanks.7251
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000b3c0 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000c2ec l     F .text.itcm	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
20001190 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
200011e8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600016f8 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001700 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001708 l     F .text.progmem	00000008 __main_veneer
60001710 l     F .text.progmem	00000008 __memset_veneer
60001718 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001720 l     F .text.progmem	00000008 __pwm_init_veneer
60001728 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001730 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001738 l     F .text.progmem	00000008 __delay_veneer
0000d990 l     F .text.itcm	00000008 ___init_veneer
00000c48 g     F .text.itcm	000000e8 project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)
0000333c g     F .text.itcm	0000000c usb_serial_available
000028b0 g     F .text.itcm	00000054 BNO080::dataAvailable()
0000d5fc g     F .text.itcm	00000024 _isatty_r
00002ce4 g     F .text.itcm	00000002 startup_default_late_hook
00007a44 g     F .text.itcm	0000000e fabs
0000d620 g     F .text.itcm	0000002c _lseek_r
000045d4  w    F .text.itcm	000000a0 yield
00004f70 g     F .text.itcm	000000a8 sqrt
00001918 g     F .text.itcm	00000006 project_namespace::Command::getGaitYawSpeed()
200022ac g     O .bss	00000004 usb_timer1_callback
60001638 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
2000231c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00002374 g     F .text.itcm	0000006c BNO080::waitForI2C()
000019f0 g     F .text.itcm	000000a4 project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)
0000d478 g     F .text.itcm	00000054 _wcrtomb_r
0000160c g     F .text.itcm	00000054 project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()
00001140 g     F .text.itcm	00000006 project_namespace::Robot::setBodyPitch(float)
00004890 g     F .text.itcm	00000020 Print::println()
0000d2a4 g     F .text.itcm	00000020 __sseek
0000c3dc g     F .text.itcm	0000000a __sinit
0000d3cc g     F .text.itcm	000000ac __swbuf_r
00001908 g     F .text.itcm	0000000e project_namespace::Command::getBodyVelocity()
00008910 g     F .text.itcm	00000002 __malloc_unlock
00001a94 g     F .text.itcm	0000009c project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)
600014ac g     F .text.progmem	00000058 analog_init
00000390 g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
000018a4 g     F .text.itcm	00000034 project_namespace::Command::Command()
200011a4 g     O .data	00000004 F_CPU_ACTUAL
000049a8 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
000087a8 g     F .text.itcm	000000c6 memmove
000047a4 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
000007b4 g     F .text.itcm	00000494 project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)
0000cc20 g     F .text.itcm	0000004c _Balloc
00001948 g     F .text.itcm	0000002c project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)
20002314 g     O .bss	00000001 EventResponder::runningFromYield
00000d94 g     F .text.itcm	00000054 project_namespace::IMU::getGyro()
0000816c g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
20002300 g     O .bss	00000004 EventResponder::firstInterrupt
000040e8 g     F .text.itcm	00000004 usb_transfer_status
000018a4 g     F .text.itcm	00000034 project_namespace::Command::Command()
00000d88 g     F .text.itcm	00000006 project_namespace::GaitConfig::setSwingHeight(float)
000064ec g     F .text.itcm	00000298 __ieee754_rem_pio2f
200011d2 g     O .data	00000001 usb_enable_serial_event_processing
00001660 g     F .text.itcm	00000244 project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)
20001f80 g     O .bss	00000004 imu
00004874  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000d5d4 g     F .text.itcm	00000028 _fstat_r
20000560 g     O .data	00000280 digital_pin_to_info_PGM
00001b30 g     F .text.itcm	0000004e project_namespace::GaitController::calculateContactPattern(int)
20004284 g     O .bss	00000004 errno
00007a68 g     F .text.itcm	00000118 floor
0000d9a0 g       .text.itcm	00000000 _etext
20001b90 g       .bss	00000000 _sbss
00000d80 g     F .text.itcm	00000006 project_namespace::GaitConfig::getSwingHeight()
000044e0 g     F .text.itcm	0000000c digitalRead
60001750 g       *ABS*	00000000 _stextload
000000b8 g     F .text.itcm	00000140 loop
00003fa0 g     F .text.itcm	00000064 usb_config_rx
00005020 g     F .text.itcm	000000b0 sqrtf
0000473c g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00005f60 g     F .text.itcm	0000029c __ieee754_rem_pio2
20002304 g     O .bss	00000004 EventResponder::lastInterrupt
00002b94 g     F .text.itcm	00000134 memcpy
0000c2e0 g     F .text.itcm	0000000c _cleanup_r
00008e60 g     F .text.itcm	00001570 _svfprintf_r
200022e4 g     O .bss	00000004 systick_millis_count
00002a1c g     F .text.itcm	0000003c TwoWire::wait_idle()
000022fc g     F .text.itcm	0000003a BNO080::getGyroY()
0000d678 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200022d8 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
60001638  w    O .text.progmem	00000018 usb_string_manufacturer_name
00002db0  w    F .text.itcm	0000000a _fstat
00001cdc  w    F .text.itcm	0000001e TwoWire::read()
00002b78  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
00008130 g     F .text.itcm	0000003c __assert_func
200010a0 g     O .data	000000c8 __mprec_tens
600013c0 g     F .text.progmem	000000ec usb_init
00006828 g     F .text.itcm	00000120 __kernel_cos
00000390 g     F .text.itcm	0000003a project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)
00001234 g     F .text.itcm	0000006a project_namespace::Robot::updateStancePolygon()
20002344 g     O .bss	00000004 __malloc_top_pad
20004280 g     O .bss	00000004 systick_safe_read
00002904 g     F .text.itcm	00000118 TwoWire::force_clock()
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
00002194 g     F .text.itcm	0000003a BNO080::getQuatI()
0000ca74 g     F .text.itcm	0000001c _localeconv_r
00001974 g     F .text.itcm	0000007c project_namespace::GaitController::calculateGaitPhaseIndex(int)
00002284 g     F .text.itcm	0000003a BNO080::getQuatRadianAccuracy()
0000c71c g     F .text.itcm	00000304 __sfvwrite_r
0000cd9c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
60001698 g     O .text.progmem	00000043 usb_config_descriptor_480
0000d6a8 g     F .text.itcm	000002e2 .hidden __udivmoddi4
000018e0 g     F .text.itcm	00000006 project_namespace::Command::getStancePolygonWidth()
00008cf4 g     F .text.itcm	00000024 _sbrk_r
00002ce0 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
000033bc g     F .text.itcm	00000020 usb_serial_getchar
200026c0 g     O .bss	00000008 usb_cdc_line_coding
000044d4 g     F .text.itcm	0000000a digitalWrite
00007f8c g     F .text.itcm	0000000e fabsf
2000230c g     O .bss	00000004 EventResponder::lastYield
0000d64c g     F .text.itcm	0000002c _read_r
20001cb0 g     O .bss	00000030 command
00002248 g     F .text.itcm	0000003a BNO080::getQuatReal()
0000d550 g     F .text.itcm	00000084 _fclose_r
20002340 g     O .bss	00000004 __malloc_max_sbrked_mem
000044ec g     F .text.itcm	00000080 pinMode
00006fc8 g     F .text.itcm	000000b0 __kernel_sin
00001148 g     F .text.itcm	00000006 project_namespace::Robot::setBodyYaw(float)
00001900 g     F .text.itcm	00000006 project_namespace::Command::getBodyYaw()
20280000 g       .bss.dma	00000000 _heap_end
000022c0 g     F .text.itcm	0000003a BNO080::getGyroX()
00002dbc  w    F .text.itcm	00000004 _isatty
200011e4 g     O .data	00000001 __fdlib_version
20002310 g     O .bss	00000004 EventResponder::firstYield
00008914 g     F .text.itcm	000003de _realloc_r
000081a0 g     F .text.itcm	00000050 __libc_init_array
000077ac g     F .text.itcm	00000090 __kernel_sinf
00001cd0  w    F .text.itcm	0000000c TwoWire::available()
0000c488 g     F .text.itcm	00000026 _fputwc_r
20001168 g     O .data	00000028 __mprec_bigtens
00002dc8  w    F .text.itcm	00000004 abort
00002ce8  w    F .text.itcm	0000008c HardFault_HandlerC
00002a58 g     F .text.itcm	00000120 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000485c  w    F .text.itcm	00000004 usb_serial_class::clear()
00002d74 g     F .text.itcm	00000030 _sbrk
6000f0fc g       *ABS*	00000000 _sdataload
0000d030 g     F .text.itcm	00000042 __mcmp
20002318 g     O .bss	00000004 MillisTimer::listWaiting
2000119c g     O .data	00000004 __brkval
20002208 g     O .bss	00000001 usb_cdc_line_rtsdtr
600016e8 g     F .text.progmem	00000000 _init
00003100 g     F .text.itcm	00000002 usb_serial_reset
00004a70 g     F .text.itcm	00000090 cosf
20001ec0 g     O .bss	000000c0 master_controller
00001f48 g     F .text.itcm	0000024c BNO080::parseInputReport()
60001654 g     O .text.progmem	00000043 usb_config_descriptor_12
00006948 g     F .text.itcm	0000067c __kernel_rem_pio2
200042c0 g       .bss	00000000 _ebss
00001944 g     F .text.itcm	00000004 project_namespace::Command::setMode(project_namespace::Mode)
00007b98 g     F .text.itcm	0000011c rint
00001418 g     F .text.itcm	000001f4 project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)
0000cd00 g     F .text.itcm	00000040 __hi0bits
20203050 g       .bss.dma	00000000 _heap_start
00007078 g     F .text.itcm	00000104 __kernel_cosf
00000d64 g     F .text.itcm	00000014 project_namespace::GaitConfig::getGaitPhaseDurationsInTicks()
000055f8 g     F .text.itcm	000001dc __ieee754_atan2
00000002 g       *ABS*	00000000 _itcm_block_count
20003000 g     O .bss	00000020 endpoint0_transfer_data
000041dc g     F .text.itcm	000002b8 pwm_init
000018e8 g     F .text.itcm	00000006 project_namespace::Command::getStanceHeight()
00000794 g     F .text.itcm	0000001e project_namespace::MasterController::MasterController(project_namespace::IMU&)
0000193c g     F .text.itcm	00000006 project_namespace::Command::setSwingHeight(float)
6000135c g     F .text.progmem	00000064 usb_pll_start
0000cee0 g     F .text.itcm	000000a0 __pow5mult
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20003020 g     O .bss	00000020 endpoint0_transfer_ack
200026c8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000409c g     F .text.itcm	00000028 usb_transmit
0000483c g     F .text.itcm	00000020 systick_isr
000012b8 g     F .text.itcm	00000006 project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)
200011d4 g     O .data	00000010 Serial
20002338 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
0000487c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00002ce0  w    F .text.itcm	00000002 startup_early_hook
00005390 g     F .text.itcm	00000264 __ieee754_asin
000032f8 g     F .text.itcm	00000044 usb_serial_peekchar
0000c3e8 g     F .text.itcm	00000002 __sfp_lock_acquire
0000cb80 g     F .text.itcm	00000000 memchr
0000350c g     F .text.itcm	000002c4 set_arm_clock
200022dc g     O .bss	00000004 systick_cycle_count
200011bc g     O .data	00000016 usb_string_serial_number_default
0000c54c g     F .text.itcm	000001d0 _free_r
000081f0 g     F .text.itcm	0000001c __locale_mb_cur_max
000018f8 g     F .text.itcm	00000006 project_namespace::Command::getBodyPitch()
0000486c  w    F .text.itcm	00000004 usb_serial_class::flush()
00000d5c g     F .text.itcm	00000004 project_namespace::GaitConfig::getGaitSwingDurationInTicks()
00000280 g     F .text.itcm	00000110 project_namespace::LegStanceController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int)
00002338 g     F .text.itcm	0000003a BNO080::getGyroZ()
20001b8c g     O .data	00000004 __malloc_sbrk_base
00004864  w    F .text.itcm	00000004 usb_serial_class::read()
000010d8 g     F .text.itcm	00000020 project_namespace::Robot::getFootPositionsWrtBodyTrue()
000049d0 g     F .text.itcm	000000a0 sin
00002dc0  w    F .text.itcm	00000006 _lseek
000021d0 g     F .text.itcm	0000003a BNO080::getQuatJ()
0000cf80 g     F .text.itcm	000000ae __lshift
0000406c g     F .text.itcm	0000002e usb_prepare_transfer
00004cec g     F .text.itcm	00000004 atan2
00002cc8 g     F .text.itcm	00000018 unused_interrupt_vector
0000d2cc g     F .text.itcm	00000100 __ssprint_r
200022a0 g     O .bss	00000004 usb_timer0_callback
60001504 g     F .text.progmem	0000011c tempmon_init
00004884  w    F .text.itcm	0000000c serialEvent()
00000590 g     F .text.itcm	0000002a project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)
00003348 g     F .text.itcm	00000074 usb_serial_flush_input
0000cdb0 g     F .text.itcm	00000130 __multiply
000057d8 g     F .text.itcm	00000784 __ieee754_pow
20001bb0 g     O .bss	000000ff sprintf_buffer
00004cf0 g     F .text.itcm	00000280 pow
000033dc g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20002348 g     O .bss	00000028 __malloc_current_mallinfo
0000d188 g     F .text.itcm	000000ba __d2b
000012b0 g     F .text.itcm	00000008 project_namespace::Robot::setStanceHeight(float)
0000d52c g     F .text.itcm	00000024 _close_r
00001b80 g     F .text.itcm	00000150 project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)
2000084c  w    O .data	00000028 vtable for usb_serial_class
20001ce0 g     O .bss	000001e0 robot
200022e0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00000794 g     F .text.itcm	0000001e project_namespace::MasterController::MasterController(project_namespace::IMU&)
0000220c g     F .text.itcm	0000003a BNO080::getQuatK()
0000b2f8 g     F .text.itcm	000000c8 __swsetup_r
20002308 g     O .bss	00000004 MillisTimer::listActive
0000d98c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00001948 g     F .text.itcm	0000002c project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)
20001780 g     O .data	00000408 __malloc_av_
0000d244 g     F .text.itcm	00000022 __sread
0000346c g     F .text.itcm	000000a0 usb_serial_flush_output
00000e58 g     F .text.itcm	00000280 project_namespace::Robot::Robot()
0000890c g     F .text.itcm	00000002 __malloc_lock
0000802c g     F .text.itcm	000000d0 scalbnf
20002400 g     O .bss	000002c0 _VectorsRam
0000c2b4 g     F .text.itcm	0000002c _fflush_r
0000d4cc g     F .text.itcm	0000005e _calloc_r
200022b0 g     O .bss	00000001 usb_high_speed
00008870 g     F .text.itcm	0000009a memset
00006784 g     F .text.itcm	000000a2 __ieee754_sqrtf
00000c48 g     F .text.itcm	000000e8 project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)
000045c4 g     F .text.itcm	00000010 main
2000233c g     O .bss	00000004 __malloc_max_total_mem
00002530 g     F .text.itcm	00000380 BNO080::receivePacket()
000023e0 g     F .text.itcm	00000150 BNO080::getData(unsigned short)
20203000 g     O .bss.dma	00000043 usb_descriptor_buffer
20001bac g     O .bss	00000004 last_time
0000d2c4 g     F .text.itcm	00000008 __sclose
00007b80 g     F .text.itcm	00000004 matherr
0000456c g     F .text.itcm	00000058 usb_init_serialnumber
60001748 g       .text.progmem	00000000 __init_array_end
0000b4e8 g     F .text.itcm	00000c84 _dtoa_r
0000820c g     F .text.itcm	00000570 _malloc_r
0000b2b0 g     F .text.itcm	0000001a __ascii_wctomb
200003e8  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00004674 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
000012b8 g     F .text.itcm	00000006 project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)
0000c4b0 g     F .text.itcm	0000009c _malloc_trim_r
60001650 g     O .text.progmem	00000004 string0
00003408 g     F .text.itcm	00000018 usb_serial_write
00007a54 g     F .text.itcm	00000010 finite
0000027c g     F .text.itcm	00000004 project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)
00002ce4  w    F .text.itcm	00000002 startup_late_hook
00000d54 g     F .text.itcm	00000004 project_namespace::GaitConfig::getGaitNumberOfPhases()
00004868  w    F .text.itcm	00000004 usb_serial_class::available()
00000de8 g     F .text.itcm	00000070 project_namespace::IMU::getHeadingQuaternion()
20004000 g     O .bss	00000280 endpoint_queue_head
60001620  w    O .text.progmem	00000016 usb_string_product_name
00000d90 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
000080fc g     F .text.itcm	0000001a copysign
000040ec g     F .text.itcm	000000cc delay
0000d9a0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00008118 g     F .text.itcm	00000018 copysignf
00007840 g     F .text.itcm	00000204 atan
00008d18 g     F .text.itcm	0000004c sprintf
00004940 g     F .text.itcm	00000016 Print::print(long)
000041b8 g     F .text.itcm	00000024 Panic_Temp_isr
00000d60 g     F .text.itcm	00000004 project_namespace::GaitConfig::getGaitCycleDurationInTicks()
00001138 g     F .text.itcm	00000006 project_namespace::Robot::setBodyRoll(float)
000018d8 g     F .text.itcm	00000006 project_namespace::Command::getStancePolygonLength()
0000b2cc g     F .text.itcm	0000002c _write_r
00004c40 g     F .text.itcm	000000ac asin
20001610 g     O .data	00000004 _impure_ptr
0000c16c g     F .text.itcm	00000148 __sflush_r
00007cb8 g     F .text.itcm	0000011c scalbn
00005018 g     F .text.itcm	00000004 atan2f
60001740 g       .text.progmem	00000000 __preinit_array_end
20001f84 g     O .bss	00000130 imu_hardware
000012a8 g     F .text.itcm	00000008 project_namespace::Robot::setStancePolygonWidth(float)
0000877c g     F .text.itcm	0000002a __ascii_mbtowc
00001150 g     F .text.itcm	00000032 project_namespace::Robot::setFootPositionsWrtBodyAssumingNoBodyRPY(Eigen::Matrix<float, 3, 4, 0, 3, 4>)
0000007c g     F .text.itcm	0000003c setup
200007e0 g     O .data	0000006c usb_descriptor_list
00000d58 g     F .text.itcm	00000004 project_namespace::GaitConfig::getGaitStanceDurationInTicks()
000012a0 g     F .text.itcm	00000008 project_namespace::Robot::setStancePolygonLength(float)
00004b00 g     F .text.itcm	00000094 sinf
00007b88 g     F .text.itcm	00000010 nan
000010f8 g     F .text.itcm	00000020 project_namespace::Robot::getFootPositionsWrtBodyAssumingNoBodyRPY()
00001928 g     F .text.itcm	00000004 project_namespace::Command::getMode()
000061fc g     F .text.itcm	00000184 __ieee754_sqrt
00001118 g     F .text.itcm	00000020 project_namespace::Robot::getFootPositionsWrtBodyAtRest()
0000ca90 g     F .text.itcm	0000005e __swhatbuf_r
20070000 g       .bss.dma	00000000 _estack
00003420 g     F .text.itcm	0000004c usb_serial_write_buffer_free
000003d0 g     F .text.itcm	000001c0 project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)
00003104 g     F .text.itcm	00000108 usb_serial_configure
000048b0  w    F .text.itcm	0000000e _write
20001b90 g       .data	00000000 _edata
0000c3f0 g     F .text.itcm	00000098 __fputwc
00004870  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000011a0 g     F .text.itcm	00000092 project_namespace::Robot::moveAllFeet(Eigen::Matrix<float, 3, 4, 0, 3, 4>)
00004958 g     F .text.itcm	0000004e ultoa
0000d268 g     F .text.itcm	0000003c __swrite
000046f4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001b88 g     O .data	00000004 __malloc_trim_threshold
00004860  w    F .text.itcm	00000004 usb_serial_class::peek()
00008178 g     F .text.itcm	00000028 fiprintf
0000a448 g     F .text.itcm	00000dfc _vfiprintf_r
0000ca20 g     F .text.itcm	00000052 _fwalk_reent
0000d074 g     F .text.itcm	00000114 __mdiff
000012c0 g     F .text.itcm	00000158 project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)
0000c3ec g     F .text.itcm	00000002 __sfp_lock_release
00007dd4 g     F .text.itcm	000001b8 atanf
000005bc  w    F .text.itcm	0000009e Eigen::Matrix<float, 3, 3, 0, 3, 3>& Eigen::Matrix<float, 3, 3, 0, 3, 3>::operator=<Eigen::Quaternion<float, 0> >(Eigen::RotationBase<Eigen::Quaternion<float, 0>, 3> const&)
000018f0 g     F .text.itcm	00000006 project_namespace::Command::getBodyRoll()
20000f88 g     O .data	00000101 _ctype_
00002da4  w    F .text.itcm	00000004 _read
0000d98c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
60001740 g       .text.progmem	00000000 __init_array_start
200011a0 g     O .data	00000004 F_BUS_ACTUAL
0000027c g     F .text.itcm	00000004 project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)
0000717c g     F .text.itcm	00000630 __kernel_rem_pio2f
0000caf0 g     F .text.itcm	00000088 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
00000d78 g     F .text.itcm	00000004 project_namespace::GaitConfig::getLegStanceDurationInTicks()
00008d80 g     F .text.itcm	000000dc strlen
60001620 g     O .text.progmem	00000016 usb_string_product_name_default
00000d30 g     F .text.itcm	00000024 project_namespace::GaitConfig::getContactSchedule()
00001920 g     F .text.itcm	00000006 project_namespace::Command::getSwingHeight()
00000d90 g     F .text.itcm	00000004 project_namespace::IMU::IMU(BNO080&)
00007f9c g     F .text.itcm	00000090 floorf
6000129c g     F .text.progmem	000000c0 configure_cache
0000192c g     F .text.itcm	0000000e project_namespace::Command::setBodyVelocity(Eigen::Matrix<float, 3, 1, 0, 3, 1>)
00004b94 g     F .text.itcm	000000ac acos
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001740 g       .text.progmem	00000000 __preinit_array_start
000040c4 g     F .text.itcm	00000024 usb_receive
0000cd40 g     F .text.itcm	0000005a __lo0bits
00010c80 g       *ABS*	00000000 _flashimagelen
0000065c g     F .text.itcm	00000138 project_namespace::MyMath::eulerToMatrix(float, float, float)
00000000  w      *UND*	00000000 __register_frame_info
00004738 g     F .text.itcm	00000004 pendablesrvreq_isr
20001614 g     O .data	0000016c __global_locale
00000e58 g     F .text.itcm	00000280 project_namespace::Robot::Robot()
00001184 g     F .text.itcm	0000001a project_namespace::Robot::setContactPattern(Eigen::Matrix<int, 4, 1, 0, 4, 1>)
0000320c g     F .text.itcm	000000ec usb_serial_read
000048c0 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00004004 g     F .text.itcm	00000068 usb_config_tx
00002da8  w    F .text.itcm	00000006 _close
00000d7c g     F .text.itcm	00000004 project_namespace::GaitConfig::getLegSwingDurationInTicks()
000050d0 g     F .text.itcm	000002bc __ieee754_acos
0000cc80 g     F .text.itcm	00000080 __multadd
0000cc6c g     F .text.itcm	00000012 _Bfree
00006380 g     F .text.itcm	0000016c __ieee754_atan2f
200011bc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001730 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600016f8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013c0 <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001720 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001728 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001718 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	60001708 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaaf
60001210:	.word	0x00200007
60001214:	.word	0x20070000
60001218:	.word	0x00000000
6000121c:	.word	0x60001750
60001220:	.word	0x0000d9a0
60001224:	.word	0x20000000
60001228:	.word	0x6000f0fc
6000122c:	.word	0x20001b90
60001230:	.word	0x20001b90
60001234:	.word	0x200042c0
60001238:	.word	0xe000ed88
6000123c:	.word	0x200023fc
60001240:	.word	0x00002cc9
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00004739
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000483d
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x200022dc
6000127c:	.word	0x23c34600
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x200022e4
60001290:	.word	0x20002400
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	dsb	sy
	asm("isb");
60001300:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	ldr.w	r3, [r2, #-136]
60001308:	orr.w	r3, r3, #196608	; 0x30000
6000130c:	str.w	r3, [r2, #-136]
60001310:	pop	{r4, r5, r6, r7, pc}
60001312:	nop
60001314:	.word	0xe000ed9c
60001318:	.word	0xe000eda0
6000131c:	.word	0xe000ed94
60001320:	.word	0x03080025
60001324:	.word	0x00200011
60001328:	.word	0x07020021
6000132c:	.word	0x20000012
60001330:	.word	0x13080025
60001334:	.word	0x20200013
60001338:	.word	0x130b0027
6000133c:	.word	0x40000014
60001340:	.word	0x13100033
60001344:	.word	0x60000015
60001348:	.word	0x070b002f
6000134c:	.word	0x70000016
60001350:	.word	0x070b0035
60001354:	.word	0x70000017
60001358:	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	tst.w	r3, #2
6000137c:	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	tst.w	r3, #2
6000138a:	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	tst.w	r3, #8192	; 0x2000
60001390:	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	str	r5, [r2, #20]
			continue;
60001394:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	tst.w	r3, #4096	; 0x1000
6000139a:	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	str	r6, [r2, #20]
			continue;
6000139e:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	cmp	r3, #0
600013a2:	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	tst.w	r3, #65536	; 0x10000
600013a8:	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	str	r1, [r2, #24]
			continue;
600013ac:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	lsls	r3, r3, #25
600013b0:	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	str	r7, [r2, #20]
			continue;
600013b4:	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	pop	{r4, r5, r6, r7}
600013b8:	bx	lr
600013ba:	nop
600013bc:	.word	0x400d8000

600013c0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c0:	ldr	r3, [pc, #192]	; (60001484 <usb_init+0xc4>)
600013c2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013c6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013cc:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013d0:	bl	60001700 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d4:	ldr	r1, [pc, #176]	; (60001488 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013d6:	ldr	r0, [pc, #180]	; (6000148c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013dc:	ldr	r4, [pc, #176]	; (60001490 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013de:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013e2:	ldr	r3, [pc, #176]	; (60001494 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013e4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013e8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013ec:	ldr	r2, [r4, #0]
600013ee:	ands	r3, r2
600013f0:	cbnz	r3, 600013fa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013f2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013f6:	lsls	r2, r3, #30
600013f8:	beq.n	60001430 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013fa:	ldr	r3, [pc, #144]	; (6000148c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013fc:	mov.w	r1, #2147483648	; 0x80000000
60001400:	ldr	r2, [pc, #140]	; (60001490 <usb_init+0xd0>)
60001402:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001404:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001406:	ldr.w	r1, [r3, #320]	; 0x140
6000140a:	orr.w	r1, r1, #2
6000140e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001412:	ldr.w	r3, [r2, #320]	; 0x140
60001416:	lsls	r3, r3, #30
60001418:	bmi.n	60001412 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000141a:	mov.w	r0, #131072	; 0x20000
6000141e:	ldr	r1, [pc, #120]	; (60001498 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001420:	ldr	r3, [pc, #108]	; (60001490 <usb_init+0xd0>)
60001422:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001426:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001428:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000142a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000142c:	bl	60001738 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001430:	ldr	r5, [pc, #104]	; (6000149c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001432:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001434:	ldr	r3, [pc, #88]	; (60001490 <usb_init+0xd0>)
60001436:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000143a:	ldr	r4, [pc, #80]	; (6000148c <usb_init+0xcc>)
6000143c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000143e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001440:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001442:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001444:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001446:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000144a:	mov.w	r2, #640	; 0x280
6000144e:	bl	60001710 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001452:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001456:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000145a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000145e:	ldr	r2, [pc, #64]	; (600014a0 <usb_init+0xe0>)
60001460:	ldr	r1, [pc, #64]	; (600014a4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001462:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001464:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001466:	str.w	r5, [r4, #344]	; 0x158
6000146a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000146e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001472:	ldr	r2, [pc, #52]	; (600014a8 <usb_init+0xe8>)
60001474:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001478:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000147a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000147c:	str.w	r3, [r4, #320]	; 0x140
60001480:	pop	{r4, r5, r6, pc}
60001482:	nop
60001484:	.word	0x400d8000
60001488:	.word	0x400fc000
6000148c:	.word	0x402e0000
60001490:	.word	0x400d9000
60001494:	.word	0x001e1c00
60001498:	.word	0xe000e28c
6000149c:	.word	0x20004000
600014a0:	.word	0x20002400
600014a4:	.word	0x00003909
600014a8:	.word	0xe000e10c

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x200022e8

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x200022f4
60001600:	.word	0x200022f8
60001604:	.word	0x200022f0
60001608:	.word	0x20002400
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x000041b9
60001618:	.word	0xe000e108
6000161c:	.word	0x200022ec

60001620 <usb_string_product_name_default>:
60001620:	..U.S.B. .S.e.r.
60001630:	i.a.l...

60001638 <usb_string_manufacturer_name_default>:
60001638:	..T.e.e.n.s.y.d.
60001648:	u.i.n.o.

60001650 <string0>:
60001650:	....

60001654 <usb_config_descriptor_12>:
60001654:	..C.....2.......
60001664:	...$....$....$..
60001674:	.$..............
60001684:	.........@......
60001694:	@...

60001698 <usb_config_descriptor_480>:
60001698:	..C.....2.......
600016a8:	...$....$....$..
600016b8:	.$..............
600016c8:	................
600016d8:	....

600016dc <qualifier_descriptor>:
600016dc:	.......@....

600016e8 <_init>:
600016e8:	push	{r3, r4, r5, r6, r7, lr}
600016ea:	nop
600016ec:	pop	{r3, r4, r5, r6, r7}
600016ee:	pop	{r3}
600016f0:	mov	lr, r3
600016f2:	bx	lr
600016f4:			; <UNDEFINED> instruction: 0xffffffff

600016f8 <__startup_early_hook_veneer>:
600016f8:	ldr.w	pc, [pc]	; 600016fc <__startup_early_hook_veneer+0x4>
600016fc:	.word	0x00002ce1

60001700 <__usb_init_serialnumber_veneer>:
60001700:	ldr.w	pc, [pc]	; 60001704 <__usb_init_serialnumber_veneer+0x4>
60001704:	.word	0x0000456d

60001708 <__main_veneer>:
60001708:	ldr.w	pc, [pc]	; 6000170c <__main_veneer+0x4>
6000170c:	.word	0x000045c5

60001710 <__memset_veneer>:
60001710:	ldr.w	pc, [pc]	; 60001714 <__memset_veneer+0x4>
60001714:	.word	0x00008871

60001718 <____libc_init_array_veneer>:
60001718:	ldr.w	pc, [pc]	; 6000171c <____libc_init_array_veneer+0x4>
6000171c:	.word	0x000081a1

60001720 <__pwm_init_veneer>:
60001720:	ldr.w	pc, [pc]	; 60001724 <__pwm_init_veneer+0x4>
60001724:	.word	0x000041dd

60001728 <__startup_late_hook_veneer>:
60001728:	ldr.w	pc, [pc]	; 6000172c <__startup_late_hook_veneer+0x4>
6000172c:	.word	0x00002ce5

60001730 <__set_arm_clock_veneer>:
60001730:	ldr.w	pc, [pc]	; 60001734 <__set_arm_clock_veneer+0x4>
60001734:	.word	0x0000350d

60001738 <__delay_veneer>:
60001738:	ldr.w	pc, [pc]	; 6000173c <__delay_veneer+0x4>
6000173c:	.word	0x000040ed

60001740 <__init_array_start>:
60001740:	.word	0x00000045
60001744:	.word	0x000001f9

60001748 <__init_array_end>:
60001748:	.word	0xffffffff
6000174c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	.word	0xf3af4804
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	subs	r0, r2, r6
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x0000d9a4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	.word	0x4908b11b
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	.short	0xbf00
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	subs	r4, r2, r6
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	bls.n	ffffffbc <_flexram_bank_config+0x5555550d>
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	subs	r0, r2, r6
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <setup>:
/////////////////////
// Test classes

/////////////////////

void setup() {
      7c:	.word	0x4a0ab430
      80:	ldr	r1, [pc, #40]	; (ac <setup+0x30>)
      82:	ldr	r5, [pc, #44]	; (b0 <setup+0x34>)
      84:	.word	0x78134c0b
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      88:	cmp	r3, #0
      8a:	beq.n	86 <setup+0xa>
      8c:	.word	0x07db780b
      90:	bpl.n	86 <setup+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      92:	.short	0x682b
      94:	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      96:	.short	0x1a1b
      98:	cmp	r3, #14
      9a:	bls.n	86 <setup+0xa>
    while(!Serial);
    pinMode(led_pin, OUTPUT);
      9c:	movs	r1, #1
      9e:	movs	r0, #13
    //     while (1);
    // }
    // // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    // imu.imu_hardware.enableGyro(50); // Send data update every 50ms
}
      a0:	pop	{r4, r5}

/////////////////////

void setup() {
    while(!Serial);
    pinMode(led_pin, OUTPUT);
      a2:	b.w	44ec <pinMode>
      a6:	.short	0xbf00
      a8:	movs	r2, #216	; 0xd8
      aa:	.short	0x2000
      ac:	movs	r2, #8
      ae:	movs	r0, #0
      b0:	.word	0x200022e4
      b4:	movs	r6, #200	; 0xc8
      b6:	.short	0x2000

000000b8 <loop>:
    // // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    // imu.imu_hardware.enableGyro(50); // Send data update every 50ms
}

void loop() {
      b8:	push	{r4, r5, r7, lr}
      ba:	.short	0x4b46
    long current_time = millis();
    long delta_time = current_time - last_time;
      bc:	ldr	r2, [pc, #280]	; (1d8 <loop+0x120>)
    // // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    // imu.imu_hardware.enableGyro(50); // Send data update every 50ms
}

void loop() {
      be:	.short	0xed2d
      c0:	ldrh	r0, [r1, #24]
      c2:	.short	0xb09a
      c4:	ldr	r5, [r3, #0]
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
      c6:	ldr	r3, [r2, #0]
    // // imu.imu_hardware.enableRotationVector(50); // For quaternion; send data update every 50ms
    // // imu.imu_hardware.enableAccelerometer(50); // Send data update every 50ms
    // imu.imu_hardware.enableGyro(50); // Send data update every 50ms
}

void loop() {
      c8:	.word	0xb090af16
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
      cc:	subs	r3, r5, r3
      ce:	.short	0x2b09
      d0:	bgt.n	dc <loop+0x24>
        "%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f",
        FL_x, FL_y, FL_z, FR_x, FR_y, FR_z, BL_x, BL_y, BL_z, BR_x, BR_y, BR_z
    );
    Serial.println(sprintf_buffer);

      d2:	adds	r7, #16
      d4:	mov	sp, r7
      d6:	.short	0xecbd
      d8:	ldrh	r0, [r1, #24]
      da:	.short	0xbdb0
    if (delta_time < (long(Config::dt*1000))) {
        return;
    }
    last_time = current_time;

    command.setMode(Mode::TROT);
      dc:	movs	r1, #1
      de:	.short	0x483f
    long current_time = millis();
    long delta_time = current_time - last_time;
    if (delta_time < (long(Config::dt*1000))) {
        return;
    }
    last_time = current_time;
      e0:	str	r5, [r2, #0]
      e2:	.short	0xf10d
      e4:	lsls	r7, r4, #17

    command.setMode(Mode::TROT);
      e6:	bl	1944 <project_namespace::Command::setMode(project_namespace::Mode)>
    command.setSwingHeight(0.1);
      ea:	.short	0xed9f
      ec:	lsrs	r5, r7, #8
      ee:	.short	0x483b
      f0:	bic.w	r4, r4, #15
      f4:	.word	0xfc22f001
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
      f8:	movs	r3, #0
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
      fa:	.short	0xf04f
      fc:	strh	r4, [r7, r1]
    command.setBodyVelocity(Eigen::Vector3f(0.5, 0, 0));
      fe:	.short	0x1d39
     100:	ldr	r0, [pc, #216]	; (1dc <loop+0x124>)
      m_storage.data()[1] = y;
     102:	.short	0x60bb
      m_storage.data()[2] = z;
     104:	str	r3, [r7, #12]
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     106:	.short	0x607a
     108:	bl	192c <project_namespace::Command::setBodyVelocity(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
    master_controller.stepOnce(robot, command);
     10c:	ldr	r2, [pc, #204]	; (1dc <loop+0x124>)
     10e:	.short	0x4935
     110:	ldr	r0, [pc, #212]	; (1e8 <loop+0x130>)
     112:	.short	0xf000
     114:			; <UNDEFINED> instruction: 0xfb4f4620

    // For serial logging purposes only
    Eigen::Matrix<float, 3, 4> all_foot_positions;
    all_foot_positions = robot.getFootPositionsWrtBodyTrue();
     118:	ldr	r1, [pc, #200]	; (1e4 <loop+0x12c>)
     11a:	.short	0xf000
     11c:			; <UNDEFINED> instruction: 0xffddedd4
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     120:	ldrb	r0, [r0, #8]
     122:	vldr	s20, [r4, #4]
     126:	vldr	s10, [r4, #8]
    float BR_z = all_foot_positions.col(3)(2);
    sprintf(
        sprintf_buffer,
        "%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f",
        FL_x, FL_y, FL_z, FR_x, FR_y, FR_z, BL_x, BL_y, BL_z, BR_x, BR_y, BR_z
    );
     12a:	vcvt.f64.f32	d11, s15
     12e:	vldr	s8, [r4, #12]
     132:	.short	0xeeb7
     134:	add	r2, sp, #808	; 0x328
     136:	.short	0xed94
     138:	subs	r2, #4
     13a:	.short	0xeeb7
     13c:	ldrh	r5, [r0, r3]
     13e:	.short	0xed94
     140:	cmp	r2, #5
     142:	.short	0xeeb7
     144:	ldr	r2, [pc, #784]	; (458 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x88>)
     146:	.short	0xed94
     148:	subs	r6, r0, r0
     14a:	.short	0xeeb7
     14c:	subs	r2, #195	; 0xc3
     14e:	vldr	s0, [r4, #28]
     152:	vcvt.f64.f32	d2, s4
     156:	.short	0xed94
     158:	ldrh	r0, [r1, #16]
     15a:	.short	0xeeb7
     15c:	subs	r1, r0, r3
     15e:	vldr	s18, [r4, #36]	; 0x24
     162:	.short	0xeeb7
     164:	lsrs	r0, r0, #11
     166:	.short	0xed94
     168:	ldrb	r2, [r1, #8]
     16a:	.short	0xeeb7
     16c:	ldrh	r0, [r1, #22]
     16e:	.short	0xed94
     170:	ldr	r3, [r1, #32]
     172:	vcvt.f64.f32	d9, s18
     176:	.short	0xeeb7
     178:	ldrb	r7, [r0, #11]
     17a:	ldr	r1, [pc, #112]	; (1ec <loop+0x134>)
     17c:	vcvt.f64.f32	d6, s12
     180:	.word	0xec53481b
     184:	cmp	r3, #27
     186:	.short	0xed8d
     188:	lsrs	r4, r1, #12
     18a:	.short	0xed8d
     18c:	subs	r2, r1, r4
     18e:	.short	0xed8d
     190:	cmp	r3, #8
     192:	.short	0xed8d
     194:	subs	r3, #6
     196:	.short	0xed8d
     198:	ldr	r3, [pc, #16]	; (1ac <loop+0xf4>)
     19a:	.short	0xed8d
     19c:	ldrh	r2, [r0, r4]
     19e:	.short	0xed8d
     1a0:	add	r3, sp, #0
     1a2:	.short	0xed8d
     1a4:	ldr	r3, [sp, #64]	; 0x40
     1a6:	.short	0xed8d
     1a8:	ldrh	r6, [r1, #24]
     1aa:	.short	0xed8d
     1ac:	ldr	r4, [r2, #48]	; 0x30
     1ae:	.short	0xed8d
     1b0:	ldrb	r2, [r2, #12]
     1b2:	.short	0xf008
     1b4:	ldc2	8, cr4, [r1, #56]!	; 0x38
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     1b8:	bl	8d80 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1bc:	.word	0x480c4601
     1c0:	bl	3408 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     1c4:	.word	0xf004480b
     1c8:	smmlsr	r7, r3, r0, r3
    Serial.println(sprintf_buffer);

     1cc:	.word	0xecbd46bd
     1d0:	ldrh	r0, [r1, #24]
     1d2:	.short	0xbdb0
     1d4:	movs	r2, #228	; 0xe4
     1d6:	.short	0x2000
     1d8:	subs	r4, r5, r6
     1da:	.short	0x2000
     1dc:	adds	r0, r6, #2
     1de:	.short	0x2000
     1e0:	ldmia	r4!, {r0, r2, r3, r6, r7}
     1e2:	.short	0x3dcc
     1e4:	adds	r0, r4, #3
     1e6:	.short	0x2000
     1e8:	subs	r0, r0, #3
     1ea:	.short	0x2000
     1ec:	movs	r0, r0
     1ee:	.short	0x2000
     1f0:	subs	r0, r6, r6
     1f2:	movs	r0, #0
     1f4:	.word	0x200011d4

000001f8 <_GLOBAL__sub_I_robot>:
     1f8:	push	{r3, r4, r5, r6, r7, lr}

using namespace project_namespace;

const int led_pin = 13;

Robot robot;
     1fa:	.short	0x4819
#define CALIBRATE_STOP 5

#define MAX_PACKET_SIZE 128 //Packets can be up to 32k but we don't have that much RAM.
#define MAX_METADATA_SIZE 9 //This is in words. There can be many but we mostly only care about the first 9 (Qs, range, etc)

class BNO080
     1fc:	movs	r5, #12
     1fe:	bl	e58 <project_namespace::Robot::Robot()>
Command command;
     202:	.short	0x4818
     204:	bl	18a4 <project_namespace::Command::Command()>
     208:	.word	0x220e4b17
BNO080 imu_hardware;
IMU imu(imu_hardware);
     20c:	ldr	r4, [pc, #92]	; (26c <_GLOBAL__sub_I_robot+0x74>)
     20e:	.short	0x2109
     210:	movs	r0, #4
     212:	.short	0xf8a3
     214:	movs	r1, #32
     216:	.short	0x270a
     218:	movs	r2, #0
     21a:	.short	0xf8a3
     21c:	str	r2, [r4, r4]
     21e:	movs	r5, #8
     220:	strh.w	r1, [r3, #296]	; 0x128
     224:	strh.w	r0, [r3, #298]	; 0x12a
     228:	mov	r1, r3
     22a:	.short	0x4620
     22c:	strh.w	r2, [r3, #136]	; 0x88
     230:	.word	0x2084f8c3
     234:	strb.w	r2, [r3, #138]	; 0x8a
     238:	strb.w	r2, [r3, #188]	; 0xbc
     23c:	strh.w	r7, [r3, #300]	; 0x12c
     240:	strh.w	r5, [r3, #292]	; 0x124
     244:	strh.w	r5, [r3, #294]	; 0x126
     248:	bl	d90 <project_namespace::IMU::IMU(BNO080&)>
MasterController master_controller(imu);
     24c:	mov	r1, r4
     24e:	ldr	r0, [pc, #32]	; (270 <_GLOBAL__sub_I_robot+0x78>)
     250:	bl	794 <project_namespace::MasterController::MasterController(project_namespace::IMU&)>
     254:	.word	0x4b084a07
     258:	ldr	r2, [r2, #0]

long last_time = millis();
     25a:	.short	0x601a
     25c:	pop	{r3, r4, r5, r6, r7, pc}
     25e:	.short	0xbf00
     260:	adds	r0, r4, #3
     262:	movs	r0, #0
     264:	.word	0x20001cb0
     268:	subs	r4, r0, #6
     26a:	.short	0x2000
     26c:	subs	r0, r0, #6
     26e:	.short	0x2000
     270:	subs	r0, r0, #3
     272:	movs	r0, #0
     274:	.word	0x200022e4
     278:	subs	r4, r5, r6
     27a:	.short	0x2000

0000027c <project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)>:

using namespace project_namespace;

// CONSTRUCTORS
LegStanceController::LegStanceController(GaitConfig& gait_config_init):
    gait_config(gait_config_init)
     27c:	str	r1, [r0, #0]
{}
     27e:	bx	lr

00000280 <project_namespace::LegStanceController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int)>:

// METHODS
Eigen::Vector3f LegStanceController::calculateNewFootPosition(Robot& robot, Command& command, int leg_index) {
     280:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     284:	.word	0x8b08ed2d
     288:	sub	sp, #48	; 0x30
     28a:	.short	0xeddf
     28c:	ldrh	r7, [r7, #16]
    + new_foot_position: The x, y, z coordinates of the new foot position (wrt body) after a single tick.
    */
    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    Eigen::Vector3f current_foot_location_assuming_no_body_rpy;
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
     28e:	.short	0x4611
LegStanceController::LegStanceController(GaitConfig& gait_config_init):
    gait_config(gait_config_init)
{}

// METHODS
Eigen::Vector3f LegStanceController::calculateNewFootPosition(Robot& robot, Command& command, int leg_index) {
     290:	mov	r4, r0
     292:	.short	0xaf00
     294:	sub	sp, #64	; 0x40
     296:	.short	0x461e
     298:	ldr.w	r8, [r7, #104]	; 0x68
     29c:	add.w	r5, sp, #15
     2a0:	.word	0x8a00edc0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
     2a4:	add.w	r8, r8, r8, lsl #1
      m_storage.data()[1] = y;
     2a8:	.word	0x8a01edc0
     2ac:	bic.w	r5, r5, #15
      m_storage.data()[2] = z;
     2b0:	vstr	s17, [r0, #8]
            0.0
    ).finished();
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0); // Initialise
    foot_delta_p = foot_velocity * Config::dt;
    Eigen::Matrix<float, 3, 3> foot_delta_R; // Initialise
    foot_delta_R = MyMath::eulerToMatrix(0, 0, -command.getGaitYawSpeed()*Config::dt);
     2b4:	.word	0x9a35ed9f
    + new_foot_position: The x, y, z coordinates of the new foot position (wrt body) after a single tick.
    */
    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    Eigen::Vector3f current_foot_location_assuming_no_body_rpy;
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
     2b8:	mov	r0, r5
     2ba:	.short	0xf000
     2bc:	vmin.u16	d4, d13, d17
     2c0:	add.w	r3, r5, r8, lsl #2
    Eigen::Vector3f foot_velocity(0.0, 0.0, 0.0); // Initialise
    foot_velocity = (
        Eigen::Vector3f()
        <<  -command.getBodyVelocity()(0),
     2c4:	.word	0xedd34638
     2c8:	add	r2, sp, #0
     2ca:	.short	0xed93
     2cc:	rev	r1, r0
     2ce:	.short	0xed93
     2d0:	ldrh	r2, [r0, #16]
     2d2:	bl	1908 <project_namespace::Command::getBodyVelocity()>
            -command.getBodyVelocity()(1),
     2d6:	.short	0x4631
     2d8:	add.w	r0, r7, #12
    Eigen::Vector3f current_foot_location_assuming_no_body_rpy;
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
    Eigen::Vector3f foot_velocity(0.0, 0.0, 0.0); // Initialise
    foot_velocity = (
        Eigen::Vector3f()
        <<  -command.getBodyVelocity()(0),
     2dc:	.word	0xaa00ed97
            -command.getBodyVelocity()(1),
     2e0:	bl	1908 <project_namespace::Command::getBodyVelocity()>
            0.0
    ).finished();
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0); // Initialise
    foot_delta_p = foot_velocity * Config::dt;
    Eigen::Matrix<float, 3, 3> foot_delta_R; // Initialise
    foot_delta_R = MyMath::eulerToMatrix(0, 0, -command.getGaitYawSpeed()*Config::dt);
     2e4:	.word	0xedd74630
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
    Eigen::Vector3f foot_velocity(0.0, 0.0, 0.0); // Initialise
    foot_velocity = (
        Eigen::Vector3f()
        <<  -command.getBodyVelocity()(0),
            -command.getBodyVelocity()(1),
     2e8:	ldr	r2, [sp, #16]
            0.0
    ).finished();
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0); // Initialise
    foot_delta_p = foot_velocity * Config::dt;
    Eigen::Matrix<float, 3, 3> foot_delta_R; // Initialise
    foot_delta_R = MyMath::eulerToMatrix(0, 0, -command.getGaitYawSpeed()*Config::dt);
     2ea:	.short	0xf001
     2ec:	smulbb	r1, r5, r7
     2f0:	.word	0xee20000c
     2f4:	subs	r1, r1, r1
     2f6:	.short	0xeef0
     2f8:	lsrs	r0, r5, #9
     2fa:	vmov.f32	s0, s17
     2fe:	.short	0xf000
     300:	vld2.32	{d14[]-d15[]}, [sp :64], r7
     304:	.word	0xedd77a09
     308:	ldrb	r2, [r1, #8]
    Eigen::Vector3f current_foot_location_assuming_no_body_rpy;
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
    Eigen::Vector3f foot_velocity(0.0, 0.0, 0.0); // Initialise
    foot_velocity = (
        Eigen::Vector3f()
        <<  -command.getBodyVelocity()(0),
     30a:	.short	0xeeb1
     30c:	add	r2, sp, #296	; 0x128
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
     30e:	.short	0xee28
     310:	ldrb	r7, [r0, #8]
     312:	.short	0xedd7
     314:	ldrh	r6, [r0, r0]
     316:	vmul.f32	s15, s16, s15
     31a:	.short	0xed97
     31c:	ldr	r7, [r0, #32]
     31e:	.short	0xedd7
     320:	ldr	r3, [r1, #32]
            -command.getBodyVelocity()(1),
     322:	.short	0xeef1
     324:	ldr	r2, [sp, #420]	; 0x1a4
     326:	.short	0xeeab
     328:	ldrb	r5, [r4, #8]
     32a:	vldr	s10, [r7, #32]
     32e:	vfma.f32	s15, s22, s12
     332:	vldr	s11, [r7, #12]
     336:	vmul.f32	s16, s16, s13
     33a:	vldr	s12, [r7, #16]
     33e:	vldr	s13, [r7, #20]
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0); // Initialise
    foot_delta_p = foot_velocity * Config::dt;
    Eigen::Matrix<float, 3, 3> foot_delta_R; // Initialise
    foot_delta_R = MyMath::eulerToMatrix(0, 0, -command.getGaitYawSpeed()*Config::dt);
    new_foot_position = foot_delta_R*current_foot_location_assuming_no_body_rpy + foot_delta_p;
    new_foot_position(2) = -command.getStanceHeight();
     342:	.short	0x4630
     344:	vfma.f32	s16, s22, s10
     348:	.word	0x7aa5eeaa
     34c:	vfma.f32	s15, s21, s12
     350:	vfma.f32	s16, s21, s13
     354:	vfma.f32	s14, s20, s18
     358:	vfma.f32	s15, s19, s18
     35c:	vadd.f32	s16, s16, s17
     360:	vstr	s14, [r4]
     364:	.word	0x7a01edc4
     368:	vstr	s16, [r4, #8]
     36c:	.word	0xfabcf001
     370:	vneg.f32	s0, s0

    return new_foot_position;
     374:	.word	0x37304620
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0); // Initialise
    foot_delta_p = foot_velocity * Config::dt;
    Eigen::Matrix<float, 3, 3> foot_delta_R; // Initialise
    foot_delta_R = MyMath::eulerToMatrix(0, 0, -command.getGaitYawSpeed()*Config::dt);
    new_foot_position = foot_delta_R*current_foot_location_assuming_no_body_rpy + foot_delta_p;
    new_foot_position(2) = -command.getStanceHeight();
     378:	vstr	s0, [r4, #8]

    return new_foot_position;
     37c:	mov	sp, r7
     37e:	.short	0xecbd
     380:	ldrh	r0, [r1, #24]
     382:	.short	0xe8bd
     384:	strh	r0, [r6, #14]
     386:	.short	0xbf00
     388:	movs	r0, r0
     38a:	.short	0x0000
     38c:	bvc.n	3a4 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)+0x14>
     38e:	subs	r4, #35	; 0x23

00000390 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>:
#include <Arduino.h>

using namespace project_namespace;

// CONSTRUCTORS
Leg::Leg(
     390:	push	{r4, r5}
     392:	mov	r3, r0
    l_2(l_2_init),
    l_3(l_3_init),
    joint_servo_directions(joint_servo_directions_init),

    joint_angles(Eigen::Vector3f::Zero()),
    foot_position_wrt_body(Eigen::Vector3f::Zero())
     394:	vstr	s0, [r0]
     398:	vstr	s1, [r0, #4]
     39c:	movs	r4, #0
     39e:	vstr	s2, [r0, #8]
    }
    EIGEN_DEVICE_FUNC
    explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
      : m_data(internal::constructor_without_unaligned_array_assert()) {}
    EIGEN_DEVICE_FUNC 
    DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
     3a2:	add.w	r5, r0, #24
     3a6:	.short	0xedc0
     3a8:	subs	r3, r0, r0
     3aa:	.short	0xed80
     3ac:	cmp	r2, #4
     3ae:	.short	0xedc0
     3b0:	cmp	r2, #5
     3b2:	ldmia	r1, {r0, r1, r2}
     3b4:	stmia.w	r5, {r0, r1, r2}
     3b8:	str	r4, [r3, #36]	; 0x24
{}
     3ba:	mov	r0, r3
     3bc:	.word	0x62dc629c
     3c0:	str	r4, [r3, #48]	; 0x30
     3c2:	.short	0x635c
     3c4:	str	r4, [r3, #56]	; 0x38
     3c6:	.short	0xbc30
     3c8:	bx	lr
     3ca:	nop
     3cc:	movs	r0, r0
	...

000003d0 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>:
void Leg::setFootPositionWrtBody(Eigen::Vector3f foot_position_wrt_body_arg) {
    foot_position_wrt_body = foot_position_wrt_body_arg;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     3d0:	push	{r3, r4, r5, lr}
     3d2:	vpush	{d8-d13}
    float theta_2 = 0.0;
    float theta_3 = 0.0;

    float p_x = foot_pos(0);
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
     3d6:	vldr	s16, [r2, #8]
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     3da:	vmov.f64	d1, #96	; 0x3f000000  0.5
     3de:	vldr	s15, [r2, #4]
void Leg::setFootPositionWrtBody(Eigen::Vector3f foot_position_wrt_body_arg) {
    foot_position_wrt_body = foot_position_wrt_body_arg;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     3e2:	mov	r4, r1
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     3e4:	vcvt.f64.f32	d0, s16
     3e8:	vldr	s14, [r1, #4]
void Leg::setFootPositionWrtBody(Eigen::Vector3f foot_position_wrt_body_arg) {
    foot_position_wrt_body = foot_position_wrt_body_arg;
}

// METHODS
Eigen::Vector3f Leg::calculateIKFoot(Eigen::Vector3f foot_pos) {
     3ec:	mov	r5, r0

    float theta_1 = 0.0;
    float theta_2 = 0.0;
    float theta_3 = 0.0;

    float p_x = foot_pos(0);
     3ee:	vldr	s20, [r2]
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     3f2:	vsub.f32	s14, s15, s14
     3f6:	vmul.f64	d0, d0, d0
     3fa:	.short	0xeeb7
     3fc:	ldrb	r7, [r0, #11]
     3fe:	.short	0xeea7
     400:	lsrs	r7, r0, #12
     402:	.short	0xf004
     404:	ldc2l	14, cr14, [r5], #-724	; 0xfffffd2c
    float rho = asin(abs(p_z)/l_a);
     408:	.word	0xeeb78ac0
    float p_y = foot_pos(1);
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
     40c:	ldr	r3, [sp, #768]	; 0x300
    float rho = asin(abs(p_z)/l_a);
     40e:	.short	0xeef1
     410:			; <UNDEFINED> instruction: 0xfa10bfd8
     414:	vneg.f32	s16, s16
     418:	vdiv.f32	s0, s16, s18
     41c:	vcvt.f64.f32	d0, s0
     420:	bl	4c40 <asin>
    float beta = acos(abs(d_j2_j1_by)/l_a);
     424:	vldr	s15, [r4, #12]
    float p_z = foot_pos(2);
    // float p_yz = sqrt(pow(p_y, 2.0) + pow(p_z, 2.0));

    // Part 1: Finding theta_1
    float l_a = pow((pow((p_y - d_y), 2.0) + pow(p_z, 2.0)), 0.5);
    float rho = asin(abs(p_z)/l_a);
     428:	vcvt.f32.f64	s21, d0
    float beta = acos(abs(d_j2_j1_by)/l_a);
     42c:	vcmpe.f32	s15, #0.0
     430:	vmrs	APSR_nzcv, fpscr
     434:	it	le
     436:	vnegle.f32	s15, s15
     43a:	vdiv.f32	s0, s15, s18
     43e:	vcvt.f64.f32	d0, s0
     442:	bl	4b94 <acos>
     446:	vmov.f64	d8, d0
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
     44a:	.short	0xed94
     44c:	lsrs	r3, r0, #8
     44e:	.short	0xeeb7
     450:	ldrb	r1, [r1, #11]
     452:	.short	0xeeb7
     454:	lsrs	r0, r0, #11
     456:	vnmul.f64	d0, d0, d0
     45a:	vfma.f64	d0, d7, d7
     45e:	vsqrt.f64	d11, d0
     462:	vcmp.f64	d11, d11
     466:	vmrs	APSR_nzcv, fpscr
     46a:	bne.w	570 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x1a0>
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
     46e:	vldr	s15, [r4]
     472:	vcvt.f32.f64	s22, d11
     476:	vldr	s0, [r4, #8]
     47a:	vsub.f32	s15, s20, s15
     47e:	vcvt.f64.f32	d11, s22
     482:	.short	0xee37
     484:	lsrs	r0, r0, #11
     486:	vcvt.f64.f32	d0, s0
     48a:	vmul.f64	d0, d0, d0
     48e:	.short	0xeeab
     490:	lsrs	r3, r1, #12
     492:	vsqrt.f64	d9, d0
     496:	vcmp.f64	d9, d9
     49a:	.short	0xeef1
     49c:			; <UNDEFINED> instruction: 0xfa10d16c
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;
     4a0:	vldr	s14, [r4, #16]
     4a4:	vcvt.f32.f64	s18, d9
     4a8:	vmov.f64	d13, #128	; 0xc0000000 -2.0
     4ac:	vldr	s12, [r4, #20]
     4b0:	vcvt.f64.f32	d7, s14
     4b4:	vcvt.f64.f32	d9, s18
     4b8:	vcvt.f64.f32	d6, s12
     4bc:	vnmul.f64	d0, d7, d7
     4c0:	vmul.f64	d7, d7, d13
     4c4:	vfma.f64	d0, d9, d9
     4c8:	vmul.f64	d7, d7, d6
     4cc:	vfms.f64	d0, d6, d6
     4d0:	vdiv.f64	d0, d0, d7
     4d4:	bl	4b94 <acos>

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     4d8:	vldr	s14, [r4, #20]
     4dc:	vldr	s12, [r4, #16]
     4e0:	vcvt.f64.f32	d7, s14
     4e4:	vcvt.f64.f32	d6, s12
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;
     4e8:	vmov.f64	d12, d0

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     4ec:	vmul.f64	d7, d7, d7
     4f0:	vmul.f64	d0, d9, d13
     4f4:	vfms.f64	d7, d9, d9
     4f8:	vmul.f64	d0, d0, d6
     4fc:	vfms.f64	d7, d6, d6
     500:	vdiv.f64	d0, d7, d0
     504:	bl	4b94 <acos>
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;
     508:	vldr	s15, [r4, #8]
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
    theta_3 = acos((pow(l_eff, 2.0) - pow(l_2, 2.0) - pow(l_3, 2.0))/(-2.0*l_2*l_3)) - EIGEN_PI/2.0;

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
     50c:	vmov.f64	d9, d0
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;
     510:	vldr	s0, [r4]
     514:	vmov.f64	d1, d11
     518:	vsub.f32	s20, s20, s0
     51c:	vsub.f32	s0, s20, s15
     520:	vcvt.f64.f32	d0, s0
     524:	bl	4cec <atan2>

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     528:	vcvt.f32.f64	s18, d9

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     52c:	vcvt.f32.f64	s16, d8
     530:	add.w	r3, r4, #36	; 0x24
    joint_angles(1) = theta_2;
     534:	vcvt.f64.f32	d9, s18

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     538:	vsub.f32	s21, s16, s21
    joint_angles(1) = theta_2;
     53c:	vldr	d7, [pc, #72]	; 588 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x1b8>
     540:	vsub.f64	d0, d0, d9

    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
     544:	vstr	s21, [r4, #36]	; 0x24
    joint_angles(1) = theta_2;
    joint_angles(2) = theta_3;
     548:	vsub.f64	d12, d12, d7
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     54c:	vadd.f64	d9, d0, d7
    joint_angles(2) = theta_3;
     550:	vcvt.f32.f64	s24, d12
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     554:	vcvt.f32.f64	s18, d9
    joint_angles(2) = theta_3;
     558:	vstr	s24, [r4, #44]	; 0x2c
    // Part 3: theta_2
    float gamma = acos((pow(l_3, 2.0) - pow(l_eff, 2.0) - pow(l_2, 2.0))/(-2.0*l_eff*l_2));
    theta_2 = atan2(p_x - d_x - d_j2_j1_bx, l_b) - gamma + EIGEN_PI/2.0;

    joint_angles(0) = theta_1;
    joint_angles(1) = theta_2;
     55c:	vstr	s18, [r4, #40]	; 0x28
    joint_angles(2) = theta_3;

    return joint_angles;
}
     560:	vpop	{d8-d13}
     564:	ldmia.w	r3, {r0, r1, r2}
     568:	stmia.w	r5, {r0, r1, r2}
     56c:	mov	r0, r5
     56e:	pop	{r3, r4, r5, pc}
    float rho = asin(abs(p_z)/l_a);
    float beta = acos(abs(d_j2_j1_by)/l_a);
    theta_1 = beta - rho;
    
    // Part 2: theta_3
    float l_b = sqrt(pow(l_a, 2.0) - pow(d_j2_j1_by, 2.0));
     570:	bl	4f70 <sqrt>
     574:	vmov.f64	d11, d0
     578:	b.n	46e <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0x9e>
    float l_eff = sqrt(pow(l_b, 2.0) + pow((p_x - d_x - d_j2_j1_bx), 2.0));
     57a:	bl	4f70 <sqrt>
     57e:	vmov.f64	d9, d0
     582:	b.n	4a0 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)+0xd0>
     584:	nop.w
     588:	.word	0x54442d18
     58c:	.word	0x3ff921fb

00000590 <project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>:
    joint_angles = joint_angles_cmd; // Update attribute
    // TODO: Implement servo actuation here!!

}

void Leg::moveFoot(Eigen::Vector3f foot_pos) {
     590:	push	{r4, r5, lr}
     592:	sub	sp, #36	; 0x24
     594:	mov	r5, r0
     596:	mov	r4, r1
     598:	add	r3, sp, #20
     59a:	ldmia	r1, {r0, r1, r2}
     59c:	stmia.w	r3, {r0, r1, r2}

    ARGUMENTS:
    + foot_pos: The destination coordinates [x, y, z] of the foot.
    */

    calculateIKFoot(foot_pos);
     5a0:	mov	r2, r3
     5a2:	mov	r1, r5
     5a4:	mov	r0, sp
     5a6:	bl	3d0 <project_namespace::Leg::calculateIKFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
     5aa:	ldr	r1, [r4, #0]
     5ac:	ldr	r2, [r4, #4]
     5ae:	ldr	r3, [r4, #8]
     5b0:	str	r1, [r5, #48]	; 0x30
     5b2:	str	r2, [r5, #52]	; 0x34
     5b4:	str	r3, [r5, #56]	; 0x38
    setFootPositionWrtBody(foot_pos);
    moveLegToJointAngles(joint_angles);
     5b6:	add	sp, #36	; 0x24
     5b8:	pop	{r4, r5, pc}
     5ba:	nop

000005bc <Eigen::Matrix<float, 3, 3, 0, 3, 3>& Eigen::Matrix<float, 3, 3, 0, 3, 3>::operator=<Eigen::Quaternion<float, 0> >(Eigen::RotationBase<Eigen::Quaternion<float, 0>, 3> const&)>:
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
  const Scalar ty  = Scalar(2)*this->y();
     5bc:	vldr	s14, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
     5c0:	vmov.f32	s10, #112	; 0x3f800000  1.0
  const Scalar tz  = Scalar(2)*this->z();
     5c4:	vldr	s11, [r1, #8]
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
  const Scalar ty  = Scalar(2)*this->y();
     5c8:	vadd.f32	s6, s14, s14
  // if not inlined then the cost of the return by value is huge ~ +35%,
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
     5cc:	vldr	s15, [r1]
  const Scalar ty  = Scalar(2)*this->y();
  const Scalar tz  = Scalar(2)*this->z();
     5d0:	vadd.f32	s9, s11, s11
  const Scalar twx = tx*this->w();
     5d4:	vldr	s12, [r1, #12]
  // if not inlined then the cost of the return by value is huge ~ +35%,
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
     5d8:	vadd.f32	s7, s15, s15
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
     5dc:	vmul.f32	s13, s14, s6
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();
     5e0:	vmul.f32	s11, s11, s9
  const Scalar tz  = Scalar(2)*this->z();
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
     5e4:	vmul.f32	s8, s15, s6
     5e8:	vmov.f32	s5, s13
     5ec:	vmov.f32	s4, s11
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
     5f0:	vmul.f32	s14, s14, s9
     5f4:	vfma.f32	s5, s15, s7
     5f8:	vfma.f32	s4, s15, s7
     5fc:	vmov.f32	s3, s8
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
     600:	vmul.f32	s15, s15, s9
     604:	vfms.f32	s8, s9, s12
     608:	vfma.f32	s3, s9, s12
     60c:	vadd.f32	s13, s13, s11
     610:	vmov.f32	s9, s15
     614:	vmov.f32	s11, s14
     618:	vfma.f32	s15, s6, s12
     61c:	vfms.f32	s9, s6, s12
     620:	vstr	s8, [r0, #12]
     624:	vfma.f32	s11, s7, s12
     628:	vstr	s3, [r0, #4]
     62c:	vfms.f32	s14, s7, s12
     630:	vsub.f32	s13, s10, s13
     634:	vsub.f32	s12, s10, s5
     638:	vsub.f32	s10, s10, s4
     63c:	vstr	s15, [r0, #24]
     640:	vstr	s9, [r0, #8]
     644:	vstr	s12, [r0, #32]
     648:	vstr	s13, [r0]
     64c:	vstr	s10, [r0, #16]
     650:	vstr	s11, [r0, #20]
     654:	vstr	s14, [r0, #28]
Matrix<_Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols>
::operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r)
{
  EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE(Matrix,int(OtherDerived::Dim),int(OtherDerived::Dim))
  return *this = r.toRotationMatrix();
}
     658:	bx	lr
     65a:	nop

0000065c <project_namespace::MyMath::eulerToMatrix(float, float, float)>:
template<class Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator=(const AngleAxisType& aa)
{
  EIGEN_USING_STD_MATH(cos)
  EIGEN_USING_STD_MATH(sin)
  Scalar ha = Scalar(0.5)*aa.angle(); // Scalar(0.5) to suppress precision loss warnings
     65c:	vmov.f32	s15, #96	; 0x3f000000  0.5
#include "MyMath.h"

using namespace project_namespace;


Eigen::Matrix<float, 3, 3> MyMath::eulerToMatrix(float x, float y, float z) {
     660:	push	{r4, r5, r7, lr}
     662:	vpush	{d8-d11}
     666:	vmul.f32	s17, s2, s15
     66a:	add	r7, sp, #0
     66c:	vmul.f32	s16, s1, s15
     670:	sub	sp, #32
     672:	vmul.f32	s21, s0, s15
     676:	mov	r5, r0
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
     678:	vmov.f32	s0, s17
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
     67c:	vldr	s18, [pc, #272]	; 790 <project_namespace::MyMath::eulerToMatrix(float, float, float)+0x134>
     680:	bl	4a70 <cosf>
     684:	vmov.f32	s23, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
     688:	vmov.f32	s0, s17
     68c:	add.w	r4, sp, #15
     690:	bl	4b00 <sinf>
     694:	vmov.f32	s22, s0
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
     698:	vmov.f32	s0, s16
     69c:	bic.w	r4, r4, #15
     6a0:	bl	4a70 <cosf>
     6a4:	vmov.f32	s20, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
     6a8:	vmov.f32	s0, s16
     6ac:	bl	4b00 <sinf>
     6b0:	vmov.f32	s12, s0
     6b4:	vmul.f32	s13, s22, s18
    (
      a.w() * b.w() - a.x() * b.x() - a.y() * b.y() - a.z() * b.z(),
      a.w() * b.x() + a.x() * b.w() + a.y() * b.z() - a.z() * b.y(),
      a.w() * b.y() + a.y() * b.w() + a.z() * b.x() - a.x() * b.z(),
      a.w() * b.z() + a.z() * b.w() + a.x() * b.y() - a.y() * b.x()
    );
     6b8:	vmul.f32	s17, s20, s22
     6bc:	vmul.f32	s15, s12, s18
     6c0:	vmul.f32	s16, s20, s13
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
     6c4:	vmov.f32	s0, s21
     6c8:	vmul.f32	s14, s15, s13
     6cc:	vmov.f32	s19, s16
     6d0:	vfma.f32	s17, s15, s23
     6d4:	vmov.f32	s11, s14
     6d8:	vfma.f32	s19, s12, s23
     6dc:	vfma.f32	s16, s15, s23
     6e0:	vfnms.f32	s11, s20, s23
     6e4:	vfma.f32	s17, s12, s13
     6e8:	vfma.f32	s19, s15, s22
     6ec:	vadd.f32	s16, s16, s14
     6f0:	vmov.f32	s20, s11
     6f4:	vneg.f32	s11, s12
     6f8:	vsub.f32	s17, s17, s14
     6fc:	vfma.f32	s20, s11, s13
     700:	vfma.f32	s16, s11, s22
     704:	vsub.f32	s19, s19, s14
     708:	vfms.f32	s20, s15, s22
     70c:	bl	4a70 <cosf>
     710:	vmov.f32	s22, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
     714:	vmov.f32	s0, s21
     718:	bl	4b00 <sinf>
     71c:	vmul.f32	s15, s0, s18
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
      m_storage.data()[3] = w;
     720:	vnmul.f32	s14, s16, s0
    Eigen::Matrix<float, 3, 3> rot_mat;
    rot_mat =
        Eigen::AngleAxisf(z, Eigen::Vector3f::UnitZ())
        * Eigen::AngleAxisf(y, Eigen::Vector3f::UnitY())
        * Eigen::AngleAxisf(x, Eigen::Vector3f::UnitX())
    ;
     724:	mov	r1, r4
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     726:	vmul.f32	s11, s22, s16
     72a:	mov	r0, r5
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     72c:	vmul.f32	s13, s22, s17
      m_storage.data()[3] = w;
     730:	vfma.f32	s14, s22, s20
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     734:	vfma.f32	s11, s0, s20
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     738:	vfma.f32	s13, s15, s20
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
     73c:	vmul.f32	s12, s22, s19
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     740:	vneg.f32	s10, s15
      m_storage.data()[1] = y;
     744:	vfma.f32	s12, s15, s20
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     748:	vfma.f32	s11, s15, s19
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     74c:	vfma.f32	s13, s15, s16
      m_storage.data()[3] = w;
     750:	vmov.f32	s15, s14
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
     754:	vfma.f32	s12, s0, s17
      m_storage.data()[2] = z;
      m_storage.data()[3] = w;
     758:	vfma.f32	s15, s10, s19
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     75c:	vmov.f32	s14, s13
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     760:	vfma.f32	s11, s10, s17
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     764:	vfms.f32	s14, s0, s19
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
     768:	vfma.f32	s12, s10, s16
      m_storage.data()[2] = z;
      m_storage.data()[3] = w;
     76c:	vfma.f32	s15, s10, s17
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     770:	vstr	s11, [r4]
      m_storage.data()[1] = y;
      m_storage.data()[2] = z;
     774:	vstr	s14, [r4, #8]
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
      m_storage.data()[1] = y;
     778:	vstr	s12, [r4, #4]
      m_storage.data()[2] = z;
      m_storage.data()[3] = w;
     77c:	vstr	s15, [r4, #12]
     780:	bl	5bc <Eigen::Matrix<float, 3, 3, 0, 3, 3>& Eigen::Matrix<float, 3, 3, 0, 3, 3>::operator=<Eigen::Quaternion<float, 0> >(Eigen::RotationBase<Eigen::Quaternion<float, 0>, 3> const&)>
    return rot_mat;
     784:	mov	r0, r5
     786:	mov	sp, r7
     788:	vpop	{d8-d11}
     78c:	pop	{r4, r5, r7, pc}
     78e:	nop
     790:	.word	0x00000000

00000794 <project_namespace::MasterController::MasterController(project_namespace::IMU&)>:
#include "MatrixPrinter.h"

using namespace project_namespace;

// CONSTRUCTORS
MasterController::MasterController(IMU& imu_init):
     794:	push	{r3, r4, r5, lr}
     796:	mov	r5, r1
     798:	mov	r4, r0
    imu(imu_init),
    gait_controller(GaitController(Gait::TROT, FootTrajectory::SEMICIRCULAR, imu)),
    ticks(0)
     79a:	movs	r2, #1
     79c:	movs	r1, #0
     79e:	mov	r3, r5
     7a0:	str.w	r5, [r0], #16
     7a4:	bl	1948 <project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)>
     7a8:	movs	r3, #0
{ }
     7aa:	mov	r0, r4

// CONSTRUCTORS
MasterController::MasterController(IMU& imu_init):
    imu(imu_init),
    gait_controller(GaitController(Gait::TROT, FootTrajectory::SEMICIRCULAR, imu)),
    ticks(0)
     7ac:	str.w	r3, [r4, #176]	; 0xb0
{ }
     7b0:	pop	{r3, r4, r5, pc}
     7b2:	nop

000007b4 <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)>:

// METHODS
void MasterController::stepOnce(Robot& robot, Command& command) {
     7b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     7b8:	vpush	{d8-d11}
     7bc:	sub	sp, #52	; 0x34
     7be:	mov	r9, r0
    ARGUMENTS:
    + robot: The robot to control and command.
    + command: It contains the input commands into the robot.
    */

    if (command.getMode() == Mode::REST) {
     7c0:	mov	r0, r2
    gait_controller(GaitController(Gait::TROT, FootTrajectory::SEMICIRCULAR, imu)),
    ticks(0)
{ }

// METHODS
void MasterController::stepOnce(Robot& robot, Command& command) {
     7c2:	mov	r6, r2
     7c4:	add	r7, sp, #8
     7c6:	sub	sp, #112	; 0x70
     7c8:	mov	r8, r1
     7ca:	add.w	r4, sp, #23
     7ce:	bic.w	r4, r4, #15
    ARGUMENTS:
    + robot: The robot to control and command.
    + command: It contains the input commands into the robot.
    */

    if (command.getMode() == Mode::REST) {
     7d2:	bl	1928 <project_namespace::Command::getMode()>
     7d6:	cbz	r0, 7f0 <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x3c>
        robot.setStanceHeight(command.getStanceHeight()); // Resting foot locations are updated internally
        robot.setBodyRoll(command.getBodyRoll());
        robot.setBodyPitch(command.getBodyPitch());
        robot.setBodyYaw(command.getBodyYaw());

    } else if (command.getMode() == Mode::TROT) {
     7d8:	mov	r0, r6
     7da:	bl	1928 <project_namespace::Command::getMode()>
     7de:	cmp	r0, #1
     7e0:	beq.w	a4c <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x298>
        robot.setBodyPitch(command.getBodyPitch());
        robot.setBodyYaw(command.getBodyYaw());

        ticks += 1;
    }
     7e4:	adds	r7, #44	; 0x2c
     7e6:	mov	sp, r7
     7e8:	vpop	{d8-d11}
     7ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ticks = 0;
        Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise
        // Calculate neutral stance positions for each leg
        new_foot_positions_wrt_body.col(0) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
     7f0:	vmov.f32	s22, #96	; 0x3f000000  0.5
    + robot: The robot to control and command.
    + command: It contains the input commands into the robot.
    */

    if (command.getMode() == Mode::REST) {
        ticks = 0;
     7f4:	str.w	r0, [r9, #176]	; 0xb0
        Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise
        // Calculate neutral stance positions for each leg
        new_foot_positions_wrt_body.col(0) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
     7f8:	mov	r0, r6
     7fa:	vmov.f64	d10, #96	; 0x3f000000  0.5
     7fe:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
                command.getStancePolygonWidth()/2.0,
     802:	mov	r0, r6
        ticks = 0;
        Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise
        // Calculate neutral stance positions for each leg
        new_foot_positions_wrt_body.col(0) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
     804:	vmul.f32	s18, s0, s22
                command.getStancePolygonWidth()/2.0,
     808:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
                -1.0*command.getStanceHeight()
     80c:	mov	r0, r6
        Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise
        // Calculate neutral stance positions for each leg
        new_foot_positions_wrt_body.col(0) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
                command.getStancePolygonWidth()/2.0,
     80e:	vmul.f32	s17, s0, s22
                -1.0*command.getStanceHeight()
     812:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     816:	vneg.f32	s16, s0
        ).finished();
        new_foot_positions_wrt_body.col(1) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
     81a:	mov	r0, r6
     81c:	vstr	s18, [r4, #48]	; 0x30
     820:	vstr	s17, [r4, #52]	; 0x34
     824:	mov	r5, r4
     826:	vstr	s16, [r4, #56]	; 0x38
     82a:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
                -1.0*command.getStancePolygonWidth()/2.0,
     82e:	mov	r0, r6
                command.getStancePolygonWidth()/2.0,
                -1.0*command.getStanceHeight()
        ).finished();
        new_foot_positions_wrt_body.col(1) = (
            Eigen::Vector3f()
            <<  command.getStancePolygonLength()/2.0,
     830:	vmov.f32	s23, s0
                -1.0*command.getStancePolygonWidth()/2.0,
     834:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
     838:	vmov.f32	s19, s0
                -1.0*command.getStanceHeight()
     83c:	mov	r0, r6
     83e:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     842:	vneg.f32	s0, s0
     846:	vmul.f32	s23, s23, s22
        ).finished();
        new_foot_positions_wrt_body.col(2) = (
            Eigen::Vector3f()
            <<  -1.0*command.getStancePolygonLength()/2.0,
     84a:	mov	r0, r6
     84c:	vcvt.f64.f32	d7, s19
     850:	vstr	s0, [r4, #68]	; 0x44
     854:	vstr	s23, [r4, #60]	; 0x3c
     858:	vnmul.f64	d7, d7, d10
     85c:	vcvt.f32.f64	s14, d7
     860:	vstr	s14, [r4, #64]	; 0x40
     864:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
     868:	vmov.f32	s19, s0
                command.getStancePolygonWidth()/2.0,
     86c:	mov	r0, r6
     86e:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
                -1.0*command.getStanceHeight()
     872:	mov	r0, r6
                -1.0*command.getStanceHeight()
        ).finished();
        new_foot_positions_wrt_body.col(2) = (
            Eigen::Vector3f()
            <<  -1.0*command.getStancePolygonLength()/2.0,
                command.getStancePolygonWidth()/2.0,
     874:	vmov.f32	s23, s0
                -1.0*command.getStanceHeight()
     878:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     87c:	vcvt.f64.f32	d7, s19
        ).finished();
        new_foot_positions_wrt_body.col(3) = (
            Eigen::Vector3f()
            <<  -1.0*command.getStancePolygonLength()/2.0,
     880:	mov	r0, r6
     882:	vneg.f32	s0, s0
     886:	vmul.f32	s22, s23, s22
     88a:	vnmul.f64	d7, d7, d10
     88e:	vstr	s0, [r4, #80]	; 0x50
     892:	vstr	s22, [r4, #76]	; 0x4c
     896:	vcvt.f32.f64	s14, d7
     89a:	vstr	s14, [r4, #72]	; 0x48
     89e:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
                -1.0*command.getStancePolygonWidth()/2.0,
     8a2:	mov	r0, r6
                command.getStancePolygonWidth()/2.0,
                -1.0*command.getStanceHeight()
        ).finished();
        new_foot_positions_wrt_body.col(3) = (
            Eigen::Vector3f()
            <<  -1.0*command.getStancePolygonLength()/2.0,
     8a4:	vmov.f32	s22, s0
                -1.0*command.getStancePolygonWidth()/2.0,
     8a8:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
     8ac:	vmov.f32	s19, s0
                -1.0*command.getStanceHeight()
     8b0:	mov	r0, r6
     8b2:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     8b6:	vneg.f32	s0, s0
     8ba:	vcvt.f64.f32	d6, s22
     8be:	add.w	lr, r4, #48	; 0x30
     8c2:	vcvt.f64.f32	d7, s19
     8c6:	vstr	s0, [r4, #92]	; 0x5c
     8ca:	vnmul.f64	d6, d6, d10
     8ce:	vnmul.f64	d7, d7, d10
     8d2:	vcvt.f32.f64	s12, d6
     8d6:	vcvt.f32.f64	s14, d7
     8da:	vstr	s12, [r4, #84]	; 0x54
     8de:	vstr	s14, [r4, #88]	; 0x58
     8e2:	ldmia.w	lr!, {r0, r1, r2, r3}
     8e6:	stmia	r5!, {r0, r1, r2, r3}
     8e8:	ldmia.w	lr!, {r0, r1, r2, r3}
     8ec:	stmia	r5!, {r0, r1, r2, r3}
     8ee:	ldmia.w	lr, {r0, r1, r2, r3}
     8f2:	stmia.w	r5, {r0, r1, r2, r3}
        ).finished();
        // Track foot trajectory without body rpy
        robot.setFootPositionsWrtBodyAssumingNoBodyRPY(new_foot_positions_wrt_body);
     8f6:	mov	r1, r4
     8f8:	mov	r0, r8
     8fa:	bl	1150 <project_namespace::Robot::setFootPositionsWrtBodyAssumingNoBodyRPY(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>
        // Desired body orientation matrix
        Eigen::Matrix<float, 3, 3> body_rpy_matrix;
        body_rpy_matrix =
            MyMath::eulerToMatrix(
     8fe:	mov	r0, r6
     900:	bl	18f0 <project_namespace::Command::getBodyRoll()>
     904:	mov	r0, r6
     906:	vmov.f32	s19, s0
     90a:	bl	18f8 <project_namespace::Command::getBodyPitch()>
     90e:	vmov.f32	s20, s0
     912:	mov	r0, r6
     914:	add.w	r5, r4, #48	; 0x30
     918:	bl	1900 <project_namespace::Command::getBodyYaw()>
     91c:	adds	r0, r7, #4
     91e:	vmov.f32	s2, s0
     922:	vmov.f32	s1, s20
     926:	vmov.f32	s0, s19
     92a:	bl	65c <project_namespace::MyMath::eulerToMatrix(float, float, float)>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     92e:	vldr	s5, [r7, #4]
     932:	mov	r3, r4
     934:	mov	r2, r5
     936:	vldr	s6, [r7, #8]
     93a:	add.w	r1, r4, #84	; 0x54
     93e:	vldr	s7, [r7, #12]
     942:	vldr	s8, [r7, #16]
     946:	vldr	s9, [r7, #20]
     94a:	vldr	s10, [r7, #24]
     94e:	vldr	s11, [r7, #28]
     952:	vldr	s12, [r7, #32]
     956:	vldr	s13, [r7, #36]	; 0x24
     95a:	vmul.f32	s14, s7, s16
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
  {
    typedef typename Kernel::DstEvaluatorType::XprType DstXprType;

    const Index outerSize = kernel.outerSize();
    for(Index outer = 0; outer < outerSize; ++outer)
     95e:	cmp	r2, r1
     960:	vmul.f32	s15, s10, s16
     964:	add.w	r3, r3, #12
     968:	vmul.f32	s16, s13, s16
     96c:	vfma.f32	s14, s6, s17
     970:	vfma.f32	s15, s9, s17
     974:	vfma.f32	s16, s12, s17
     978:	vfma.f32	s14, s5, s18
     97c:	vfma.f32	s15, s8, s18
     980:	vfma.f32	s16, s11, s18
     984:	vstr	s14, [r3, #-12]
     988:	vstr	s15, [r3, #-8]
     98c:	vstr	s16, [r3, #-4]
     990:	beq.n	9a2 <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x1ee>
     992:	vldr	s18, [r2, #12]
     996:	adds	r2, #12
     998:	vldr	s17, [r2, #4]
     99c:	vldr	s16, [r2, #8]
     9a0:	b.n	95a <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x1a6>
     9a2:	ldr	r2, [r4, #0]
     9a4:	mov	lr, r4
     9a6:	ldr	r3, [r4, #4]
     9a8:	ldr.w	ip, [r4, #8]
     9ac:	ldr	r0, [r4, #12]
     9ae:	ldr	r1, [r4, #16]
     9b0:	str	r2, [r4, #48]	; 0x30
     9b2:	str	r3, [r4, #52]	; 0x34
     9b4:	ldr	r2, [r4, #20]
     9b6:	ldr	r3, [r4, #24]
     9b8:	str.w	ip, [r4, #56]	; 0x38
     9bc:	str	r0, [r4, #60]	; 0x3c
     9be:	ldr.w	ip, [r4, #28]
     9c2:	ldr	r0, [r4, #32]
     9c4:	str	r1, [r4, #64]	; 0x40
     9c6:	str	r2, [r4, #68]	; 0x44
     9c8:	ldr	r1, [r4, #36]	; 0x24
     9ca:	ldr	r2, [r4, #40]	; 0x28
     9cc:	str	r3, [r4, #72]	; 0x48
     9ce:	ldr	r3, [r4, #44]	; 0x2c
     9d0:	str.w	ip, [r4, #76]	; 0x4c
     9d4:	str	r0, [r4, #80]	; 0x50
     9d6:	str	r1, [r4, #84]	; 0x54
     9d8:	str	r2, [r4, #88]	; 0x58
     9da:	str	r3, [r4, #92]	; 0x5c
     9dc:	ldmia	r5!, {r0, r1, r2, r3}
     9de:	stmia.w	lr!, {r0, r1, r2, r3}
     9e2:	ldmia	r5!, {r0, r1, r2, r3}
     9e4:	stmia.w	lr!, {r0, r1, r2, r3}
     9e8:	ldmia.w	r5, {r0, r1, r2, r3}
     9ec:	stmia.w	lr, {r0, r1, r2, r3}
                command.getBodyYaw()
            );
        // Apply body rpy
        new_foot_positions_wrt_body = body_rpy_matrix.transpose()*new_foot_positions_wrt_body;
        // Move feet to calculated positions
        robot.moveAllFeet(new_foot_positions_wrt_body); // Foot positions, joint angles in Legs and Robot are internally updated.
     9f0:	mov	r1, r4
     9f2:	mov	r0, r8
     9f4:	bl	11a0 <project_namespace::Robot::moveAllFeet(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>
        // Update robot attributes
        robot.setStancePolygonLength(command.getStancePolygonLength()); // Resting foot locations are updated internally
     9f8:	mov	r0, r6
     9fa:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
     9fe:	mov	r0, r8
     a00:	bl	12a0 <project_namespace::Robot::setStancePolygonLength(float)>
        robot.setStancePolygonWidth(command.getStancePolygonWidth()); // Resting foot locations are updated internally
     a04:	mov	r0, r6
     a06:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
     a0a:	mov	r0, r8
     a0c:	bl	12a8 <project_namespace::Robot::setStancePolygonWidth(float)>
        robot.setStanceHeight(command.getStanceHeight()); // Resting foot locations are updated internally
     a10:	mov	r0, r6
     a12:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     a16:	mov	r0, r8
     a18:	bl	12b0 <project_namespace::Robot::setStanceHeight(float)>
        robot.setBodyRoll(command.getBodyRoll());
     a1c:	mov	r0, r6
     a1e:	bl	18f0 <project_namespace::Command::getBodyRoll()>
     a22:	mov	r0, r8
     a24:	bl	1138 <project_namespace::Robot::setBodyRoll(float)>
        robot.setBodyPitch(command.getBodyPitch());
     a28:	mov	r0, r6
     a2a:	bl	18f8 <project_namespace::Command::getBodyPitch()>
     a2e:	mov	r0, r8
     a30:	bl	1140 <project_namespace::Robot::setBodyPitch(float)>
        robot.setBodyYaw(command.getBodyYaw());
     a34:	mov	r0, r6
     a36:	bl	1900 <project_namespace::Command::getBodyYaw()>
     a3a:	mov	r0, r8
     a3c:	bl	1148 <project_namespace::Robot::setBodyYaw(float)>
        robot.setBodyPitch(command.getBodyPitch());
        robot.setBodyYaw(command.getBodyYaw());

        ticks += 1;
    }
     a40:	adds	r7, #44	; 0x2c
     a42:	mov	sp, r7
     a44:	vpop	{d8-d11}
     a48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        robot.setBodyPitch(command.getBodyPitch());
        robot.setBodyYaw(command.getBodyYaw());

    } else if (command.getMode() == Mode::TROT) {
        Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise
        new_foot_positions_wrt_body = gait_controller.calculateAllNewFootPositions(robot, command, ticks);
     a4c:	add.w	r5, r9, #16
     a50:	ldr.w	r0, [r9, #176]	; 0xb0
     a54:	mov	r3, r6
     a56:	mov	r2, r8
     a58:	mov	r1, r5
     a5a:	str	r0, [sp, #0]
     a5c:	mov	r0, r4
     a5e:	bl	1b80 <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)>
        // Update robot contact pattern
        robot.setContactPattern(gait_controller.calculateContactPattern(ticks));
     a62:	mov	r1, r5
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
     a64:	ldr.w	ip, [r4, #12]
     a68:	mov	r0, r4
     a6a:	ldr.w	lr, [r4, #16]
     a6e:	ldr	r5, [r4, #20]
     a70:	ldr	r3, [r4, #24]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     a72:	vldr	s17, [r4]
     a76:	vldr	s18, [r4, #4]
     a7a:	vldr	s16, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
     a7e:	ldr	r2, [r4, #28]
     a80:	str.w	ip, [r4, #60]	; 0x3c
     a84:	str.w	lr, [r4, #64]	; 0x40
     a88:	ldr.w	ip, [r4, #32]
     a8c:	ldr.w	lr, [r4, #36]	; 0x24
     a90:	str	r5, [r4, #68]	; 0x44
     a92:	str	r3, [r4, #72]	; 0x48
     a94:	ldr	r5, [r4, #40]	; 0x28
     a96:	ldr	r3, [r4, #44]	; 0x2c
     a98:	str.w	ip, [r4, #80]	; 0x50
     a9c:	str.w	lr, [r4, #84]	; 0x54
     aa0:	str	r3, [r4, #92]	; 0x5c
     aa2:	str	r2, [r4, #76]	; 0x4c
     aa4:	str	r5, [r4, #88]	; 0x58
     aa6:	mov	r5, r4
     aa8:	ldr.w	r2, [r9, #176]	; 0xb0
     aac:	vstr	s17, [r4, #48]	; 0x30
     ab0:	vstr	s18, [r4, #52]	; 0x34
     ab4:	vstr	s16, [r4, #56]	; 0x38
     ab8:	bl	1b30 <project_namespace::GaitController::calculateContactPattern(int)>
     abc:	mov	r1, r4
     abe:	mov	r0, r8
     ac0:	bl	1184 <project_namespace::Robot::setContactPattern(Eigen::Matrix<int, 4, 1, 0, 4, 1>)>
     ac4:	add.w	lr, r4, #48	; 0x30
     ac8:	ldmia.w	lr!, {r0, r1, r2, r3}
     acc:	stmia	r5!, {r0, r1, r2, r3}
     ace:	ldmia.w	lr!, {r0, r1, r2, r3}
     ad2:	stmia	r5!, {r0, r1, r2, r3}
     ad4:	ldmia.w	lr, {r0, r1, r2, r3}
     ad8:	stmia.w	r5, {r0, r1, r2, r3}
        // Track foot trajectory without body rpy
        robot.setFootPositionsWrtBodyAssumingNoBodyRPY(new_foot_positions_wrt_body);
     adc:	mov	r1, r4
     ade:	mov	r0, r8
     ae0:	bl	1150 <project_namespace::Robot::setFootPositionsWrtBodyAssumingNoBodyRPY(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>
        // Desired body orientation matrix
        Eigen::Matrix<float, 3, 3> body_rpy_matrix;
        body_rpy_matrix =
            MyMath::eulerToMatrix(
     ae4:	mov	r0, r6
     ae6:	bl	18f0 <project_namespace::Command::getBodyRoll()>
     aea:	mov	r0, r6
     aec:	vmov.f32	s19, s0
     af0:	bl	18f8 <project_namespace::Command::getBodyPitch()>
     af4:	vmov.f32	s20, s0
     af8:	mov	r0, r6
     afa:	bl	1900 <project_namespace::Command::getBodyYaw()>
     afe:	add.w	r5, r4, #48	; 0x30
     b02:	vmov.f32	s2, s0
     b06:	adds	r0, r7, #4
     b08:	vmov.f32	s1, s20
     b0c:	vmov.f32	s0, s19
     b10:	bl	65c <project_namespace::MyMath::eulerToMatrix(float, float, float)>
     b14:	vmov.f32	s15, s16
     b18:	vmov.f32	s11, s18
     b1c:	mov	r2, r5
     b1e:	vmov.f32	s12, s17
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
     b22:	vldr	s2, [r7, #4]
     b26:	mov	r3, r4
     b28:	vldr	s3, [r7, #8]
     b2c:	add.w	r1, r4, #84	; 0x54
     b30:	vldr	s4, [r7, #12]
     b34:	vldr	s5, [r7, #16]
     b38:	vldr	s6, [r7, #20]
     b3c:	vldr	s7, [r7, #24]
     b40:	vldr	s8, [r7, #28]
     b44:	vldr	s9, [r7, #32]
     b48:	vldr	s10, [r7, #36]	; 0x24
     b4c:	vmul.f32	s13, s4, s15
     b50:	cmp	r1, r2
     b52:	vmul.f32	s14, s7, s15
     b56:	add.w	r3, r3, #12
     b5a:	vmul.f32	s15, s10, s15
     b5e:	vfma.f32	s13, s3, s11
     b62:	vfma.f32	s14, s6, s11
     b66:	vfma.f32	s15, s9, s11
     b6a:	vfma.f32	s13, s2, s12
     b6e:	vfma.f32	s14, s5, s12
     b72:	vfma.f32	s15, s8, s12
     b76:	vstr	s13, [r3, #-12]
     b7a:	vstr	s14, [r3, #-8]
     b7e:	vstr	s15, [r3, #-4]
     b82:	beq.n	b94 <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x3e0>
     b84:	vldr	s12, [r2, #12]
     b88:	adds	r2, #12
     b8a:	vldr	s11, [r2, #4]
     b8e:	vldr	s15, [r2, #8]
     b92:	b.n	b4c <project_namespace::MasterController::stepOnce(project_namespace::Robot&, project_namespace::Command&)+0x398>
     b94:	ldr	r2, [r4, #0]
     b96:	mov	lr, r4
     b98:	ldr	r3, [r4, #4]
     b9a:	ldr.w	ip, [r4, #8]
     b9e:	ldr	r0, [r4, #12]
     ba0:	ldr	r1, [r4, #16]
     ba2:	str	r2, [r4, #48]	; 0x30
     ba4:	str	r3, [r4, #52]	; 0x34
     ba6:	ldr	r2, [r4, #20]
     ba8:	ldr	r3, [r4, #24]
     baa:	str.w	ip, [r4, #56]	; 0x38
     bae:	str	r0, [r4, #60]	; 0x3c
     bb0:	ldr.w	ip, [r4, #28]
     bb4:	ldr	r0, [r4, #32]
     bb6:	str	r1, [r4, #64]	; 0x40
     bb8:	str	r2, [r4, #68]	; 0x44
     bba:	ldr	r1, [r4, #36]	; 0x24
     bbc:	ldr	r2, [r4, #40]	; 0x28
     bbe:	str	r3, [r4, #72]	; 0x48
     bc0:	ldr	r3, [r4, #44]	; 0x2c
     bc2:	str.w	ip, [r4, #76]	; 0x4c
     bc6:	str	r0, [r4, #80]	; 0x50
     bc8:	str	r1, [r4, #84]	; 0x54
     bca:	str	r2, [r4, #88]	; 0x58
     bcc:	str	r3, [r4, #92]	; 0x5c
     bce:	ldmia	r5!, {r0, r1, r2, r3}
     bd0:	stmia.w	lr!, {r0, r1, r2, r3}
     bd4:	ldmia	r5!, {r0, r1, r2, r3}
     bd6:	stmia.w	lr!, {r0, r1, r2, r3}
     bda:	ldmia.w	r5, {r0, r1, r2, r3}
     bde:	stmia.w	lr, {r0, r1, r2, r3}
                command.getBodyYaw()
            );
        // Apply body rpy
        new_foot_positions_wrt_body = body_rpy_matrix.transpose()*new_foot_positions_wrt_body;
        // Move feet to calculated positions
        robot.moveAllFeet(new_foot_positions_wrt_body); // Foot positions (true), joint angles in Legs and Robot are internally updated.
     be2:	mov	r1, r4
     be4:	mov	r0, r8
     be6:	bl	11a0 <project_namespace::Robot::moveAllFeet(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>
        // Update robot attributes
        robot.setStancePolygonLength(command.getStancePolygonLength()); // Resting foot locations are updated internally
     bea:	mov	r0, r6
     bec:	bl	18d8 <project_namespace::Command::getStancePolygonLength()>
     bf0:	mov	r0, r8
     bf2:	bl	12a0 <project_namespace::Robot::setStancePolygonLength(float)>
        robot.setStancePolygonWidth(command.getStancePolygonWidth()); // Resting foot locations are updated internally
     bf6:	mov	r0, r6
     bf8:	bl	18e0 <project_namespace::Command::getStancePolygonWidth()>
     bfc:	mov	r0, r8
     bfe:	bl	12a8 <project_namespace::Robot::setStancePolygonWidth(float)>
        robot.setStanceHeight(command.getStanceHeight()); // Resting foot locations are updated internally
     c02:	mov	r0, r6
     c04:	bl	18e8 <project_namespace::Command::getStanceHeight()>
     c08:	mov	r0, r8
     c0a:	bl	12b0 <project_namespace::Robot::setStanceHeight(float)>
        robot.setBodyRoll(command.getBodyRoll());
     c0e:	mov	r0, r6
     c10:	bl	18f0 <project_namespace::Command::getBodyRoll()>
     c14:	mov	r0, r8
     c16:	bl	1138 <project_namespace::Robot::setBodyRoll(float)>
        robot.setBodyPitch(command.getBodyPitch());
     c1a:	mov	r0, r6
     c1c:	bl	18f8 <project_namespace::Command::getBodyPitch()>
     c20:	mov	r0, r8
     c22:	bl	1140 <project_namespace::Robot::setBodyPitch(float)>
        robot.setBodyYaw(command.getBodyYaw());
     c26:	mov	r0, r6
     c28:	bl	1900 <project_namespace::Command::getBodyYaw()>
     c2c:	mov	r0, r8
     c2e:	bl	1148 <project_namespace::Robot::setBodyYaw(float)>

        ticks += 1;
     c32:	ldr.w	r3, [r9, #176]	; 0xb0
    }
     c36:	adds	r7, #44	; 0x2c
        robot.setStanceHeight(command.getStanceHeight()); // Resting foot locations are updated internally
        robot.setBodyRoll(command.getBodyRoll());
        robot.setBodyPitch(command.getBodyPitch());
        robot.setBodyYaw(command.getBodyYaw());

        ticks += 1;
     c38:	adds	r3, #1
     c3a:	str.w	r3, [r9, #176]	; 0xb0
    }
     c3e:	mov	sp, r7
     c40:	vpop	{d8-d11}
     c44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00000c48 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)>:
     c48:	movs	r3, #0
#include "GaitConfig.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitConfig::GaitConfig(
     c4a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    gait_swing_duration_in_ticks(0),
    gait_cycle_duration_in_ticks(0),
    gait_phase_durations_in_ticks(Eigen::Vector4i::Zero()),
    leg_stance_duration_in_ticks(0),
    leg_swing_duration_in_ticks(0),
    swing_height(0.0)
     c4e:	movs	r5, #0
#include "GaitConfig.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitConfig::GaitConfig(
     c50:	add	r7, sp, #0
     c52:	str	r3, [r0, #16]
     c54:	sub	sp, #80	; 0x50
    gait_swing_duration_in_ticks(0),
    gait_cycle_duration_in_ticks(0),
    gait_phase_durations_in_ticks(Eigen::Vector4i::Zero()),
    leg_stance_duration_in_ticks(0),
    leg_swing_duration_in_ticks(0),
    swing_height(0.0)
     c56:	str	r5, [r0, #8]
     c58:	str	r5, [r0, #12]
     c5a:	str	r5, [r0, #120]	; 0x78
     c5c:	str	r3, [r0, #20]
     c5e:	str	r3, [r0, #24]
     c60:	str	r3, [r0, #28]
     c62:	str	r3, [r0, #32]
     c64:	str	r3, [r0, #36]	; 0x24
     c66:	str	r3, [r0, #40]	; 0x28
     c68:	str	r3, [r0, #44]	; 0x2c
     c6a:	str	r3, [r0, #48]	; 0x30
     c6c:	str	r3, [r0, #52]	; 0x34
     c6e:	str	r3, [r0, #56]	; 0x38
     c70:	str	r3, [r0, #60]	; 0x3c
     c72:	str	r3, [r0, #64]	; 0x40
     c74:	str	r3, [r0, #68]	; 0x44
     c76:	str	r3, [r0, #72]	; 0x48
     c78:	str	r3, [r0, #76]	; 0x4c
     c7a:	str	r3, [r0, #80]	; 0x50
     c7c:	str	r3, [r0, #84]	; 0x54
     c7e:	str	r3, [r0, #88]	; 0x58
     c80:	str	r3, [r0, #92]	; 0x5c
     c82:	str	r3, [r0, #96]	; 0x60
     c84:	str	r3, [r0, #100]	; 0x64
     c86:	str	r3, [r0, #104]	; 0x68
     c88:	str	r3, [r0, #108]	; 0x6c
     c8a:	str	r3, [r0, #112]	; 0x70
     c8c:	str	r3, [r0, #116]	; 0x74
     c8e:	stmia.w	r0, {r1, r2}
{
    if (gait == Gait::TROT) {
     c92:	cbz	r1, c9a <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x52>
        ).finished();
        leg_stance_duration_in_ticks = 2*gait_stance_duration_in_ticks + gait_swing_duration_in_ticks;
        leg_swing_duration_in_ticks = gait_swing_duration_in_ticks;
        swing_height = 0.0;
    }
}
     c94:	mov	sp, r7
     c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c9a:	add.w	r4, sp, #15

  EIGEN_DEVICE_FUNC
  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
     c9e:	movs	r3, #1
    leg_stance_duration_in_ticks(0),
    leg_swing_duration_in_ticks(0),
    swing_height(0.0)
{
    if (gait == Gait::TROT) {
        gait_stance_duration = 0.02;
     ca0:	ldr.w	r8, [pc, #132]	; d28 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xe0>
        gait_swing_duration = 0.15;
     ca4:	mov	r5, r0
     ca6:	bic.w	r2, r4, #15
     caa:	ldr.w	ip, [pc, #128]	; d2c <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xe4>
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
     cae:	mov	r4, r3
     cb0:	add.w	lr, r0, #76	; 0x4c
     cb4:	mov	r6, r2
    leg_stance_duration_in_ticks(0),
    leg_swing_duration_in_ticks(0),
    swing_height(0.0)
{
    if (gait == Gait::TROT) {
        gait_stance_duration = 0.02;
     cb6:	str.w	r8, [r0, #8]
     cba:	str	r1, [r2, #48]	; 0x30
     cbc:	str	r1, [r2, #20]
     cbe:	str	r1, [r2, #24]
     cc0:	str	r1, [r2, #60]	; 0x3c

  EIGEN_DEVICE_FUNC
  inline CommaInitializer(XprType& xpr, const Scalar& s)
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  {
    m_xpr.coeffRef(0,0) = s;
     cc2:	str	r3, [r2, #0]
        && "Too many rows passed to comma initializer (operator<<)");
    }
    eigen_assert(m_col<m_xpr.cols()
      && "Too many coefficients passed to comma initializer (operator<<)");
    eigen_assert(m_currentBlockRows==1);
    m_xpr.coeffRef(m_row, m_col++) = s;
     cc4:	str	r3, [r2, #16]
     cc6:	str	r3, [r2, #32]
     cc8:	str	r3, [r2, #4]
     cca:	str	r3, [r2, #36]	; 0x24
     ccc:	str	r3, [r2, #52]	; 0x34
     cce:	str	r3, [r2, #8]
     cd0:	str	r3, [r2, #40]	; 0x28
     cd2:	str	r3, [r2, #56]	; 0x38
     cd4:	str	r3, [r2, #12]
     cd6:	str	r3, [r2, #28]
     cd8:	str	r3, [r2, #44]	; 0x2c
        gait_swing_duration = 0.15;
     cda:	str.w	ip, [r5, #12]!
     cde:	mov	r1, r6
     ce0:	mov	r2, r5
     ce2:	movs	r3, #0
     ce4:	b.n	cea <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xa2>
     ce6:	ldr.w	r4, [r1, #4]!
struct dense_assignment_loop<Kernel, DefaultTraversal, NoUnrolling>
{
  EIGEN_DEVICE_FUNC static void EIGEN_STRONG_INLINE run(Kernel &kernel)
  {
    for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
      for(Index inner = 0; inner < kernel.innerSize(); ++inner) {
     cea:	adds	r3, #1
     cec:	str.w	r4, [r2, #4]!
     cf0:	cmp	r3, #4
     cf2:	bne.n	ce6 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x9e>
     cf4:	adds	r5, #16
template<typename Kernel>
struct dense_assignment_loop<Kernel, DefaultTraversal, NoUnrolling>
{
  EIGEN_DEVICE_FUNC static void EIGEN_STRONG_INLINE run(Kernel &kernel)
  {
    for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
     cf6:	cmp	lr, r5
     cf8:	beq.n	d00 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0xb8>
     cfa:	ldr.w	r4, [r6, #16]!
     cfe:	b.n	cde <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)+0x96>
                1, 0, 1, 1,
                1, 1, 1, 0
        ).finished();
        gait_number_of_phases = 4;
        gait_stance_duration_in_ticks = int(gait_stance_duration/Config::dt);
        gait_swing_duration_in_ticks = int(gait_swing_duration/Config::dt);
     d00:	movs	r2, #15
                1, 0, 1, 1,
                1, 0, 1, 1,
                1, 1, 1, 0
        ).finished();
        gait_number_of_phases = 4;
        gait_stance_duration_in_ticks = int(gait_stance_duration/Config::dt);
     d02:	movs	r1, #2
        gait_swing_duration_in_ticks = int(gait_swing_duration/Config::dt);
        gait_cycle_duration_in_ticks = 2*gait_stance_duration_in_ticks + 2*gait_swing_duration_in_ticks;
     d04:	movs	r6, #34	; 0x22
            <<  gait_stance_duration_in_ticks,
                gait_swing_duration_in_ticks,
                gait_stance_duration_in_ticks,
                gait_swing_duration_in_ticks
        ).finished();
        leg_stance_duration_in_ticks = 2*gait_stance_duration_in_ticks + gait_swing_duration_in_ticks;
     d06:	movs	r5, #19
        leg_swing_duration_in_ticks = gait_swing_duration_in_ticks;
        swing_height = 0.0;
     d08:	movs	r4, #0
            <<  1, 1, 1, 0,
                1, 0, 1, 1,
                1, 0, 1, 1,
                1, 1, 1, 0
        ).finished();
        gait_number_of_phases = 4;
     d0a:	str	r3, [r0, #80]	; 0x50
        gait_stance_duration_in_ticks = int(gait_stance_duration/Config::dt);
     d0c:	str	r1, [r0, #84]	; 0x54
     d0e:	str	r1, [r0, #96]	; 0x60
     d10:	str	r1, [r0, #104]	; 0x68
        gait_swing_duration_in_ticks = int(gait_swing_duration/Config::dt);
     d12:	str	r2, [r0, #88]	; 0x58
     d14:	str	r2, [r0, #100]	; 0x64
     d16:	str	r2, [r0, #108]	; 0x6c
                gait_swing_duration_in_ticks,
                gait_stance_duration_in_ticks,
                gait_swing_duration_in_ticks
        ).finished();
        leg_stance_duration_in_ticks = 2*gait_stance_duration_in_ticks + gait_swing_duration_in_ticks;
        leg_swing_duration_in_ticks = gait_swing_duration_in_ticks;
     d18:	str	r2, [r0, #116]	; 0x74
                1, 1, 1, 0
        ).finished();
        gait_number_of_phases = 4;
        gait_stance_duration_in_ticks = int(gait_stance_duration/Config::dt);
        gait_swing_duration_in_ticks = int(gait_swing_duration/Config::dt);
        gait_cycle_duration_in_ticks = 2*gait_stance_duration_in_ticks + 2*gait_swing_duration_in_ticks;
     d1a:	str	r6, [r0, #92]	; 0x5c
            <<  gait_stance_duration_in_ticks,
                gait_swing_duration_in_ticks,
                gait_stance_duration_in_ticks,
                gait_swing_duration_in_ticks
        ).finished();
        leg_stance_duration_in_ticks = 2*gait_stance_duration_in_ticks + gait_swing_duration_in_ticks;
     d1c:	str	r5, [r0, #112]	; 0x70
        leg_swing_duration_in_ticks = gait_swing_duration_in_ticks;
        swing_height = 0.0;
     d1e:	str	r4, [r0, #120]	; 0x78
    }
}
     d20:	mov	sp, r7
     d22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d26:	nop
     d28:	.word	0x3ca3d70a
     d2c:	.word	0x3e19999a

00000d30 <project_namespace::GaitConfig::getContactSchedule()>:

// GETTERS
Eigen::Matrix<int, 4, 4> GaitConfig::getContactSchedule() {
     d30:	push	{r4, r5, r6}
     d32:	add.w	r5, r1, #16
     d36:	mov	r6, r0
     d38:	mov	r4, r0
     d3a:	ldmia	r5!, {r0, r1, r2, r3}
     d3c:	stmia	r4!, {r0, r1, r2, r3}
     d3e:	ldmia	r5!, {r0, r1, r2, r3}
     d40:	stmia	r4!, {r0, r1, r2, r3}
     d42:	ldmia	r5!, {r0, r1, r2, r3}
     d44:	stmia	r4!, {r0, r1, r2, r3}
     d46:	ldmia.w	r5, {r0, r1, r2, r3}
     d4a:	stmia.w	r4, {r0, r1, r2, r3}
    return contact_schedule;
}
     d4e:	mov	r0, r6
     d50:	pop	{r4, r5, r6}
     d52:	bx	lr

00000d54 <project_namespace::GaitConfig::getGaitNumberOfPhases()>:
int GaitConfig::getGaitNumberOfPhases() {
    return gait_number_of_phases;
}
     d54:	ldr	r0, [r0, #80]	; 0x50
     d56:	bx	lr

00000d58 <project_namespace::GaitConfig::getGaitStanceDurationInTicks()>:
int GaitConfig::getGaitStanceDurationInTicks() {
    return gait_stance_duration_in_ticks;
}
     d58:	ldr	r0, [r0, #84]	; 0x54
     d5a:	bx	lr

00000d5c <project_namespace::GaitConfig::getGaitSwingDurationInTicks()>:
int GaitConfig::getGaitSwingDurationInTicks() {
    return gait_swing_duration_in_ticks;
}
     d5c:	ldr	r0, [r0, #88]	; 0x58
     d5e:	bx	lr

00000d60 <project_namespace::GaitConfig::getGaitCycleDurationInTicks()>:
int GaitConfig::getGaitCycleDurationInTicks() {
    return gait_cycle_duration_in_ticks;
}
     d60:	ldr	r0, [r0, #92]	; 0x5c
     d62:	bx	lr

00000d64 <project_namespace::GaitConfig::getGaitPhaseDurationsInTicks()>:
     d64:	adds	r1, #96	; 0x60
Eigen::Vector4i GaitConfig::getGaitPhaseDurationsInTicks() {
     d66:	push	{r4}
     d68:	mov	r4, r0
     d6a:	ldmia	r1, {r0, r1, r2, r3}
     d6c:	stmia.w	r4, {r0, r1, r2, r3}
    return gait_phase_durations_in_ticks;
}
     d70:	mov	r0, r4
     d72:	ldr.w	r4, [sp], #4
     d76:	bx	lr

00000d78 <project_namespace::GaitConfig::getLegStanceDurationInTicks()>:
int GaitConfig::getLegStanceDurationInTicks() {
    return leg_stance_duration_in_ticks;
}
     d78:	ldr	r0, [r0, #112]	; 0x70
     d7a:	bx	lr

00000d7c <project_namespace::GaitConfig::getLegSwingDurationInTicks()>:
int GaitConfig::getLegSwingDurationInTicks() {
    return leg_swing_duration_in_ticks;
}
     d7c:	ldr	r0, [r0, #116]	; 0x74
     d7e:	bx	lr

00000d80 <project_namespace::GaitConfig::getSwingHeight()>:
float GaitConfig::getSwingHeight() {
    return swing_height;
}
     d80:	vldr	s0, [r0, #120]	; 0x78
     d84:	bx	lr
     d86:	nop

00000d88 <project_namespace::GaitConfig::setSwingHeight(float)>:

// SETTERS
void GaitConfig::setSwingHeight(float swing_height_arg) {
    swing_height = swing_height_arg;
     d88:	vstr	s0, [r0, #120]	; 0x78
     d8c:	bx	lr
     d8e:	nop

00000d90 <project_namespace::IMU::IMU(BNO080&)>:
#include "IMU.h"

using namespace project_namespace;

IMU::IMU(BNO080& imu_hardware_init):
    imu_hardware(imu_hardware_init)
     d90:	str	r1, [r0, #0]
{ }
     d92:	bx	lr

00000d94 <project_namespace::IMU::getGyro()>:
        z = imu_hardware.getAccelZ();
    }
    Eigen::Vector3f accel_vals(x, y, z);
    return accel_vals;
}
Eigen::Vector3f IMU::getGyro() {
     d94:	push	{r3, r4, r5, lr}
     d96:	mov	r4, r0
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     d98:	ldr	r0, [r1, #0]
        z = imu_hardware.getAccelZ();
    }
    Eigen::Vector3f accel_vals(x, y, z);
    return accel_vals;
}
Eigen::Vector3f IMU::getGyro() {
     d9a:	mov	r5, r1
     d9c:	vpush	{d8}
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     da0:	bl	28b0 <BNO080::dataAvailable()>
     da4:	cbnz	r0, dc6 <project_namespace::IMU::getGyro()+0x32>
}
Eigen::Vector3f IMU::getGyro() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
     da6:	vldr	s0, [pc, #60]	; de4 <project_namespace::IMU::getGyro()+0x50>
    return accel_vals;
}
Eigen::Vector3f IMU::getGyro() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
     daa:	vmov.f32	s16, s0
    Eigen::Vector3f accel_vals(x, y, z);
    return accel_vals;
}
Eigen::Vector3f IMU::getGyro() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
     dae:	vmov.f32	s17, s0
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     db2:	vstr	s17, [r4]
        y = imu_hardware.getGyroY();
        z = imu_hardware.getGyroZ();
    }
    Eigen::Vector3f gyro_vals(x, y, z);
    return gyro_vals;
}
     db6:	mov	r0, r4
      m_storage.data()[1] = y;
     db8:	vstr	s16, [r4, #4]
      m_storage.data()[2] = z;
     dbc:	vstr	s0, [r4, #8]
     dc0:	vpop	{d8}
     dc4:	pop	{r3, r4, r5, pc}
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        x = imu_hardware.getGyroX();
     dc6:	ldr	r0, [r5, #0]
     dc8:	bl	22c0 <BNO080::getGyroX()>
        y = imu_hardware.getGyroY();
     dcc:	ldr	r0, [r5, #0]
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        x = imu_hardware.getGyroX();
     dce:	vmov.f32	s17, s0
        y = imu_hardware.getGyroY();
     dd2:	bl	22fc <BNO080::getGyroY()>
        z = imu_hardware.getGyroZ();
     dd6:	ldr	r0, [r5, #0]
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        x = imu_hardware.getGyroX();
        y = imu_hardware.getGyroY();
     dd8:	vmov.f32	s16, s0
        z = imu_hardware.getGyroZ();
     ddc:	bl	2338 <BNO080::getGyroZ()>
     de0:	b.n	db2 <project_namespace::IMU::getGyro()+0x1e>
     de2:	nop
     de4:	.word	0x00000000

00000de8 <project_namespace::IMU::getHeadingQuaternion()>:
    }
    Eigen::Vector3f gyro_vals(x, y, z);
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
     de8:	push	{r3, r4, r5, lr}
     dea:	mov	r4, r0
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     dec:	ldr	r0, [r1, #0]
        z = imu_hardware.getGyroZ();
    }
    Eigen::Vector3f gyro_vals(x, y, z);
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
     dee:	mov	r5, r1
     df0:	vpush	{d8-d9}
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
     df4:	bl	28b0 <BNO080::dataAvailable()>
     df8:	cbnz	r0, e22 <project_namespace::IMU::getHeadingQuaternion()+0x3a>
Eigen::Quaternionf IMU::getHeadingQuaternion() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
     dfa:	vldr	s16, [pc, #88]	; e54 <project_namespace::IMU::getHeadingQuaternion()+0x6c>
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float quat_x = 0.0;
    float quat_y = 0.0;
    float quat_z = 0.0;
     dfe:	vmov.f32	s17, s16
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float quat_x = 0.0;
    float quat_y = 0.0;
     e02:	vmov.f32	s18, s16
    Eigen::Vector3f gyro_vals(x, y, z);
    return gyro_vals;
}
Eigen::Quaternionf IMU::getHeadingQuaternion() {
    // TODO: TEST READING ACQUISITION FROM HARDWARE!!
    float quat_x = 0.0;
     e06:	vmov.f32	s19, s16
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
     e0a:	vstr	s19, [r4]
        quat_accuracy = imu_hardware.getQuatRadianAccuracy();
    }
    // Eigen packages Quaternions in the format [w, x, y, z]
    Eigen::Quaternionf heading_quaternion(quat_w, quat_x, quat_y, quat_z);
    return heading_quaternion;
     e0e:	mov	r0, r4
      m_storage.data()[1] = y;
     e10:	vstr	s18, [r4, #4]
      m_storage.data()[2] = z;
     e14:	vstr	s17, [r4, #8]
      m_storage.data()[3] = w;
     e18:	vstr	s16, [r4, #12]
     e1c:	vpop	{d8-d9}
     e20:	pop	{r3, r4, r5, pc}
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_x = imu_hardware.getQuatI();
     e22:	ldr	r0, [r5, #0]
     e24:	bl	2194 <BNO080::getQuatI()>
        quat_y = imu_hardware.getQuatJ();
     e28:	ldr	r0, [r5, #0]
    float quat_y = 0.0;
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_x = imu_hardware.getQuatI();
     e2a:	vmov.f32	s19, s0
        quat_y = imu_hardware.getQuatJ();
     e2e:	bl	21d0 <BNO080::getQuatJ()>
        quat_z = imu_hardware.getQuatK();
     e32:	ldr	r0, [r5, #0]
    float quat_z = 0.0;
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_x = imu_hardware.getQuatI();
        quat_y = imu_hardware.getQuatJ();
     e34:	vmov.f32	s18, s0
        quat_z = imu_hardware.getQuatK();
     e38:	bl	220c <BNO080::getQuatK()>
        quat_w = imu_hardware.getQuatReal();
     e3c:	ldr	r0, [r5, #0]
    float quat_w = 0.0;
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_x = imu_hardware.getQuatI();
        quat_y = imu_hardware.getQuatJ();
        quat_z = imu_hardware.getQuatK();
     e3e:	vmov.f32	s17, s0
        quat_w = imu_hardware.getQuatReal();
     e42:	bl	2248 <BNO080::getQuatReal()>
        quat_accuracy = imu_hardware.getQuatRadianAccuracy();
     e46:	ldr	r0, [r5, #0]
    float quat_accuracy = 0.0;
    if (imu_hardware.dataAvailable() == true) {
        quat_x = imu_hardware.getQuatI();
        quat_y = imu_hardware.getQuatJ();
        quat_z = imu_hardware.getQuatK();
        quat_w = imu_hardware.getQuatReal();
     e48:	vmov.f32	s16, s0
        quat_accuracy = imu_hardware.getQuatRadianAccuracy();
     e4c:	bl	2284 <BNO080::getQuatRadianAccuracy()>
     e50:	b.n	e0a <project_namespace::IMU::getHeadingQuaternion()+0x22>
     e52:	nop
     e54:	.word	0x00000000

00000e58 <project_namespace::Robot::Robot()>:
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     e58:	movs	r3, #0
     e5a:	movs	r2, #0
     e5c:	ldr	r1, [pc, #588]	; (10ac <project_namespace::Robot::Robot()+0x254>)
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     e5e:	push	{r4, r5, r6, lr}
     e60:	mov	r4, r0
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     e62:	ldr	r6, [pc, #588]	; (10b0 <project_namespace::Robot::Robot()+0x258>)
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     e64:	movs	r5, #1
     e66:	adds	r0, #240	; 0xf0
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     e68:	vpush	{d8-d12}
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     e6c:	vldr	s16, [pc, #580]	; 10b4 <project_namespace::Robot::Robot()+0x25c>
#include "Robot.h"

using namespace project_namespace;

// CONSTRUCTORS
Robot::Robot():
     e70:	sub	sp, #16
    foot_positions_wrt_body_true(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_assuming_no_body_rpy(Eigen::Matrix<float, 3, 4>::Zero()),
    foot_positions_wrt_body_at_rest(Eigen::Matrix<float, 3, 4>::Zero()),

    joint_angles(Eigen::Matrix<float, 3, 4>::Zero()),
    contact_pattern(Eigen::Vector4i::Zero())
     e72:	vldr	s22, [pc, #580]	; 10b8 <project_namespace::Robot::Robot()+0x260>
     e76:	vldr	s24, [pc, #580]	; 10bc <project_namespace::Robot::Robot()+0x264>
     e7a:	vmov.f32	s5, s16
     e7e:	vldr	s21, [pc, #576]	; 10c0 <project_namespace::Robot::Robot()+0x268>
     e82:	vmov.f32	s4, s16
     e86:	vldr	s23, [pc, #572]	; 10c4 <project_namespace::Robot::Robot()+0x26c>
     e8a:	vmov.f32	s3, s22
     e8e:	vldr	s20, [pc, #568]	; 10c8 <project_namespace::Robot::Robot()+0x270>
     e92:	vmov.f32	s2, s24
     e96:	vldr	s18, [pc, #564]	; 10cc <project_namespace::Robot::Robot()+0x274>
     e9a:	vmov.f32	s1, s21
     e9e:	str	r1, [r4, #4]
     ea0:	vmov.f32	s0, s23
     ea4:	add	r1, sp, #4
     ea6:	str	r3, [r4, #12]
     ea8:	str	r3, [r4, #16]
     eaa:	str	r3, [r4, #20]
     eac:	str	r3, [r4, #32]
     eae:	str	r3, [r4, #36]	; 0x24
     eb0:	str	r3, [r4, #40]	; 0x28
     eb2:	str	r3, [r4, #44]	; 0x2c
     eb4:	str	r3, [r4, #48]	; 0x30
     eb6:	str	r3, [r4, #52]	; 0x34
     eb8:	str	r3, [r4, #56]	; 0x38
     eba:	str	r3, [r4, #60]	; 0x3c
     ebc:	str	r3, [r4, #64]	; 0x40
     ebe:	str	r3, [r4, #68]	; 0x44
     ec0:	str	r3, [r4, #72]	; 0x48
     ec2:	str	r3, [r4, #76]	; 0x4c
     ec4:	str	r3, [r4, #80]	; 0x50
     ec6:	str	r3, [r4, #84]	; 0x54
     ec8:	str	r3, [r4, #88]	; 0x58
     eca:	str	r3, [r4, #92]	; 0x5c
     ecc:	str	r3, [r4, #96]	; 0x60
     ece:	str	r3, [r4, #100]	; 0x64
     ed0:	str	r3, [r4, #104]	; 0x68
     ed2:	str	r3, [r4, #108]	; 0x6c
     ed4:	str	r3, [r4, #112]	; 0x70
     ed6:	str	r3, [r4, #116]	; 0x74
     ed8:	str	r3, [r4, #120]	; 0x78
     eda:	str	r3, [r4, #124]	; 0x7c
     edc:	vldr	s19, [pc, #496]	; 10d0 <project_namespace::Robot::Robot()+0x278>
     ee0:	vldr	s17, [pc, #496]	; 10d4 <project_namespace::Robot::Robot()+0x27c>
     ee4:	str	r6, [r4, #0]
     ee6:	str	r6, [r4, #8]
     ee8:	str.w	r3, [r4, #128]	; 0x80
     eec:	str.w	r2, [r4, #224]	; 0xe0
     ef0:	str.w	r2, [r4, #228]	; 0xe4
     ef4:	str.w	r2, [r4, #232]	; 0xe8
     ef8:	str.w	r2, [r4, #236]	; 0xec
     efc:	str.w	r3, [r4, #132]	; 0x84
     f00:	str.w	r3, [r4, #136]	; 0x88
     f04:	str.w	r3, [r4, #140]	; 0x8c
     f08:	str.w	r3, [r4, #144]	; 0x90
     f0c:	str.w	r3, [r4, #148]	; 0x94
     f10:	str.w	r3, [r4, #152]	; 0x98
     f14:	str.w	r3, [r4, #156]	; 0x9c
     f18:	str.w	r3, [r4, #160]	; 0xa0
     f1c:	str.w	r3, [r4, #164]	; 0xa4
     f20:	str.w	r3, [r4, #168]	; 0xa8
     f24:	str.w	r3, [r4, #172]	; 0xac
     f28:	str.w	r3, [r4, #176]	; 0xb0
     f2c:	str.w	r3, [r4, #180]	; 0xb4
     f30:	str.w	r3, [r4, #184]	; 0xb8
     f34:	str.w	r3, [r4, #188]	; 0xbc
     f38:	str.w	r3, [r4, #192]	; 0xc0
     f3c:	str.w	r3, [r4, #196]	; 0xc4
     f40:	str.w	r3, [r4, #200]	; 0xc8
     f44:	str.w	r3, [r4, #204]	; 0xcc
     f48:	str.w	r3, [r4, #208]	; 0xd0
     f4c:	str.w	r3, [r4, #212]	; 0xd4
     f50:	str.w	r3, [r4, #216]	; 0xd8
     f54:	str.w	r3, [r4, #220]	; 0xdc
     f58:	str	r5, [sp, #4]
      m_storage.data()[1] = y;
     f5a:	str	r5, [sp, #8]
      m_storage.data()[2] = z;
     f5c:	str	r5, [sp, #12]
     f5e:	bl	390 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     f62:	vmov.f32	s2, s24
     f66:	add	r1, sp, #4
     f68:	vmov.f32	s0, s23
     f6c:	add.w	r0, r4, #300	; 0x12c
     f70:	vmov.f32	s5, s16
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     f74:	str	r5, [sp, #4]
     f76:	vmov.f32	s4, s16
      m_storage.data()[1] = y;
     f7a:	str	r5, [sp, #8]
     f7c:	vmov.f32	s3, s20
      m_storage.data()[2] = z;
     f80:	str	r5, [sp, #12]
     f82:	vmov.f32	s1, s18
     f86:	bl	390 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     f8a:	vmov.f32	s3, s22
     f8e:	vmov.f32	s1, s21
     f92:	add	r1, sp, #4
     f94:	vmov.f32	s5, s16
     f98:	add.w	r0, r4, #360	; 0x168
     f9c:	vmov.f32	s4, s16
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     fa0:	str	r5, [sp, #4]
     fa2:	vmov.f32	s2, s19
      m_storage.data()[1] = y;
     fa6:	str	r5, [sp, #8]
     fa8:	vmov.f32	s0, s17
      m_storage.data()[2] = z;
     fac:	str	r5, [sp, #12]
     fae:	bl	390 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
     fb2:	add	r1, sp, #4
     fb4:	vmov.f32	s3, s20
     fb8:	add.w	r0, r4, #420	; 0x1a4
     fbc:	vmov.f32	s2, s19
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
     fc0:	str	r5, [sp, #4]
     fc2:	vmov.f32	s1, s18
      m_storage.data()[1] = y;
     fc6:	str	r5, [sp, #8]
     fc8:	vmov.f32	s0, s17
      m_storage.data()[2] = z;
     fcc:	str	r5, [sp, #12]
     fce:	vmov.f32	s5, s16
     fd2:	vmov.f32	s4, s16
     fd6:	bl	390 <project_namespace::Leg::Leg(float, float, float, float, float, float, Eigen::Matrix<int, 3, 1, 0, 3, 1>)>
{
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
     fda:	vldr	s9, [r4]
            stance_polygon_width/2.0,
     fde:	vldr	s14, [r4, #4]
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
     fe2:	vmov.f64	d3, #96	; 0x3f000000  0.5
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
     fe6:	vcvt.f64.f32	d6, s9
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
            -1.0*stance_height
     fea:	vldr	s15, [r4, #8]
    ).finished();
    foot_positions_wrt_body_true.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
     fee:	vcvt.f64.f32	d5, s14
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
}
     ff2:	mov	r0, r4
    contact_pattern(Eigen::Vector4i::Zero())
{
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
     ff4:	vmov.f32	s8, #96	; 0x3f000000  0.5
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
     ff8:	vnmul.f64	d6, d6, d3
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
     ffc:	vnmul.f64	d5, d5, d3
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
            -1.0*stance_height
    1000:	vneg.f32	s15, s15
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
    1004:	vcvt.f32.f64	s12, d6
{
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
    1008:	vmul.f32	s14, s14, s8
    contact_pattern(Eigen::Vector4i::Zero())
{
    // Initialise foot_positions_wrt_body_true to default stance
    foot_positions_wrt_body_true.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
    100c:	vmul.f32	s13, s9, s8
    1010:	vstr	s15, [r4, #40]	; 0x28
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_true.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
    1014:	vcvt.f32.f64	s10, d5
    1018:	vstr	s15, [r4, #52]	; 0x34
    101c:	vstr	s15, [r4, #64]	; 0x40
    1020:	vstr	s15, [r4, #76]	; 0x4c
    1024:	vstr	s15, [r4, #88]	; 0x58
    1028:	vstr	s15, [r4, #100]	; 0x64
    102c:	vstr	s15, [r4, #112]	; 0x70
    1030:	vstr	s12, [r4, #56]	; 0x38
    1034:	vstr	s12, [r4, #68]	; 0x44
    1038:	vstr	s12, [r4, #104]	; 0x68
    103c:	vstr	s12, [r4, #116]	; 0x74
    1040:	vstr	s10, [r4, #48]	; 0x30
    1044:	vstr	s10, [r4, #72]	; 0x48
    1048:	vstr	s10, [r4, #96]	; 0x60
    104c:	vstr	s10, [r4, #120]	; 0x78
    1050:	vstr	s10, [r4, #144]	; 0x90
    1054:	vstr	s15, [r4, #124]	; 0x7c
    1058:	vstr	s15, [r4, #136]	; 0x88
    105c:	vstr	s13, [r4, #32]
    1060:	vstr	s13, [r4, #44]	; 0x2c
    1064:	vstr	s13, [r4, #80]	; 0x50
    1068:	vstr	s13, [r4, #92]	; 0x5c
    106c:	vstr	s13, [r4, #128]	; 0x80
    1070:	vstr	s13, [r4, #140]	; 0x8c
    1074:	vstr	s14, [r4, #36]	; 0x24
    1078:	vstr	s14, [r4, #60]	; 0x3c
    107c:	vstr	s14, [r4, #84]	; 0x54
    1080:	vstr	s14, [r4, #108]	; 0x6c
    1084:	vstr	s14, [r4, #132]	; 0x84
    1088:	vstr	s15, [r4, #148]	; 0x94
    108c:	vstr	s10, [r4, #168]	; 0xa8
    1090:	vstr	s12, [r4, #152]	; 0x98
    1094:	vstr	s12, [r4, #164]	; 0xa4
    1098:	vstr	s14, [r4, #156]	; 0x9c
    109c:	vstr	s15, [r4, #160]	; 0xa0
    10a0:	vstr	s15, [r4, #172]	; 0xac
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
}
    10a4:	add	sp, #16
    10a6:	vpop	{d8-d12}
    10aa:	pop	{r4, r5, r6, pc}
    10ac:	.word	0x3db851ec
    10b0:	.word	0x3e4ccccd
    10b4:	.word	0x3e23d70a
    10b8:	.word	0x3d916873
    10bc:	.word	0x3d1ba5e3
    10c0:	.word	0x3d23d70a
    10c4:	.word	0x3e1eb852
    10c8:	.word	0xbd916873
    10cc:	.word	0xbd23d70a
    10d0:	.word	0xbd1ba5e3
    10d4:	.word	0xbe1eb852

000010d8 <project_namespace::Robot::getFootPositionsWrtBodyTrue()>:
    return body_pitch;
}
float Robot::getBodyYaw() {
    return body_yaw;
}
Eigen::Matrix<float, 3, 4> Robot::getFootPositionsWrtBodyTrue() {
    10d8:	push	{r4, r5, r6}
    10da:	add.w	r5, r1, #32
    10de:	mov	r6, r0
    10e0:	mov	r4, r0
    10e2:	ldmia	r5!, {r0, r1, r2, r3}
    10e4:	stmia	r4!, {r0, r1, r2, r3}
    10e6:	ldmia	r5!, {r0, r1, r2, r3}
    10e8:	stmia	r4!, {r0, r1, r2, r3}
    10ea:	ldmia.w	r5, {r0, r1, r2, r3}
    10ee:	stmia.w	r4, {r0, r1, r2, r3}
    return foot_positions_wrt_body_true;
}
    10f2:	mov	r0, r6
    10f4:	pop	{r4, r5, r6}
    10f6:	bx	lr

000010f8 <project_namespace::Robot::getFootPositionsWrtBodyAssumingNoBodyRPY()>:
Eigen::Matrix<float, 3, 4> Robot::getFootPositionsWrtBodyAssumingNoBodyRPY() {
    10f8:	push	{r4, r5, r6}
    10fa:	add.w	r5, r1, #80	; 0x50
    10fe:	mov	r6, r0
    1100:	mov	r4, r0
    1102:	ldmia	r5!, {r0, r1, r2, r3}
    1104:	stmia	r4!, {r0, r1, r2, r3}
    1106:	ldmia	r5!, {r0, r1, r2, r3}
    1108:	stmia	r4!, {r0, r1, r2, r3}
    110a:	ldmia.w	r5, {r0, r1, r2, r3}
    110e:	stmia.w	r4, {r0, r1, r2, r3}
    return foot_positions_wrt_body_assuming_no_body_rpy;
}
    1112:	mov	r0, r6
    1114:	pop	{r4, r5, r6}
    1116:	bx	lr

00001118 <project_namespace::Robot::getFootPositionsWrtBodyAtRest()>:
Eigen::Matrix<float, 3, 4> Robot::getFootPositionsWrtBodyAtRest() {
    1118:	push	{r4, r5, r6}
    111a:	add.w	r5, r1, #128	; 0x80
    111e:	mov	r6, r0
    1120:	mov	r4, r0
    1122:	ldmia	r5!, {r0, r1, r2, r3}
    1124:	stmia	r4!, {r0, r1, r2, r3}
    1126:	ldmia	r5!, {r0, r1, r2, r3}
    1128:	stmia	r4!, {r0, r1, r2, r3}
    112a:	ldmia.w	r5, {r0, r1, r2, r3}
    112e:	stmia.w	r4, {r0, r1, r2, r3}
    return foot_positions_wrt_body_at_rest;
}
    1132:	mov	r0, r6
    1134:	pop	{r4, r5, r6}
    1136:	bx	lr

00001138 <project_namespace::Robot::setBodyRoll(float)>:
void Robot::setStanceHeight(float stance_height_arg) {
    stance_height = stance_height_arg;
    updateStancePolygon();
}
void Robot::setBodyRoll(float body_roll_arg) {
    body_roll = body_roll_arg;
    1138:	vstr	s0, [r0, #12]
    113c:	bx	lr
    113e:	nop

00001140 <project_namespace::Robot::setBodyPitch(float)>:
}
void Robot::setBodyPitch(float body_pitch_arg) {
    body_pitch = body_pitch_arg;
    1140:	vstr	s0, [r0, #16]
    1144:	bx	lr
    1146:	nop

00001148 <project_namespace::Robot::setBodyYaw(float)>:
}
void Robot::setBodyYaw(float body_yaw_arg) {
    body_yaw = body_yaw_arg;
    1148:	vstr	s0, [r0, #20]
    114c:	bx	lr
    114e:	nop

00001150 <project_namespace::Robot::setFootPositionsWrtBodyAssumingNoBodyRPY(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>:
}
void Robot::setFootPositionsWrtBodyTrue(Eigen::Matrix<float, 3, 4> foot_positions_wrt_body_true_arg) {
    foot_positions_wrt_body_true = foot_positions_wrt_body_true_arg;
}
void Robot::setFootPositionsWrtBodyAssumingNoBodyRPY(Eigen::Matrix<float, 3, 4> foot_positions_wrt_body_assuming_no_body_rpy_arg) {
    1150:	ldr	r3, [r1, #0]
    1152:	str	r3, [r0, #80]	; 0x50
    1154:	ldr	r3, [r1, #4]
    1156:	str	r3, [r0, #84]	; 0x54
    1158:	ldr	r3, [r1, #8]
    115a:	str	r3, [r0, #88]	; 0x58
    115c:	ldr	r3, [r1, #12]
    115e:	str	r3, [r0, #92]	; 0x5c
    1160:	ldr	r3, [r1, #16]
    1162:	str	r3, [r0, #96]	; 0x60
    1164:	ldr	r3, [r1, #20]
    1166:	str	r3, [r0, #100]	; 0x64
    1168:	ldr	r3, [r1, #24]
    116a:	str	r3, [r0, #104]	; 0x68
    116c:	ldr	r3, [r1, #28]
    116e:	str	r3, [r0, #108]	; 0x6c
    1170:	ldr	r3, [r1, #32]
    1172:	str	r3, [r0, #112]	; 0x70
    1174:	ldr	r3, [r1, #36]	; 0x24
    1176:	str	r3, [r0, #116]	; 0x74
    1178:	ldr	r3, [r1, #40]	; 0x28
    117a:	str	r3, [r0, #120]	; 0x78
    117c:	ldr	r3, [r1, #44]	; 0x2c
    117e:	str	r3, [r0, #124]	; 0x7c
    1180:	bx	lr
    1182:	nop

00001184 <project_namespace::Robot::setContactPattern(Eigen::Matrix<int, 4, 1, 0, 4, 1>)>:
    foot_positions_wrt_body_at_rest = foot_positions_wrt_body_at_rest_arg;
}
void Robot::setJointAngles(Eigen::Matrix<float, 3, 4> joint_angles_arg) {
    joint_angles = joint_angles_arg;
}
void Robot::setContactPattern(Eigen::Vector4i contact_pattern_arg) {
    1184:	ldr	r3, [r1, #0]
    1186:	str.w	r3, [r0, #224]	; 0xe0
    118a:	ldr	r3, [r1, #4]
    118c:	str.w	r3, [r0, #228]	; 0xe4
    1190:	ldr	r3, [r1, #8]
    1192:	str.w	r3, [r0, #232]	; 0xe8
    1196:	ldr	r3, [r1, #12]
    1198:	str.w	r3, [r0, #236]	; 0xec
    119c:	bx	lr
    119e:	nop

000011a0 <project_namespace::Robot::moveAllFeet(Eigen::Matrix<float, 3, 4, 0, 3, 4>)>:
    contact_pattern = contact_pattern_arg;
}

// METHODS
void Robot::moveAllFeet(Eigen::Matrix<float, 3, 4> foot_positions_wrt_body_cmd) {
    11a0:	push	{r4, r5, r6, lr}
    11a2:	mov	r4, r1
    11a4:	sub	sp, #16
    11a6:	ldr	r6, [r1, #0]
    11a8:	mov	r5, r0
    11aa:	ldr	r2, [r1, #4]
    ARUGMENTS:
    + foot_positions_wrt_body_cmd: The commanded foot positions.
    of the foot, [FL, FR, BL, BR].
    */

    front_left_leg.moveFoot(foot_positions_wrt_body_cmd.col(0));
    11ac:	adds	r0, #240	; 0xf0
    11ae:	ldr	r3, [r4, #8]
    11b0:	add	r1, sp, #4
    11b2:	str	r6, [sp, #4]
    11b4:	str	r2, [sp, #8]
    11b6:	str	r3, [sp, #12]
    11b8:	bl	590 <project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
    11bc:	ldr	r6, [r4, #12]
    front_right_leg.moveFoot(foot_positions_wrt_body_cmd.col(1));
    11be:	add	r1, sp, #4
    11c0:	ldr	r2, [r4, #16]
    11c2:	add.w	r0, r5, #300	; 0x12c
    11c6:	ldr	r3, [r4, #20]
    11c8:	str	r6, [sp, #4]
    11ca:	str	r2, [sp, #8]
    11cc:	str	r3, [sp, #12]
    11ce:	bl	590 <project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
    11d2:	ldr	r6, [r4, #24]
    back_left_leg.moveFoot(foot_positions_wrt_body_cmd.col(2));
    11d4:	add	r1, sp, #4
    11d6:	ldr	r2, [r4, #28]
    11d8:	add.w	r0, r5, #360	; 0x168
    11dc:	ldr	r3, [r4, #32]
    11de:	str	r6, [sp, #4]
    11e0:	str	r2, [sp, #8]
    11e2:	str	r3, [sp, #12]
    11e4:	bl	590 <project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
    11e8:	ldr	r3, [r4, #44]	; 0x2c
    back_right_leg.moveFoot(foot_positions_wrt_body_cmd.col(3));
    11ea:	add	r1, sp, #4
    11ec:	ldr	r6, [r4, #36]	; 0x24
    11ee:	add.w	r0, r5, #420	; 0x1a4
    11f2:	ldr	r2, [r4, #40]	; 0x28
    11f4:	str	r3, [sp, #12]
    11f6:	str	r6, [sp, #4]
    11f8:	str	r2, [sp, #8]
    11fa:	bl	590 <project_namespace::Leg::moveFoot(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>
    11fe:	ldr	r3, [r4, #0]
    1200:	str	r3, [r5, #32]
    1202:	ldr	r3, [r4, #4]
    1204:	str	r3, [r5, #36]	; 0x24
    1206:	ldr	r3, [r4, #8]
    1208:	str	r3, [r5, #40]	; 0x28
    120a:	ldr	r3, [r4, #12]
    120c:	str	r3, [r5, #44]	; 0x2c
    120e:	ldr	r3, [r4, #16]
    1210:	str	r3, [r5, #48]	; 0x30
    1212:	ldr	r3, [r4, #20]
    1214:	str	r3, [r5, #52]	; 0x34
    1216:	ldr	r3, [r4, #24]
    1218:	str	r3, [r5, #56]	; 0x38
    121a:	ldr	r3, [r4, #28]
    121c:	str	r3, [r5, #60]	; 0x3c
    121e:	ldr	r3, [r4, #32]
    1220:	str	r3, [r5, #64]	; 0x40
    1222:	ldr	r3, [r4, #36]	; 0x24
    1224:	str	r3, [r5, #68]	; 0x44
    1226:	ldr	r3, [r4, #40]	; 0x28
    1228:	str	r3, [r5, #72]	; 0x48
    122a:	ldr	r3, [r4, #44]	; 0x2c
    122c:	str	r3, [r5, #76]	; 0x4c
    foot_positions_wrt_body_true = foot_positions_wrt_body_cmd;
}
    122e:	add	sp, #16
    1230:	pop	{r4, r5, r6, pc}
    1232:	nop

00001234 <project_namespace::Robot::updateStancePolygon()>:
    stance polygon length or width, or stance height.
    Updates foot_positions_wrt_body_at_rest accordingly.
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
    1234:	vldr	s9, [r0]
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
    1238:	vmov.f64	d3, #96	; 0x3f000000  0.5
    Updates foot_positions_wrt_body_at_rest accordingly.
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
    123c:	vldr	s14, [r0, #4]
    stance polygon length or width, or stance height.
    Updates foot_positions_wrt_body_at_rest accordingly.
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
    1240:	vmov.f32	s8, #96	; 0x3f000000  0.5
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
    1244:	vcvt.f64.f32	d5, s9
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
            -1.0*stance_height
    1248:	vldr	s15, [r0, #8]
    ).finished();
    foot_positions_wrt_body_at_rest.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
    124c:	vcvt.f64.f32	d6, s14
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
            -1.0*stance_height
    1250:	vneg.f32	s15, s15
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
    1254:	vnmul.f64	d5, d5, d3
    1258:	vstr	s15, [r0, #136]	; 0x88
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
    125c:	vnmul.f64	d6, d6, d3
    1260:	vstr	s15, [r0, #148]	; 0x94
    1264:	vstr	s15, [r0, #160]	; 0xa0
    1268:	vstr	s15, [r0, #172]	; 0xac
    stance polygon length or width, or stance height.
    Updates foot_positions_wrt_body_at_rest accordingly.
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
    126c:	vmul.f32	s9, s9, s8
            -1.0*stance_polygon_width/2.0,
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(2) = (
        Eigen::Vector3f()
        <<  -1.0*stance_polygon_length/2.0,
    1270:	vcvt.f32.f64	s10, d5
    Updates foot_positions_wrt_body_at_rest accordingly.
    */
    foot_positions_wrt_body_at_rest.col(0) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            stance_polygon_width/2.0,
    1274:	vmul.f32	s14, s14, s8
            -1.0*stance_height
    ).finished();
    foot_positions_wrt_body_at_rest.col(1) = (
        Eigen::Vector3f()
        <<  stance_polygon_length/2.0,
            -1.0*stance_polygon_width/2.0,
    1278:	vcvt.f32.f64	s12, d6
    127c:	vstr	s9, [r0, #128]	; 0x80
    1280:	vstr	s9, [r0, #140]	; 0x8c
    1284:	vstr	s10, [r0, #152]	; 0x98
    1288:	vstr	s10, [r0, #164]	; 0xa4
    128c:	vstr	s14, [r0, #132]	; 0x84
    1290:	vstr	s12, [r0, #144]	; 0x90
    1294:	vstr	s12, [r0, #168]	; 0xa8
    1298:	vstr	s14, [r0, #156]	; 0x9c
    129c:	bx	lr
    129e:	nop

000012a0 <project_namespace::Robot::setStancePolygonLength(float)>:
    return contact_pattern;
}

// SETTERS
void Robot::setStancePolygonLength(float stance_polygon_length_arg) {
    stance_polygon_length = stance_polygon_length_arg;
    12a0:	vstr	s0, [r0]
    updateStancePolygon();
    12a4:	b.w	1234 <project_namespace::Robot::updateStancePolygon()>

000012a8 <project_namespace::Robot::setStancePolygonWidth(float)>:
}
void Robot::setStancePolygonWidth(float stance_polygon_width_arg) {
    stance_polygon_width = stance_polygon_width_arg;
    12a8:	vstr	s0, [r0, #4]
    updateStancePolygon();
    12ac:	b.w	1234 <project_namespace::Robot::updateStancePolygon()>

000012b0 <project_namespace::Robot::setStanceHeight(float)>:
}
void Robot::setStanceHeight(float stance_height_arg) {
    stance_height = stance_height_arg;
    12b0:	vstr	s0, [r0, #8]
    updateStancePolygon();
    12b4:	b.w	1234 <project_namespace::Robot::updateStancePolygon()>

000012b8 <project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)>:

// CONSTRUCTORS

LegSwingController::LegSwingController(GaitConfig& gait_config_init, IMU& imu_init):
    gait_config(gait_config_init),
    imu(imu_init)
    12b8:	stmia.w	r0, {r1, r2}
{ }
    12bc:	bx	lr
    12be:	nop

000012c0 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)>:

// METHODS

Eigen::Vector3f LegSwingController::calculateRaibertTouchdownLocation(Robot& robot, Command& command, int leg_index) {
    12c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12c4:	vpush	{d8-d14}
    12c8:	sub	sp, #40	; 0x28
    12ca:	mov	r5, r0
    12cc:	mov	r8, r3
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    12ce:	movs	r0, #0
    12d0:	add	r7, sp, #0
    12d2:	sub	sp, #64	; 0x40
    12d4:	str	r0, [r5, #0]
      m_storage.data()[1] = y;
    12d6:	str	r0, [r5, #4]
    12d8:	mov	r9, r1
    12da:	add.w	r3, sp, #15
      m_storage.data()[2] = z;
    12de:	str	r0, [r5, #8]
    float alpha = 0.0; // For gait translation.
    float beta = 0.0; // For gait yaw.

    // If gait translation involves both antero-posterior and lateral movement,
    // alpha will be a vector sum of respective alphas in both directions, clipped within 0 and 1.
    if (command.getBodyVelocity()(0) > 0) { // If moving forwards
    12e0:	mov	r1, r8
    12e2:	adds	r0, r7, #4
    imu(imu_init)
{ }

// METHODS

Eigen::Vector3f LegSwingController::calculateRaibertTouchdownLocation(Robot& robot, Command& command, int leg_index) {
    12e4:	mov	sl, r2
    12e6:	bic.w	r4, r3, #15
    12ea:	ldr.w	r6, [r7, #128]	; 0x80
    float alpha = 0.0; // For gait translation.
    float beta = 0.0; // For gait yaw.

    // If gait translation involves both antero-posterior and lateral movement,
    // alpha will be a vector sum of respective alphas in both directions, clipped within 0 and 1.
    if (command.getBodyVelocity()(0) > 0) { // If moving forwards
    12ee:	bl	1908 <project_namespace::Command::getBodyVelocity()>
    12f2:	vldr	s15, [r7, #4]
    12f6:	vcmpe.f32	s15, #0.0
    12fa:	vmrs	APSR_nzcv, fpscr
    12fe:	ble.n	13ee <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x12e>
        alpha = constrain(sqrt(pow(Parameters::lateral_alpha, 2.0) + pow(Parameters::forwards_alpha, 2.0)), 0.0, 1.0);
    1300:	vldr	s19, [pc, #264]	; 140c <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x14c>
    }
    // Calculate touchdown location displacement due to linear movement
    Eigen::Vector3f touchdown_displacement_from_neutral_location(0.0, 0.0, 0.0);
    touchdown_displacement_from_neutral_location =
        alpha
        *gait_config.getLegStanceDurationInTicks()
    1304:	ldr.w	r0, [r9]
    1308:	add.w	r6, r6, r6, lsl #1
    130c:	bl	d78 <project_namespace::GaitConfig::getLegStanceDurationInTicks()>
        *Config::dt
    1310:	vmov	s15, r0
        *command.getBodyVelocity()
    1314:	mov	r1, r8
    1316:	adds	r0, r7, #4
    // Calculate touchdown location displacement due to linear movement
    Eigen::Vector3f touchdown_displacement_from_neutral_location(0.0, 0.0, 0.0);
    touchdown_displacement_from_neutral_location =
        alpha
        *gait_config.getLegStanceDurationInTicks()
        *Config::dt
    1318:	vcvt.f32.s32	s15, s15
        *gait_config.getLegStanceDurationInTicks()
        *Config::dt
        *command.getGaitYawSpeed()
    ;
    Eigen::Matrix<float, 3, 3> projected_total_gait_yaw_rotation_matrix;
    projected_total_gait_yaw_rotation_matrix = MyMath::eulerToMatrix(0, 0, projected_total_gait_yaw_during_stance_phase);
    131c:	vldr	s20, [pc, #240]	; 1410 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x150>
    // Calculate touchdown location displacement due to linear movement
    Eigen::Vector3f touchdown_displacement_from_neutral_location(0.0, 0.0, 0.0);
    touchdown_displacement_from_neutral_location =
        alpha
        *gait_config.getLegStanceDurationInTicks()
        *Config::dt
    1320:	vldr	s17, [pc, #240]	; 1414 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x154>
    1324:	vmul.f32	s19, s15, s19
        *command.getBodyVelocity()
    1328:	bl	1908 <project_namespace::Command::getBodyVelocity()>
    ;
    touchdown_displacement_from_neutral_location(2) = 0; // z-coordinate not important for touchdown location
    // Calculate touchdown location displacement due to gait yaw
    float projected_total_gait_yaw_during_stance_phase =
        beta
        *gait_config.getLegStanceDurationInTicks()
    132c:	ldr.w	r0, [r9]
    1330:	vldr	s22, [r7, #4]
    1334:	vldr	s21, [r7, #8]
    1338:	bl	d78 <project_namespace::GaitConfig::getLegStanceDurationInTicks()>
    133c:	vmov	s16, r0
        *Config::dt
        *command.getGaitYawSpeed()
    1340:	mov	r0, r8
    1342:	bl	1918 <project_namespace::Command::getGaitYawSpeed()>
    ;
    Eigen::Matrix<float, 3, 3> projected_total_gait_yaw_rotation_matrix;
    projected_total_gait_yaw_rotation_matrix = MyMath::eulerToMatrix(0, 0, projected_total_gait_yaw_during_stance_phase);
    1346:	vmov.f32	s1, s20
    134a:	vcvt.f32.s32	s16, s16
    134e:	adds	r0, r7, #4
    // Calculate touchdown location displacement due to linear movement
    Eigen::Vector3f touchdown_displacement_from_neutral_location(0.0, 0.0, 0.0);
    touchdown_displacement_from_neutral_location =
        alpha
        *gait_config.getLegStanceDurationInTicks()
        *Config::dt
    1350:	vmul.f32	s19, s19, s17
        *gait_config.getLegStanceDurationInTicks()
        *Config::dt
        *command.getGaitYawSpeed()
    ;
    Eigen::Matrix<float, 3, 3> projected_total_gait_yaw_rotation_matrix;
    projected_total_gait_yaw_rotation_matrix = MyMath::eulerToMatrix(0, 0, projected_total_gait_yaw_during_stance_phase);
    1354:	vmul.f32	s16, s16, s20
    1358:	vmul.f32	s2, s16, s17
    135c:	vmul.f32	s2, s2, s0
    1360:	vmov.f32	s0, s20
    1364:	bl	65c <project_namespace::MyMath::eulerToMatrix(float, float, float)>
    
    // Linear combination of effects of both linear and yaw movement
    touchdown_location =
        projected_total_gait_yaw_rotation_matrix*robot.getFootPositionsWrtBodyAtRest().col(leg_index)
    1368:	mov	r0, r4
    136a:	mov	r1, sl
    136c:	vldr	s25, [r7, #4]
    1370:	vldr	s24, [r7, #8]
    1374:	vldr	s23, [r7, #12]
    1378:	vldr	s28, [r7, #16]
    137c:	vldr	s27, [r7, #20]
    1380:	vldr	s26, [r7, #24]
    1384:	vldr	s17, [r7, #28]
    1388:	vldr	s16, [r7, #32]
    138c:	vldr	s18, [r7, #36]	; 0x24
    1390:	bl	1118 <project_namespace::Robot::getFootPositionsWrtBodyAtRest()>
    1394:	add.w	r3, r4, r6, lsl #2
        + touchdown_displacement_from_neutral_location
    ;

    return touchdown_location;
}
    1398:	mov	r0, r5
    139a:	adds	r7, #40	; 0x28
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
    139c:	vldr	s1, [r3, #8]
    13a0:	vldr	s12, [r3, #4]
    13a4:	vmul.f32	s14, s17, s1
    13a8:	vldr	s13, [r3]
    13ac:	vmul.f32	s15, s16, s1
    13b0:	vmul.f32	s1, s18, s1
    13b4:	vfma.f32	s14, s28, s12
    13b8:	vfma.f32	s15, s27, s12
    13bc:	vfma.f32	s1, s26, s12
    13c0:	vfma.f32	s14, s25, s13
    13c4:	vfma.f32	s15, s24, s13
    13c8:	vfma.f32	s1, s23, s13
    13cc:	vfma.f32	s14, s19, s22
    13d0:	vfma.f32	s15, s19, s21
    13d4:	vadd.f32	s1, s1, s20
    13d8:	vstr	s1, [r5, #8]
    13dc:	vstr	s14, [r5]
    13e0:	vstr	s15, [r5, #4]
    13e4:	mov	sp, r7
    13e6:	vpop	{d8-d14}
    13ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    // If gait translation involves both antero-posterior and lateral movement,
    // alpha will be a vector sum of respective alphas in both directions, clipped within 0 and 1.
    if (command.getBodyVelocity()(0) > 0) { // If moving forwards
        alpha = constrain(sqrt(pow(Parameters::lateral_alpha, 2.0) + pow(Parameters::forwards_alpha, 2.0)), 0.0, 1.0);
    } else if (command.getBodyVelocity()(0) < 0) {
    13ee:	mov	r1, r8
    13f0:	adds	r0, r7, #4
    13f2:	bl	1908 <project_namespace::Command::getBodyVelocity()>
    13f6:	vldr	s15, [r7, #4]
    13fa:	vcmpe.f32	s15, #0.0
    13fe:	vmrs	APSR_nzcv, fpscr
    1402:	bpl.w	1300 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x40>
        alpha = constrain(sqrt(pow(Parameters::lateral_alpha, 2.0) + pow(Parameters::backwards_alpha, 2.0)), 0.0, 1.0);
    1406:	vmov.f32	s19, #112	; 0x3f800000  1.0
    140a:	b.n	1304 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)+0x44>
    140c:	.word	0x3eb851ec
    1410:	.word	0x00000000
    1414:	.word	0x3c23d70a

00001418 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)>:
    ;

    return touchdown_location;
}

Eigen::Vector3f LegSwingController::calculateRollPitchCapturePoint(Command& command) {
    1418:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    141c:	vpush	{d8-d11}
    1420:	add	r7, sp, #0
    1422:	sub	sp, #48	; 0x30
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    1424:	movs	r3, #0
    */

    Eigen::Vector3f rp_capture_point(0.0, 0.0, 0.0); // Initialise

    Eigen::Vector3f rpy_angles;
    rpy_angles = imu.getHeadingQuaternion().normalized().toRotationMatrix().eulerAngles(0, 1, 2);
    1426:	ldr	r1, [r1, #4]
    ;

    return touchdown_location;
}

Eigen::Vector3f LegSwingController::calculateRollPitchCapturePoint(Command& command) {
    1428:	add.w	r4, sp, #15
    142c:	mov	r5, r0
    142e:	str	r3, [r0, #0]
    1430:	mov	r8, r2
    1432:	bic.w	r4, r4, #15
      m_storage.data()[1] = y;
    1436:	str	r3, [r0, #4]
      m_storage.data()[2] = z;
    1438:	str	r3, [r0, #8]
    */

    Eigen::Vector3f rp_capture_point(0.0, 0.0, 0.0); // Initialise

    Eigen::Vector3f rpy_angles;
    rpy_angles = imu.getHeadingQuaternion().normalized().toRotationMatrix().eulerAngles(0, 1, 2);
    143a:	add.w	r6, r4, #16
    143e:	mov	r0, r6
    1440:	bl	de8 <project_namespace::IMU::getHeadingQuaternion()>
    1444:	vldr	s10, [r4, #20]
    1448:	vldr	s11, [r4, #28]
#else
  scalar_sum_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    144c:	vmul.f32	s14, s10, s10
    1450:	vldr	s13, [r4, #16]
    1454:	vmul.f32	s15, s11, s11
    1458:	vldr	s12, [r4, #24]
    145c:	vfma.f32	s14, s13, s13
    1460:	vfma.f32	s15, s12, s12
    1464:	vadd.f32	s15, s14, s15
{
  typedef typename internal::nested_eval<Derived,2>::type _Nested;
  _Nested n(derived());
  RealScalar z = n.squaredNorm();
  // NOTE: after extensive benchmarking, this conditional does not impact performance, at least on recent x86 CPU
  if(z>RealScalar(0))
    1468:	vcmpe.f32	s15, #0.0
    146c:	vmrs	APSR_nzcv, fpscr
    1470:	bgt.w	15ac <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x194>
    1474:	ldmia.w	r6, {r0, r1, r2, r3}
    1478:	stmia.w	r4, {r0, r1, r2, r3}
    147c:	vldr	s15, [r4]
    1480:	vldr	s13, [r4, #4]
    1484:	vldr	s18, [r4, #8]
    1488:	vldr	s12, [r4, #12]
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
  const Scalar ty  = Scalar(2)*this->y();
    148c:	vadd.f32	s10, s13, s13
  const Scalar tz  = Scalar(2)*this->z();
    1490:	vadd.f32	s11, s18, s18
  // if not inlined then the cost of the return by value is huge ~ +35%,
  // however, not inlining this function is an order of magnitude slower, so
  // it has to be inlined, and so the return by value is not an issue
  Matrix3 res;

  const Scalar tx  = Scalar(2)*this->x();
    1494:	vadd.f32	s9, s15, s15
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
    1498:	vmul.f32	s14, s13, s10
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();
    149c:	vmul.f32	s18, s11, s18
  const Scalar tz  = Scalar(2)*this->z();
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
    14a0:	vmul.f32	s7, s15, s10
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    14a4:	vmov.f32	s1, s14

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
    14a8:	vmov.f32	s21, s18
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
    14ac:	vmul.f32	s13, s13, s11
    14b0:	vfma.f32	s1, s15, s9

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
    14b4:	vfma.f32	s21, s15, s9
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
    14b8:	vmov.f32	s20, s7
  const Scalar twx = tx*this->w();
  const Scalar twy = ty*this->w();
  const Scalar twz = tz*this->w();
  const Scalar txx = tx*this->x();
  const Scalar txy = ty*this->x();
  const Scalar txz = tz*this->x();
    14bc:	vmul.f32	s15, s15, s11
    14c0:	vmov.f32	s0, s13
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
    14c4:	vfms.f32	s20, s11, s12
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
  res.coeffRef(2,1) = tyz+twx;
    14c8:	vfma.f32	s13, s9, s12
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
    14cc:	vfma.f32	s7, s11, s12
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
    14d0:	vmov.f32	s23, s15
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
    14d4:	vfms.f32	s15, s10, s12
  const Scalar txz = tz*this->x();
  const Scalar tyy = ty*this->y();
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
    14d8:	vmov.f32	s8, #112	; 0x3f800000  1.0
    14dc:	vadd.f32	s18, s14, s18
    14e0:	vfms.f32	s0, s9, s12
    14e4:	vsub.f32	s1, s8, s1
    14e8:	vsub.f32	s18, s8, s18
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
    14ec:	vsub.f32	s21, s8, s21
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
  res.coeffRef(2,1) = tyz+twx;
    14f0:	vmov.f32	s19, s13
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
  res.coeffRef(1,0) = txy+twz;
    14f4:	vmov.f32	s22, s7
  const Scalar tyz = tz*this->y();
  const Scalar tzz = tz*this->z();

  res.coeffRef(0,0) = Scalar(1)-(tyy+tzz);
  res.coeffRef(0,1) = txy-twz;
  res.coeffRef(0,2) = txz+twy;
    14f8:	vfma.f32	s23, s10, s12
  res.coeffRef(1,0) = txy+twz;
  res.coeffRef(1,1) = Scalar(1)-(txx+tzz);
  res.coeffRef(1,2) = tyz-twx;
  res.coeffRef(2,0) = txz-twy;
    14fc:	vmov.f32	s17, s15
    1500:	bl	5018 <atan2f>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    1504:	vmul.f32	s20, s20, s20
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    1508:	vmov.f32	s16, s0
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    150c:	vmov.f32	s0, s20
    1510:	vfma.f32	s0, s18, s18
    1514:	vsqrt.f32	s1, s0
    1518:	vcmp.f32	s1, s1
    151c:	vmrs	APSR_nzcv, fpscr
    1520:	bne.n	15da <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1c2>
  } 
  else
  {
    res[0] = atan2(coeff(j,k), coeff(k,k));
    Scalar c2 = Vector2(coeff(i,i), coeff(i,j)).norm();
    if((odd && res[0]<Scalar(0)) || ((!odd) && res[0]>Scalar(0))) {
    1522:	vcmpe.f32	s16, #0.0
    1526:	vmrs	APSR_nzcv, fpscr
    152a:	ble.n	15cc <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1b4>
      if(res[0] > Scalar(0)) {
        res[0] -= Scalar(EIGEN_PI);
    152c:	vldr	s15, [pc, #208]	; 1600 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1e8>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    1530:	vneg.f32	s1, s1
    1534:	vneg.f32	s0, s23
    1538:	vsub.f32	s16, s16, s15
    153c:	bl	5018 <atan2f>
    1540:	vmov.f32	s18, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
    1544:	vmov.f32	s0, s16
    1548:	bl	4b00 <sinf>
    154c:	vmov.f32	s20, s0
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
    1550:	vmov.f32	s0, s16
    1554:	bl	4a70 <cosf>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    1558:	vnmul.f32	s7, s22, s0
    155c:	vnmul.f32	s1, s19, s20
    1560:	vfma.f32	s7, s20, s17
    1564:	vfma.f32	s1, s0, s21
    1568:	vmov.f32	s0, s7
    156c:	bl	5018 <atan2f>
    float roll_error =  command.getBodyRoll() - rpy_angles(0);
    1570:	mov	r0, r8
    1572:	bl	18f0 <project_namespace::Command::getBodyRoll()>
    float pitch_error =  command.getBodyPitch() - rpy_angles(1);
    1576:	mov	r0, r8

    Eigen::Vector3f rp_capture_point(0.0, 0.0, 0.0); // Initialise

    Eigen::Vector3f rpy_angles;
    rpy_angles = imu.getHeadingQuaternion().normalized().toRotationMatrix().eulerAngles(0, 1, 2);
    float roll_error =  command.getBodyRoll() - rpy_angles(0);
    1578:	vadd.f32	s16, s0, s16
    float pitch_error =  command.getBodyPitch() - rpy_angles(1);
    157c:	bl	18f8 <project_namespace::Command::getBodyPitch()>
    1580:	vadd.f32	s0, s0, s18
    1584:	vldr	s15, [pc, #124]	; 1604 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1ec>
    1588:	vldr	s18, [pc, #124]	; 1608 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1f0>
            Parameters::roll_gain*roll_error,
            0.0
    ).finished();

    return rp_capture_point;
}
    158c:	mov	r0, r5
    158e:	vmul.f32	s16, s16, s15
    1592:	vstr	s15, [r5, #8]
    1596:	vmul.f32	s0, s0, s18
    159a:	vstr	s16, [r5, #4]
    159e:	vstr	s0, [r5]
    15a2:	mov	sp, r7
    15a4:	vpop	{d8-d11}
    15a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    15ac:	vsqrt.f32	s0, s15
    15b0:	vcmp.f32	s0, s0
    15b4:	vmrs	APSR_nzcv, fpscr
    15b8:	bne.n	15e4 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1cc>
#else
  scalar_quotient_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    15ba:	vdiv.f32	s15, s13, s0
    15be:	vdiv.f32	s18, s12, s0
    15c2:	vdiv.f32	s13, s10, s0
    15c6:	vdiv.f32	s12, s11, s0
    15ca:	b.n	148c <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x74>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
    15cc:	vneg.f32	s0, s23
    15d0:	bl	5018 <atan2f>
    15d4:	vmov.f32	s18, s0
    15d8:	b.n	1544 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x12c>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    15da:	bl	5020 <sqrtf>
    15de:	vmov.f32	s1, s0
    15e2:	b.n	1522 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x10a>
    15e4:	vmov.f32	s0, s15
    15e8:	bl	5020 <sqrtf>
    15ec:	vldr	s13, [r4, #16]
    15f0:	vldr	s10, [r4, #20]
    15f4:	vldr	s12, [r4, #24]
    15f8:	vldr	s11, [r4, #28]
    15fc:	b.n	15ba <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)+0x1a2>
    15fe:	nop
    1600:	.word	0x40490fdb
    1604:	.word	0x00000000
    1608:	.word	0x80000000

0000160c <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()>:

Eigen::Vector3f LegSwingController::calculateRollPitchRateCapturePoint() {
    160c:	push	{r4, lr}
    160e:	mov	r4, r0
    + rp_rate_capture_point: The offsets from the touchdown location dependent on
    the roll and pitch angle rates of the robot body.
    */
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0); // Initialise
    Eigen::Vector3f gyro_vals(0.0, 0.0, 0.0);
    gyro_vals = imu.getGyro();
    1610:	ldr	r1, [r1, #4]
    ).finished();

    return rp_capture_point;
}

Eigen::Vector3f LegSwingController::calculateRollPitchRateCapturePoint() {
    1612:	vpush	{d8}
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    1616:	vldr	s16, [pc, #64]	; 1658 <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()+0x4c>
    161a:	sub	sp, #16
    161c:	vstr	s16, [r4]
    + rp_rate_capture_point: The offsets from the touchdown location dependent on
    the roll and pitch angle rates of the robot body.
    */
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0); // Initialise
    Eigen::Vector3f gyro_vals(0.0, 0.0, 0.0);
    gyro_vals = imu.getGyro();
    1620:	add	r0, sp, #4
      m_storage.data()[1] = y;
    1622:	vstr	s16, [r4, #4]
      m_storage.data()[2] = z;
    1626:	vstr	s16, [r4, #8]
    162a:	bl	d94 <project_namespace::IMU::getGyro()>
    162e:	vldr	s14, [sp, #8]
    1632:	vldr	s15, [sp, #4]
            -1.0*Parameters::roll_rate_gain*roll_rate,
            0.0
    ).finished();

    return rp_rate_capture_point;
}
    1636:	mov	r0, r4
    1638:	vldr	s13, [pc, #32]	; 165c <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()+0x50>
    163c:	vmul.f32	s14, s14, s16
    1640:	vstr	s16, [r4, #8]
    1644:	vmul.f32	s15, s15, s13
    1648:	vstr	s14, [r4]
    164c:	vstr	s15, [r4, #4]
    1650:	add	sp, #16
    1652:	vpop	{d8}
    1656:	pop	{r4, pc}
    1658:	.word	0x00000000
    165c:	.word	0x80000000

00001660 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)>:
    after a single tick.
    */

    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    assert(swing_proportion_completed >= 0 && swing_proportion_completed <= 1);
    1660:	vcmpe.f32	s0, #0.0
    Robot& robot,
    Command& command,
    int leg_index,
    float swing_proportion_completed,
    FootTrajectory trajectory_shape
) {
    1664:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1668:	vpush	{d8-d13}
    166c:	sub	sp, #28
    after a single tick.
    */

    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    assert(swing_proportion_completed >= 0 && swing_proportion_completed <= 1);
    166e:	vmrs	APSR_nzcv, fpscr
    Robot& robot,
    Command& command,
    int leg_index,
    float swing_proportion_completed,
    FootTrajectory trajectory_shape
) {
    1672:	mov	r4, r0
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    1674:	mov.w	r0, #0
    1678:	add	r7, sp, #8
    167a:	str	r0, [r4, #0]
    167c:	sub	sp, #64	; 0x40
      m_storage.data()[1] = y;
    167e:	str	r0, [r4, #4]
      m_storage.data()[2] = z;
    1680:	str	r0, [r4, #8]
    1682:	ldr.w	r8, [r7, #104]	; 0x68
    1686:	ldr.w	sl, [r7, #108]	; 0x6c
    after a single tick.
    */

    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    assert(swing_proportion_completed >= 0 && swing_proportion_completed <= 1);
    168a:	blt.w	187c <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x21c>
    168e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    1692:	vmov.f32	s16, s0
    1696:	vcmpe.f32	s0, s15
    169a:	vmrs	APSR_nzcv, fpscr
    169e:	bhi.w	187c <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x21c>
    16a2:	add.w	r5, sp, #23
    16a6:	mov	r6, r1
    Eigen::Vector3f current_foot_location_assuming_no_body_rpy(0.0, 0.0, 0.0);
    current_foot_location_assuming_no_body_rpy = robot.getFootPositionsWrtBodyAssumingNoBodyRPY().col(leg_index);
    16a8:	mov	r1, r2
    16aa:	mov	r9, r3
    16ac:	bic.w	r5, r5, #15
    16b0:	mov	fp, r2
    16b2:	mov	r0, r5
    16b4:	bl	10f8 <project_namespace::Robot::getFootPositionsWrtBodyAssumingNoBodyRPY()>
    Eigen::Vector3f raibert_touchdown_location(0.0, 0.0, 0.0);
    raibert_touchdown_location = calculateRaibertTouchdownLocation(robot, command, leg_index);
    16b8:	mov	r2, fp
    16ba:	add.w	r1, r8, r8, lsl #1
    16be:	adds	r0, r7, #4
    16c0:	mov	r3, r9
    16c2:	add.w	r5, r5, r1, lsl #2
    16c6:	mov	r1, r6
    16c8:	vldr	s19, [r5]
    16cc:	vldr	s20, [r5, #4]
    16d0:	vldr	s21, [r5, #8]
    16d4:	str.w	r8, [sp]
    16d8:	bl	12c0 <project_namespace::LegSwingController::calculateRaibertTouchdownLocation(project_namespace::Robot&, project_namespace::Command&, int)>
    Eigen::Vector3f touchdown_location(0.0, 0.0, 0.0);
    touchdown_location = raibert_touchdown_location;

    // Applying rp_capture_point
    Eigen::Vector3f rp_capture_point(0.0, 0.0, 0.0);
    rp_capture_point = calculateRollPitchCapturePoint(command);
    16dc:	adds	r0, r7, #4
    16de:	mov	r2, r9
    16e0:	mov	r1, r6
    16e2:	vldr	s18, [r7, #4]
    16e6:	vldr	s17, [r7, #8]
    16ea:	bl	1418 <project_namespace::LegSwingController::calculateRollPitchCapturePoint(project_namespace::Command&)>
    16ee:	vldr	s15, [r7, #8]
    16f2:	vldr	s13, [r7, #4]
    touchdown_location(0) = touchdown_location(0) + rp_capture_point(0); // Apply x-offset to all legs
    // Apply y-offset conditionally to the legs as follows:
    if ((rp_capture_point(1) > 0) and (leg_index == 0 or leg_index == 2)) {
    16f6:	vcmpe.f32	s15, #0.0
    touchdown_location = raibert_touchdown_location;

    // Applying rp_capture_point
    Eigen::Vector3f rp_capture_point(0.0, 0.0, 0.0);
    rp_capture_point = calculateRollPitchCapturePoint(command);
    touchdown_location(0) = touchdown_location(0) + rp_capture_point(0); // Apply x-offset to all legs
    16fa:	vadd.f32	s18, s18, s13
    // Apply y-offset conditionally to the legs as follows:
    if ((rp_capture_point(1) > 0) and (leg_index == 0 or leg_index == 2)) {
    16fe:	vmrs	APSR_nzcv, fpscr
    1702:	ble.n	17d6 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x176>
    1704:	bics.w	r3, r8, #2
    1708:	bne.n	17d6 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x176>
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    170a:	adds	r0, r7, #4
    170c:	mov	r1, r6
    touchdown_location(0) = touchdown_location(0) + rp_capture_point(0); // Apply x-offset to all legs
    // Apply y-offset conditionally to the legs as follows:
    if ((rp_capture_point(1) > 0) and (leg_index == 0 or leg_index == 2)) {
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    170e:	vadd.f32	s17, s17, s15
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    1712:	bl	160c <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()>
    1716:	vldr	s15, [r7, #8]
    171a:	vldr	s13, [r7, #4]
    touchdown_location(0) = touchdown_location(0) + rp_rate_capture_point(0); // Apply x-offset to all legs
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
    171e:	vcmpe.f32	s15, #0.0
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    touchdown_location(0) = touchdown_location(0) + rp_rate_capture_point(0); // Apply x-offset to all legs
    1722:	vadd.f32	s18, s18, s13
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
    1726:	vmrs	APSR_nzcv, fpscr
    172a:	ble.n	1730 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xd0>
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    } else if ((rp_rate_capture_point[1] < 0) and (leg_index == 1 or leg_index == 3)) {
        // Robot is moving with an undesired velocity in the -ve y-direction (the robot's right)
        // Along the y-direction, move only the legs on the right of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    172c:	vadd.f32	s17, s17, s15
    }

    float time_to_touchdown = Config::dt * gait_config.getLegSwingDurationInTicks() * (1.0 - swing_proportion_completed);
    1730:	ldr	r0, [r6, #0]
    1732:	bl	d7c <project_namespace::GaitConfig::getLegSwingDurationInTicks()>
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    1736:	vmov	s15, r0
    173a:	vldr	s12, [pc, #340]	; 1890 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x230>
        // Robot is moving with an undesired velocity in the -ve y-direction (the robot's right)
        // Along the y-direction, move only the legs on the right of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    }

    float time_to_touchdown = Config::dt * gait_config.getLegSwingDurationInTicks() * (1.0 - swing_proportion_completed);
    173e:	vcvt.f64.f32	d11, s16
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    1742:	vcvt.f32.s32	s14, s15
    foot_delta_p(2) = 0;
    float z_from_ground = 0.0;
    if (trajectory_shape == FootTrajectory::SEMICIRCULAR) {
    1746:	cmp.w	sl, #1
        // Robot is moving with an undesired velocity in the -ve y-direction (the robot's right)
        // Along the y-direction, move only the legs on the right of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    }

    float time_to_touchdown = Config::dt * gait_config.getLegSwingDurationInTicks() * (1.0 - swing_proportion_completed);
    174a:	vmov.f64	d0, #112	; 0x3f800000  1.0
    174e:	vsub.f32	s13, s18, s19
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    1752:	vmul.f32	s14, s14, s12
        // Robot is moving with an undesired velocity in the -ve y-direction (the robot's right)
        // Along the y-direction, move only the legs on the right of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    }

    float time_to_touchdown = Config::dt * gait_config.getLegSwingDurationInTicks() * (1.0 - swing_proportion_completed);
    1756:	vsub.f64	d12, d0, d11
    175a:	vsub.f32	s17, s17, s20
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    175e:	vcvt.f64.f32	d7, s14
    1762:	vmul.f64	d7, d7, d12
    1766:	vcvt.f32.f64	s14, d7
    176a:	vdiv.f32	s15, s14, s12
    176e:	vdiv.f32	s26, s13, s15
    1772:	vdiv.f32	s18, s17, s15
    foot_delta_p(2) = 0;
    float z_from_ground = 0.0;
    if (trajectory_shape == FootTrajectory::SEMICIRCULAR) {
    1776:	beq.n	1858 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1f8>
        z_from_ground = gait_config.getSwingHeight()*sin(swing_proportion_completed*PI);
    } else if (trajectory_shape == FootTrajectory::TRIANGULAR) {
    1778:	cmp.w	sl, #0
    177c:	bne.n	181a <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1ba>
        if (swing_proportion_completed <= 0.5) {
            z_from_ground = gait_config.getSwingHeight()*swing_proportion_completed;
    177e:	ldr	r0, [r6, #0]
    foot_delta_p(2) = 0;
    float z_from_ground = 0.0;
    if (trajectory_shape == FootTrajectory::SEMICIRCULAR) {
        z_from_ground = gait_config.getSwingHeight()*sin(swing_proportion_completed*PI);
    } else if (trajectory_shape == FootTrajectory::TRIANGULAR) {
        if (swing_proportion_completed <= 0.5) {
    1780:	vmov.f32	s15, #96	; 0x3f000000  0.5
    1784:	vcmpe.f32	s16, s15
    1788:	vmrs	APSR_nzcv, fpscr
    178c:	bls.n	1820 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1c0>
            z_from_ground = gait_config.getSwingHeight()*swing_proportion_completed;
        } else {
            z_from_ground = gait_config.getSwingHeight()*(1.0 - swing_proportion_completed);
    178e:	bl	d80 <project_namespace::GaitConfig::getSwingHeight()>
    1792:	vcvt.f64.f32	d0, s0
    1796:	vmul.f64	d0, d0, d12
    179a:	vcvt.f32.f64	s16, d0
    179e:	vldr	s15, [pc, #244]	; 1894 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x234>
    17a2:	vadd.f32	s19, s19, s26
    17a6:	vadd.f32	s20, s20, s18
        }
    }
    new_foot_position = current_foot_location_assuming_no_body_rpy + foot_delta_p;
    new_foot_position(2) = -command.getStanceHeight() + z_from_ground;
    17aa:	mov	r0, r9
    17ac:	vadd.f32	s21, s21, s15
    17b0:	vstr	s19, [r4]
    17b4:	vstr	s20, [r4, #4]
    17b8:	vstr	s21, [r4, #8]
    17bc:	bl	18e8 <project_namespace::Command::getStanceHeight()>
    17c0:	vsub.f32	s0, s16, s0

    return new_foot_position;
    17c4:	mov	r0, r4
    17c6:	adds	r7, #20
        } else {
            z_from_ground = gait_config.getSwingHeight()*(1.0 - swing_proportion_completed);
        }
    }
    new_foot_position = current_foot_location_assuming_no_body_rpy + foot_delta_p;
    new_foot_position(2) = -command.getStanceHeight() + z_from_ground;
    17c8:	vstr	s0, [r4, #8]

    return new_foot_position;
    17cc:	mov	sp, r7
    17ce:	vpop	{d8-d13}
    17d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // Apply y-offset conditionally to the legs as follows:
    if ((rp_capture_point(1) > 0) and (leg_index == 0 or leg_index == 2)) {
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    } else if ((rp_capture_point(1) < 0) and (leg_index == 1 or leg_index == 3)) {
    17d6:	vcmpe.f32	s15, #0.0
    17da:	vmrs	APSR_nzcv, fpscr
    17de:	bmi.n	182a <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1ca>
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    17e0:	adds	r0, r7, #4
    17e2:	mov	r1, r6
    17e4:	bl	160c <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()>
    17e8:	vldr	s15, [r7, #8]
    17ec:	vldr	s13, [r7, #4]
    touchdown_location(0) = touchdown_location(0) + rp_rate_capture_point(0); // Apply x-offset to all legs
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
    17f0:	vcmpe.f32	s15, #0.0
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    touchdown_location(0) = touchdown_location(0) + rp_rate_capture_point(0); // Apply x-offset to all legs
    17f4:	vadd.f32	s18, s18, s13
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
    17f8:	vmrs	APSR_nzcv, fpscr
    17fc:	ble.n	1804 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1a4>
    17fe:	bics.w	r3, r8, #2
    1802:	beq.n	172c <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xcc>
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    } else if ((rp_rate_capture_point[1] < 0) and (leg_index == 1 or leg_index == 3)) {
    1804:	vcmpe.f32	s15, #0.0
    1808:	vmrs	APSR_nzcv, fpscr
    180c:	bpl.n	1730 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xd0>
    180e:	bic.w	r8, r8, #2
    1812:	cmp.w	r8, #1
    1816:	beq.n	172c <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xcc>
    1818:	b.n	1730 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xd0>

    float time_to_touchdown = Config::dt * gait_config.getLegSwingDurationInTicks() * (1.0 - swing_proportion_completed);
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    foot_delta_p(2) = 0;
    float z_from_ground = 0.0;
    181a:	vldr	s16, [pc, #120]	; 1894 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x234>
    181e:	b.n	179e <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x13e>
    if (trajectory_shape == FootTrajectory::SEMICIRCULAR) {
        z_from_ground = gait_config.getSwingHeight()*sin(swing_proportion_completed*PI);
    } else if (trajectory_shape == FootTrajectory::TRIANGULAR) {
        if (swing_proportion_completed <= 0.5) {
            z_from_ground = gait_config.getSwingHeight()*swing_proportion_completed;
    1820:	bl	d80 <project_namespace::GaitConfig::getSwingHeight()>
    1824:	vmul.f32	s16, s16, s0
    1828:	b.n	179e <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x13e>
    // Apply y-offset conditionally to the legs as follows:
    if ((rp_capture_point(1) > 0) and (leg_index == 0 or leg_index == 2)) {
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    } else if ((rp_capture_point(1) < 0) and (leg_index == 1 or leg_index == 3)) {
    182a:	bic.w	r3, r8, #2
    182e:	cmp	r3, #1
    1830:	bne.n	17e0 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x180>
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    1832:	adds	r0, r7, #4
    1834:	mov	r1, r6
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    } else if ((rp_capture_point(1) < 0) and (leg_index == 1 or leg_index == 3)) {
        // Robot is moving with an undesired velocity in the -ve y-direction (the robot's right)
        // Along the y-direction, move only the legs on the right of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_capture_point(1);
    1836:	vadd.f32	s17, s17, s15
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    183a:	bl	160c <project_namespace::LegSwingController::calculateRollPitchRateCapturePoint()>
    183e:	vldr	s15, [r7, #8]
    1842:	vldr	s13, [r7, #4]
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    } else if ((rp_rate_capture_point[1] < 0) and (leg_index == 1 or leg_index == 3)) {
    1846:	vcmpe.f32	s15, #0.0
    }

    // Using rp_rate_capture_point
    Eigen::Vector3f rp_rate_capture_point(0.0, 0.0, 0.0);
    rp_rate_capture_point = calculateRollPitchRateCapturePoint();
    touchdown_location(0) = touchdown_location(0) + rp_rate_capture_point(0); // Apply x-offset to all legs
    184a:	vadd.f32	s18, s18, s13
    // Apply y-offset conditionally to the legs as follows
    if ((rp_rate_capture_point[1] > 0) and (leg_index == 0 or leg_index == 2)) {
        // Robot is moving with an undesired velocity in the +ve y-direction (the robot's left)
        // Along the y-direction, move only the legs on the left of the robot to counteract this
        touchdown_location(1) = touchdown_location(1) + rp_rate_capture_point(1);
    } else if ((rp_rate_capture_point[1] < 0) and (leg_index == 1 or leg_index == 3)) {
    184e:	vmrs	APSR_nzcv, fpscr
    1852:	bpl.w	1730 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0xd0>
    1856:	b.n	180e <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x1ae>
    Eigen::Vector3f foot_delta_p(0.0, 0.0, 0.0);
    foot_delta_p = (touchdown_location - current_foot_location_assuming_no_body_rpy)/(time_to_touchdown / Config::dt);
    foot_delta_p(2) = 0;
    float z_from_ground = 0.0;
    if (trajectory_shape == FootTrajectory::SEMICIRCULAR) {
        z_from_ground = gait_config.getSwingHeight()*sin(swing_proportion_completed*PI);
    1858:	ldr	r0, [r6, #0]
    185a:	bl	d80 <project_namespace::GaitConfig::getSwingHeight()>
    185e:	vmov.f32	s16, s0
    1862:	vldr	d0, [pc, #36]	; 1888 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x228>
    1866:	vcvt.f64.f32	d8, s16
    186a:	vmul.f64	d0, d11, d0
    186e:	bl	49d0 <sin>
    1872:	vmul.f64	d0, d8, d0
    1876:	vcvt.f32.f64	s16, d0
    187a:	b.n	179e <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x13e>
    after a single tick.
    */

    Eigen::Vector3f new_foot_position(0.0, 0.0, 0.0); // Initialise

    assert(swing_proportion_completed >= 0 && swing_proportion_completed <= 1);
    187c:	ldr	r3, [pc, #24]	; (1898 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x238>)
    187e:	movs	r1, #166	; 0xa6
    1880:	ldr	r2, [pc, #24]	; (189c <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x23c>)
    1882:	ldr	r0, [pc, #28]	; (18a0 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)+0x240>)
    1884:	bl	8130 <__assert_func>
    1888:	.word	0x54442d18
    188c:	.word	0x400921fb
    1890:	.word	0x3c23d70a
    1894:	.word	0x00000000
    1898:	.word	0x20000100
    189c:	.word	0x20000048
    18a0:	.word	0x20000144

000018a4 <project_namespace::Command::Command()>:

    body_velocity(Eigen::Vector3f::Zero()),
    gait_yaw_speed(0.0),
    swing_height(0.1),

    mode(Mode::REST)
    18a4:	movs	r2, #0
    18a6:	ldr	r1, [pc, #36]	; (18cc <project_namespace::Command::Command()+0x28>)

using namespace project_namespace;


// CONSTRUCTORS
Command::Command():
    18a8:	push	{r4, r5, r6}

    body_velocity(Eigen::Vector3f::Zero()),
    gait_yaw_speed(0.0),
    swing_height(0.1),

    mode(Mode::REST)
    18aa:	ldr	r6, [pc, #36]	; (18d0 <project_namespace::Command::Command()+0x2c>)
    18ac:	movs	r4, #0
    18ae:	ldr	r5, [pc, #36]	; (18d4 <project_namespace::Command::Command()+0x30>)
    18b0:	str	r6, [r0, #4]
    18b2:	str	r5, [r0, #40]	; 0x28
    18b4:	str	r4, [r0, #44]	; 0x2c
    18b6:	str	r1, [r0, #0]
    18b8:	str	r1, [r0, #8]
    18ba:	str	r2, [r0, #12]
    18bc:	str	r2, [r0, #16]
    18be:	str	r2, [r0, #20]
    18c0:	str	r2, [r0, #24]
    18c2:	str	r2, [r0, #28]
    18c4:	str	r2, [r0, #32]
    18c6:	str	r2, [r0, #36]	; 0x24
{ }
    18c8:	pop	{r4, r5, r6}
    18ca:	bx	lr
    18cc:	.word	0x3e4ccccd
    18d0:	.word	0x3db851ec
    18d4:	.word	0x3dcccccd

000018d8 <project_namespace::Command::getStancePolygonLength()>:

// GETTERS
float Command::getStancePolygonLength() {
    return stance_polygon_length;
}
    18d8:	vldr	s0, [r0]
    18dc:	bx	lr
    18de:	nop

000018e0 <project_namespace::Command::getStancePolygonWidth()>:
float Command::getStancePolygonWidth() {
    return stance_polygon_width;
}
    18e0:	vldr	s0, [r0, #4]
    18e4:	bx	lr
    18e6:	nop

000018e8 <project_namespace::Command::getStanceHeight()>:
float Command::getStanceHeight() {
    return stance_height;
}
    18e8:	vldr	s0, [r0, #8]
    18ec:	bx	lr
    18ee:	nop

000018f0 <project_namespace::Command::getBodyRoll()>:
float Command::getBodyRoll() {
    return body_roll;
}
    18f0:	vldr	s0, [r0, #12]
    18f4:	bx	lr
    18f6:	nop

000018f8 <project_namespace::Command::getBodyPitch()>:
float Command::getBodyPitch() {
    return body_pitch;
}
    18f8:	vldr	s0, [r0, #16]
    18fc:	bx	lr
    18fe:	nop

00001900 <project_namespace::Command::getBodyYaw()>:
float Command::getBodyYaw() {
    return body_yaw;
}
    1900:	vldr	s0, [r0, #20]
    1904:	bx	lr
    1906:	nop

00001908 <project_namespace::Command::getBodyVelocity()>:
    1908:	adds	r1, #24
Eigen::Vector3f Command::getBodyVelocity() {
    190a:	mov	r3, r0
    190c:	ldmia	r1, {r0, r1, r2}
    190e:	stmia.w	r3, {r0, r1, r2}
    return body_velocity;
}
    1912:	mov	r0, r3
    1914:	bx	lr
    1916:	nop

00001918 <project_namespace::Command::getGaitYawSpeed()>:
float Command::getGaitYawSpeed() {
    return gait_yaw_speed;
}
    1918:	vldr	s0, [r0, #36]	; 0x24
    191c:	bx	lr
    191e:	nop

00001920 <project_namespace::Command::getSwingHeight()>:
float Command::getSwingHeight() {
    return swing_height;
}
    1920:	vldr	s0, [r0, #40]	; 0x28
    1924:	bx	lr
    1926:	nop

00001928 <project_namespace::Command::getMode()>:
Mode Command::getMode() {
    return mode;
}
    1928:	ldr	r0, [r0, #44]	; 0x2c
    192a:	bx	lr

0000192c <project_namespace::Command::setBodyVelocity(Eigen::Matrix<float, 3, 1, 0, 3, 1>)>:
    body_pitch = body_pitch_arg;
}
void Command::setBodyYaw(float body_yaw_arg) {
    body_yaw = body_yaw_arg;
}
void Command::setBodyVelocity(Eigen::Vector3f body_velocity_arg) {
    192c:	ldr	r3, [r1, #0]
    192e:	str	r3, [r0, #24]
    1930:	ldr	r3, [r1, #4]
    1932:	str	r3, [r0, #28]
    1934:	ldr	r3, [r1, #8]
    1936:	str	r3, [r0, #32]
    1938:	bx	lr
    193a:	nop

0000193c <project_namespace::Command::setSwingHeight(float)>:
}
void Command::setGaitYawSpeed(float gait_yaw_speed_arg) {
    gait_yaw_speed = gait_yaw_speed_arg;
}
void Command::setSwingHeight(float swing_height_arg) {
    swing_height = swing_height_arg;
    193c:	vstr	s0, [r0, #40]	; 0x28
    1940:	bx	lr
    1942:	nop

00001944 <project_namespace::Command::setMode(project_namespace::Mode)>:
}
void Command::setMode(Mode mode_arg) {
    mode = mode_arg;
    1944:	str	r1, [r0, #44]	; 0x2c
    1946:	bx	lr

00001948 <project_namespace::GaitController::GaitController(project_namespace::Gait, project_namespace::FootTrajectory, project_namespace::IMU&)>:
#include "MatrixPrinter.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitController::GaitController(Gait gait_init, FootTrajectory trajectory_shape_init, IMU& imu_init):
    1948:	push	{r3, r4, r5, lr}
    gait(gait_init),
    trajectory_shape(trajectory_shape_init),
    imu(imu_init),
    gait_config(GaitConfig(gait, trajectory_shape)),
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
    194a:	add.w	r5, r0, #16
#include "MatrixPrinter.h"

using namespace project_namespace;

// CONSTRUCTORS
GaitController::GaitController(Gait gait_init, FootTrajectory trajectory_shape_init, IMU& imu_init):
    194e:	mov	r4, r0
    gait(gait_init),
    trajectory_shape(trajectory_shape_init),
    imu(imu_init),
    gait_config(GaitConfig(gait, trajectory_shape)),
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
    1950:	stmia.w	r0, {r1, r2, r3}
    1954:	mov	r0, r5
    1956:	bl	c48 <project_namespace::GaitConfig::GaitConfig(project_namespace::Gait, project_namespace::FootTrajectory)>
    195a:	mov	r1, r5
    195c:	add.w	r0, r4, #144	; 0x90
    1960:	bl	27c <project_namespace::LegStanceController::LegStanceController(project_namespace::GaitConfig&)>
    1964:	mov	r1, r5
    1966:	ldr	r2, [r4, #8]
    1968:	add.w	r0, r4, #148	; 0x94
    196c:	bl	12b8 <project_namespace::LegSwingController::LegSwingController(project_namespace::GaitConfig&, project_namespace::IMU&)>
{ }
    1970:	mov	r0, r4
    1972:	pop	{r3, r4, r5, pc}

00001974 <project_namespace::GaitController::calculateGaitPhaseIndex(int)>:

// METHODS
int GaitController::calculateGaitPhaseIndex(int ticks) {
    1974:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    
    RETURNS:
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1978:	add.w	r6, r0, #16
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
{ }

// METHODS
int GaitController::calculateGaitPhaseIndex(int ticks) {
    197c:	mov	sl, r1
    197e:	add	r7, sp, #0
    1980:	sub	sp, #32
    
    RETURNS:
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1982:	mov	r0, r6
    int tick_sum = 0;
    int gait_phase_index = 99; // Initialise with impossible value, caught by assert later
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
    1984:	movs	r4, #0
    
    RETURNS:
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1986:	bl	d60 <project_namespace::GaitConfig::getGaitCycleDurationInTicks()>
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
{ }

// METHODS
int GaitController::calculateGaitPhaseIndex(int ticks) {
    198a:	add.w	r9, sp, #15
    RETURNS:
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    int tick_sum = 0;
    198e:	mov	r5, r4
    leg_stance_controller(LegStanceController(gait_config)),
    leg_swing_controller(LegSwingController(gait_config, imu))
{ }

// METHODS
int GaitController::calculateGaitPhaseIndex(int ticks) {
    1990:	bic.w	r9, r9, #15
    
    RETURNS:
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1994:	sdiv	r3, sl, r0
    1998:	mov	r8, r9
    199a:	mls	sl, r3, r0, sl
    199e:	b.n	19b4 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x40>
    int tick_sum = 0;
    int gait_phase_index = 99; // Initialise with impossible value, caught by assert later
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
        tick_sum += gait_config.getGaitPhaseDurationsInTicks()(i);
    19a0:	mov	r1, r6
    19a2:	mov	r0, r9
    19a4:	bl	d64 <project_namespace::GaitConfig::getGaitPhaseDurationsInTicks()>
    19a8:	ldr.w	r3, [r8], #4
    19ac:	add	r5, r3
        if (ticks_into_current_gait_cycle < tick_sum) {
    19ae:	cmp	sl, r5
    19b0:	blt.n	19d2 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x5e>
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    int tick_sum = 0;
    int gait_phase_index = 99; // Initialise with impossible value, caught by assert later
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
    19b2:	adds	r4, #1
    19b4:	mov	r0, r6
    19b6:	bl	d54 <project_namespace::GaitConfig::getGaitNumberOfPhases()>
    19ba:	cmp	r4, r0
    19bc:	blt.n	19a0 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x2c>
    + gait_phase_index: The phase index of the current phase of the gait.
    */

    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    int tick_sum = 0;
    int gait_phase_index = 99; // Initialise with impossible value, caught by assert later
    19be:	movs	r4, #99	; 0x63
        if (ticks_into_current_gait_cycle < tick_sum) {
            gait_phase_index = i;
            break;
        }
    }
    assert ((gait_phase_index >= 0) && (gait_phase_index <= gait_config.getGaitNumberOfPhases()));
    19c0:	mov	r0, r6
    19c2:	bl	d54 <project_namespace::GaitConfig::getGaitNumberOfPhases()>
    19c6:	cmp	r0, r4
    19c8:	blt.n	19d6 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x62>
    return gait_phase_index;
}
    19ca:	mov	r0, r4
    19cc:	mov	sp, r7
    19ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (ticks_into_current_gait_cycle < tick_sum) {
            gait_phase_index = i;
            break;
        }
    }
    assert ((gait_phase_index >= 0) && (gait_phase_index <= gait_config.getGaitNumberOfPhases()));
    19d2:	cmp	r4, #0
    19d4:	bge.n	19c0 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x4c>
    19d6:	ldr	r3, [pc, #12]	; (19e4 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x70>)
    19d8:	movs	r1, #41	; 0x29
    19da:	ldr	r2, [pc, #12]	; (19e8 <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x74>)
    19dc:	ldr	r0, [pc, #12]	; (19ec <project_namespace::GaitController::calculateGaitPhaseIndex(int)+0x78>)
    19de:	bl	8130 <__assert_func>
    19e2:	nop
    19e4:	.word	0x200001f4
    19e8:	.word	0x200001b0
    19ec:	.word	0x2000024c

000019f0 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)>:
    return gait_phase_index;
}

int GaitController::calculateTicksIntoCurrentGaitPhase(int ticks) {
    19f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RETURNS:
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    19f4:	add.w	r6, r0, #16
    }
    assert ((gait_phase_index >= 0) && (gait_phase_index <= gait_config.getGaitNumberOfPhases()));
    return gait_phase_index;
}

int GaitController::calculateTicksIntoCurrentGaitPhase(int ticks) {
    19f8:	mov	r9, r1
    19fa:	add	r7, sp, #0
    19fc:	sub	sp, #32
    RETURNS:
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    19fe:	mov	r0, r6
    int tick_sum = 0;
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
    1a00:	movs	r4, #0
    RETURNS:
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1a02:	bl	d60 <project_namespace::GaitConfig::getGaitCycleDurationInTicks()>
    }
    assert ((gait_phase_index >= 0) && (gait_phase_index <= gait_config.getGaitNumberOfPhases()));
    return gait_phase_index;
}

int GaitController::calculateTicksIntoCurrentGaitPhase(int ticks) {
    1a06:	add.w	sl, sp, #15
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    int tick_sum = 0;
    1a0a:	mov	r5, r4
    }
    assert ((gait_phase_index >= 0) && (gait_phase_index <= gait_config.getGaitNumberOfPhases()));
    return gait_phase_index;
}

int GaitController::calculateTicksIntoCurrentGaitPhase(int ticks) {
    1a0c:	bic.w	sl, sl, #15
    RETURNS:
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    1a10:	sdiv	r1, r9, r0
    1a14:	mov	r8, sl
    1a16:	mls	r9, r1, r0, r9
    1a1a:	b.n	1a34 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x44>
    int tick_sum = 0;
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
        tick_sum += gait_config.getGaitPhaseDurationsInTicks()(i);
    1a1c:	mov	r1, r6
    1a1e:	mov	r0, sl
    1a20:	bl	d64 <project_namespace::GaitConfig::getGaitPhaseDurationsInTicks()>
    1a24:	ldr.w	r3, [r8], #4
    1a28:	mov.w	fp, r4, lsl #2
    1a2c:	add	r5, r3
        if (tick_sum > ticks_into_current_gait_cycle) {
    1a2e:	cmp	r9, r5
    1a30:	blt.n	1a54 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x64>
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    int ticks_into_current_gait_cycle = ticks % gait_config.getGaitCycleDurationInTicks();
    int tick_sum = 0;
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
    1a32:	adds	r4, #1
    1a34:	mov	r0, r6
    1a36:	bl	d54 <project_namespace::GaitConfig::getGaitNumberOfPhases()>
    1a3a:	cmp	r4, r0
    1a3c:	blt.n	1a1c <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x2c>

    RETURNS:
    + ticks_into_current_phase: The elapsed time, in ticks, from the start of the current phase of the gait.
    */

    int ticks_into_current_phase = 999; // Initialise with impossible value, caught by assert later
    1a3e:	movw	r5, #999	; 0x3e7
                + gait_config.getGaitPhaseDurationsInTicks()(i)
            ;
            break;
        }
    }
    assert (
    1a42:	mov	r0, r6
    1a44:	bl	d58 <project_namespace::GaitConfig::getGaitStanceDurationInTicks()>
    1a48:	cmp	r0, r5
    1a4a:	blt.n	1a74 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x84>
            (ticks_into_current_phase <= gait_config.getGaitStanceDurationInTicks())
            || (ticks_into_current_phase <= gait_config.getGaitSwingDurationInTicks())
        )
    );
    return ticks_into_current_phase;
}
    1a4c:	mov	r0, r5
    1a4e:	mov	sp, r7
    1a50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tick_sum += gait_config.getGaitPhaseDurationsInTicks()(i);
        if (tick_sum > ticks_into_current_gait_cycle) {
            ticks_into_current_phase =
                ticks_into_current_gait_cycle
                - tick_sum
                + gait_config.getGaitPhaseDurationsInTicks()(i)
    1a54:	mov	r1, r6
    1a56:	mov	r0, sl
    1a58:	bl	d64 <project_namespace::GaitConfig::getGaitPhaseDurationsInTicks()>
    for (int i = 0; i < gait_config.getGaitNumberOfPhases(); i++) {
        tick_sum += gait_config.getGaitPhaseDurationsInTicks()(i);
        if (tick_sum > ticks_into_current_gait_cycle) {
            ticks_into_current_phase =
                ticks_into_current_gait_cycle
                - tick_sum
    1a5c:	rsb	r5, r5, r9
                + gait_config.getGaitPhaseDurationsInTicks()(i)
            ;
    1a60:	ldr.w	r3, [sl, fp]
        (ticks_into_current_phase >= 0)
        && (
            (ticks_into_current_phase <= gait_config.getGaitStanceDurationInTicks())
            || (ticks_into_current_phase <= gait_config.getGaitSwingDurationInTicks())
        )
    );
    1a64:	adds	r5, r5, r3
    1a66:	bpl.n	1a42 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x52>
                + gait_config.getGaitPhaseDurationsInTicks()(i)
            ;
            break;
        }
    }
    assert (
    1a68:	ldr	r3, [pc, #28]	; (1a88 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x98>)
    1a6a:	movs	r1, #78	; 0x4e
    1a6c:	ldr	r2, [pc, #28]	; (1a8c <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x9c>)
    1a6e:	ldr	r0, [pc, #32]	; (1a90 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0xa0>)
    1a70:	bl	8130 <__assert_func>
    1a74:	mov	r0, r6
    1a76:	bl	d5c <project_namespace::GaitConfig::getGaitSwingDurationInTicks()>
    1a7a:	cmp	r0, r5
    1a7c:	blt.n	1a68 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)+0x78>
            (ticks_into_current_phase <= gait_config.getGaitStanceDurationInTicks())
            || (ticks_into_current_phase <= gait_config.getGaitSwingDurationInTicks())
        )
    );
    return ticks_into_current_phase;
}
    1a7e:	mov	r0, r5
    1a80:	mov	sp, r7
    1a82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a86:	nop
    1a88:	.word	0x20000264
    1a8c:	.word	0x20000160
    1a90:	.word	0x2000024c

00001a94 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)>:

int GaitController::calculateTicksIntoCurrentLegPhase(int ticks, int leg_index) {
    1a94:	push	{r3, r4, r5, r6, r7, lr}
    1a96:	mov	r5, r0
    1a98:	mov	r4, r1
    1a9a:	mov	r6, r2
    RETURNS:
    + ticks_into_current_leg_phase: The number of ticks into the leg's own phase (NOT GAIT PHASE!!!).
    */
    int ticks_into_current_leg_phase = 999; // Initialise with impossible value, caught by assert later

    int current_gait_phase_index = calculateGaitPhaseIndex(ticks);
    1a9c:	bl	1974 <project_namespace::GaitController::calculateGaitPhaseIndex(int)>
    int ticks_into_current_gait_phase = calculateTicksIntoCurrentGaitPhase(ticks);
    1aa0:	mov	r1, r4
    RETURNS:
    + ticks_into_current_leg_phase: The number of ticks into the leg's own phase (NOT GAIT PHASE!!!).
    */
    int ticks_into_current_leg_phase = 999; // Initialise with impossible value, caught by assert later

    int current_gait_phase_index = calculateGaitPhaseIndex(ticks);
    1aa2:	mov	r7, r0
    int ticks_into_current_gait_phase = calculateTicksIntoCurrentGaitPhase(ticks);
    1aa4:	mov	r0, r5
    1aa6:	bl	19f0 <project_namespace::GaitController::calculateTicksIntoCurrentGaitPhase(int)>
    if (gait == Gait::TROT) {
    1aaa:	ldr	r3, [r5, #0]
    1aac:	cbz	r3, 1ac2 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x2e>
    1aae:	movw	r4, #999	; 0x3e7
                // BR is in its swing phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            }
        }
    }
    assert(
    1ab2:	add.w	r0, r5, #16
    1ab6:	bl	d78 <project_namespace::GaitConfig::getLegStanceDurationInTicks()>
    1aba:	cmp	r0, r4
    1abc:	blt.n	1ad8 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x44>
        (ticks_into_current_leg_phase >= 0)
        && (ticks_into_current_leg_phase <= gait_config.getLegStanceDurationInTicks())
    ); // leg stance duration is always longer than swing stance duration

    return ticks_into_current_leg_phase;
}
    1abe:	mov	r0, r4
    1ac0:	pop	{r3, r4, r5, r6, r7, pc}
    1ac2:	mov	r4, r0
    int ticks_into_current_leg_phase = 999; // Initialise with impossible value, caught by assert later

    int current_gait_phase_index = calculateGaitPhaseIndex(ticks);
    int ticks_into_current_gait_phase = calculateTicksIntoCurrentGaitPhase(ticks);
    if (gait == Gait::TROT) {
        if (leg_index == 0) {
    1ac4:	cbnz	r6, 1ae4 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x50>
                    + ticks_into_current_gait_phase
                ;
            }
        } else if (leg_index == 3) {
            // Back-right leg
            if (current_gait_phase_index == 0) {
    1ac6:	cbz	r7, 1ad4 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x40>
                // BR is just starting its leg stance phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            } else if (current_gait_phase_index == 1) {
    1ac8:	cmp	r7, #1
    1aca:	beq.n	1afe <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x6a>
                // BR is in the middle of its leg stance phase
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
                    + ticks_into_current_gait_phase
                ;
            } else if (current_gait_phase_index == 2) {
    1acc:	cmp	r7, #2
    1ace:	beq.n	1b0a <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x76>
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
                    + gait_config.getGaitSwingDurationInTicks()
                    + ticks_into_current_gait_phase
                ;
            } else if (current_gait_phase_index == 3) {
    1ad0:	cmp	r7, #3
    1ad2:	bne.n	1aae <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x1a>
        }
    }
    assert(
        (ticks_into_current_leg_phase >= 0)
        && (ticks_into_current_leg_phase <= gait_config.getLegStanceDurationInTicks())
    ); // leg stance duration is always longer than swing stance duration
    1ad4:	cmp	r4, #0
    1ad6:	bge.n	1ab2 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x1e>
                // BR is in its swing phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            }
        }
    }
    assert(
    1ad8:	ldr	r3, [pc, #72]	; (1b24 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x90>)
    1ada:	movs	r1, #193	; 0xc1
    1adc:	ldr	r2, [pc, #72]	; (1b28 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x94>)
    1ade:	ldr	r0, [pc, #76]	; (1b2c <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x98>)
    1ae0:	bl	8130 <__assert_func>
                ;
            } else if (current_gait_phase_index == 3) {
                // FL is in its swing phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            }
        } else if (leg_index == 1) {
    1ae4:	cmp	r6, #1
    1ae6:	beq.n	1af2 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x5e>
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
                    + ticks_into_current_gait_phase
                ;
            }
        } else if (leg_index == 2) {
    1ae8:	cmp	r6, #2
    1aea:	beq.n	1af2 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x5e>
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
                    + ticks_into_current_gait_phase
                ;
            }
        } else if (leg_index == 3) {
    1aec:	cmp	r6, #3
    1aee:	bne.n	1aae <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x1a>
    1af0:	b.n	1ac6 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x32>
                    + ticks_into_current_gait_phase
                ;
            }
        } else if (leg_index == 2) {
            // Back-left leg
            if (current_gait_phase_index == 0) {
    1af2:	cbz	r7, 1b0a <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x76>
                    + ticks_into_current_gait_phase
                ;
            } else if (current_gait_phase_index == 1) {
                // BL is in its swing phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            } else if (current_gait_phase_index == 2) {
    1af4:	subs	r3, r7, #1
    1af6:	cmp	r3, #1
    1af8:	bls.n	1ad4 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x40>
                // BL is just starting its leg stance phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            } else if (current_gait_phase_index == 3) {
    1afa:	cmp	r7, #3
    1afc:	bne.n	1aae <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x1a>
                // BR is just starting its leg stance phase
                ticks_into_current_leg_phase = ticks_into_current_gait_phase;
            } else if (current_gait_phase_index == 1) {
                // BR is in the middle of its leg stance phase
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
    1afe:	add.w	r0, r5, #16
    1b02:	bl	d58 <project_namespace::GaitConfig::getGaitStanceDurationInTicks()>
                    + ticks_into_current_gait_phase
                ;
    1b06:	add	r4, r0
    1b08:	b.n	1ad4 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x40>
            } else if (current_gait_phase_index == 2) {
                // BR is approaching end of its leg stance phase
                ticks_into_current_leg_phase =
                    gait_config.getGaitStanceDurationInTicks()
    1b0a:	add.w	r7, r5, #16
    1b0e:	mov	r0, r7
    1b10:	bl	d58 <project_namespace::GaitConfig::getGaitStanceDurationInTicks()>
    1b14:	mov	r6, r0
                    + gait_config.getGaitSwingDurationInTicks()
    1b16:	mov	r0, r7
    1b18:	bl	d5c <project_namespace::GaitConfig::getGaitSwingDurationInTicks()>
                    + ticks_into_current_gait_phase
                ;
    1b1c:	add	r0, r6
    1b1e:	add	r4, r0
    1b20:	b.n	1ad4 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)+0x40>
    1b22:	nop
    1b24:	.word	0x20000320
    1b28:	.word	0x20000394
    1b2c:	.word	0x2000024c

00001b30 <project_namespace::GaitController::calculateContactPattern(int)>:
    ); // leg stance duration is always longer than swing stance duration

    return ticks_into_current_leg_phase;
}

Eigen::Vector4i GaitController::calculateContactPattern(int ticks) {
    1b30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b34:	add	r7, sp, #0
    1b36:	sub	sp, #80	; 0x50
    1b38:	mov	r8, r1
    1b3a:	mov	r4, r0
    1b3c:	add.w	r5, sp, #15
    RETURNS:
    + contact_pattern: The contact pattern of the legs at the time given in ticks.
    0 = swing, 1 = stance, [FL, FR, BL, BR].
    */
    
    int current_gait_phase_index = calculateGaitPhaseIndex(ticks);
    1b40:	mov	r1, r2
    1b42:	mov	r0, r8
    1b44:	bl	1974 <project_namespace::GaitController::calculateGaitPhaseIndex(int)>
    ); // leg stance duration is always longer than swing stance duration

    return ticks_into_current_leg_phase;
}

Eigen::Vector4i GaitController::calculateContactPattern(int ticks) {
    1b48:	bic.w	r5, r5, #15
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
    1b4c:	movs	r3, #0
    RETURNS:
    + contact_pattern: The contact pattern of the legs at the time given in ticks.
    0 = swing, 1 = stance, [FL, FR, BL, BR].
    */
    
    int current_gait_phase_index = calculateGaitPhaseIndex(ticks);
    1b4e:	mov	r6, r0
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = gait_config.getContactSchedule().col(current_gait_phase_index);
    1b50:	add.w	r1, r8, #16
    1b54:	mov	r0, r5
    1b56:	str	r3, [r4, #0]
      m_storage.data()[1] = y;
    1b58:	str	r3, [r4, #4]
      m_storage.data()[2] = z;
    1b5a:	str	r3, [r4, #8]
      m_storage.data()[3] = w;
    1b5c:	str	r3, [r4, #12]
    1b5e:	bl	d30 <project_namespace::GaitConfig::getContactSchedule()>

    return contact_pattern;
}
    1b62:	mov	r0, r4
    1b64:	lsls	r3, r6, #4
    1b66:	adds	r2, r5, r3
    1b68:	ldr	r6, [r5, r3]
    1b6a:	ldr	r1, [r2, #8]
    1b6c:	ldr	r5, [r2, #4]
    1b6e:	ldr	r3, [r2, #12]
    1b70:	str	r6, [r4, #0]
    1b72:	str	r5, [r4, #4]
    1b74:	str	r1, [r4, #8]
    1b76:	str	r3, [r4, #12]
    1b78:	mov	sp, r7
    1b7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b7e:	nop

00001b80 <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)>:

Eigen::Matrix<float, 3, 4> GaitController::calculateAllNewFootPositions(Robot& robot, Command& command, int ticks) {
    1b80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b84:	vpush	{d8}
    1b88:	sub	sp, #52	; 0x34
    1b8a:	mov	r8, r1
    */

    Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise

    // Update swing_height in gait_config from command
    gait_config.setSwingHeight(command.getSwingHeight());
    1b8c:	adds	r1, #16
    contact_pattern = gait_config.getContactSchedule().col(current_gait_phase_index);

    return contact_pattern;
}

Eigen::Matrix<float, 3, 4> GaitController::calculateAllNewFootPositions(Robot& robot, Command& command, int ticks) {
    1b8e:	mov	sl, r3
    1b90:	add	r7, sp, #8
    1b92:	sub	sp, #48	; 0x30
    */

    Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise

    // Update swing_height in gait_config from command
    gait_config.setSwingHeight(command.getSwingHeight());
    1b94:	mov	r4, r1
    contact_pattern = gait_config.getContactSchedule().col(current_gait_phase_index);

    return contact_pattern;
}

Eigen::Matrix<float, 3, 4> GaitController::calculateAllNewFootPositions(Robot& robot, Command& command, int ticks) {
    1b96:	str	r0, [r7, #12]
    1b98:	mov	r5, r0
    1b9a:	add.w	r3, sp, #23
    */

    Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise

    // Update swing_height in gait_config from command
    gait_config.setSwingHeight(command.getSwingHeight());
    1b9e:	mov	r0, sl
    1ba0:	str	r1, [r7, #20]
    contact_pattern = gait_config.getContactSchedule().col(current_gait_phase_index);

    return contact_pattern;
}

Eigen::Matrix<float, 3, 4> GaitController::calculateAllNewFootPositions(Robot& robot, Command& command, int ticks) {
    1ba2:	bic.w	fp, r3, #15
    1ba6:	str	r2, [r7, #8]
    */

    Eigen::Matrix<float, 3, 4> new_foot_positions_wrt_body; // Initialise

    // Update swing_height in gait_config from command
    gait_config.setSwingHeight(command.getSwingHeight());
    1ba8:	bl	1920 <project_namespace::Command::getSwingHeight()>
    1bac:	mov	r0, r4
    1bae:	bl	d88 <project_namespace::GaitConfig::setSwingHeight(float)>
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);
    1bb2:	mov	r0, fp
    1bb4:	ldr	r2, [r7, #88]	; 0x58
    1bb6:	mov	r1, r8
    1bb8:	bl	1b30 <project_namespace::GaitController::calculateContactPattern(int)>
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
    1bbc:	ldr.w	r2, [fp, #12]
            float leg_stance_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegStanceDurationInTicks())
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_stance_controller.calculateNewFootPosition(robot, command, leg_index)
    1bc0:	add.w	r3, r8, #144	; 0x90
    1bc4:	ldr.w	r0, [fp, #4]
    1bc8:	ldr.w	r1, [fp, #8]
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegSwingDurationInTicks())
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1bcc:	add.w	r4, r8, #148	; 0x94
    1bd0:	str.w	r2, [fp, #28]
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
      m_storage.data()[0] = x;
    1bd4:	movs	r2, #0
            float leg_stance_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegStanceDurationInTicks())
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_stance_controller.calculateNewFootPosition(robot, command, leg_index)
    1bd6:	str	r3, [r7, #4]
    1bd8:	add.w	r9, fp, #16
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1bdc:	ldr.w	r3, [fp]
    1be0:	mov	r6, fp
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegSwingDurationInTicks())
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1be2:	str	r4, [r7, #16]
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);

    Eigen::Vector4f foot_phase_proportions_completed(0.0, 0.0, 0.0, 0.0);
    for (int leg_index = 0; leg_index < 4; leg_index++) {
    1be4:	movs	r4, #0
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
    1be6:	str.w	r0, [fp, #20]
    1bea:	str.w	r1, [fp, #24]
    1bee:	str.w	r3, [fp, #16]
    1bf2:	str.w	r2, [fp]
      m_storage.data()[1] = y;
    1bf6:	str.w	r2, [fp, #4]
      m_storage.data()[2] = z;
    1bfa:	str.w	r2, [fp, #8]
      m_storage.data()[3] = w;
    1bfe:	str.w	r2, [fp, #12]
    1c02:	ldr.w	fp, [r7, #8]
        int leg_phase = contact_pattern(leg_index); // 0 = swing, 1 = stance
        if (leg_phase == 0) {
    1c06:	cbz	r3, 1c1e <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0x9e>
                    leg_swing_proportion_completed,
                    trajectory_shape
                )
            ;
            foot_phase_proportions_completed(leg_index) = leg_swing_proportion_completed;
        } else if (leg_phase == 1) {
    1c08:	cmp	r3, #1
    1c0a:	beq.n	1c8a <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0x10a>
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);

    Eigen::Vector4f foot_phase_proportions_completed(0.0, 0.0, 0.0, 0.0);
    for (int leg_index = 0; leg_index < 4; leg_index++) {
    1c0c:	adds	r4, #1
    1c0e:	adds	r5, #12
    1c10:	adds	r6, #4
    1c12:	cmp	r4, #4
    1c14:	beq.n	1c7c <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0xfc>
    1c16:	ldr.w	r3, [r9, #4]!
        int leg_phase = contact_pattern(leg_index); // 0 = swing, 1 = stance
        if (leg_phase == 0) {
    1c1a:	cmp	r3, #0
    1c1c:	bne.n	1c08 <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0x88>
            // Leg is in swing phase
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
    1c1e:	mov	r2, r4
    1c20:	ldr	r1, [r7, #88]	; 0x58
    1c22:	mov	r0, r8
    1c24:	adds	r5, #12
    1c26:	bl	1a94 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)>
    1c2a:	vmov	s16, r0
                / float(gait_config.getLegSwingDurationInTicks())
    1c2e:	ldr	r0, [r7, #20]
    1c30:	adds	r6, #4
    1c32:	bl	d7c <project_namespace::GaitConfig::getLegSwingDurationInTicks()>
    1c36:	vmov	s15, r0
    1c3a:	vcvt.f32.s32	s16, s16
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1c3e:	ldr.w	r2, [r8, #4]
        int leg_phase = contact_pattern(leg_index); // 0 = swing, 1 = stance
        if (leg_phase == 0) {
            // Leg is in swing phase
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegSwingDurationInTicks())
    1c42:	vcvt.f32.s32	s15, s15
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1c46:	str	r4, [sp, #0]
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);

    Eigen::Vector4f foot_phase_proportions_completed(0.0, 0.0, 0.0, 0.0);
    for (int leg_index = 0; leg_index < 4; leg_index++) {
    1c48:	adds	r4, #1
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegSwingDurationInTicks())
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1c4a:	mov	r3, sl
    1c4c:	str	r2, [sp, #4]
    1c4e:	add.w	r0, r7, #28
        int leg_phase = contact_pattern(leg_index); // 0 = swing, 1 = stance
        if (leg_phase == 0) {
            // Leg is in swing phase
            float leg_swing_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegSwingDurationInTicks())
    1c52:	vdiv.f32	s17, s16, s15
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_swing_controller.calculateNewFootPosition(
    1c56:	mov	r2, fp
    1c58:	ldr	r1, [r7, #16]
    1c5a:	vmov.f32	s0, s17
    1c5e:	bl	1660 <project_namespace::LegSwingController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int, float, project_namespace::FootTrajectory)>
    1c62:	ldr	r1, [r7, #28]
    1c64:	ldr	r2, [r7, #32]
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);

    Eigen::Vector4f foot_phase_proportions_completed(0.0, 0.0, 0.0, 0.0);
    for (int leg_index = 0; leg_index < 4; leg_index++) {
    1c66:	cmp	r4, #4
    1c68:	ldr	r3, [r7, #36]	; 0x24
                    leg_index,
                    leg_swing_proportion_completed,
                    trajectory_shape
                )
            ;
            foot_phase_proportions_completed(leg_index) = leg_swing_proportion_completed;
    1c6a:	vstr	s17, [r6, #-4]
    1c6e:	str.w	r1, [r5, #-12]
    1c72:	str.w	r2, [r5, #-8]
    1c76:	str.w	r3, [r5, #-4]
    // Find phases of each leg (swing or stance)
    Eigen::Vector4i contact_pattern(0, 0, 0, 0);
    contact_pattern = calculateContactPattern(ticks);

    Eigen::Vector4f foot_phase_proportions_completed(0.0, 0.0, 0.0, 0.0);
    for (int leg_index = 0; leg_index < 4; leg_index++) {
    1c7a:	bne.n	1c16 <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0x96>
            foot_phase_proportions_completed(leg_index) = leg_stance_proportion_completed;
        }
    }

    return new_foot_positions_wrt_body;
    1c7c:	ldr	r0, [r7, #12]
    1c7e:	adds	r7, #44	; 0x2c
    1c80:	mov	sp, r7
    1c82:	vpop	{d8}
    1c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ;
            foot_phase_proportions_completed(leg_index) = leg_swing_proportion_completed;
        } else if (leg_phase == 1) {
            // Leg is in stance phase
            float leg_stance_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
    1c8a:	mov	r2, r4
    1c8c:	ldr	r1, [r7, #88]	; 0x58
    1c8e:	mov	r0, r8
    1c90:	bl	1a94 <project_namespace::GaitController::calculateTicksIntoCurrentLegPhase(int, int)>
    1c94:	vmov	s16, r0
                / float(gait_config.getLegStanceDurationInTicks())
    1c98:	ldr	r0, [r7, #20]
    1c9a:	bl	d78 <project_namespace::GaitConfig::getLegStanceDurationInTicks()>
    1c9e:	vmov	s15, r0
    1ca2:	vcvt.f32.s32	s16, s16
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_stance_controller.calculateNewFootPosition(robot, command, leg_index)
    1ca6:	mov	r3, sl
            foot_phase_proportions_completed(leg_index) = leg_swing_proportion_completed;
        } else if (leg_phase == 1) {
            // Leg is in stance phase
            float leg_stance_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegStanceDurationInTicks())
    1ca8:	vcvt.f32.s32	s15, s15
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_stance_controller.calculateNewFootPosition(robot, command, leg_index)
    1cac:	mov	r2, fp
    1cae:	ldr	r1, [r7, #4]
    1cb0:	add.w	r0, r7, #28
    1cb4:	str	r4, [sp, #0]
            foot_phase_proportions_completed(leg_index) = leg_swing_proportion_completed;
        } else if (leg_phase == 1) {
            // Leg is in stance phase
            float leg_stance_proportion_completed =
                float(calculateTicksIntoCurrentLegPhase(ticks, leg_index))
                / float(gait_config.getLegStanceDurationInTicks())
    1cb6:	vdiv.f32	s17, s16, s15
            ;
            new_foot_positions_wrt_body.col(leg_index) =
                leg_stance_controller.calculateNewFootPosition(robot, command, leg_index)
    1cba:	bl	280 <project_namespace::LegStanceController::calculateNewFootPosition(project_namespace::Robot&, project_namespace::Command&, int)>
    1cbe:	ldr	r1, [r7, #28]
    1cc0:	ldr	r2, [r7, #32]
    1cc2:	ldr	r3, [r7, #36]	; 0x24
    1cc4:	str	r1, [r5, #0]
    1cc6:	str	r2, [r5, #4]
    1cc8:	str	r3, [r5, #8]
            ;
            foot_phase_proportions_completed(leg_index) = leg_stance_proportion_completed;
    1cca:	vstr	s17, [r6]
    1cce:	b.n	1c0c <project_namespace::GaitController::calculateAllNewFootPositions(project_namespace::Robot&, project_namespace::Command&, int)+0x8c>

00001cd0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1cd0:	ldrb.w	r2, [r0, #59]	; 0x3b
    1cd4:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    1cd8:	subs	r0, r2, r0
    1cda:	bx	lr

00001cdc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1cdc:	ldrb.w	r3, [r0, #58]	; 0x3a
    1ce0:	ldrb.w	r2, [r0, #59]	; 0x3b
    1ce4:	cmp	r2, r3
    1ce6:	bls.n	1cf4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1ce8:	adds	r2, r3, #1
    1cea:	add	r3, r0
    1cec:	strb.w	r2, [r0, #58]	; 0x3a
    1cf0:	ldrb	r0, [r3, #26]
    1cf2:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1cf4:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    1cf8:	bx	lr
    1cfa:	nop

00001cfc <BNO080::printHeader() [clone .part.7]>:
		_debugPort->println();
	}
}

//Pretty prints the contents of the current shtp header (only)
void BNO080::printHeader(void)
    1cfc:	push	{r4, r5, r6, lr}
    1cfe:	mov	r4, r0
{
	if (_printDebug == true)
	{
		//Print the four byte header
		_debugPort->print(F("Header:"));
    1d00:	ldr.w	r0, [r0, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1d04:	movs	r2, #7
    1d06:	ldr	r1, [pc, #80]	; (1d58 <BNO080::printHeader() [clone .part.7]+0x5c>)
    1d08:	ldr	r3, [r0, #0]
    1d0a:	subs	r5, r4, #1
    1d0c:	adds	r6, r4, #3
    1d0e:	ldr	r3, [r3, #4]
    1d10:	blx	r3
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
    1d12:	ldr.w	r0, [r4, #184]	; 0xb8
    1d16:	movs	r2, #1
    1d18:	ldr	r1, [pc, #64]	; (1d5c <BNO080::printHeader() [clone .part.7]+0x60>)
    1d1a:	ldr	r3, [r0, #0]
    1d1c:	ldr	r3, [r3, #4]
    1d1e:	blx	r3
			if (shtpHeader[x] < 0x10)
    1d20:	ldrb.w	r1, [r5, #1]!
    1d24:	cmp	r1, #15
    1d26:	bls.n	1d44 <BNO080::printHeader() [clone .part.7]+0x48>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1d28:	movs	r3, #0
    1d2a:	movs	r2, #16
    1d2c:	ldr.w	r0, [r4, #184]	; 0xb8
    1d30:	bl	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	if (_printDebug == true)
	{
		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
    1d34:	cmp	r5, r6
    1d36:	bne.n	1d12 <BNO080::printHeader() [clone .part.7]+0x16>
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}
		_debugPort->println();
    1d38:	ldr.w	r0, [r4, #184]	; 0xb8
	}
}
    1d3c:	ldmia.w	sp!, {r4, r5, r6, lr}
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}
		_debugPort->println();
    1d40:	b.w	4890 <Print::println()>
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
    1d44:	ldr.w	r0, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1d48:	movs	r2, #1
    1d4a:	ldr	r1, [pc, #20]	; (1d60 <BNO080::printHeader() [clone .part.7]+0x64>)
    1d4c:	ldr	r3, [r0, #0]
    1d4e:	ldr	r3, [r3, #4]
    1d50:	blx	r3
    1d52:	ldrb	r1, [r5, #0]
    1d54:	b.n	1d28 <BNO080::printHeader() [clone .part.7]+0x2c>
    1d56:	nop
    1d58:	.word	0x200003f8
    1d5c:	.word	0x20000400
    1d60:	.word	0x20000404

00001d64 <BNO080::printPacket() [clone .part.6]>:

	return (true);
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
    1d64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
    1d68:	ldrb	r3, [r0, #0]

	return (true);
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
    1d6a:	mov	r5, r0
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
    1d6c:	ldrb	r7, [r0, #1]
    1d6e:	subs	r6, r0, #1

		//Print the four byte header
		_debugPort->print(F("Header:"));
    1d70:	ldr.w	r0, [r0, #184]	; 0xb8
    1d74:	movs	r2, #7
//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
{
	if (_printDebug == true)
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
    1d76:	orr.w	r7, r3, r7, lsl #8
    1d7a:	ldr	r1, [pc, #408]	; (1f14 <BNO080::printPacket() [clone .part.6]+0x1b0>)
    1d7c:	ldr	r3, [r0, #0]
    1d7e:	adds	r4, r5, #3
    1d80:	sxth	r7, r7
    1d82:	ldr	r3, [r3, #4]
    1d84:	uxth.w	r8, r7
    1d88:	blx	r3

		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
    1d8a:	ldr.w	r0, [r5, #184]	; 0xb8
    1d8e:	movs	r2, #1
    1d90:	ldr	r1, [pc, #388]	; (1f18 <BNO080::printPacket() [clone .part.6]+0x1b4>)
    1d92:	ldr	r3, [r0, #0]
    1d94:	ldr	r3, [r3, #4]
    1d96:	blx	r3
			if (shtpHeader[x] < 0x10)
    1d98:	ldrb.w	r1, [r6, #1]!
    1d9c:	cmp	r1, #15
    1d9e:	bls.n	1e0c <BNO080::printPacket() [clone .part.6]+0xa8>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1da0:	movs	r3, #0
    1da2:	movs	r2, #16
    1da4:	ldr.w	r0, [r5, #184]	; 0xb8
    1da8:	bl	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	{
		uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];

		//Print the four byte header
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
    1dac:	cmp	r4, r6
    1dae:	bne.n	1d8a <BNO080::printPacket() [clone .part.6]+0x26>
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}

		uint8_t printLength = packetLength - 4;
    1db0:	subs	r6, r7, #4
		if (printLength > 40)
			printLength = 40; //Artificial limit. We don't want the phone book.

		_debugPort->print(F(" Body:"));
    1db2:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1db6:	movs	r2, #6
    1db8:	ldr	r1, [pc, #352]	; (1f1c <BNO080::printPacket() [clone .part.6]+0x1b8>)
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpHeader[x], HEX);
		}

		uint8_t printLength = packetLength - 4;
    1dba:	uxtb	r6, r6
    1dbc:	ldr	r3, [r0, #0]
    1dbe:	cmp	r6, #40	; 0x28
    1dc0:	ldr	r3, [r3, #4]
    1dc2:	it	cs
    1dc4:	movcs	r6, #40	; 0x28
    1dc6:	blx	r3
		if (printLength > 40)
			printLength = 40; //Artificial limit. We don't want the phone book.

		_debugPort->print(F(" Body:"));
		for (uint8_t x = 0; x < printLength; x++)
    1dc8:	cbz	r6, 1e1e <BNO080::printPacket() [clone .part.6]+0xba>
    1dca:	subs	r6, #1
    1dcc:	uxtb	r6, r6
    1dce:	adds	r6, #4
    1dd0:	add	r6, r5
    1dd2:	b.n	1de4 <BNO080::printPacket() [clone .part.6]+0x80>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1dd4:	movs	r3, #0
    1dd6:	movs	r2, #16
    1dd8:	ldr.w	r0, [r5, #184]	; 0xb8
    1ddc:	bl	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1de0:	cmp	r6, r4
    1de2:	beq.n	1e1e <BNO080::printPacket() [clone .part.6]+0xba>
		{
			_debugPort->print(F(" "));
    1de4:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1de8:	movs	r2, #1
    1dea:	ldr	r1, [pc, #300]	; (1f18 <BNO080::printPacket() [clone .part.6]+0x1b4>)
    1dec:	ldr	r3, [r0, #0]
    1dee:	ldr	r3, [r3, #4]
    1df0:	blx	r3
			if (shtpData[x] < 0x10)
    1df2:	ldrb.w	r1, [r4, #1]!
    1df6:	cmp	r1, #15
    1df8:	bhi.n	1dd4 <BNO080::printPacket() [clone .part.6]+0x70>
				_debugPort->print(F("0"));
    1dfa:	ldr.w	r0, [r5, #184]	; 0xb8
    1dfe:	movs	r2, #1
    1e00:	ldr	r1, [pc, #284]	; (1f20 <BNO080::printPacket() [clone .part.6]+0x1bc>)
    1e02:	ldr	r3, [r0, #0]
    1e04:	ldr	r3, [r3, #4]
    1e06:	blx	r3
    1e08:	ldrb	r1, [r4, #0]
    1e0a:	b.n	1dd4 <BNO080::printPacket() [clone .part.6]+0x70>
		_debugPort->print(F("Header:"));
		for (uint8_t x = 0; x < 4; x++)
		{
			_debugPort->print(F(" "));
			if (shtpHeader[x] < 0x10)
				_debugPort->print(F("0"));
    1e0c:	ldr.w	r0, [r5, #184]	; 0xb8
    1e10:	movs	r2, #1
    1e12:	ldr	r1, [pc, #268]	; (1f20 <BNO080::printPacket() [clone .part.6]+0x1bc>)
    1e14:	ldr	r3, [r0, #0]
    1e16:	ldr	r3, [r3, #4]
    1e18:	blx	r3
    1e1a:	ldrb	r1, [r6, #0]
    1e1c:	b.n	1da0 <BNO080::printPacket() [clone .part.6]+0x3c>
			if (shtpData[x] < 0x10)
				_debugPort->print(F("0"));
			_debugPort->print(shtpData[x], HEX);
		}

		if (packetLength & 1 << 15)
    1e1e:	cmp	r7, #0
    1e20:	blt.n	1ea2 <BNO080::printPacket() [clone .part.6]+0x13e>
		{
			_debugPort->println(F(" [Continued packet] "));
			packetLength &= ~(1 << 15);
		}

		_debugPort->print(F(" Length:"));
    1e22:	ldr.w	r0, [r5, #184]	; 0xb8
    1e26:	movs	r2, #8
    1e28:	ldr	r1, [pc, #248]	; (1f24 <BNO080::printPacket() [clone .part.6]+0x1c0>)
    1e2a:	ldr	r3, [r0, #0]
    1e2c:	ldr	r3, [r3, #4]
    1e2e:	blx	r3
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1e30:	mov	r1, r8
    1e32:	ldr.w	r0, [r5, #184]	; 0xb8
    1e36:	bl	4940 <Print::print(long)>
		_debugPort->print(packetLength);

		_debugPort->print(F(" Channel:"));
    1e3a:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1e3e:	ldr	r1, [pc, #232]	; (1f28 <BNO080::printPacket() [clone .part.6]+0x1c4>)
    1e40:	movs	r2, #9
    1e42:	ldr	r3, [r0, #0]
    1e44:	ldr	r3, [r3, #4]
    1e46:	blx	r3
		if (shtpHeader[2] == 0)
    1e48:	ldrb	r1, [r5, #2]
    1e4a:	cbz	r1, 1e78 <BNO080::printPacket() [clone .part.6]+0x114>
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
    1e4c:	cmp	r1, #1
    1e4e:	beq.n	1ed8 <BNO080::printPacket() [clone .part.6]+0x174>
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
    1e50:	cmp	r1, #2
    1e52:	beq.n	1ef2 <BNO080::printPacket() [clone .part.6]+0x18e>
			_debugPort->print(F("Control"));
		else if (shtpHeader[2] == 3)
    1e54:	cmp	r1, #3
    1e56:	beq.n	1e92 <BNO080::printPacket() [clone .part.6]+0x12e>
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
    1e58:	cmp	r1, #4
    1e5a:	beq.n	1f02 <BNO080::printPacket() [clone .part.6]+0x19e>
			_debugPort->print(F("Wake-report"));
		else if (shtpHeader[2] == 5)
    1e5c:	cmp	r1, #5
    1e5e:	beq.n	1ebe <BNO080::printPacket() [clone .part.6]+0x15a>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1e60:	movs	r3, #0
    1e62:	movs	r2, #10
    1e64:	ldr.w	r0, [r5, #184]	; 0xb8
    1e68:	bl	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1e6c:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
    1e70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1e74:	b.w	4890 <Print::println()>
		_debugPort->print(F(" Length:"));
		_debugPort->print(packetLength);

		_debugPort->print(F(" Channel:"));
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
    1e78:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1e7c:	movs	r2, #7
    1e7e:	ldr	r1, [pc, #172]	; (1f2c <BNO080::printPacket() [clone .part.6]+0x1c8>)
    1e80:	ldr	r3, [r0, #0]
    1e82:	ldr	r3, [r3, #4]
    1e84:	blx	r3
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1e86:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
    1e8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1e8e:	b.w	4890 <Print::println()>
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
			_debugPort->print(F("Control"));
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
    1e92:	ldr.w	r0, [r5, #184]	; 0xb8
    1e96:	movs	r2, #13
    1e98:	ldr	r1, [pc, #148]	; (1f30 <BNO080::printPacket() [clone .part.6]+0x1cc>)
    1e9a:	ldr	r3, [r0, #0]
    1e9c:	ldr	r3, [r3, #4]
    1e9e:	blx	r3
    1ea0:	b.n	1e6c <BNO080::printPacket() [clone .part.6]+0x108>
			_debugPort->print(shtpData[x], HEX);
		}

		if (packetLength & 1 << 15)
		{
			_debugPort->println(F(" [Continued packet] "));
    1ea2:	ldr.w	r4, [r5, #184]	; 0xb8
    1ea6:	movs	r2, #20
    1ea8:	ldr	r1, [pc, #136]	; (1f34 <BNO080::printPacket() [clone .part.6]+0x1d0>)
			packetLength &= ~(1 << 15);
    1eaa:	ubfx	r8, r8, #0, #15
    1eae:	ldr	r3, [r4, #0]
    1eb0:	mov	r0, r4
    1eb2:	ldr	r3, [r3, #4]
    1eb4:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1eb6:	mov	r0, r4
    1eb8:	bl	4890 <Print::println()>
    1ebc:	b.n	1e22 <BNO080::printPacket() [clone .part.6]+0xbe>
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
			_debugPort->print(F("Wake-report"));
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
    1ebe:	ldr.w	r0, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1ec2:	movs	r2, #11
    1ec4:	ldr	r1, [pc, #112]	; (1f38 <BNO080::printPacket() [clone .part.6]+0x1d4>)
    1ec6:	ldr	r3, [r0, #0]
    1ec8:	ldr	r3, [r3, #4]
    1eca:	blx	r3
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1ecc:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
    1ed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1ed4:	b.w	4890 <Print::println()>

		_debugPort->print(F(" Channel:"));
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
    1ed8:	ldr.w	r0, [r5, #184]	; 0xb8
    1edc:	movs	r2, #10
    1ede:	ldr	r1, [pc, #92]	; (1f3c <BNO080::printPacket() [clone .part.6]+0x1d8>)
    1ee0:	ldr	r3, [r0, #0]
    1ee2:	ldr	r3, [r3, #4]
    1ee4:	blx	r3
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1ee6:	ldr.w	r0, [r5, #184]	; 0xb8
	}
}
    1eea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		else if (shtpHeader[2] == 5)
			_debugPort->print(F("Gyro-vector"));
		else
			_debugPort->print(shtpHeader[2]);

		_debugPort->println();
    1eee:	b.w	4890 <Print::println()>
		if (shtpHeader[2] == 0)
			_debugPort->print(F("Command"));
		else if (shtpHeader[2] == 1)
			_debugPort->print(F("Executable"));
		else if (shtpHeader[2] == 2)
			_debugPort->print(F("Control"));
    1ef2:	ldr.w	r0, [r5, #184]	; 0xb8
    1ef6:	movs	r2, #7
    1ef8:	ldr	r1, [pc, #68]	; (1f40 <BNO080::printPacket() [clone .part.6]+0x1dc>)
    1efa:	ldr	r3, [r0, #0]
    1efc:	ldr	r3, [r3, #4]
    1efe:	blx	r3
    1f00:	b.n	1e6c <BNO080::printPacket() [clone .part.6]+0x108>
		else if (shtpHeader[2] == 3)
			_debugPort->print(F("Sensor-report"));
		else if (shtpHeader[2] == 4)
			_debugPort->print(F("Wake-report"));
    1f02:	ldr.w	r0, [r5, #184]	; 0xb8
    1f06:	movs	r2, #11
    1f08:	ldr	r1, [pc, #56]	; (1f44 <BNO080::printPacket() [clone .part.6]+0x1e0>)
    1f0a:	ldr	r3, [r0, #0]
    1f0c:	ldr	r3, [r3, #4]
    1f0e:	blx	r3
    1f10:	b.n	1e6c <BNO080::printPacket() [clone .part.6]+0x108>
    1f12:	nop
    1f14:	.word	0x200003f8
    1f18:	.word	0x20000400
    1f1c:	.word	0x20000408
    1f20:	.word	0x20000404
    1f24:	.word	0x20000428
    1f28:	.word	0x20000434
    1f2c:	.word	0x20000440
    1f30:	.word	0x2000045c
    1f34:	.word	0x20000410
    1f38:	.word	0x20000478
    1f3c:	.word	0x20000448
    1f40:	.word	0x20000454
    1f44:	.word	0x2000046c

00001f48 <BNO080::parseInputReport()>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080::parseInputReport(void)
{
    1f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
    1f4c:	ldrb	r2, [r0, #1]
    1f4e:	ldrb	r3, [r0, #0]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
    1f50:	ldr.w	r1, [r0, #5]
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080::parseInputReport(void)
{
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
    1f54:	orr.w	r3, r3, r2, lsl #8
	dataLength -= 4; //Remove the header bytes from the data count

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
    1f58:	ldrb	r2, [r0, #2]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
    1f5a:	str.w	r1, [r0, #256]	; 0x100

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
    1f5e:	cmp	r2, #5
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
    1f60:	ubfx	r3, r3, #0, #15

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
    1f64:	ldrb	r1, [r0, #8]
    1f66:	ldrb	r6, [r0, #7]
    1f68:	ldrb	r5, [r0, #6]
    1f6a:	ldrb	r4, [r0, #5]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
    1f6c:	beq.n	203a <BNO080::parseInputReport()+0xf2>
    1f6e:	subs	r3, #4
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];

		return;
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
    1f70:	ldrb.w	lr, [r0, #11]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
    1f74:	ldrb	r6, [r0, #14]
    1f76:	sxth	r3, r3
    1f78:	ldrb	r7, [r0, #13]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
    1f7a:	ldrb	r5, [r0, #15]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];

		return;
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
    1f7c:	and.w	r8, lr, #3
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
    1f80:	ldrb	r4, [r0, #16]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports

	if (dataLength - 5 > 9)
    1f82:	cmp	r3, #14
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
    1f84:	ldrb.w	r9, [r0, #18]

		return;
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
    1f88:	orr.w	ip, r7, r6, lsl #8
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
    1f8c:	ldrb	r2, [r0, #17]
		return;
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
    1f8e:	orr.w	r4, r5, r4, lsl #8
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
    1f92:	orr.w	r9, r2, r9, lsl #8
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports

	if (dataLength - 5 > 9)
    1f96:	bgt.n	1fee <BNO080::parseInputReport()+0xa6>

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
	uint16_t data4 = 0;
    1f98:	movs	r2, #0
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
    1f9a:	mov	r1, r2
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
    1f9c:	ldrb	r3, [r0, #9]
    1f9e:	cmp	r3, #1
    1fa0:	beq.n	200a <BNO080::parseInputReport()+0xc2>
		accelAccuracy = status;
		rawAccelX = data1;
		rawAccelY = data2;
		rawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
    1fa2:	cmp	r3, #4
    1fa4:	beq.n	208e <BNO080::parseInputReport()+0x146>
		accelLinAccuracy = status;
		rawLinAccelX = data1;
		rawLinAccelY = data2;
		rawLinAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
    1fa6:	cmp	r3, #2
    1fa8:	beq.n	20a2 <BNO080::parseInputReport()+0x15a>
		gyroAccuracy = status;
		rawGyroX = data1;
		rawGyroY = data2;
		rawGyroZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
    1faa:	cmp	r3, #3
    1fac:	beq.w	20b6 <BNO080::parseInputReport()+0x16e>
		rawMagY = data2;
		rawMagZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR ||
		shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR ||
		shtpData[5] == SENSOR_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR ||
    1fb0:	cmp	r3, #8
    1fb2:	it	ne
    1fb4:	cmpne	r3, #5
    1fb6:	beq.n	201e <BNO080::parseInputReport()+0xd6>
    1fb8:	sub.w	sl, r3, #40	; 0x28
    1fbc:	cmp.w	sl, #1
    1fc0:	bls.n	201e <BNO080::parseInputReport()+0xd6>

		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
	}
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
    1fc2:	cmp	r3, #17
    1fc4:	beq.w	20ca <BNO080::parseInputReport()+0x182>
	{
		stepCount = data3; //Bytes 8/9
	}
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
    1fc8:	cmp	r3, #19
    1fca:	beq.w	2108 <BNO080::parseInputReport()+0x1c0>
	{
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
	}
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
    1fce:	cmp	r3, #30
    1fd0:	beq.w	20e2 <BNO080::parseInputReport()+0x19a>

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
    1fd4:	cmp	r3, #20
    1fd6:	beq.w	2110 <BNO080::parseInputReport()+0x1c8>
	{
		memsRawAccelX = data1;
		memsRawAccelY = data2;
		memsRawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
    1fda:	cmp	r3, #21
    1fdc:	beq.w	2138 <BNO080::parseInputReport()+0x1f0>
	{
		memsRawGyroX = data1;
		memsRawGyroY = data2;
		memsRawGyroZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
    1fe0:	cmp	r3, #22
    1fe2:	beq.n	20d2 <BNO080::parseInputReport()+0x18a>
	{
		memsRawMagX = data1;
		memsRawMagY = data2;
		memsRawMagZ = data3;
	}
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
    1fe4:	cmp	r3, #241	; 0xf1
    1fe6:	beq.w	2120 <BNO080::parseInputReport()+0x1d8>
    1fea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports

	if (dataLength - 5 > 9)
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
    1fee:	ldrb	r1, [r0, #20]
	}
	if (dataLength - 5 > 11)
    1ff0:	cmp	r3, #16
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports

	if (dataLength - 5 > 9)
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
    1ff2:	ldrb	r2, [r0, #19]
    1ff4:	orr.w	r2, r2, r1, lsl #8
	}
	if (dataLength - 5 > 11)
    1ff8:	ble.w	2186 <BNO080::parseInputReport()+0x23e>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
    1ffc:	ldrb	r3, [r0, #21]
    1ffe:	ldrb	r1, [r0, #22]
    2000:	orr.w	r1, r3, r1, lsl #8
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
    2004:	ldrb	r3, [r0, #9]
    2006:	cmp	r3, #1
    2008:	bne.n	1fa2 <BNO080::parseInputReport()+0x5a>
	{
		accelAccuracy = status;
    200a:	strh.w	r8, [r0, #210]	; 0xd2
		rawAccelX = data1;
    200e:	strh.w	ip, [r0, #204]	; 0xcc
		rawAccelY = data2;
    2012:	strh.w	r4, [r0, #206]	; 0xce
		rawAccelZ = data3;
    2016:	strh.w	r9, [r0, #208]	; 0xd0
    201a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR ||
		shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR ||
		shtpData[5] == SENSOR_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR ||
		shtpData[5] == SENSOR_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR)
	{
		quatAccuracy = status;
    201e:	strh.w	r8, [r0, #246]	; 0xf6
		rawQuatI = data1;
    2022:	strh.w	ip, [r0, #236]	; 0xec
		rawQuatJ = data2;
    2026:	strh.w	r4, [r0, #238]	; 0xee
		rawQuatK = data3;
    202a:	strh.w	r9, [r0, #240]	; 0xf0
		rawQuatReal = data4;
    202e:	strh.w	r2, [r0, #242]	; 0xf2

		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
    2032:	strh.w	r1, [r0, #244]	; 0xf4
    2036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
    203a:	ldrb	r2, [r0, #4]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
    203c:	orr.w	r5, r5, r6, lsl #8
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
    2040:	ldrb	r3, [r0, #9]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
    2042:	orr.w	r4, r2, r4, lsl #8
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
    2046:	ldrb	r7, [r0, #11]
    2048:	ldrb	r2, [r0, #10]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
    204a:	orr.w	r1, r1, r3, lsl #8
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
    204e:	ldrb	r6, [r0, #13]
    2050:	ldrb	r3, [r0, #12]
	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
    2052:	orr.w	r7, r2, r7, lsl #8
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
    2056:	ldrb.w	ip, [r0, #15]
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
    205a:	orr.w	r6, r3, r6, lsl #8
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
    205e:	ldrb	r2, [r0, #14]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
    2060:	ldrb.w	lr, [r0, #17]
    2064:	ldrb	r3, [r0, #16]
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
    2066:	orr.w	r2, r2, ip, lsl #8
	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
    206a:	strh.w	r5, [r0, #238]	; 0xee
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
    206e:	orr.w	r3, r3, lr, lsl #8

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
    2072:	strh.w	r4, [r0, #236]	; 0xec
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
    2076:	strh.w	r1, [r0, #240]	; 0xf0
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
    207a:	strh.w	r7, [r0, #242]	; 0xf2
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
    207e:	strh.w	r6, [r0, #248]	; 0xf8
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
    2082:	strh.w	r2, [r0, #250]	; 0xfa
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
    2086:	strh.w	r3, [r0, #252]	; 0xfc

		return;
    208a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rawAccelY = data2;
		rawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
	{
		accelLinAccuracy = status;
    208e:	strh.w	r8, [r0, #218]	; 0xda
		rawLinAccelX = data1;
    2092:	strh.w	ip, [r0, #212]	; 0xd4
		rawLinAccelY = data2;
    2096:	strh.w	r4, [r0, #214]	; 0xd6
		rawLinAccelZ = data3;
    209a:	strh.w	r9, [r0, #216]	; 0xd8
    209e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
	{
		gyroAccuracy = status;
    20a2:	strh.w	r8, [r0, #226]	; 0xe2
		rawGyroX = data1;
    20a6:	strh.w	ip, [r0, #220]	; 0xdc
		rawGyroY = data2;
    20aa:	strh.w	r4, [r0, #222]	; 0xde
		rawGyroZ = data3;
    20ae:	strh.w	r9, [r0, #224]	; 0xe0
    20b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
	{
		magAccuracy = status;
    20b6:	strh.w	r8, [r0, #234]	; 0xea
		rawMagX = data1;
    20ba:	strh.w	ip, [r0, #228]	; 0xe4
		rawMagY = data2;
    20be:	strh.w	r4, [r0, #230]	; 0xe6
		rawMagZ = data3;
    20c2:	strh.w	r9, [r0, #232]	; 0xe8
    20c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
	}
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
	{
		stepCount = data3; //Bytes 8/9
    20ca:	strh.w	r9, [r0, #254]	; 0xfe
    20ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memsRawGyroY = data2;
		memsRawGyroZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
	{
		memsRawMagX = data1;
    20d2:	strh.w	ip, [r0, #282]	; 0x11a
		memsRawMagY = data2;
    20d6:	strh.w	r4, [r0, #284]	; 0x11c
		memsRawMagZ = data3;
    20da:	strh.w	r9, [r0, #286]	; 0x11e
    20de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20e2:	mvn.w	r1, #14
    20e6:	add.w	r2, r0, #15
    20ea:	add.w	r4, r0, #23
	{
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
	}
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
	{
		activityClassifier = shtpData[5 + 5]; //Most likely state
    20ee:	strb.w	r6, [r0, #261]	; 0x105
    20f2:	subs	r1, r1, r0
    20f4:	b.n	20fa <BNO080::parseInputReport()+0x1b2>
    20f6:	ldrb.w	r5, [r2, #1]!

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
    20fa:	ldr.w	r3, [r0, #264]	; 0x108
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
	{
		activityClassifier = shtpData[5 + 5]; //Most likely state

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
    20fe:	cmp	r2, r4
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
    2100:	add	r3, r2
    2102:	strb	r5, [r3, r1]
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
	{
		activityClassifier = shtpData[5 + 5]; //Most likely state

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
    2104:	bne.n	20f6 <BNO080::parseInputReport()+0x1ae>
    2106:	b.n	1fea <BNO080::parseInputReport()+0xa2>
	{
		stepCount = data3; //Bytes 8/9
	}
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
	{
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
    2108:	strb.w	r7, [r0, #260]	; 0x104
    210c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
	{
		memsRawAccelX = data1;
    2110:	strh.w	ip, [r0, #270]	; 0x10e
		memsRawAccelY = data2;
    2114:	strh.w	r4, [r0, #272]	; 0x110
		memsRawAccelZ = data3;
    2118:	strh.w	r9, [r0, #274]	; 0x112
    211c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memsRawMagY = data2;
		memsRawMagZ = data3;
	}
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
	{
		if (_printDebug == true)
    2120:	ldrb.w	r3, [r0, #188]	; 0xbc
    2124:	mov	r4, r0
    2126:	cbnz	r3, 2148 <BNO080::parseInputReport()+0x200>
			_debugPort->println(F("!"));
		}
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response

		if (command == COMMAND_ME_CALIBRATE)
    2128:	cmp.w	lr, #7
    212c:	bne.w	1fea <BNO080::parseInputReport()+0xa2>
		{
			if (_printDebug == true)
			{
				_debugPort->println(F("ME Cal report found!"));
			}
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
    2130:	strb.w	r6, [r4, #268]	; 0x10c
    2134:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memsRawAccelY = data2;
		memsRawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
	{
		memsRawGyroX = data1;
    2138:	strh.w	ip, [r0, #276]	; 0x114
		memsRawGyroY = data2;
    213c:	strh.w	r4, [r0, #278]	; 0x116
		memsRawGyroZ = data3;
    2140:	strh.w	r9, [r0, #280]	; 0x118
    2144:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
	{
		if (_printDebug == true)
		{
			_debugPort->println(F("!"));
    2148:	ldr.w	r5, [r0, #184]	; 0xb8
    214c:	movs	r2, #1
    214e:	ldr	r1, [pc, #60]	; (218c <BNO080::parseInputReport()+0x244>)
    2150:	ldr	r3, [r5, #0]
    2152:	mov	r0, r5
    2154:	ldr	r3, [r3, #4]
    2156:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2158:	mov	r0, r5
    215a:	bl	4890 <Print::println()>
		}
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response

		if (command == COMMAND_ME_CALIBRATE)
    215e:	ldrb	r3, [r4, #11]
    2160:	cmp	r3, #7
    2162:	bne.w	1fea <BNO080::parseInputReport()+0xa2>
		{
			if (_printDebug == true)
    2166:	ldrb.w	r3, [r4, #188]	; 0xbc
    216a:	cbz	r3, 2182 <BNO080::parseInputReport()+0x23a>
			{
				_debugPort->println(F("ME Cal report found!"));
    216c:	ldr.w	r5, [r4, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2170:	movs	r2, #20
    2172:	ldr	r1, [pc, #28]	; (2190 <BNO080::parseInputReport()+0x248>)
    2174:	ldr	r3, [r5, #0]
    2176:	mov	r0, r5
    2178:	ldr	r3, [r3, #4]
    217a:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    217c:	mov	r0, r5
    217e:	bl	4890 <Print::println()>
    2182:	ldrb	r6, [r4, #14]
    2184:	b.n	2130 <BNO080::parseInputReport()+0x1e8>
	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
    2186:	movs	r1, #0
    2188:	b.n	1f9c <BNO080::parseInputReport()+0x54>
    218a:	nop
    218c:	.word	0x20000484
    2190:	.word	0x20000488

00002194 <BNO080::getQuatI()>:
	return (yaw);
}

//Return the rotation vector quaternion I
float BNO080::getQuatI()
{
    2194:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2196:	ldrsh.w	r2, [r0, #236]	; 0xec
	qFloat *= pow(2, qPoint * -1);
    219a:	vmov.f64	d0, #0	; 0x40000000  2.0
    219e:	ldrb.w	r3, [r0, #288]	; 0x120

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    21a2:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    21a6:	negs	r3, r3
	return (yaw);
}

//Return the rotation vector quaternion I
float BNO080::getQuatI()
{
    21a8:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    21ac:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    21b0:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    21b4:	vcvt.f64.s32	d1, s2
    21b8:	bl	4cf0 <pow>

//Return the rotation vector quaternion I
float BNO080::getQuatI()
{
	float quat = qToFloat(rawQuatI, rotationVector_Q1);
	return (quat);
    21bc:	vcvt.f64.f32	d7, s16
}
    21c0:	vpop	{d8}

//Return the rotation vector quaternion I
float BNO080::getQuatI()
{
	float quat = qToFloat(rawQuatI, rotationVector_Q1);
	return (quat);
    21c4:	vmul.f64	d0, d7, d0
}
    21c8:	vcvt.f32.f64	s0, d0
    21cc:	pop	{r3, pc}
    21ce:	nop

000021d0 <BNO080::getQuatJ()>:

//Return the rotation vector quaternion J
float BNO080::getQuatJ()
{
    21d0:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    21d2:	ldrsh.w	r2, [r0, #238]	; 0xee
	qFloat *= pow(2, qPoint * -1);
    21d6:	vmov.f64	d0, #0	; 0x40000000  2.0
    21da:	ldrb.w	r3, [r0, #288]	; 0x120

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    21de:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    21e2:	negs	r3, r3
	return (quat);
}

//Return the rotation vector quaternion J
float BNO080::getQuatJ()
{
    21e4:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    21e8:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    21ec:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    21f0:	vcvt.f64.s32	d1, s2
    21f4:	bl	4cf0 <pow>

//Return the rotation vector quaternion J
float BNO080::getQuatJ()
{
	float quat = qToFloat(rawQuatJ, rotationVector_Q1);
	return (quat);
    21f8:	vcvt.f64.f32	d7, s16
}
    21fc:	vpop	{d8}

//Return the rotation vector quaternion J
float BNO080::getQuatJ()
{
	float quat = qToFloat(rawQuatJ, rotationVector_Q1);
	return (quat);
    2200:	vmul.f64	d0, d7, d0
}
    2204:	vcvt.f32.f64	s0, d0
    2208:	pop	{r3, pc}
    220a:	nop

0000220c <BNO080::getQuatK()>:

//Return the rotation vector quaternion K
float BNO080::getQuatK()
{
    220c:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    220e:	ldrsh.w	r2, [r0, #240]	; 0xf0
	qFloat *= pow(2, qPoint * -1);
    2212:	vmov.f64	d0, #0	; 0x40000000  2.0
    2216:	ldrb.w	r3, [r0, #288]	; 0x120

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    221a:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    221e:	negs	r3, r3
	return (quat);
}

//Return the rotation vector quaternion K
float BNO080::getQuatK()
{
    2220:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    2224:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2228:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    222c:	vcvt.f64.s32	d1, s2
    2230:	bl	4cf0 <pow>

//Return the rotation vector quaternion K
float BNO080::getQuatK()
{
	float quat = qToFloat(rawQuatK, rotationVector_Q1);
	return (quat);
    2234:	vcvt.f64.f32	d7, s16
}
    2238:	vpop	{d8}

//Return the rotation vector quaternion K
float BNO080::getQuatK()
{
	float quat = qToFloat(rawQuatK, rotationVector_Q1);
	return (quat);
    223c:	vmul.f64	d0, d7, d0
}
    2240:	vcvt.f32.f64	s0, d0
    2244:	pop	{r3, pc}
    2246:	nop

00002248 <BNO080::getQuatReal()>:

//Return the rotation vector quaternion Real
float BNO080::getQuatReal()
{
    2248:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    224a:	ldrsh.w	r2, [r0, #242]	; 0xf2
	qFloat *= pow(2, qPoint * -1);
    224e:	vmov.f64	d0, #0	; 0x40000000  2.0
    2252:	ldrb.w	r3, [r0, #288]	; 0x120

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2256:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    225a:	negs	r3, r3
	return (quat);
}

//Return the rotation vector quaternion Real
float BNO080::getQuatReal()
{
    225c:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    2260:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2264:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    2268:	vcvt.f64.s32	d1, s2
    226c:	bl	4cf0 <pow>

//Return the rotation vector quaternion Real
float BNO080::getQuatReal()
{
	float quat = qToFloat(rawQuatReal, rotationVector_Q1);
	return (quat);
    2270:	vcvt.f64.f32	d7, s16
}
    2274:	vpop	{d8}

//Return the rotation vector quaternion Real
float BNO080::getQuatReal()
{
	float quat = qToFloat(rawQuatReal, rotationVector_Q1);
	return (quat);
    2278:	vmul.f64	d0, d7, d0
}
    227c:	vcvt.f32.f64	s0, d0
    2280:	pop	{r3, pc}
    2282:	nop

00002284 <BNO080::getQuatRadianAccuracy()>:

//Return the rotation vector accuracy
float BNO080::getQuatRadianAccuracy()
{
    2284:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2286:	ldrsh.w	r2, [r0, #244]	; 0xf4
	qFloat *= pow(2, qPoint * -1);
    228a:	vmov.f64	d0, #0	; 0x40000000  2.0
    228e:	ldrb.w	r3, [r0, #290]	; 0x122

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2292:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    2296:	negs	r3, r3
	return (quat);
}

//Return the rotation vector accuracy
float BNO080::getQuatRadianAccuracy()
{
    2298:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    229c:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    22a0:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    22a4:	vcvt.f64.s32	d1, s2
    22a8:	bl	4cf0 <pow>

//Return the rotation vector accuracy
float BNO080::getQuatRadianAccuracy()
{
	float quat = qToFloat(rawQuatRadianAccuracy, rotationVectorAccuracy_Q1);
	return (quat);
    22ac:	vcvt.f64.f32	d7, s16
}
    22b0:	vpop	{d8}

//Return the rotation vector accuracy
float BNO080::getQuatRadianAccuracy()
{
	float quat = qToFloat(rawQuatRadianAccuracy, rotationVectorAccuracy_Q1);
	return (quat);
    22b4:	vmul.f64	d0, d7, d0
}
    22b8:	vcvt.f32.f64	s0, d0
    22bc:	pop	{r3, pc}
    22be:	nop

000022c0 <BNO080::getGyroX()>:
	return (accelLinAccuracy);
}

//Return the gyro component
float BNO080::getGyroX()
{
    22c0:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    22c2:	ldrsh.w	r2, [r0, #220]	; 0xdc
	qFloat *= pow(2, qPoint * -1);
    22c6:	vmov.f64	d0, #0	; 0x40000000  2.0
    22ca:	ldrb.w	r3, [r0, #296]	; 0x128

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    22ce:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    22d2:	negs	r3, r3
	return (accelLinAccuracy);
}

//Return the gyro component
float BNO080::getGyroX()
{
    22d4:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    22d8:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    22dc:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    22e0:	vcvt.f64.s32	d1, s2
    22e4:	bl	4cf0 <pow>

//Return the gyro component
float BNO080::getGyroX()
{
	float gyro = qToFloat(rawGyroX, gyro_Q1);
	return (gyro);
    22e8:	vcvt.f64.f32	d7, s16
}
    22ec:	vpop	{d8}

//Return the gyro component
float BNO080::getGyroX()
{
	float gyro = qToFloat(rawGyroX, gyro_Q1);
	return (gyro);
    22f0:	vmul.f64	d0, d7, d0
}
    22f4:	vcvt.f32.f64	s0, d0
    22f8:	pop	{r3, pc}
    22fa:	nop

000022fc <BNO080::getGyroY()>:

//Return the gyro component
float BNO080::getGyroY()
{
    22fc:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    22fe:	ldrsh.w	r2, [r0, #222]	; 0xde
	qFloat *= pow(2, qPoint * -1);
    2302:	vmov.f64	d0, #0	; 0x40000000  2.0
    2306:	ldrb.w	r3, [r0, #296]	; 0x128

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    230a:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    230e:	negs	r3, r3
	return (gyro);
}

//Return the gyro component
float BNO080::getGyroY()
{
    2310:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    2314:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2318:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    231c:	vcvt.f64.s32	d1, s2
    2320:	bl	4cf0 <pow>

//Return the gyro component
float BNO080::getGyroY()
{
	float gyro = qToFloat(rawGyroY, gyro_Q1);
	return (gyro);
    2324:	vcvt.f64.f32	d7, s16
}
    2328:	vpop	{d8}

//Return the gyro component
float BNO080::getGyroY()
{
	float gyro = qToFloat(rawGyroY, gyro_Q1);
	return (gyro);
    232c:	vmul.f64	d0, d7, d0
}
    2330:	vcvt.f32.f64	s0, d0
    2334:	pop	{r3, pc}
    2336:	nop

00002338 <BNO080::getGyroZ()>:

//Return the gyro component
float BNO080::getGyroZ()
{
    2338:	push	{r3, lr}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    233a:	ldrsh.w	r2, [r0, #224]	; 0xe0
	qFloat *= pow(2, qPoint * -1);
    233e:	vmov.f64	d0, #0	; 0x40000000  2.0
    2342:	ldrb.w	r3, [r0, #296]	; 0x128

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2346:	vmov	s14, r2
	qFloat *= pow(2, qPoint * -1);
    234a:	negs	r3, r3
	return (gyro);
}

//Return the gyro component
float BNO080::getGyroZ()
{
    234c:	vpush	{d8}
//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
	qFloat *= pow(2, qPoint * -1);
    2350:	vmov	s2, r3

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080::qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
	float qFloat = fixedPointValue;
    2354:	vcvt.f32.s32	s16, s14
	qFloat *= pow(2, qPoint * -1);
    2358:	vcvt.f64.s32	d1, s2
    235c:	bl	4cf0 <pow>

//Return the gyro component
float BNO080::getGyroZ()
{
	float gyro = qToFloat(rawGyroZ, gyro_Q1);
	return (gyro);
    2360:	vcvt.f64.f32	d7, s16
}
    2364:	vpop	{d8}

//Return the gyro component
float BNO080::getGyroZ()
{
	float gyro = qToFloat(rawGyroZ, gyro_Q1);
	return (gyro);
    2368:	vmul.f64	d0, d7, d0
}
    236c:	vcvt.f32.f64	s0, d0
    2370:	pop	{r3, pc}
    2372:	nop

00002374 <BNO080::waitForI2C()>:
}

//Wait a certain time for incoming I2C bytes before giving up
//Returns false if failed
boolean BNO080::waitForI2C()
{
    2374:	push	{r4, r5, r6, lr}
    2376:	mov	r5, r0
    2378:	movs	r4, #100	; 0x64
    237a:	ldr	r6, [pc, #92]	; (23d8 <BNO080::waitForI2C()+0x64>)
    237c:	b.n	239a <BNO080::waitForI2C()+0x26>
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    237e:	ldrb.w	r3, [r0, #59]	; 0x3b
    2382:	ldrb.w	r2, [r0, #58]	; 0x3a
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
			return (true);
		delay(1);
    2386:	movs	r0, #1
    2388:	subs	r3, r3, r2
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
    238a:	cmp	r3, #0
    238c:	bgt.n	23b0 <BNO080::waitForI2C()+0x3c>
			return (true);
		delay(1);
    238e:	bl	40ec <delay>
    2392:	subs	r3, r4, #1

//Wait a certain time for incoming I2C bytes before giving up
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
    2394:	ands.w	r4, r3, #255	; 0xff
    2398:	beq.n	23b4 <BNO080::waitForI2C()+0x40>
	{
		if (_i2cPort->available() > 0)
    239a:	ldr.w	r0, [r5, #176]	; 0xb0
    239e:	ldr	r3, [r0, #0]
    23a0:	ldr	r3, [r3, #16]
    23a2:	cmp	r3, r6
    23a4:	beq.n	237e <BNO080::waitForI2C()+0xa>
    23a6:	blx	r3
    23a8:	mov	r3, r0
			return (true);
		delay(1);
    23aa:	movs	r0, #1
//Returns false if failed
boolean BNO080::waitForI2C()
{
	for (uint8_t counter = 0; counter < 100; counter++) //Don't got more than 255
	{
		if (_i2cPort->available() > 0)
    23ac:	cmp	r3, #0
    23ae:	ble.n	238e <BNO080::waitForI2C()+0x1a>
			return (true);
    23b0:	movs	r0, #1
	}

	if (_printDebug == true)
		_debugPort->println(F("I2C timeout"));
	return (false);
}
    23b2:	pop	{r4, r5, r6, pc}
		if (_i2cPort->available() > 0)
			return (true);
		delay(1);
	}

	if (_printDebug == true)
    23b4:	ldrb.w	r0, [r5, #188]	; 0xbc
    23b8:	cmp	r0, #0
    23ba:	beq.n	23b2 <BNO080::waitForI2C()+0x3e>
		_debugPort->println(F("I2C timeout"));
    23bc:	ldr.w	r5, [r5, #184]	; 0xb8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    23c0:	movs	r2, #11
    23c2:	ldr	r1, [pc, #24]	; (23dc <BNO080::waitForI2C()+0x68>)
    23c4:	ldr	r3, [r5, #0]
    23c6:	mov	r0, r5
    23c8:	ldr	r3, [r3, #4]
    23ca:	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    23cc:	mov	r0, r5
    23ce:	bl	4890 <Print::println()>
    23d2:	mov	r0, r4
    23d4:	pop	{r4, r5, r6, pc}
    23d6:	nop
    23d8:	.word	0x00001cd1
    23dc:	.word	0x200004a0

000023e0 <BNO080::getData(unsigned short)>:
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
    23e0:	cmp	r1, #0
    23e2:	beq.w	2526 <BNO080::getData(unsigned short)+0x146>

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
boolean BNO080::getData(uint16_t bytesRemaining)
{
    23e6:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23ea:	mov	r6, r0
    23ec:	mov	r9, r1
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
    23ee:	movs	r5, #0
    23f0:	ldr	r7, [pc, #312]	; (252c <BNO080::getData(unsigned short)+0x14c>)
    23f2:	cmp.w	r9, #28
    23f6:	mov	r8, r9
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    23f8:	mov.w	r3, #1
    23fc:	ldrb.w	r1, [r6, #180]	; 0xb4
    2400:	it	cs
    2402:	movcs.w	r8, #28
    2406:	ldr.w	r0, [r6, #176]	; 0xb0
    240a:	add.w	r2, r8, #4
    240e:	uxtb	r2, r2
    2410:	bl	2a58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		uint16_t numberOfBytesToRead = bytesRemaining;
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);

		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
		if (waitForI2C() == false)
    2414:	mov	r0, r6
    2416:	bl	2374 <BNO080::waitForI2C()>
    241a:	cmp	r0, #0
    241c:	beq.w	2522 <BNO080::getData(unsigned short)+0x142>
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
    2420:	ldr.w	r0, [r6, #176]	; 0xb0
    2424:	ldr	r3, [r0, #0]
    2426:	ldr	r3, [r3, #20]
    2428:	cmp	r3, r7
    242a:	bne.n	2516 <BNO080::getData(unsigned short)+0x136>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    242c:	ldrb.w	r2, [r0, #58]	; 0x3a
    2430:	ldrb.w	r1, [r0, #59]	; 0x3b
    2434:	cmp	r1, r2
    2436:	bls.n	2446 <BNO080::getData(unsigned short)+0x66>
		return rxBuffer[rxBufferIndex++];
    2438:	adds	r2, #1
    243a:	strb.w	r2, [r0, #58]	; 0x3a
    243e:	ldr.w	r0, [r6, #176]	; 0xb0
    2442:	ldr	r3, [r0, #0]
    2444:	ldr	r3, [r3, #20]
    2446:	cmp	r3, r7
    2448:	bne.n	250a <BNO080::getData(unsigned short)+0x12a>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    244a:	ldrb.w	r2, [r0, #58]	; 0x3a
    244e:	ldrb.w	r1, [r0, #59]	; 0x3b
    2452:	cmp	r1, r2
    2454:	bls.n	24fa <BNO080::getData(unsigned short)+0x11a>
		return rxBuffer[rxBufferIndex++];
    2456:	adds	r2, #1
    2458:	strb.w	r2, [r0, #58]	; 0x3a
    245c:	ldr.w	r0, [r6, #176]	; 0xb0
    2460:	ldr	r3, [r0, #0]
    2462:	ldr	r3, [r3, #20]
    2464:	cmp	r3, r7
    2466:	bne.n	2506 <BNO080::getData(unsigned short)+0x126>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2468:	ldrb.w	r2, [r0, #58]	; 0x3a
    246c:	ldrb.w	r1, [r0, #59]	; 0x3b
    2470:	cmp	r1, r2
    2472:	bls.n	24fa <BNO080::getData(unsigned short)+0x11a>
		return rxBuffer[rxBufferIndex++];
    2474:	adds	r2, #1
    2476:	strb.w	r2, [r0, #58]	; 0x3a
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
    247a:	ldr.w	r0, [r6, #176]	; 0xb0
    247e:	ldr	r3, [r0, #0]
    2480:	ldr	r3, [r3, #20]
    2482:	cmp	r3, r7
    2484:	bne.n	24fe <BNO080::getData(unsigned short)+0x11e>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2486:	ldrb.w	r3, [r0, #58]	; 0x3a
    248a:	ldrb.w	r2, [r0, #59]	; 0x3b
    248e:	cmp	r2, r3
    2490:	bls.n	249c <BNO080::getData(unsigned short)+0xbc>
		return rxBuffer[rxBufferIndex++];
    2492:	adds	r3, #1
    2494:	strb.w	r3, [r0, #58]	; 0x3a
    2498:	ldr.w	r0, [r6, #176]	; 0xb0
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
    249c:	movs	r4, #0
    249e:	b.n	24d4 <BNO080::getData(unsigned short)+0xf4>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    24a0:	ldrb.w	r3, [r0, #58]	; 0x3a
    24a4:	ldrb.w	r2, [r0, #59]	; 0x3b
		return rxBuffer[rxBufferIndex++];
    24a8:	add.w	lr, r3, #1
    24ac:	adds	r1, r0, r3
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    24ae:	cmp	r2, r3
    24b0:	bls.n	24f6 <BNO080::getData(unsigned short)+0x116>
		return rxBuffer[rxBufferIndex++];
    24b2:	strb.w	lr, [r0, #58]	; 0x3a
    24b6:	ldrb	r0, [r1, #26]
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
    24b8:	adds	r4, #1
		{
			uint8_t incoming = _i2cPort->read();
			if (dataSpot < MAX_PACKET_SIZE)
    24ba:	cmp	r5, #127	; 0x7f
			{
				shtpData[dataSpot++] = incoming; //Store data into the shtpData array
    24bc:	add.w	r2, r5, #1
    24c0:	add.w	r3, r6, r5
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
    24c4:	uxtb	r4, r4
		{
			uint8_t incoming = _i2cPort->read();
			if (dataSpot < MAX_PACKET_SIZE)
    24c6:	bhi.n	24cc <BNO080::getData(unsigned short)+0xec>
			{
				shtpData[dataSpot++] = incoming; //Store data into the shtpData array
    24c8:	uxth	r5, r2
    24ca:	strb	r0, [r3, #4]
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();

		for (uint8_t x = 0; x < numberOfBytesToRead; x++)
    24cc:	cmp	r4, r8
    24ce:	bcs.n	24e2 <BNO080::getData(unsigned short)+0x102>
    24d0:	ldr.w	r0, [r6, #176]	; 0xb0
		{
			uint8_t incoming = _i2cPort->read();
    24d4:	ldr	r3, [r0, #0]
    24d6:	ldr	r3, [r3, #20]
    24d8:	cmp	r3, r7
    24da:	beq.n	24a0 <BNO080::getData(unsigned short)+0xc0>
    24dc:	blx	r3
    24de:	uxtb	r0, r0
    24e0:	b.n	24b8 <BNO080::getData(unsigned short)+0xd8>
			{
				//Do nothing with the data
			}
		}

		bytesRemaining -= numberOfBytesToRead;
    24e2:	rsb	r9, r8, r9
    24e6:	uxth.w	r9, r9
boolean BNO080::getData(uint16_t bytesRemaining)
{
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array

	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
    24ea:	cmp.w	r9, #0
    24ee:	bne.n	23f2 <BNO080::getData(unsigned short)+0x12>
			}
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
    24f0:	movs	r0, #1
    24f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    24f6:	movs	r0, #255	; 0xff
    24f8:	b.n	24b8 <BNO080::getData(unsigned short)+0xd8>
    24fa:	cmp	r3, r7
    24fc:	beq.n	249c <BNO080::getData(unsigned short)+0xbc>

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
    24fe:	blx	r3
    2500:	ldr.w	r0, [r6, #176]	; 0xb0
    2504:	b.n	249c <BNO080::getData(unsigned short)+0xbc>
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
		_i2cPort->read();
    2506:	blx	r3
    2508:	b.n	247a <BNO080::getData(unsigned short)+0x9a>
		if (waitForI2C() == false)
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
		_i2cPort->read();
    250a:	blx	r3
    250c:	ldr.w	r0, [r6, #176]	; 0xb0
    2510:	ldr	r3, [r0, #0]
    2512:	ldr	r3, [r3, #20]
    2514:	b.n	2464 <BNO080::getData(unsigned short)+0x84>
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
		if (waitForI2C() == false)
			return (0); //Error

		//The first four bytes are header bytes and are throw away
		_i2cPort->read();
    2516:	blx	r3
    2518:	ldr.w	r0, [r6, #176]	; 0xb0
    251c:	ldr	r3, [r0, #0]
    251e:	ldr	r3, [r3, #20]
    2520:	b.n	2446 <BNO080::getData(unsigned short)+0x66>
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
}
    2522:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}

		bytesRemaining -= numberOfBytesToRead;
	}
	return (true); //Done!
    2526:	movs	r0, #1
}
    2528:	bx	lr
    252a:	nop
    252c:	.word	0x00001cdd

00002530 <BNO080::receivePacket()>:
}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
boolean BNO080::receivePacket(void)
{
    2530:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2534:	mov	r4, r0
	if (_i2cPort == NULL) //Do SPI
    2536:	ldr.w	r0, [r0, #176]	; 0xb0
    253a:	cmp	r0, #0
    253c:	beq.n	2632 <BNO080::receivePacket()+0x102>
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    253e:	movs	r3, #1
    2540:	movs	r2, #4
    2542:	ldrb.w	r1, [r4, #180]	; 0xb4
    2546:	bl	2a58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		printPacket();
	}
	else //Do I2C
	{
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
    254a:	mov	r0, r4
    254c:	bl	2374 <BNO080::waitForI2C()>
    2550:	mov	r5, r0
    2552:	cbnz	r0, 255c <BNO080::receivePacket()+0x2c>
boolean BNO080::receivePacket(void)
{
	if (_i2cPort == NULL) //Do SPI
	{
		if (digitalRead(_int) == HIGH)
			return (false); //Data is not available
    2554:	movs	r5, #0

		getData(dataLength);
	}

	return (true); //We're done!
}
    2556:	mov	r0, r5
    2558:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
    255c:	ldr.w	r3, [r4, #176]	; 0xb0
    2560:	ldr	r7, [pc, #592]	; (27b4 <BNO080::receivePacket()+0x284>)
    2562:	ldr	r2, [r3, #0]
    2564:	ldr	r2, [r2, #20]
    2566:	cmp	r2, r7
    2568:	bne.w	2772 <BNO080::receivePacket()+0x242>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    256c:	ldrb.w	r1, [r3, #58]	; 0x3a
    2570:	ldrb.w	r0, [r3, #59]	; 0x3b
    2574:	cmp	r0, r1
    2576:	bls.w	286a <BNO080::receivePacket()+0x33a>
		return rxBuffer[rxBufferIndex++];
    257a:	adds	r2, r1, #1
    257c:	add	r1, r3
    257e:	strb.w	r2, [r3, #58]	; 0x3a
    2582:	ldr.w	r3, [r4, #176]	; 0xb0
    2586:	ldrb.w	r9, [r1, #26]
    258a:	ldr	r2, [r3, #0]
    258c:	sxth.w	sl, r9
    2590:	ldr	r2, [r2, #20]
    2592:	cmp	r2, r7
    2594:	bne.w	2788 <BNO080::receivePacket()+0x258>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2598:	ldrb.w	r0, [r3, #58]	; 0x3a
    259c:	ldrb.w	r1, [r3, #59]	; 0x3b
    25a0:	cmp	r1, r0
    25a2:	bls.w	2872 <BNO080::receivePacket()+0x342>
		return rxBuffer[rxBufferIndex++];
    25a6:	adds	r2, r0, #1
    25a8:	add	r0, r3
    25aa:	strb.w	r2, [r3, #58]	; 0x3a
    25ae:	ldrb.w	fp, [r0, #26]
    25b2:	ldr.w	r3, [r4, #176]	; 0xb0
    25b6:	mov.w	r1, fp, lsl #8
    25ba:	ldr	r2, [r3, #0]
    25bc:	sxth	r6, r1
    25be:	ldr	r2, [r2, #20]
    25c0:	cmp	r2, r7
    25c2:	bne.w	27aa <BNO080::receivePacket()+0x27a>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    25c6:	ldrb.w	r1, [r3, #58]	; 0x3a
    25ca:	ldrb.w	r0, [r3, #59]	; 0x3b
    25ce:	cmp	r0, r1
    25d0:	bls.w	287a <BNO080::receivePacket()+0x34a>
		return rxBuffer[rxBufferIndex++];
    25d4:	adds	r2, r1, #1
    25d6:	add	r1, r3
    25d8:	strb.w	r2, [r3, #58]	; 0x3a
    25dc:	ldrb	r0, [r1, #26]
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
    25de:	ldr.w	r3, [r4, #176]	; 0xb0
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
    25e2:	uxtb.w	r8, r0
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
    25e6:	ldr	r2, [r3, #0]
    25e8:	ldr	r2, [r2, #20]
    25ea:	cmp	r2, r7
    25ec:	bne.w	27a2 <BNO080::receivePacket()+0x272>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    25f0:	ldrb.w	r2, [r3, #58]	; 0x3a
    25f4:	ldrb.w	r1, [r3, #59]	; 0x3b
    25f8:	cmp	r1, r2
    25fa:	bls.w	2884 <BNO080::receivePacket()+0x354>
		return rxBuffer[rxBufferIndex++];
    25fe:	adds	r1, r2, #1
    2600:	add	r2, r3
    2602:	strb.w	r1, [r3, #58]	; 0x3a
    2606:	ldrb	r0, [r2, #26]
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
    2608:	orr.w	r1, r6, sl
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not

		//Store the header info.
		shtpHeader[0] = packetLSB;
    260c:	strb.w	r9, [r4]
		shtpHeader[1] = packetMSB;
    2610:	strb.w	fp, [r4, #1]
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
    2614:	ubfx	r1, r1, #0, #15
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not

		//Store the header info.
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
    2618:	strb.w	r8, [r4, #2]
		shtpHeader[3] = sequenceNumber;
    261c:	strb	r0, [r4, #3]
		//Calculate the number of data bytes in this packet
		int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
    261e:	cmp	r1, #0
    2620:	beq.n	2554 <BNO080::receivePacket()+0x24>
			//Packet is empty
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count

		getData(dataLength);
    2622:	subs	r1, #4
    2624:	mov	r0, r4
    2626:	uxth	r1, r1
    2628:	bl	23e0 <BNO080::getData(unsigned short)>
	}

	return (true); //We're done!
}
    262c:	mov	r0, r5
    262e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
//Read the contents of the incoming packet into the shtpData array
boolean BNO080::receivePacket(void)
{
	if (_i2cPort == NULL) //Do SPI
	{
		if (digitalRead(_int) == HIGH)
    2632:	ldrb.w	r0, [r4, #202]	; 0xca
    2636:	bl	44e0 <digitalRead>
    263a:	cmp	r0, #1
    263c:	beq.n	2554 <BNO080::receivePacket()+0x24>

		//Old way: if (waitForSPI() == false) return (false); //Something went wrong

		//Get first four bytes to find out how much data we need to read

		_spiPort->beginTransaction(SPISettings(_spiPortSpeed, MSBFIRST, SPI_MODE3));
    263e:	ldr.w	r3, [r4, #192]	; 0xc0
    2642:	ldr.w	r0, [r4, #196]	; 0xc4

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2646:	ldrb	r2, [r3, #19]
    2648:	cmp	r2, #0
    264a:	beq.n	26aa <BNO080::receivePacket()+0x17a>
			__disable_irq();
    264c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    264e:	ldrb	r2, [r3, #19]
    2650:	lsls	r7, r2, #31
    2652:	bpl.n	2662 <BNO080::receivePacket()+0x132>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2654:	ldr	r1, [pc, #352]	; (27b8 <BNO080::receivePacket()+0x288>)
    2656:	ldr	r2, [r3, #20]
    2658:	ldr	r5, [r1, #0]
    265a:	ands	r2, r5
    265c:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    265e:	str	r2, [r1, #0]
    2660:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    2662:	lsls	r6, r2, #30
    2664:	bpl.n	2674 <BNO080::receivePacket()+0x144>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2666:	ldr	r1, [pc, #340]	; (27bc <BNO080::receivePacket()+0x28c>)
    2668:	ldr	r2, [r3, #24]
    266a:	ldr	r5, [r1, #0]
    266c:	ands	r2, r5
    266e:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2670:	str	r2, [r1, #0]
    2672:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    2674:	lsls	r5, r2, #29
    2676:	bpl.n	2686 <BNO080::receivePacket()+0x156>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2678:	ldr	r1, [pc, #324]	; (27c0 <BNO080::receivePacket()+0x290>)
    267a:	ldr	r2, [r3, #28]
    267c:	ldr	r5, [r1, #0]
    267e:	ands	r2, r5
    2680:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2682:	str	r2, [r1, #0]
    2684:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    2686:	lsls	r1, r2, #28
    2688:	bpl.n	2698 <BNO080::receivePacket()+0x168>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    268a:	ldr	r1, [pc, #312]	; (27c4 <BNO080::receivePacket()+0x294>)
    268c:	ldr	r2, [r3, #32]
    268e:	ldr	r5, [r1, #0]
    2690:	ands	r2, r5
    2692:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2694:	str	r2, [r1, #0]
    2696:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    2698:	lsls	r7, r2, #27
    269a:	bpl.n	26a8 <BNO080::receivePacket()+0x178>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    269c:	ldr	r1, [pc, #296]	; (27c8 <BNO080::receivePacket()+0x298>)
    269e:	ldr	r2, [r3, #36]	; 0x24
    26a0:	ldr	r5, [r1, #0]
    26a2:	ands	r2, r5
    26a4:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    26a6:	str	r2, [r1, #0]
			}
			__enable_irq();
    26a8:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    26aa:	ldr	r2, [r3, #8]
    26ac:	cmp	r0, r2
    26ae:	beq.w	285e <BNO080::receivePacket()+0x32e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    26b2:	ldr	r2, [pc, #280]	; (27cc <BNO080::receivePacket()+0x29c>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    26b4:	str	r0, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    26b6:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    26b8:	ldr	r1, [pc, #276]	; (27d0 <BNO080::receivePacket()+0x2a0>)
    26ba:	ubfx	r5, r2, #4, #2
    26be:	ubfx	r2, r2, #26, #3
    26c2:	ldr.w	r1, [r1, r5, lsl #2]
    26c6:	adds	r2, #1
    26c8:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    26cc:	cmp	r0, #0
    26ce:	beq.n	27b0 <BNO080::receivePacket()+0x280>
    26d0:	udiv	r2, r1, r0

			if (d && clkhz/d > _clock) d++;
    26d4:	cbz	r2, 26ec <BNO080::receivePacket()+0x1bc>
    26d6:	udiv	r1, r1, r2
    26da:	cmp	r0, r1
    26dc:	it	cc
    26de:	addcc	r2, #1
			if (d > 257) d= 257;  // max div
    26e0:	cmp.w	r2, #258	; 0x102
    26e4:	bcc.w	2888 <BNO080::receivePacket()+0x358>
    26e8:	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    26ec:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    26ee:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    26f0:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    26f2:	movs	r1, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    26f4:	ldr	r6, [pc, #220]	; (27d4 <BNO080::receivePacket()+0x2a4>)
		port().CR = LPSPI_CR_MEN;
    26f6:	movs	r0, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    26f8:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    26fa:	str	r1, [r3, #36]	; 0x24
		digitalWrite(_cs, LOW);
    26fc:	mov	r1, r5
		port().CCR = _ccr;
    26fe:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2700:	str	r6, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2702:	str	r0, [r3, #16]
    2704:	ldrb.w	r0, [r4, #200]	; 0xc8
    2708:	bl	44d4 <digitalWrite>

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _spiPort->transfer(0);
    270c:	ldr.w	r6, [r4, #192]	; 0xc0
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2710:	ldr	r3, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2712:	str	r5, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2714:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2716:	tst.w	r2, #2031616	; 0x1f0000
    271a:	beq.n	2714 <BNO080::receivePacket()+0x1e4>
    271c:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    271e:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    2720:	uxtb	r1, r1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2722:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2724:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2726:	tst.w	r2, #2031616	; 0x1f0000
    272a:	beq.n	2724 <BNO080::receivePacket()+0x1f4>
    272c:	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    272e:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    2730:	uxtb	r7, r5
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2732:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2734:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2736:	tst.w	r2, #2031616	; 0x1f0000
    273a:	beq.n	2734 <BNO080::receivePacket()+0x204>
    273c:	ldr	r0, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    273e:	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    2740:	uxtb	r0, r0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2742:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2744:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2746:	tst.w	r2, #2031616	; 0x1f0000
    274a:	beq.n	2744 <BNO080::receivePacket()+0x214>
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
    274c:	lsls	r5, r5, #8
    274e:	ldr	r3, [r3, #116]	; 0x74
		uint8_t packetMSB = _spiPort->transfer(0);
		uint8_t channelNumber = _spiPort->transfer(0);
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
    2750:	strb	r1, [r4, #0]
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;

		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
    2752:	and.w	r5, r5, #32512	; 0x7f00

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
		shtpHeader[3] = sequenceNumber;
    2756:	strb	r3, [r4, #3]
		uint8_t channelNumber = _spiPort->transfer(0);
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
    2758:	strb	r7, [r4, #1]
		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
    275a:	orrs	r5, r1
		uint8_t sequenceNumber = _spiPort->transfer(0); //Not sure if we need to store this or not

		//Store the header info
		shtpHeader[0] = packetLSB;
		shtpHeader[1] = packetMSB;
		shtpHeader[2] = channelNumber;
    275c:	strb	r0, [r4, #2]
		//Calculate the number of data bytes in this packet
		uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
		dataLength &= ~(1 << 15); //Clear the MSbit.
		//This bit indicates if this package is a continuation of the last. Ignore it for now.
		//TODO catch this as an error and exit
		if (dataLength == 0)
    275e:	bne.n	27d8 <BNO080::receivePacket()+0x2a8>
}

//Pretty prints the contents of the current shtp header (only)
void BNO080::printHeader(void)
{
	if (_printDebug == true)
    2760:	ldrb.w	r3, [r4, #188]	; 0xbc
    2764:	cmp	r3, #0
    2766:	beq.w	2554 <BNO080::receivePacket()+0x24>
    276a:	mov	r0, r4
    276c:	bl	1cfc <BNO080::printHeader() [clone .part.7]>
    2770:	b.n	2556 <BNO080::receivePacket()+0x26>
		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)4); //Ask for four bytes to find out how much data we need to read
		if (waitForI2C() == false)
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
    2772:	mov	r0, r3
    2774:	blx	r2
    2776:	ldr.w	r3, [r4, #176]	; 0xb0
    277a:	uxtb.w	r9, r0
    277e:	ldr	r2, [r3, #0]
    2780:	sxth.w	sl, r9
    2784:	ldr	r2, [r2, #20]
    2786:	b.n	2592 <BNO080::receivePacket()+0x62>
		uint8_t packetMSB = _i2cPort->read();
    2788:	mov	r0, r3
    278a:	blx	r2
    278c:	ldr.w	r3, [r4, #176]	; 0xb0
    2790:	lsls	r1, r0, #8
    2792:	ldr	r2, [r3, #0]
    2794:	uxtb.w	fp, r0
    2798:	sxth	r6, r1
    279a:	ldr	r2, [r2, #20]
    279c:	b.n	25c0 <BNO080::receivePacket()+0x90>
		uint8_t channelNumber = _i2cPort->read();
    279e:	mov.w	r8, #255	; 0xff
		uint8_t sequenceNumber = _i2cPort->read(); //Not sure if we need to store this or not
    27a2:	mov	r0, r3
    27a4:	blx	r2
    27a6:	uxtb	r0, r0
    27a8:	b.n	2608 <BNO080::receivePacket()+0xd8>
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
    27aa:	mov	r0, r3
    27ac:	blx	r2
    27ae:	b.n	25de <BNO080::receivePacket()+0xae>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    27b0:	mov	r2, r1
    27b2:	b.n	26d4 <BNO080::receivePacket()+0x1a4>
    27b4:	.word	0x00001cdd
    27b8:	.word	0xe000e180
    27bc:	.word	0xe000e184
    27c0:	.word	0xe000e188
    27c4:	.word	0xe000e18c
    27c8:	.word	0xe000e190
    27cc:	.word	0x400fc000
    27d0:	.word	0x200003e8
    27d4:	.word	0xc0000007
		{
			//Packet is empty
			printHeader();
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count
    27d8:	subs	r5, #4
    27da:	uxth	r0, r5

		//Read incoming data into the shtpData array
		for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
    27dc:	cbz	r0, 2808 <BNO080::receivePacket()+0x2d8>
    27de:	adds	r5, r4, #4
    27e0:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    27e2:	movs	r7, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27e4:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    27e6:	str	r7, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    27e8:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    27ea:	tst.w	r3, #2031616	; 0x1f0000
    27ee:	beq.n	27e8 <BNO080::receivePacket()+0x2b8>
		{
			uint8_t incoming = _spiPort->transfer(0xFF);
			if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
    27f0:	cmp	r1, #127	; 0x7f
    27f2:	ldr	r3, [r2, #116]	; 0x74
    27f4:	add.w	r1, r1, #1
    27f8:	add.w	r5, r5, #1
				shtpData[dataSpot] = incoming; //Store data into the shtpData array
    27fc:	it	ls
    27fe:	strbls.w	r3, [r5, #-1]
			return (false); //All done
		}
		dataLength -= 4; //Remove the header bytes from the data count

		//Read incoming data into the shtpData array
		for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
    2802:	uxth	r3, r1
    2804:	cmp	r0, r3
    2806:	bhi.n	27e4 <BNO080::receivePacket()+0x2b4>
			uint8_t incoming = _spiPort->transfer(0xFF);
			if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
				shtpData[dataSpot] = incoming; //Store data into the shtpData array
		}

		digitalWrite(_cs, HIGH); //Release BNO080
    2808:	movs	r1, #1
    280a:	ldrb.w	r0, [r4, #200]	; 0xc8
    280e:	bl	44d4 <digitalWrite>

		_spiPort->endTransaction();
    2812:	ldr.w	r2, [r4, #192]	; 0xc0
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2816:	ldrb	r3, [r2, #19]
    2818:	cbz	r3, 2854 <BNO080::receivePacket()+0x324>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    281a:	lsls	r6, r3, #31
    281c:	bpl.n	2826 <BNO080::receivePacket()+0x2f6>
    281e:	ldr	r3, [pc, #124]	; (289c <BNO080::receivePacket()+0x36c>)
    2820:	ldr	r1, [r2, #40]	; 0x28
    2822:	str	r1, [r3, #0]
    2824:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2826:	lsls	r5, r3, #30
    2828:	bpl.n	2832 <BNO080::receivePacket()+0x302>
    282a:	ldr	r3, [pc, #116]	; (28a0 <BNO080::receivePacket()+0x370>)
    282c:	ldr	r1, [r2, #44]	; 0x2c
    282e:	str	r1, [r3, #0]
    2830:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2832:	lsls	r0, r3, #29
    2834:	bpl.n	283e <BNO080::receivePacket()+0x30e>
    2836:	ldr	r3, [pc, #108]	; (28a4 <BNO080::receivePacket()+0x374>)
    2838:	ldr	r1, [r2, #48]	; 0x30
    283a:	str	r1, [r3, #0]
    283c:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    283e:	lsls	r1, r3, #28
    2840:	bpl.n	284a <BNO080::receivePacket()+0x31a>
    2842:	ldr	r3, [pc, #100]	; (28a8 <BNO080::receivePacket()+0x378>)
    2844:	ldr	r1, [r2, #52]	; 0x34
    2846:	str	r1, [r3, #0]
    2848:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    284a:	lsls	r3, r3, #27
    284c:	bpl.n	2854 <BNO080::receivePacket()+0x324>
    284e:	ldr	r2, [r2, #56]	; 0x38
    2850:	ldr	r3, [pc, #88]	; (28ac <BNO080::receivePacket()+0x37c>)
    2852:	str	r2, [r3, #0]
}

//Pretty prints the contents of the current shtp header and data packets
void BNO080::printPacket(void)
{
	if (_printDebug == true)
    2854:	ldrb.w	r5, [r4, #188]	; 0xbc
    2858:	cbnz	r5, 2862 <BNO080::receivePacket()+0x332>
		dataLength -= 4; //Remove the header bytes from the data count

		getData(dataLength);
	}

	return (true); //We're done!
    285a:	movs	r5, #1
    285c:	b.n	2556 <BNO080::receivePacket()+0x26>
    285e:	ldr	r2, [r3, #12]
    2860:	b.n	26ee <BNO080::receivePacket()+0x1be>
    2862:	mov	r0, r4
    2864:	bl	1d64 <BNO080::printPacket() [clone .part.6]>
    2868:	b.n	2556 <BNO080::receivePacket()+0x26>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    286a:	mov.w	sl, #255	; 0xff
    286e:	mov	r9, sl
    2870:	b.n	2592 <BNO080::receivePacket()+0x62>
    2872:	mvn.w	r6, #255	; 0xff
    2876:	mov.w	fp, #255	; 0xff
    287a:	cmp	r2, r7
    287c:	bne.n	279e <BNO080::receivePacket()+0x26e>
    287e:	movs	r0, #255	; 0xff
			return (false); //Error

		//Get the first four bytes, aka the packet header
		uint8_t packetLSB = _i2cPort->read();
		uint8_t packetMSB = _i2cPort->read();
		uint8_t channelNumber = _i2cPort->read();
    2880:	mov	r8, r0
    2882:	b.n	2608 <BNO080::receivePacket()+0xd8>
    2884:	movs	r0, #255	; 0xff
    2886:	b.n	2608 <BNO080::receivePacket()+0xd8>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    2888:	cmp	r2, #2
    288a:	bls.n	2896 <BNO080::receivePacket()+0x366>
    288c:	subs	r2, #2
    288e:	lsrs	r1, r2, #1
    2890:	orr.w	r2, r2, r1, lsl #8
    2894:	b.n	26ec <BNO080::receivePacket()+0x1bc>
    2896:	movs	r2, #0
    2898:	b.n	26ec <BNO080::receivePacket()+0x1bc>
    289a:	nop
    289c:	.word	0xe000e100
    28a0:	.word	0xe000e104
    28a4:	.word	0xe000e108
    28a8:	.word	0xe000e10c
    28ac:	.word	0xe000e110

000028b0 <BNO080::dataAvailable()>:
}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool BNO080::dataAvailable(void)
{
    28b0:	push	{r3, r4, r5, lr}
    28b2:	mov	r4, r0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
    28b4:	ldrb.w	r0, [r0, #202]	; 0xca
    28b8:	cmp	r0, #255	; 0xff
    28ba:	beq.n	28c4 <BNO080::dataAvailable()+0x14>
	{
		if (digitalRead(_int) == HIGH)
    28bc:	bl	44e0 <digitalRead>
    28c0:	cmp	r0, #1
    28c2:	beq.n	28dc <BNO080::dataAvailable()+0x2c>
			return (false);
	}

	if (receivePacket() == true)
    28c4:	mov	r0, r4
    28c6:	bl	2530 <BNO080::receivePacket()>
    28ca:	mov	r5, r0
    28cc:	cbz	r0, 28dc <BNO080::dataAvailable()+0x2c>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
    28ce:	ldrb	r3, [r4, #2]
    28d0:	cmp	r3, #3
    28d2:	beq.n	28e2 <BNO080::dataAvailable()+0x32>
		{
			parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
			return (true);
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
    28d4:	cmp	r3, #2
    28d6:	beq.n	28f0 <BNO080::dataAvailable()+0x40>
		{
			parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
			return (true);
		}
    else if(shtpHeader[2] == CHANNEL_GYRO)
    28d8:	cmp	r3, #5
    28da:	beq.n	28e8 <BNO080::dataAvailable()+0x38>
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
	{
		if (digitalRead(_int) == HIGH)
			return (false);
    28dc:	movs	r5, #0
      parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
      return (true);
    }
	}
	return (false);
}
    28de:	mov	r0, r5
    28e0:	pop	{r3, r4, r5, pc}
	}

	if (receivePacket() == true)
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
    28e2:	ldrb	r3, [r4, #4]
    28e4:	cmp	r3, #251	; 0xfb
    28e6:	bne.n	28dc <BNO080::dataAvailable()+0x2c>
		{
			parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
    28e8:	mov	r0, r4
    28ea:	bl	1f48 <BNO080::parseInputReport()>
			return (true);
    28ee:	b.n	28de <BNO080::dataAvailable()+0x2e>
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080::parseCommandReport(void)
{
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
    28f0:	ldrb	r3, [r4, #4]
    28f2:	cmp	r3, #241	; 0xf1
    28f4:	bne.n	28de <BNO080::dataAvailable()+0x2e>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response

		if (command == COMMAND_ME_CALIBRATE)
    28f6:	ldrb	r3, [r4, #6]
    28f8:	cmp	r3, #7
    28fa:	bne.n	28de <BNO080::dataAvailable()+0x2e>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
    28fc:	ldrb	r3, [r4, #9]
    28fe:	strb.w	r3, [r4, #268]	; 0x10c
    2902:	b.n	28de <BNO080::dataAvailable()+0x2e>

00002904 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    2904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2908:	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    290a:	ldr	r0, [pc, #256]	; (2a0c <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    290c:	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    290e:	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2910:	ldr.w	sl, [fp, #20]
    2914:	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2918:	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    291c:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2920:	ldr	r1, [pc, #236]	; (2a10 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2922:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2926:	ldr.w	lr, [pc, #236]	; 2a14 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    292a:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    292c:	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    292e:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2932:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2934:	ldr.w	r9, [pc, #224]	; 2a18 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2938:	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    293a:	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    293c:	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2940:	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    2944:	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2946:	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2948:	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    294a:	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    294e:	str	r3, [sp, #0]
    2950:	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    2952:	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2956:	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    295a:	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    295e:	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2960:	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2962:	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2966:	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    2968:	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    296c:	ldr	r3, [r6, #4]
    296e:	orrs	r3, r7
    2970:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2972:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2974:	ldr.w	r3, [lr]
    2978:	umull	r3, r2, r9, r3
    297c:	lsrs	r2, r2, #18
    297e:	add.w	r2, r2, r2, lsl #2
    2982:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2984:	ldr	r3, [r4, #0]
    2986:	subs	r3, r3, r1
    2988:	cmp	r2, r3
    298a:	bhi.n	2984 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    298c:	ldr	r2, [pc, #128]	; (2a10 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    298e:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2990:	ldr.w	ip, [pc, #132]	; 2a18 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2994:	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    2996:	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    299a:	tst	r0, r3
    299c:	beq.n	29a4 <TwoWire::force_clock()+0xa0>
    299e:	ldr	r3, [r6, #8]
    29a0:	tst	r7, r3
    29a2:	bne.n	2a08 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    29a4:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    29a8:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    29aa:	ldr.w	r1, [lr]
    29ae:	umull	r3, r1, ip, r1
    29b2:	lsrs	r1, r1, #18
    29b4:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    29b8:	ldr	r3, [r2, #0]
    29ba:	subs	r3, r3, r4
    29bc:	cmp	r1, r3
    29be:	bhi.n	29b8 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    29c0:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    29c4:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    29c8:	ldr.w	r1, [lr]
    29cc:	umull	r3, r1, ip, r1
    29d0:	lsrs	r1, r1, #18
    29d2:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    29d6:	ldr	r3, [r2, #0]
    29d8:	subs	r3, r3, r4
    29da:	cmp	r1, r3
    29dc:	bhi.n	29d6 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    29de:	subs	r5, #1
    29e0:	bne.n	2996 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    29e2:	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    29e4:	ldrb.w	r3, [fp, #24]
    29e8:	ldr	r2, [sp, #0]
    29ea:	add.w	r3, sl, r3, lsl #4
    29ee:	ldr	r3, [r3, #12]
    29f0:	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    29f2:	ldrb.w	r3, [fp, #25]
    29f6:	ldr	r2, [sp, #4]
    29f8:	add.w	sl, sl, r3, lsl #4
    29fc:	ldr.w	r3, [sl, #44]	; 0x2c
    2a00:	str	r3, [r2, #0]
	return ret;
}
    2a02:	add	sp, #12
    2a04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    2a08:	movs	r0, #1
    2a0a:	b.n	29e4 <TwoWire::force_clock()+0xe0>
    2a0c:	.word	0x20000560
    2a10:	.word	0xe0001004
    2a14:	.word	0x200011a4
    2a18:	.word	0x431bde83

00002a1c <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    2a1c:	ldr	r1, [pc, #52]	; (2a54 <TwoWire::wait_idle()+0x38>)
    2a1e:	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    2a20:	push	{r4, lr}
    2a22:	ldr	r4, [r1, #0]
    2a24:	b.n	2a32 <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    2a26:	lsls	r3, r3, #7
    2a28:	bmi.n	2a3a <TwoWire::wait_idle()+0x1e>
    2a2a:	ldr	r3, [r1, #0]
		if (timeout > 16) {
    2a2c:	subs	r3, r3, r4
    2a2e:	cmp	r3, #16
    2a30:	bhi.n	2a44 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    2a32:	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    2a34:	tst.w	r3, #33554432	; 0x2000000
    2a38:	bne.n	2a26 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    2a3a:	mov.w	r3, #32512	; 0x7f00
	return true;
    2a3e:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    2a40:	str	r3, [r2, #20]
	return true;
}
    2a42:	pop	{r4, pc}
    2a44:	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    2a46:	bl	2904 <TwoWire::force_clock()>
    2a4a:	cmp	r0, #0
    2a4c:	beq.n	2a42 <TwoWire::wait_idle()+0x26>
    2a4e:	ldr	r2, [r4, #16]
    2a50:	b.n	2a3a <TwoWire::wait_idle()+0x1e>
    2a52:	nop
    2a54:	.word	0x200022e4

00002a58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
		yield();
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    2a58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a5c:	mov	r4, r1
    2a5e:	mov	r5, r2
    2a60:	mov	r8, r3
    2a62:	mov	r9, r0
	if (!wait_idle()) return 4;
    2a64:	bl	2a1c <TwoWire::wait_idle()>
    2a68:	cbnz	r0, 2a70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
    2a6a:	movs	r0, #4
    2a6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    2a70:	movs	r2, #0
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
    2a72:	lsls	r3, r4, #1
	if (length < 1) length = 1;
    2a74:	cmp	r5, #0
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2a76:	movw	sl, #1025	; 0x401
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    2a7a:	mov	r4, r2
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2a7c:	uxtb	r3, r3
    2a7e:	ldr	r6, [pc, #244]	; (2b74 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>)

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
    2a80:	it	eq
    2a82:	moveq	r5, #1
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2a84:	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2a86:	orr.w	sl, r3, sl
    2a8a:	ldr.w	fp, [r6]
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    2a8e:	strb.w	r2, [r9, #58]	; 0x3a
	rxBufferLength = 0;
    2a92:	strb.w	r2, [r9, #59]	; 0x3b
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2a96:	bls.n	2b2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
    2a98:	ldr.w	r3, [r9, #16]
				tx_state++;
				tx_fifo--;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
    2a9c:	ldrb.w	r2, [r9, #59]	; 0x3b
    2aa0:	cmp	r2, #31
    2aa2:	bhi.n	2aca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2aa4:	ldr	r1, [r3, #92]	; 0x5c
    2aa6:	ubfx	r1, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2aaa:	cbnz	r1, 2ab2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
    2aac:	b.n	2aca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    2aae:	cmp	r2, #32
    2ab0:	beq.n	2aca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
				rxBuffer[rxBufferLength++] = port->MRDR;
    2ab2:	add.w	lr, r2, #1
    2ab6:	add.w	r0, r9, r2
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2aba:	subs	r1, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    2abc:	uxtb.w	r2, lr
    2ac0:	strb.w	r2, [r9, #59]	; 0x3b
    2ac4:	ldr	r7, [r3, #112]	; 0x70
    2ac6:	strb	r7, [r0, #26]
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2ac8:	bne.n	2aae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
				rxBuffer[rxBufferLength++] = port->MRDR;
				rx_fifo--;
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
    2aca:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    2acc:	lsls	r0, r2, #20
    2ace:	bmi.n	2b6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    2ad0:	tst.w	r2, #9216	; 0x2400
    2ad4:	bne.n	2ae0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    2ad6:	ldr	r1, [r6, #0]
    2ad8:	rsb	r1, fp, r1
    2adc:	cmp	r1, #50	; 0x32
    2ade:	bls.n	2b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2ae0:	ldr	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2ae2:	mov.w	r1, #512	; 0x200
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2ae6:	orr.w	r2, r2, #768	; 0x300
    2aea:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2aec:	str	r1, [r3, #96]	; 0x60
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2aee:	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    2af0:	tst.w	r2, #458752	; 0x70000
    2af4:	beq.n	2afe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    2af6:	ldr	r2, [r3, #16]
    2af8:	orr.w	r2, r2, #512	; 0x200
    2afc:	str	r2, [r3, #16]
	return rxBufferLength;
    2afe:	ldrb.w	r0, [r9, #59]	; 0x3b
    2b02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
    2b06:	ldrb.w	r1, [r9, #59]	; 0x3b
    2b0a:	cmp	r1, r5
    2b0c:	bcc.n	2b22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    2b0e:	cmp	r4, #2
    2b10:	bls.n	2b22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
			uint32_t tx_fifo = port->MFSR & 0x07;
    2b12:	ldr	r1, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    2b14:	lsls	r1, r1, #29
    2b16:	bne.n	2b22 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    2b18:	lsls	r2, r2, #22
    2b1a:	bmi.n	2aee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    2b1c:	cmp.w	r8, #0
    2b20:	beq.n	2aee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
				break;
			}
		}
		yield();
    2b22:	bl	45d4 <yield>
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2b26:	cmp	r4, #2
    2b28:	bhi.n	2a98 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    2b2a:	ldr.w	r2, [r9, #16]
    2b2e:	ldr	r3, [r2, #92]	; 0x5c
    2b30:	and.w	r3, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    2b34:	cmp	r3, #3
    2b36:	bhi.n	2b54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2b38:	subs	r1, r5, #1
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2b3a:	mov.w	r0, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2b3e:	orr.w	r1, r1, #256	; 0x100
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
    2b42:	cbnz	r4, 2b58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2b44:	str.w	sl, [r2, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
				tx_fifo--;
    2b48:	subs	r3, #1
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
    2b4a:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
    2b4c:	cmp	r3, #3
    2b4e:	bhi.n	2b54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    2b50:	cmp	r4, #2
    2b52:	bls.n	2b42 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
    2b54:	mov	r3, r2
    2b56:	b.n	2a9c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
    2b58:	cmp	r4, #1
    2b5a:	beq.n	2b66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2b5c:	cmp.w	r8, #0
    2b60:	beq.n	2b48 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    2b62:	str	r0, [r2, #96]	; 0x60
    2b64:	b.n	2b48 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2b66:	str	r1, [r2, #96]	; 0x60
    2b68:	b.n	2b48 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2b6a:	ldr	r2, [r3, #16]
    2b6c:	orr.w	r2, r2, #768	; 0x300
    2b70:	str	r2, [r3, #16]
    2b72:	b.n	2aee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    2b74:	.word	0x200022e4

00002b78 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2b78:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2b7a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2b7c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2b7e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2b80:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2b82:	beq.n	2b8c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2b84:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2b88:	b.w	4674 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2b8c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2b8e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2b92:	bx	r3

00002b94 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2b94:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2b96:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2b9a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2b9e:	bne.n	2c7c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2ba0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2ba2:	bcc.n	2c28 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2ba4:	ldr.w	r3, [r1], #4
    2ba8:	str.w	r3, [r0], #4
    2bac:	ldr.w	r3, [r1], #4
    2bb0:	str.w	r3, [r0], #4
    2bb4:	ldr.w	r3, [r1], #4
    2bb8:	str.w	r3, [r0], #4
    2bbc:	ldr.w	r3, [r1], #4
    2bc0:	str.w	r3, [r0], #4
    2bc4:	ldr.w	r3, [r1], #4
    2bc8:	str.w	r3, [r0], #4
    2bcc:	ldr.w	r3, [r1], #4
    2bd0:	str.w	r3, [r0], #4
    2bd4:	ldr.w	r3, [r1], #4
    2bd8:	str.w	r3, [r0], #4
    2bdc:	ldr.w	r3, [r1], #4
    2be0:	str.w	r3, [r0], #4
    2be4:	ldr.w	r3, [r1], #4
    2be8:	str.w	r3, [r0], #4
    2bec:	ldr.w	r3, [r1], #4
    2bf0:	str.w	r3, [r0], #4
    2bf4:	ldr.w	r3, [r1], #4
    2bf8:	str.w	r3, [r0], #4
    2bfc:	ldr.w	r3, [r1], #4
    2c00:	str.w	r3, [r0], #4
    2c04:	ldr.w	r3, [r1], #4
    2c08:	str.w	r3, [r0], #4
    2c0c:	ldr.w	r3, [r1], #4
    2c10:	str.w	r3, [r0], #4
    2c14:	ldr.w	r3, [r1], #4
    2c18:	str.w	r3, [r0], #4
    2c1c:	ldr.w	r3, [r1], #4
    2c20:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2c24:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2c26:	bcs.n	2ba4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2c28:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2c2a:	bcc.n	2c50 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2c2c:	ldr.w	r3, [r1], #4
    2c30:	str.w	r3, [r0], #4
    2c34:	ldr.w	r3, [r1], #4
    2c38:	str.w	r3, [r0], #4
    2c3c:	ldr.w	r3, [r1], #4
    2c40:	str.w	r3, [r0], #4
    2c44:	ldr.w	r3, [r1], #4
    2c48:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2c4c:	subs	r2, #16
	bhs	.Lmid_block_loop
    2c4e:	bcs.n	2c2c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2c50:	adds	r2, #12
	blo	.Lcopy_less_than_4
    2c52:	bcc.n	2c60 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2c54:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2c58:	str.w	r3, [r0], #4
	subs	r2, #4
    2c5c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2c5e:	bcs.n	2c54 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2c60:	adds	r2, #4
	beq	.Ldone
    2c62:	beq.n	2c76 <memcpy+0xe2>

	lsls	r2, r2, #31
    2c64:	lsls	r2, r2, #31
	itt ne
    2c66:	itt	ne
	ldrbne  r3, [r1], #1
    2c68:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2c6c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2c70:	bcc.n	2c76 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2c72:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2c74:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2c76:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2c78:	bx	lr
    2c7a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2c7c:	cmp	r2, #8
	blo	.Lbyte_copy
    2c7e:	bcc.n	2ca8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2c80:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2c82:	beq.n	2ba0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2c84:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2c88:	beq.n	2ba0 <memcpy+0xc>

	rsb	r3, #4
    2c8a:	rsb	r3, r3, #4
	subs	r2, r3
    2c8e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2c90:	lsls	r3, r3, #31
	itt ne
    2c92:	itt	ne
	ldrbne  r3, [r1], #1
    2c94:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2c98:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2c9c:	bcc.n	2ba0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2c9e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2ca2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2ca6:	b.n	2ba0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2ca8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2caa:	bcc.n	2c60 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2cac:	subs	r2, #1
	ldrb    r3, [r1], #1
    2cae:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2cb2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2cb6:	bcs.n	2cac <memcpy+0x118>

	ldrb	r3, [r1]
    2cb8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2cba:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2cbc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2cbe:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2cc0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2cc2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2cc4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2cc6:	bx	lr

00002cc8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2cc8:	movs	r0, #4
    2cca:	mov	r1, lr
    2ccc:	tst	r0, r1
    2cce:	beq.n	2cd8 <_MSP>
    2cd0:	mrs	r0, PSP
    2cd4:	b.w	2ce8 <HardFault_HandlerC>

00002cd8 <_MSP>:
    2cd8:	mrs	r0, MSP
    2cdc:	b.w	2ce8 <HardFault_HandlerC>

00002ce0 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2ce0:	bx	lr
    2ce2:	nop

00002ce4 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2ce4:	bx	lr
    2ce6:	nop

00002ce8 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2ce8:	ldr	r3, [pc, #108]	; (2d58 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2cea:	movs	r1, #5
    2cec:	ldr	r2, [pc, #108]	; (2d5c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2cee:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2cf0:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2cf2:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2cf6:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2cf8:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2cfc:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2cfe:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2d00:	ldr	r4, [pc, #92]	; (2d60 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d02:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2d04:	ldr	r0, [pc, #92]	; (2d64 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2d06:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2d08:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2d0c:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2d10:	ldr	r3, [r4, #0]
    2d12:	cmp	r3, r0
    2d14:	bls.n	2d1c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    2d16:	ldr	r0, [pc, #80]	; (2d68 <HardFault_HandlerC+0x80>)
    2d18:	bl	350c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2d1c:	ldr	r5, [pc, #56]	; (2d58 <HardFault_HandlerC+0x70>)
    2d1e:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2d20:	movs	r0, #0
    2d22:	ldr	r2, [pc, #72]	; (2d6c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2d24:	ldr	r1, [pc, #72]	; (2d70 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2d26:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2d2a:	str	r0, [sp, #4]
    2d2c:	ldr	r3, [sp, #4]
    2d2e:	cmp	r3, r2
    2d30:	bhi.n	2d3e <HardFault_HandlerC+0x56>
    2d32:	ldr	r3, [sp, #4]
    2d34:	adds	r3, #1
    2d36:	str	r3, [sp, #4]
    2d38:	ldr	r3, [sp, #4]
    2d3a:	cmp	r3, r2
    2d3c:	bls.n	2d32 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2d3e:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2d42:	str	r0, [sp, #4]
    2d44:	ldr	r3, [sp, #4]
    2d46:	cmp	r3, r1
    2d48:	bhi.n	2d26 <HardFault_HandlerC+0x3e>
    2d4a:	ldr	r3, [sp, #4]
    2d4c:	adds	r3, #1
    2d4e:	str	r3, [sp, #4]
    2d50:	ldr	r3, [sp, #4]
    2d52:	cmp	r3, r1
    2d54:	bls.n	2d4a <HardFault_HandlerC+0x62>
    2d56:	b.n	2d26 <HardFault_HandlerC+0x3e>
    2d58:	.word	0x401bc000
    2d5c:	.word	0x401f8000
    2d60:	.word	0x200011a4
    2d64:	.word	0x23c345ff
    2d68:	.word	0x11e1a300
    2d6c:	.word	0x000f423f
    2d70:	.word	0x0089543f

00002d74 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    2d74:	ldr	r2, [pc, #36]	; (2d9c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    2d76:	push	{r3, lr}
        char *prev = __brkval;
    2d78:	ldr	r3, [r2, #0]
        if (incr != 0) {
    2d7a:	cbz	r0, 2d86 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2d7c:	add	r0, r3
    2d7e:	ldr	r1, [pc, #32]	; (2da0 <_sbrk+0x2c>)
    2d80:	cmp	r0, r1
    2d82:	bhi.n	2d8a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    2d84:	str	r0, [r2, #0]
        }
        return prev;
}
    2d86:	mov	r0, r3
    2d88:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2d8a:	bl	816c <__errno>
    2d8e:	movs	r2, #12
                        return (void *)-1;
    2d90:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2d94:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2d96:	mov	r0, r3
    2d98:	pop	{r3, pc}
    2d9a:	nop
    2d9c:	.word	0x2000119c
    2da0:	.word	0x20280000

00002da4 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    2da4:	movs	r0, #0
    2da6:	bx	lr

00002da8 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    2da8:	mov.w	r0, #4294967295
    2dac:	bx	lr
    2dae:	nop

00002db0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2db0:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    2db4:	movs	r0, #0
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2db6:	str	r3, [r1, #4]
	return 0;
}
    2db8:	bx	lr
    2dba:	nop

00002dbc <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    2dbc:	movs	r0, #1
    2dbe:	bx	lr

00002dc0 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    2dc0:	mov.w	r0, #4294967295
    2dc4:	bx	lr
    2dc6:	nop

00002dc8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    2dc8:	wfi
    2dca:	b.n	2dc8 <abort>

00002dcc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2dcc:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2dce:	ldr	r1, [pc, #80]	; (2e20 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2dd0:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2dd4:	ldr	r5, [pc, #76]	; (2e24 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2dd6:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2dd8:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2ddc:	ldr	r6, [pc, #72]	; (2e28 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2dde:	ldr	r2, [pc, #76]	; (2e2c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2de0:	add.w	r5, r5, r0, lsl #5
    2de4:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2de6:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2de8:	mov	r0, r5
    2dea:	ldrh	r2, [r6, #0]
    2dec:	bl	406c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2df0:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2df2:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2df6:	add	r1, r4
	asm("dsb");
    2df8:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2dfc:	ldr	r2, [pc, #48]	; (2e30 <rx_queue_transfer+0x64>)
    2dfe:	str	r3, [r2, #0]
		location += 32;
    2e00:	adds	r3, #32
	} while (location < end_addr);
    2e02:	cmp	r1, r3
    2e04:	bhi.n	2dfe <rx_queue_transfer+0x32>
	asm("dsb");
    2e06:	dsb	sy
	asm("isb");
    2e0a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2e0e:	movs	r0, #3
    2e10:	mov	r1, r5
    2e12:	bl	40c4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2e16:	ldr	r3, [pc, #28]	; (2e34 <rx_queue_transfer+0x68>)
    2e18:	mov.w	r2, #131072	; 0x20000
    2e1c:	str	r2, [r3, #0]
    2e1e:	pop	{r3, r4, r5, r6, r7, pc}
    2e20:	.word	0x20200000
    2e24:	.word	0x200020e0
    2e28:	.word	0x200021ee
    2e2c:	.word	0xe000e18c
    2e30:	.word	0xe000ef5c
    2e34:	.word	0xe000e10c

00002e38 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2e38:	ldr	r2, [pc, #144]	; (2ecc <rx_event+0x94>)
    2e3a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2e3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2e40:	ubfx	r3, r3, #16, #15
    2e44:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    2e46:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2e48:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2e4a:	cmp	r4, #0
    2e4c:	ble.n	2ec0 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2e4e:	ldr	r1, [pc, #128]	; (2ed0 <rx_event+0x98>)
		if (head != rx_tail) {
    2e50:	ldr	r2, [pc, #128]	; (2ed4 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2e52:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2e54:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2e56:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2e58:	ldr	r0, [pc, #124]	; (2ed8 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    2e5a:	ldr	r6, [pc, #128]	; (2edc <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2e5c:	cmp	r3, r2
    2e5e:	beq.n	2e70 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2e60:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2e64:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2e68:	rsb	r2, r7, #512	; 0x200
    2e6c:	cmp	r4, r2
    2e6e:	bls.n	2e96 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2e70:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    2e72:	movs	r2, #0
    2e74:	ldr	r7, [pc, #104]	; (2ee0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2e76:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    2e78:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    2e7c:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    2e80:	ldr	r6, [pc, #96]	; (2ee4 <rx_event+0xac>)
    2e82:	ite	ls
    2e84:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2e86:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    2e88:	strb	r2, [r1, #0]
		rx_available += len;
    2e8a:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2e8c:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    2e8e:	add	r4, r2
    2e90:	str	r4, [r6, #0]
    2e92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2e96:	ldr	r3, [pc, #80]	; (2ee8 <rx_event+0xb0>)
    2e98:	add.w	r0, r7, r8, lsl #9
    2e9c:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2e9e:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2ea0:	add.w	r1, r3, r5, lsl #9
    2ea4:	add	r0, r3
    2ea6:	bl	2b94 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    2eaa:	ldr	r2, [pc, #56]	; (2ee4 <rx_event+0xac>)
				rx_queue_transfer(i);
    2eac:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2eae:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    2eb2:	ldr	r3, [r2, #0]
    2eb4:	add	r4, r3
    2eb6:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2eb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    2ebc:	b.w	2dcc <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    2ec0:	mov	r0, r5
	}
}
    2ec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    2ec6:	b.w	2dcc <rx_queue_transfer>
    2eca:	nop
    2ecc:	.word	0x200021ee
    2ed0:	.word	0x20002204
    2ed4:	.word	0x200021e0
    2ed8:	.word	0x200021e4
    2edc:	.word	0x200021f0
    2ee0:	.word	0x200020b4
    2ee4:	.word	0x20002200
    2ee8:	.word	0x20200000

00002eec <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2eec:	ldr	r3, [pc, #120]	; (2f68 <usb_serial_flush_callback+0x7c>)
    2eee:	ldrb	r2, [r3, #0]
    2ef0:	cbnz	r2, 2f0a <usb_serial_flush_callback+0x1e>
    2ef2:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    2ef6:	ldr	r2, [pc, #116]	; (2f6c <usb_serial_flush_callback+0x80>)
    2ef8:	ldrb	r2, [r2, #0]
    2efa:	cbz	r2, 2f0a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2efc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2f00:	ldr	r5, [pc, #108]	; (2f70 <usb_serial_flush_callback+0x84>)
    2f02:	ldrh	r2, [r5, #0]
    2f04:	cbnz	r2, 2f0c <usb_serial_flush_callback+0x20>
    2f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f0a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2f0c:	ldr	r6, [pc, #100]	; (2f74 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2f0e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2f12:	ldr	r7, [pc, #100]	; (2f78 <usb_serial_flush_callback+0x8c>)
    2f14:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2f16:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2f18:	ldr	r4, [pc, #96]	; (2f7c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2f1a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2f1e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2f22:	mov	r0, r7
    2f24:	mov	r1, r4
    2f26:	bl	406c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2f2a:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2f2e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    2f32:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2f36:	ldr	r3, [pc, #72]	; (2f80 <usb_serial_flush_callback+0x94>)
    2f38:	str	r1, [r3, #0]
		location += 32;
    2f3a:	adds	r1, #32
	} while (location < end_addr);
    2f3c:	cmp	r2, r1
    2f3e:	bhi.n	2f38 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    2f40:	dsb	sy
	asm("isb");
    2f44:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2f48:	movs	r0, #4
    2f4a:	mov	r1, r7
    2f4c:	bl	409c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2f50:	ldrb	r3, [r6, #0]
    2f52:	ldr	r2, [pc, #32]	; (2f74 <usb_serial_flush_callback+0x88>)
    2f54:	adds	r3, #1
    2f56:	uxtb	r3, r3
    2f58:	cmp	r3, #3
    2f5a:	it	hi
    2f5c:	movhi	r3, #0
    2f5e:	strb	r3, [r2, #0]
	tx_available = 0;
    2f60:	movs	r3, #0
    2f62:	strh	r3, [r5, #0]
    2f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f68:	.word	0x200020c6
    2f6c:	.word	0x200022d8
    2f70:	.word	0x20002206
    2f74:	.word	0x200020c7
    2f78:	.word	0x20002220
    2f7c:	.word	0x20201000
    2f80:	.word	0xe000ef70

00002f84 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    2f84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f88:	sub	sp, #20
    2f8a:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2f8c:	str	r1, [sp, #4]
    2f8e:	cmp	r1, #0
    2f90:	beq.w	30d8 <usb_serial_write.part.1+0x154>
    2f94:	movs	r3, #0
    2f96:	ldr.w	r8, [pc, #348]	; 30f4 <usb_serial_write.part.1+0x170>
    2f9a:	ldr.w	r9, [pc, #332]	; 30e8 <usb_serial_write.part.1+0x164>
    2f9e:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    2fa0:	ldr	r6, [pc, #312]	; (30dc <usb_serial_write.part.1+0x158>)
    2fa2:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2fa6:	ldr.w	sl, [pc, #336]	; 30f8 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    2faa:	ldr.w	fp, [pc, #336]	; 30fc <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    2fae:	ldr	r2, [pc, #304]	; (30e0 <usb_serial_write.part.1+0x15c>)
    2fb0:	ldrb	r4, [r2, #0]
    2fb2:	ldr	r2, [pc, #304]	; (30e4 <usb_serial_write.part.1+0x160>)
    2fb4:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2fb8:	cmp	r3, #0
    2fba:	bne.n	309a <usb_serial_write.part.1+0x116>
    2fbc:	mov	r5, r3
    2fbe:	mov	r4, r3
    2fc0:	b.n	2fec <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2fc2:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    2fc6:	cbnz	r4, 2fca <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    2fc8:	ldr	r5, [r6, #0]
    2fca:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2fcc:	cmp	r3, #0
    2fce:	bne.n	308e <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2fd0:	ldr	r3, [r6, #0]
    2fd2:	subs	r3, r3, r5
    2fd4:	cmp	r3, #120	; 0x78
    2fd6:	bhi.n	30cc <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2fd8:	ldrb.w	r3, [sl]
    2fdc:	cmp	r3, #0
    2fde:	beq.n	308e <usb_serial_write.part.1+0x10a>
			yield();
    2fe0:	bl	45d4 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2fe4:	ldrh.w	r3, [r8]
    2fe8:	cmp	r3, #0
    2fea:	bne.n	3096 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2fec:	mov	r0, r7
    2fee:	bl	40e8 <usb_transfer_status>
			if (!(status & 0x80)) {
    2ff2:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2ff6:	ldr	r2, [pc, #240]	; (30e8 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2ff8:	bne.n	2fc2 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    2ffa:	mov.w	r3, #2048	; 0x800
    2ffe:	ldr	r2, [pc, #224]	; (30e0 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    3000:	strb.w	r0, [r9]
    3004:	ldrb	r4, [r2, #0]
    3006:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    3008:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    300c:	lsls	r4, r4, #11
		if (size >= tx_available) {
    300e:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3010:	ldr	r1, [pc, #216]	; (30ec <usb_serial_write.part.1+0x168>)
    3012:	add	r0, r4
		if (size >= tx_available) {
    3014:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3016:	add	r0, r1
		if (size >= tx_available) {
    3018:	bcc.n	30a2 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    301a:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    301c:	ldr	r1, [sp, #8]
    301e:	bl	2b94 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3022:	movs	r3, #0
    3024:	mov	r1, r4
    3026:	mov.w	r2, #2048	; 0x800
    302a:	mov	r0, r7
    302c:	bl	406c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3030:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3034:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    3038:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    303c:	str.w	r3, [fp]
		location += 32;
    3040:	adds	r3, #32
	} while (location < end_addr);
    3042:	cmp	r4, r3
    3044:	bhi.n	303c <usb_serial_write.part.1+0xb8>
	asm("dsb");
    3046:	dsb	sy
	asm("isb");
    304a:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    304e:	movs	r0, #4
    3050:	mov	r1, r7
    3052:	bl	409c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3056:	ldr	r3, [pc, #136]	; (30e0 <usb_serial_write.part.1+0x15c>)
    3058:	ldr	r2, [pc, #132]	; (30e0 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    305a:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    305c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    305e:	ldr	r0, [pc, #144]	; (30f0 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    3060:	adds	r3, #1
    3062:	uxtb	r3, r3
    3064:	cmp	r3, #3
    3066:	it	hi
    3068:	movhi	r3, #0
    306a:	strb	r3, [r2, #0]
			size -= tx_available;
    306c:	ldrh.w	r2, [r8]
			sent += tx_available;
    3070:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    3072:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    3076:	add	r3, r2
    3078:	str	r3, [sp, #0]
			data += tx_available;
    307a:	ldr	r3, [sp, #8]
    307c:	add	r3, r2
    307e:	str	r3, [sp, #8]
    3080:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    3082:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    3086:	ldr	r1, [sp, #4]
    3088:	subs	r2, r1, r2
    308a:	str	r2, [sp, #4]
    308c:	bne.n	2fae <usb_serial_write.part.1+0x2a>
    308e:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3090:	add	sp, #20
    3092:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3096:	ldr	r2, [pc, #72]	; (30e0 <usb_serial_write.part.1+0x15c>)
    3098:	ldrb	r4, [r2, #0]
    309a:	mov	r2, r3
    309c:	rsb	r0, r3, #2048	; 0x800
    30a0:	b.n	300c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    30a2:	ldr	r4, [sp, #4]
    30a4:	ldr	r1, [sp, #8]
    30a6:	mov	r2, r4
    30a8:	str	r3, [sp, #12]
    30aa:	bl	2b94 <memcpy>
			tx_available -= size;
    30ae:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    30b0:	ldr	r2, [pc, #60]	; (30f0 <usb_serial_write.part.1+0x16c>)
    30b2:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    30b6:	subs	r3, r3, r4
    30b8:	strh.w	r3, [r8]
    30bc:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    30be:	str.w	r1, [r2, #132]	; 0x84
    30c2:	mov	r0, r3
    30c4:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    30c6:	add	sp, #20
    30c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    30cc:	movs	r3, #1
				return sent;
    30ce:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    30d0:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    30d2:	add	sp, #20
    30d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    30d8:	ldr	r0, [sp, #4]
    30da:	b.n	3090 <usb_serial_write.part.1+0x10c>
    30dc:	.word	0x200022e4
    30e0:	.word	0x200020c7
    30e4:	.word	0x20002220
    30e8:	.word	0x20002205
    30ec:	.word	0x20201000
    30f0:	.word	0x402e0000
    30f4:	.word	0x20002206
    30f8:	.word	0x200022d8
    30fc:	.word	0xe000ef70

00003100 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    3100:	bx	lr
    3102:	nop

00003104 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3104:	ldr	r3, [pc, #196]	; (31cc <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    3106:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    310a:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    310c:	ldr	r7, [pc, #192]	; (31d0 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    310e:	cmp	r3, #0
    3110:	beq.n	31bc <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    3112:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    3116:	ldr.w	r8, [pc, #236]	; 3204 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    311a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    311c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3120:	movs	r1, #0
    3122:	movs	r2, #128	; 0x80
    3124:	ldr	r0, [pc, #172]	; (31d4 <usb_serial_configure+0xd0>)
	tx_head = 0;
    3126:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3128:	ldr	r6, [pc, #172]	; (31d8 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    312a:	bl	8870 <memset>
	tx_head = 0;
    312e:	ldr	r4, [pc, #172]	; (31dc <usb_serial_configure+0xd8>)
	tx_available = 0;
    3130:	ldr	r3, [pc, #172]	; (31e0 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3132:	mov	r1, r5
    3134:	mov.w	r2, #256	; 0x100
    3138:	ldr	r0, [pc, #168]	; (31e4 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    313a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    313c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    313e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3140:	bl	8870 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3144:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3146:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3148:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    314a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    314c:	str	r5, [r6, #8]
    314e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3150:	ldr	r1, [pc, #148]	; (31e8 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3152:	ldr	r6, [pc, #152]	; (31ec <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    3154:	ldr	r0, [pc, #152]	; (31f0 <usb_serial_configure+0xec>)
	rx_available = 0;
    3156:	ldr.w	lr, [pc, #176]	; 3208 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    315a:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    315c:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    315e:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3160:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3162:	str	r5, [r6, #0]
    3164:	str	r5, [r6, #4]
    3166:	str	r5, [r6, #8]
    3168:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    316a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    316e:	bl	4004 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3172:	ldrh.w	r1, [r8]
    3176:	mov	r2, r5
    3178:	ldr	r3, [pc, #120]	; (31f4 <usb_serial_configure+0xf0>)
    317a:	movs	r0, #3
    317c:	bl	3fa0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3180:	mov	r3, r5
    3182:	ldrh	r1, [r7, #0]
    3184:	movs	r2, #1
    3186:	movs	r0, #4
    3188:	bl	4004 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    318c:	mov	r0, r4
    318e:	adds	r4, #1
    3190:	bl	2dcc <rx_queue_transfer>
    3194:	cmp	r4, #8
    3196:	bne.n	318c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    3198:	ldr	r3, [pc, #92]	; (31f8 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    319a:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    319c:	ldr	r0, [pc, #92]	; (31fc <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    319e:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    31a0:	ldr	r4, [pc, #92]	; (3200 <usb_serial_configure+0xfc>)
    31a2:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    31a4:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    31a8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    31ac:	ldr.w	r2, [r3, #328]	; 0x148
    31b0:	orr.w	r2, r2, #16777216	; 0x1000000
    31b4:	str.w	r2, [r3, #328]	; 0x148
    31b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    31bc:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    31be:	ldr.w	r8, [pc, #68]	; 3204 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    31c2:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    31c4:	strh.w	r3, [r8]
    31c8:	b.n	3120 <usb_serial_configure+0x1c>
    31ca:	nop
    31cc:	.word	0x200022b0
    31d0:	.word	0x200020c4
    31d4:	.word	0x20002220
    31d8:	.word	0x200021f0
    31dc:	.word	0x200020c7
    31e0:	.word	0x20002206
    31e4:	.word	0x200020e0
    31e8:	.word	0x20002204
    31ec:	.word	0x200020b4
    31f0:	.word	0x200021e0
    31f4:	.word	0x00002e39
    31f8:	.word	0x402e0000
    31fc:	.word	0x200022a0
    3200:	.word	0x00002eed
    3204:	.word	0x200021ee
    3208:	.word	0x20002200

0000320c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    320c:	ldr	r3, [pc, #196]	; (32d4 <usb_serial_read+0xc8>)
    320e:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3212:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    3216:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3218:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    321a:	ldr	r3, [pc, #188]	; (32d8 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    321c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    321e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3220:	cmp	r1, #0
    3222:	beq.n	32cc <usb_serial_read+0xc0>
    3224:	ldr	r3, [pc, #180]	; (32dc <usb_serial_read+0xd0>)
    3226:	uxtb	r4, r4
    3228:	ldrb	r3, [r3, #0]
    322a:	cmp	r4, r3
    322c:	beq.n	32d0 <usb_serial_read+0xc4>
    322e:	mov	sl, r0
    3230:	movs	r7, #0
    3232:	ldr.w	fp, [pc, #192]	; 32f4 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    3236:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3238:	ldr	r3, [pc, #164]	; (32e0 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    323a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    323e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3240:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3242:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    3244:	ldr	r3, [pc, #156]	; (32e4 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3246:	it	cs
    3248:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    324a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    324c:	ldr	r3, [pc, #144]	; (32e0 <usb_serial_read+0xd4>)
    324e:	ldrh.w	lr, [r3, r5, lsl #1]
    3252:	ldr	r3, [pc, #148]	; (32e8 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3254:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3258:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    325c:	ldr	r3, [pc, #140]	; (32ec <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    325e:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3262:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    3264:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3266:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    3268:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    326a:	bcs.n	32a0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    326c:	add.w	r1, lr, r5, lsl #9
    3270:	mov	r2, r8
    3272:	add	r1, r3
    3274:	bl	2b94 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    3278:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    327a:	ldr.w	r1, [fp]
    327e:	mov	r0, r9
			rx_index[i] += len;
    3280:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3284:	rsb	r1, r8, r1
			rx_index[i] += len;
    3288:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    328a:	str.w	r1, [fp]
			rx_index[i] += len;
    328e:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3292:	ldr	r3, [pc, #92]	; (32f0 <usb_serial_read+0xe4>)
    3294:	mov.w	r2, #131072	; 0x20000
    3298:	str	r2, [r3, #0]
	return count;
}
    329a:	add	sp, #12
    329c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    32a0:	bl	2b94 <memcpy>
			p += avail;
			rx_available -= avail;
    32a4:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    32a8:	uxtb	r3, r4
			rx_queue_transfer(i);
    32aa:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    32ac:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    32ae:	add	sl, r6
			rx_available -= avail;
    32b0:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    32b4:	ldr	r2, [pc, #32]	; (32d8 <usb_serial_read+0xcc>)
    32b6:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    32b8:	bl	2dcc <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    32bc:	cmp	r9, r7
    32be:	bls.n	32c8 <usb_serial_read+0xbc>
    32c0:	ldr	r3, [pc, #24]	; (32dc <usb_serial_read+0xd0>)
    32c2:	ldrb	r3, [r3, #0]
    32c4:	cmp	r4, r3
    32c6:	bne.n	3236 <usb_serial_read+0x2a>
    32c8:	mov	r0, r7
    32ca:	b.n	3292 <usb_serial_read+0x86>
    32cc:	mov	r0, r1
    32ce:	b.n	3292 <usb_serial_read+0x86>
    32d0:	movs	r0, #0
    32d2:	b.n	3292 <usb_serial_read+0x86>
    32d4:	.word	0xe000e18c
    32d8:	.word	0x200021e0
    32dc:	.word	0x20002204
    32e0:	.word	0x200020b4
    32e4:	.word	0x200021e4
    32e8:	.word	0x200021f0
    32ec:	.word	0x20200000
    32f0:	.word	0xe000e10c
    32f4:	.word	0x20002200

000032f8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    32f8:	ldr	r3, [pc, #44]	; (3328 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    32fa:	ldr	r2, [pc, #48]	; (332c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    32fc:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    32fe:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3300:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    3302:	cmp	r3, r2
    3304:	beq.n	3322 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3306:	adds	r3, #1
	uint32_t i = rx_list[tail];
    3308:	ldr	r0, [pc, #36]	; (3330 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    330a:	ldr	r2, [pc, #40]	; (3334 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    330c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    330e:	ldr	r1, [pc, #40]	; (3338 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    3310:	it	cs
    3312:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3314:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3316:	ldrh.w	r1, [r1, r3, lsl #1]
    331a:	add.w	r3, r2, r3, lsl #9
    331e:	ldrb	r0, [r3, r1]
    3320:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    3322:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    3326:	bx	lr
    3328:	.word	0x200021e0
    332c:	.word	0x20002204
    3330:	.word	0x200021e4
    3334:	.word	0x20200000
    3338:	.word	0x200020b4

0000333c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    333c:	ldr	r3, [pc, #4]	; (3344 <usb_serial_available+0x8>)
    333e:	ldr	r0, [r3, #0]
}
    3340:	bx	lr
    3342:	nop
    3344:	.word	0x20002200

00003348 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    3348:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    334c:	ldr	r6, [pc, #84]	; (33a4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    334e:	ldr	r5, [pc, #88]	; (33a8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3350:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    3352:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3354:	uxtb	r4, r4
	while (tail != rx_head) {
    3356:	cmp	r4, r3
    3358:	beq.n	339e <usb_serial_flush_input+0x56>
    335a:	ldr.w	r9, [pc, #84]	; 33b0 <usb_serial_flush_input+0x68>
    335e:	ldr.w	fp, [pc, #84]	; 33b4 <usb_serial_flush_input+0x6c>
    3362:	ldr.w	r8, [pc, #84]	; 33b8 <usb_serial_flush_input+0x70>
    3366:	ldr	r7, [pc, #68]	; (33ac <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    3368:	adds	r4, #1
    336a:	cmp	r4, #8
    336c:	uxtb.w	sl, r4
    3370:	bls.n	3376 <usb_serial_flush_input+0x2e>
    3372:	movs	r4, #0
    3374:	mov	sl, r4
		uint32_t i = rx_list[tail];
    3376:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    337a:	ldr.w	r2, [fp]
    337e:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    3382:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    3384:	ldrh.w	r1, [r7, r1, lsl #1]
    3388:	subs	r3, r3, r1
    338a:	subs	r3, r2, r3
    338c:	str.w	r3, [fp]
		rx_queue_transfer(i);
    3390:	bl	2dcc <rx_queue_transfer>
		rx_tail = tail;
    3394:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    3398:	ldrb	r3, [r5, #0]
    339a:	cmp	r4, r3
    339c:	bne.n	3368 <usb_serial_flush_input+0x20>
    339e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33a2:	nop
    33a4:	.word	0x200021e0
    33a8:	.word	0x20002204
    33ac:	.word	0x200020b4
    33b0:	.word	0x200021e4
    33b4:	.word	0x20002200
    33b8:	.word	0x200021f0

000033bc <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    33bc:	push	{lr}
    33be:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    33c0:	movs	r1, #1
    33c2:	add.w	r0, sp, #7
    33c6:	bl	320c <usb_serial_read>
    33ca:	cbz	r0, 33d6 <usb_serial_getchar+0x1a>
    33cc:	ldrb.w	r0, [sp, #7]
	return -1;
}
    33d0:	add	sp, #12
    33d2:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    33d6:	mov.w	r0, #4294967295
    33da:	b.n	33d0 <usb_serial_getchar+0x14>

000033dc <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    33dc:	ldr	r3, [pc, #36]	; (3404 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    33de:	push	{lr}
    33e0:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    33e2:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    33e4:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    33e8:	cbnz	r3, 33f4 <usb_serial_putchar+0x18>
    33ea:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    33ee:	add	sp, #12
    33f0:	ldr.w	pc, [sp], #4
    33f4:	movs	r1, #1
    33f6:	add.w	r0, sp, #7
    33fa:	bl	2f84 <usb_serial_write.part.1>
    33fe:	add	sp, #12
    3400:	ldr.w	pc, [sp], #4
    3404:	.word	0x200022d8

00003408 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3408:	ldr	r3, [pc, #16]	; (341c <usb_serial_write+0x14>)
    340a:	ldrb	r3, [r3, #0]
    340c:	and.w	r2, r3, #255	; 0xff
    3410:	cbz	r3, 3416 <usb_serial_write+0xe>
    3412:	b.w	2f84 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3416:	mov	r0, r2
    3418:	bx	lr
    341a:	nop
    341c:	.word	0x200022d8

00003420 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    3420:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3424:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    3426:	ldr.w	r8, [pc, #64]	; 3468 <usb_serial_write_buffer_free+0x48>
    342a:	movs	r3, #1
    342c:	ldr	r5, [pc, #48]	; (3460 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    342e:	mov	r7, r4
    3430:	ldr	r6, [pc, #48]	; (3464 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    3432:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3436:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3438:	mov	r0, r5
    343a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    343c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    343e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3442:	beq.n	3450 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3444:	bl	40e8 <usb_transfer_status>
    3448:	lsls	r3, r0, #24
    344a:	it	pl
    344c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3450:	cmp	r4, #4
    3452:	bne.n	3436 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3454:	movs	r3, #0
	return sum;
}
    3456:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3458:	strb.w	r3, [r8]
	return sum;
}
    345c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3460:	.word	0x20002220
    3464:	.word	0x200020c7
    3468:	.word	0x200020c6

0000346c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    346c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    3470:	ldr	r3, [pc, #124]	; (34f0 <usb_serial_flush_output+0x84>)
    3472:	ldrb	r3, [r3, #0]
    3474:	cbz	r3, 347c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3476:	ldr	r5, [pc, #124]	; (34f4 <usb_serial_flush_output+0x88>)
    3478:	ldrh	r2, [r5, #0]
    347a:	cbnz	r2, 3480 <usb_serial_flush_output+0x14>
    347c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3480:	ldr.w	r8, [pc, #132]	; 3508 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3484:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3488:	ldr	r6, [pc, #108]	; (34f8 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    348a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    348e:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3492:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3494:	ldr	r4, [pc, #100]	; (34fc <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3496:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3498:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    349c:	ldr	r7, [pc, #96]	; (3500 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    349e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    34a2:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    34a4:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    34a8:	mov	r1, r4
    34aa:	bl	406c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    34ae:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    34b2:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    34b6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    34ba:	ldr	r3, [pc, #72]	; (3504 <usb_serial_flush_output+0x98>)
    34bc:	str	r1, [r3, #0]
		location += 32;
    34be:	adds	r1, #32
	} while (location < end_addr);
    34c0:	cmp	r2, r1
    34c2:	bhi.n	34bc <usb_serial_flush_output+0x50>
	asm("dsb");
    34c4:	dsb	sy
	asm("isb");
    34c8:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    34cc:	movs	r0, #4
    34ce:	mov	r1, r6
    34d0:	bl	409c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    34d4:	ldrb.w	r3, [r8]
    34d8:	ldr	r2, [pc, #44]	; (3508 <usb_serial_flush_output+0x9c>)
    34da:	adds	r3, #1
    34dc:	uxtb	r3, r3
    34de:	cmp	r3, #3
    34e0:	it	hi
    34e2:	movhi	r3, #0
    34e4:	strb	r3, [r2, #0]
	tx_available = 0;
    34e6:	movs	r3, #0
    34e8:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    34ea:	strb	r3, [r7, #0]
    34ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34f0:	.word	0x200022d8
    34f4:	.word	0x20002206
    34f8:	.word	0x20002220
    34fc:	.word	0x20201000
    3500:	.word	0x200020c6
    3504:	.word	0xe000ef70
    3508:	.word	0x200020c7

0000350c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    350c:	ldr	r2, [pc, #600]	; (3768 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    350e:	ldr	r3, [pc, #604]	; (376c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3510:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    3512:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    3516:	ldr	r4, [pc, #600]	; (3770 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3518:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    351c:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    351e:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3520:	bls.n	355c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3522:	ldr	r3, [pc, #592]	; (3774 <set_arm_clock+0x268>)
    3524:	cmp	r0, r3
    3526:	bls.w	3754 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    352a:	ldr	r3, [pc, #588]	; (3778 <set_arm_clock+0x26c>)
    352c:	movw	r5, #1575	; 0x627
    3530:	ldr	r7, [pc, #584]	; (377c <set_arm_clock+0x270>)
    3532:	add	r3, r0
    3534:	ldr	r4, [pc, #584]	; (3780 <set_arm_clock+0x274>)
    3536:	lsrs	r2, r3, #8
    3538:	umull	r3, r2, r7, r2
    353c:	lsrs	r3, r2, #7
    353e:	add.w	r3, r3, r3, lsl #2
    3542:	add.w	r2, r3, r3, lsl #2
    3546:	addw	r3, r2, #1250	; 0x4e2
    354a:	cmp	r3, r5
    354c:	it	cs
    354e:	movcs	r3, r5
    3550:	sub.w	r3, r3, #800	; 0x320
    3554:	umull	r3, r5, r4, r3
    3558:	lsrs	r5, r5, #3
    355a:	b.n	3566 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    355c:	ldr	r5, [pc, #548]	; (3784 <set_arm_clock+0x278>)
    355e:	cmp	r0, r5
    3560:	ite	ls
    3562:	movls	r5, #6
    3564:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3566:	ldr	r2, [pc, #516]	; (376c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3568:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    356c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3570:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3572:	orr.w	r3, r3, #192	; 0xc0
    3576:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    357a:	bcs.n	3592 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    357c:	ldr	r3, [pc, #496]	; (3770 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    357e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3582:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3584:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3586:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3588:	ldr	r3, [r2, #0]
    358a:	cmp	r3, #0
    358c:	bge.n	3588 <set_arm_clock+0x7c>
    358e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3592:	ands.w	r3, lr, #33554432	; 0x2000000
    3596:	bne.n	35fc <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3598:	ldr	r4, [pc, #492]	; (3788 <set_arm_clock+0x27c>)
    359a:	ldr	r2, [pc, #496]	; (378c <set_arm_clock+0x280>)
    359c:	ldr.w	ip, [r4, #16]
    35a0:	mov	r4, r2
    35a2:	and.w	r2, ip, r2
    35a6:	cmp	r2, r4
    35a8:	itet	eq
    35aa:	moveq.w	r3, #402653184	; 0x18000000
    35ae:	movne.w	r2, #4096	; 0x1000
    35b2:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    35b4:	eor.w	r4, lr, r3
    35b8:	tst.w	r4, #939524096	; 0x38000000
    35bc:	beq.n	35d0 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    35be:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    35c2:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    35c6:	ldr	r4, [pc, #420]	; (376c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    35c8:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    35cc:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    35d0:	eor.w	r3, r1, r2
    35d4:	tst.w	r3, #12288	; 0x3000
    35d8:	beq.n	35ec <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    35da:	ldr	r3, [pc, #400]	; (376c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    35dc:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    35e0:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    35e2:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    35e4:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    35e6:	ldr	r3, [r2, #72]	; 0x48
    35e8:	lsls	r4, r3, #28
    35ea:	bmi.n	35e6 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    35ec:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    35f0:	ldr	r2, [pc, #376]	; (376c <set_arm_clock+0x260>)
    35f2:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    35f6:	ldr	r3, [r2, #72]	; 0x48
    35f8:	lsls	r1, r3, #26
    35fa:	bmi.n	35f6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    35fc:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    35fe:	ldr	r4, [pc, #400]	; (3790 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    3600:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    3602:	mul.w	r3, r1, r2
    3606:	mul.w	r3, r0, r3
    360a:	cmp	r3, r4
    360c:	bhi.n	3622 <set_arm_clock+0x116>
		if (div_arm < 8) {
    360e:	cmp	r2, #7
    3610:	bhi.w	373e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    3614:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    3616:	mul.w	r3, r1, r2
    361a:	mul.w	r3, r0, r3
    361e:	cmp	r3, r4
    3620:	bls.n	360e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3622:	ldr	r0, [pc, #368]	; (3794 <set_arm_clock+0x288>)
    3624:	ldr	r4, [pc, #368]	; (3798 <set_arm_clock+0x28c>)
    3626:	add	r0, r3
    3628:	umull	r0, r3, r4, r0
    362c:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    362e:	cmp	r3, #108	; 0x6c
    3630:	bhi.w	374a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    3634:	cmp	r3, #53	; 0x35
    3636:	bhi.w	3758 <set_arm_clock+0x24c>
    363a:	ldr.w	r8, [pc, #392]	; 37c4 <set_arm_clock+0x2b8>
    363e:	movs	r3, #54	; 0x36
    3640:	ldr	r0, [pc, #344]	; (379c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3642:	ldr.w	ip, [pc, #324]	; 3788 <set_arm_clock+0x27c>
    3646:	ldr	r4, [pc, #344]	; (37a0 <set_arm_clock+0x294>)
    3648:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    364c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3650:	and.w	r4, r9, r4
    3654:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    3656:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    365a:	beq.n	3674 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    365c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3660:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3664:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3666:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    366a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    366e:	ldr	r3, [r4, #0]
    3670:	cmp	r3, #0
    3672:	bge.n	366e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3674:	ldr.w	ip, [pc, #244]	; 376c <set_arm_clock+0x260>
    3678:	subs	r2, #1
    367a:	ldr.w	r3, [ip, #16]
    367e:	and.w	r3, r3, #7
    3682:	cmp	r3, r2
    3684:	beq.n	3696 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3686:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    368a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    368c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3690:	ldr	r3, [r4, #72]	; 0x48
    3692:	lsls	r3, r3, #15
    3694:	bmi.n	3690 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3696:	subs	r1, #1
    3698:	lsls	r1, r1, #10
    369a:	eor.w	r3, lr, r1
    369e:	tst.w	r3, #7168	; 0x1c00
    36a2:	beq.n	36be <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    36a4:	ldr	r3, [pc, #196]	; (376c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    36a6:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36aa:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    36ae:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36b0:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    36b4:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    36b8:	ldr	r3, [r2, #72]	; 0x48
    36ba:	lsls	r1, r3, #30
    36bc:	bmi.n	36b8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    36be:	ldr	r3, [pc, #228]	; (37a4 <set_arm_clock+0x298>)
    36c0:	ldr	r1, [pc, #228]	; (37a8 <set_arm_clock+0x29c>)
    36c2:	add	r3, r0
    36c4:	lsrs	r3, r3, #7
    36c6:	umull	r3, r1, r1, r3
    36ca:	lsrs	r1, r1, #12
    36cc:	cmp	r1, #4
    36ce:	it	cs
    36d0:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    36d2:	subs	r3, r1, #1
    36d4:	lsls	r3, r3, #8
    36d6:	eor.w	r2, lr, r3
    36da:	tst.w	r2, #768	; 0x300
    36de:	beq.n	36f0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    36e0:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    36e4:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    36e8:	ldr	r2, [pc, #128]	; (376c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    36ea:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    36ee:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    36f0:	ldr	r3, [pc, #120]	; (376c <set_arm_clock+0x260>)
    36f2:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    36f4:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    36f6:	bic.w	r4, r4, #33554432	; 0x2000000
    36fa:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    36fc:	ldr	r3, [r2, #72]	; 0x48
    36fe:	lsls	r3, r3, #26
    3700:	bmi.n	36fc <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3702:	ldr	r3, [pc, #168]	; (37ac <set_arm_clock+0x2a0>)
    3704:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    3708:	ldr	r4, [pc, #164]	; (37b0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    370a:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    370c:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    3710:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3712:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    3716:	ldr	r4, [pc, #156]	; (37b4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3718:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    371c:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3720:	ldr	r2, [pc, #148]	; (37b8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    3722:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3724:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3726:	bcs.n	373a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3728:	ldr	r3, [pc, #68]	; (3770 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    372a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    372e:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3730:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3732:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3734:	ldr	r3, [r2, #0]
    3736:	cmp	r3, #0
    3738:	bge.n	3734 <set_arm_clock+0x228>
	}

	return frequency;
}
    373a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    373e:	cmp	r1, #4
    3740:	bhi.w	3622 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    3744:	adds	r1, #1
				div_arm = 1;
    3746:	movs	r2, #1
    3748:	b.n	3602 <set_arm_clock+0xf6>
    374a:	ldr.w	r8, [pc, #124]	; 37c8 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    374e:	movs	r3, #108	; 0x6c
    3750:	ldr	r0, [pc, #104]	; (37bc <set_arm_clock+0x2b0>)
    3752:	b.n	3642 <set_arm_clock+0x136>
    3754:	movs	r5, #18
    3756:	b.n	3566 <set_arm_clock+0x5a>
    3758:	ldr	r0, [pc, #100]	; (37c0 <set_arm_clock+0x2b4>)
    375a:	ldr.w	r8, [pc, #112]	; 37cc <set_arm_clock+0x2c0>
    375e:	mul.w	r0, r0, r3
    3762:	orr.w	r8, r3, r8
    3766:	b.n	3642 <set_arm_clock+0x136>
    3768:	.word	0x1f78a400
    376c:	.word	0x400fc000
    3770:	.word	0x40080000
    3774:	.word	0x23c34600
    3778:	.word	0xdc3cba00
    377c:	.word	0x004cb223
    3780:	.word	0x51eb851f
    3784:	.word	0x016e3600
    3788:	.word	0x400d8000
    378c:	.word	0x80003040
    3790:	.word	0x269fb1ff
    3794:	.word	0x005b8d80
    3798:	.word	0x165e9f81
    379c:	.word	0x269fb200
    37a0:	.word	0x8001307f
    37a4:	.word	0x08f0d17f
    37a8:	.word	0x00e5109f
    37ac:	.word	0x431bde83
    37b0:	.word	0x200011a4
    37b4:	.word	0x200011a0
    37b8:	.word	0x200022e0
    37bc:	.word	0x4d3f6400
    37c0:	.word	0x00b71b00
    37c4:	.word	0x80002036
    37c8:	.word	0x8000206c
    37cc:	.word	0x80002000

000037d0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    37d0:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    37d2:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    37d4:	cbz	r3, 37de <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    37d6:	ldr	r3, [r2, #4]
    37d8:	orr.w	r3, r3, #32768	; 0x8000
    37dc:	str	r3, [r2, #4]
	}
	__disable_irq();
    37de:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    37e0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    37e2:	cbz	r4, 380c <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    37e4:	ldr	r3, [pc, #64]	; (3828 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    37e6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    37e8:	ldr.w	r4, [r3, #432]	; 0x1b0
    37ec:	tst	r4, r1
    37ee:	bne.n	3820 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    37f0:	ldr.w	r4, [r3, #320]	; 0x140
    37f4:	orr.w	r4, r4, #16384	; 0x4000
    37f8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    37fc:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    3800:	ldr.w	r4, [r3, #320]	; 0x140
    3804:	lsls	r4, r4, #17
    3806:	bpl.n	37f0 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3808:	tst	r1, r5
    380a:	bne.n	3820 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    380c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    380e:	ldr	r4, [pc, #24]	; (3828 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    3810:	str	r2, [r0, #8]
	endpoint->status = 0;
    3812:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    3814:	ldr.w	r3, [r4, #432]	; 0x1b0
    3818:	orrs	r1, r3
    381a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    381e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    3820:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3822:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3824:	pop	{r4, r5}
    3826:	bx	lr
    3828:	.word	0x402e0000

0000382c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    382c:	push	{r4, r5, r6, lr}
    382e:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3830:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    3832:	cbz	r0, 385a <run_callbacks+0x2e>
    3834:	mov	r2, r0
    3836:	movs	r4, #0
    3838:	b.n	3842 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    383a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    383c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    383e:	cmp	r2, #1
    3840:	beq.n	385c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3842:	ldr	r3, [r2, #4]
    3844:	ands.w	r3, r3, #128	; 0x80
    3848:	beq.n	383a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    384a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    384c:	cbz	r4, 385a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    384e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3850:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    3852:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3854:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3856:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3858:	bne.n	384e <run_callbacks+0x22>
    385a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    385c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    385e:	str	r3, [r6, #52]	; 0x34
			break;
    3860:	b.n	384c <run_callbacks+0x20>
    3862:	nop

00003864 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3864:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3866:	cbnz	r1, 38a6 <endpoint0_transmit.constprop.1+0x42>
    3868:	ldr	r4, [pc, #136]	; (38f4 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    386a:	ldr	r1, [pc, #140]	; (38f8 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    386c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    386e:	ldr	r3, [pc, #140]	; (38fc <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3870:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3872:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3874:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3876:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3878:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    387a:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    387c:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    387e:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3882:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3884:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3888:	ldr	r5, [pc, #116]	; (3900 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    388a:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    388e:	ldr.w	r1, [r3, #432]	; 0x1b0
    3892:	orr.w	r1, r1, #1
    3896:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    389a:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    389c:	ldr.w	r3, [r2, #432]	; 0x1b0
    38a0:	cmp	r3, #0
    38a2:	bne.n	389c <endpoint0_transmit.constprop.1+0x38>
}
    38a4:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    38a6:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    38a8:	ldr	r3, [pc, #88]	; (3904 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    38aa:	ldr	r5, [pc, #80]	; (38fc <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    38ac:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    38ae:	ldr	r4, [pc, #68]	; (38f4 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    38b0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    38b4:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    38b6:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    38b8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    38ba:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    38be:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    38c0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    38c4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    38c6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    38ca:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    38ce:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    38d2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    38d4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    38d6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    38da:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    38de:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    38e2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    38e4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    38e6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    38ea:	ldr.w	r3, [r2, #432]	; 0x1b0
    38ee:	cmp	r3, #0
    38f0:	bne.n	38ea <endpoint0_transmit.constprop.1+0x86>
    38f2:	b.n	386a <endpoint0_transmit.constprop.1+0x6>
    38f4:	.word	0x20004000
    38f8:	.word	0x20003020
    38fc:	.word	0x402e0000
    3900:	.word	0x200022b4
    3904:	.word	0x20003000

00003908 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    3908:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    390c:	ldr	r4, [pc, #752]	; (3c00 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    390e:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    3910:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    3914:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    3918:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    391c:	beq.n	39dc <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    391e:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3922:	cmp	r3, #0
    3924:	beq.n	39d2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3926:	mov.w	fp, #65537	; 0x10001
    392a:	ldr.w	r9, [pc, #764]	; 3c28 <isr+0x320>
    392e:	ldr	r6, [pc, #724]	; (3c04 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3930:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3932:	mov	sl, fp
    3934:	ldr	r0, [r6, #40]	; 0x28
    3936:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    3938:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    393c:	ldr.w	r3, [r4, #320]	; 0x140
    3940:	orr.w	r3, r3, #8192	; 0x2000
    3944:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    3948:	ldr.w	r3, [r4, #320]	; 0x140
    394c:	lsls	r7, r3, #18
    394e:	bpl.n	393c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3950:	ldr.w	r3, [r5, #320]	; 0x140
    3954:	bic.w	r3, r3, #8192	; 0x2000
    3958:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    395c:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3960:	ldr.w	r3, [r4, #436]	; 0x1b4
    3964:	ands.w	r3, r3, #65537	; 0x10001
    3968:	bne.n	3960 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    396a:	uxth	r1, r0
    396c:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    3970:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3974:	cmp	r1, r7
    3976:	bhi.w	3ac4 <isr+0x1bc>
    397a:	cmp.w	r1, #1664	; 0x680
    397e:	bcs.w	3d58 <isr+0x450>
    3982:	cmp.w	r1, #258	; 0x102
    3986:	beq.w	3c5e <isr+0x356>
    398a:	bhi.w	3b56 <isr+0x24e>
    398e:	cmp	r1, #128	; 0x80
    3990:	beq.w	3c44 <isr+0x33c>
    3994:	cmp	r1, #130	; 0x82
    3996:	bne.w	3b46 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    399a:	uxth	r2, r2
    399c:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    39a0:	cmp	r1, #7
    39a2:	bhi.w	3b46 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    39a6:	lsls	r1, r1, #2
    39a8:	ldr	r0, [pc, #604]	; (3c08 <isr+0x300>)
		reply_buffer[0] = 0;
    39aa:	ldr	r7, [pc, #608]	; (3c0c <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    39ac:	add	r0, r1
    39ae:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    39b0:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    39b2:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    39b4:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    39b6:	bpl.w	3dd6 <isr+0x4ce>
    39ba:	lsls	r2, r1, #15
    39bc:	bpl.n	39c2 <isr+0xba>
			reply_buffer[0] = 1;
    39be:	movs	r3, #1
    39c0:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    39c2:	movs	r1, #2
    39c4:	ldr	r0, [pc, #580]	; (3c0c <isr+0x304>)
    39c6:	bl	3864 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    39ca:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    39ce:	cmp	r3, #0
    39d0:	bne.n	3934 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    39d2:	ldr	r2, [pc, #556]	; (3c00 <isr+0x2f8>)
    39d4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    39d8:	cmp	r3, #0
    39da:	bne.n	3a7e <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    39dc:	tst.w	r8, #64	; 0x40
    39e0:	beq.n	3a14 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    39e2:	ldr	r3, [pc, #540]	; (3c00 <isr+0x2f8>)
    39e4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    39e8:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    39ea:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    39ee:	ldr.w	r1, [r3, #444]	; 0x1bc
    39f2:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    39f6:	ldr.w	r4, [r2, #432]	; 0x1b0
    39fa:	ldr	r3, [pc, #516]	; (3c00 <isr+0x2f8>)
    39fc:	cmp	r4, #0
    39fe:	bne.n	39f6 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3a00:	mov.w	r2, #4294967295
    3a04:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    3a08:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    3a0c:	bl	3100 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    3a10:	ldr	r3, [pc, #508]	; (3c10 <isr+0x308>)
    3a12:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    3a14:	tst.w	r8, #16777216	; 0x1000000
    3a18:	beq.n	3a22 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    3a1a:	ldr	r3, [pc, #504]	; (3c14 <isr+0x30c>)
    3a1c:	ldr	r3, [r3, #0]
    3a1e:	cbz	r3, 3a22 <isr+0x11a>
    3a20:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    3a22:	tst.w	r8, #33554432	; 0x2000000
    3a26:	beq.n	3a30 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    3a28:	ldr	r3, [pc, #492]	; (3c18 <isr+0x310>)
    3a2a:	ldr	r3, [r3, #0]
    3a2c:	cbz	r3, 3a30 <isr+0x128>
    3a2e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    3a30:	tst.w	r8, #4
    3a34:	beq.n	3a48 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    3a36:	ldr	r3, [pc, #456]	; (3c00 <isr+0x2f8>)
    3a38:	ldr.w	r3, [r3, #388]	; 0x184
    3a3c:	ands.w	r3, r3, #512	; 0x200
    3a40:	beq.n	3abe <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    3a42:	ldr	r3, [pc, #472]	; (3c1c <isr+0x314>)
    3a44:	movs	r2, #1
    3a46:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3a48:	ldr	r3, [pc, #436]	; (3c00 <isr+0x2f8>)
    3a4a:	ldr.w	r2, [r3, #328]	; 0x148
    3a4e:	lsls	r2, r2, #24
    3a50:	bpl.n	3a78 <isr+0x170>
    3a52:	tst.w	r8, #128	; 0x80
    3a56:	beq.n	3a78 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    3a58:	ldr	r1, [pc, #452]	; (3c20 <isr+0x318>)
    3a5a:	ldrb	r2, [r1, #0]
    3a5c:	cbz	r2, 3a78 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    3a5e:	subs	r2, #1
    3a60:	uxtb	r2, r2
    3a62:	strb	r2, [r1, #0]
    3a64:	cbnz	r2, 3a78 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    3a66:	ldr	r1, [pc, #444]	; (3c24 <isr+0x31c>)
    3a68:	ldrb	r2, [r1, #0]
    3a6a:	and.w	r2, r2, #251	; 0xfb
    3a6e:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    3a70:	cmp	r2, #0
    3a72:	beq.w	3eda <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    3a76:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    3a78:	add	sp, #12
    3a7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3a7e:	ldr	r1, [pc, #424]	; (3c28 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    3a80:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3a84:	ldr	r0, [r1, #0]
    3a86:	tst	r3, r0
    3a88:	bne.w	3e62 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    3a8c:	ldr	r2, [pc, #384]	; (3c10 <isr+0x308>)
    3a8e:	ldr	r4, [r2, #0]
			if (completestatus) {
    3a90:	ands	r4, r3
    3a92:	beq.n	39dc <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    3a94:	lsls	r3, r4, #29
    3a96:	bmi.w	3ef8 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    3a9a:	lsls	r7, r4, #13
    3a9c:	bmi.w	3ef0 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    3aa0:	lsls	r6, r4, #28
    3aa2:	bmi.w	3f08 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    3aa6:	lsls	r5, r4, #12
    3aa8:	bmi.w	3f00 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    3aac:	lsls	r0, r4, #27
    3aae:	bmi.w	3ee8 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    3ab2:	lsls	r1, r4, #11
    3ab4:	bpl.n	39dc <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    3ab6:	ldr	r0, [pc, #372]	; (3c2c <isr+0x324>)
    3ab8:	bl	382c <run_callbacks>
    3abc:	b.n	39dc <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    3abe:	ldr	r2, [pc, #348]	; (3c1c <isr+0x314>)
    3ac0:	strb	r3, [r2, #0]
    3ac2:	b.n	3a48 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3ac4:	movw	r7, #8225	; 0x2021
    3ac8:	cmp	r1, r7
    3aca:	beq.n	3b3e <isr+0x236>
    3acc:	bhi.n	3bae <isr+0x2a6>
    3ace:	cmp.w	r1, #2176	; 0x880
    3ad2:	beq.w	3d3c <isr+0x434>
    3ad6:	cmp.w	r1, #2304	; 0x900
    3ada:	bne.n	3b46 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3adc:	ubfx	r0, r0, #16, #8
    3ae0:	ldr	r2, [pc, #332]	; (3c30 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3ae2:	ldr	r1, [pc, #336]	; (3c34 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3ae4:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3ae6:	ldr	r7, [pc, #336]	; (3c38 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3ae8:	ldr	r2, [pc, #336]	; (3c3c <isr+0x334>)
    3aea:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3aec:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3af0:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3af4:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    3af8:	bl	3104 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3afc:	ldr	r2, [pc, #320]	; (3c40 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3afe:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3b00:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3b02:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3b04:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3b06:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3b08:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b0a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3b0e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b10:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3b14:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b16:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3b1a:	ldr.w	r2, [r5, #432]	; 0x1b0
    3b1e:	orr.w	r2, r2, #65536	; 0x10000
    3b22:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3b26:	ldr	r2, [pc, #256]	; (3c28 <isr+0x320>)
    3b28:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    3b2a:	ldr.w	r3, [r4, #432]	; 0x1b0
    3b2e:	cmp	r3, #0
    3b30:	bne.n	3b2a <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3b32:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3b36:	cmp	r3, #0
    3b38:	bne.w	3934 <isr+0x2c>
    3b3c:	b.n	39d2 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    3b3e:	lsrs	r1, r2, #16
    3b40:	cmp	r1, #7
    3b42:	beq.w	3dde <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3b46:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3b4a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3b4e:	cmp	r3, #0
    3b50:	bne.w	3934 <isr+0x2c>
    3b54:	b.n	39d2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3b56:	movw	r7, #770	; 0x302
    3b5a:	cmp	r1, r7
    3b5c:	beq.w	3cd6 <isr+0x3ce>
    3b60:	cmp.w	r1, #1280	; 0x500
    3b64:	bne.n	3b46 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3b66:	ldr	r2, [pc, #216]	; (3c40 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3b68:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3b6a:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3b6c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3b6e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3b70:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b72:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3b76:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b78:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3b7c:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3b7e:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3b82:	ldr.w	r3, [r5, #432]	; 0x1b0
    3b86:	orr.w	r3, r3, #65536	; 0x10000
    3b8a:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3b8e:	ldr.w	r3, [r4, #432]	; 0x1b0
    3b92:	cmp	r3, #0
    3b94:	bne.n	3b8e <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3b96:	lsrs	r3, r0, #16
    3b98:	lsls	r3, r3, #25
    3b9a:	orr.w	r3, r3, #16777216	; 0x1000000
    3b9e:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3ba2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3ba6:	cmp	r3, #0
    3ba8:	bne.w	3934 <isr+0x2c>
    3bac:	b.n	39d2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3bae:	movw	r3, #8737	; 0x2221
    3bb2:	cmp	r1, r3
    3bb4:	beq.w	3cc4 <isr+0x3bc>
    3bb8:	movw	r3, #8993	; 0x2321
    3bbc:	cmp	r1, r3
    3bbe:	bne.n	3b46 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3bc0:	ldr	r3, [pc, #124]	; (3c40 <isr+0x338>)
    3bc2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3bc4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3bc6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3bc8:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3bca:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3bcc:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3bd0:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3bd2:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3bd6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3bd8:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3bda:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3bde:	ldr.w	r3, [r4, #432]	; 0x1b0
    3be2:	orr.w	r3, r3, #65536	; 0x10000
    3be6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3bea:	ldr.w	r3, [r4, #432]	; 0x1b0
    3bee:	cmp	r3, #0
    3bf0:	bne.n	3bea <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3bf2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3bf6:	cmp	r3, #0
    3bf8:	bne.w	3934 <isr+0x2c>
    3bfc:	b.n	39d2 <isr+0xca>
    3bfe:	nop
    3c00:	.word	0x402e0000
    3c04:	.word	0x20004000
    3c08:	.word	0x402e01c0
    3c0c:	.word	0x200022c8
    3c10:	.word	0x200022a4
    3c14:	.word	0x200022a0
    3c18:	.word	0x200022ac
    3c1c:	.word	0x200022b0
    3c20:	.word	0x200022b8
    3c24:	.word	0x200022a8
    3c28:	.word	0x200022b4
    3c2c:	.word	0x20004240
    3c30:	.word	0x200022d8
    3c34:	.word	0x000200c8
    3c38:	.word	0x00cc0002
    3c3c:	.word	0x00c80002
    3c40:	.word	0x20003020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3c44:	ldr	r2, [pc, #744]	; (3f30 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    3c46:	movs	r1, #2
    3c48:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3c4a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    3c4c:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    3c4e:	bl	3864 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3c52:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3c56:	cmp	r3, #0
    3c58:	bne.w	3934 <isr+0x2c>
    3c5c:	b.n	39d2 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3c5e:	uxth	r2, r2
    3c60:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3c64:	cmp	r3, #7
    3c66:	bhi.w	3b46 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3c6a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3c6e:	mov.w	r3, r3, lsl #2
    3c72:	ldr	r2, [pc, #704]	; (3f34 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c74:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3c78:	add	r2, r3
    3c7a:	ldr	r3, [r2, #0]
    3c7c:	ite	ne
    3c7e:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    3c82:	biceq.w	r3, r3, #1
    3c86:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3c88:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3c8a:	ldr	r3, [pc, #684]	; (3f38 <isr+0x630>)
    3c8c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3c8e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3c90:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3c92:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3c96:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3c98:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3c9c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3c9e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3ca0:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3ca4:	ldr.w	r3, [r4, #432]	; 0x1b0
    3ca8:	orr.w	r3, r3, #65536	; 0x10000
    3cac:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3cb0:	ldr.w	r3, [r4, #432]	; 0x1b0
    3cb4:	cmp	r3, #0
    3cb6:	bne.n	3cb0 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3cb8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3cbc:	cmp	r3, #0
    3cbe:	bne.w	3934 <isr+0x2c>
    3cc2:	b.n	39d2 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3cc4:	ldr	r3, [pc, #628]	; (3f3c <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3cc6:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3cca:	ldr	r2, [pc, #628]	; (3f40 <isr+0x638>)
    3ccc:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3cce:	ldr	r3, [pc, #628]	; (3f44 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3cd0:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3cd2:	strb	r0, [r3, #0]
    3cd4:	b.n	3bc0 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3cd6:	uxth	r2, r2
    3cd8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3cdc:	cmp	r3, #7
    3cde:	bhi.w	3b46 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3ce2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3ce6:	mov.w	r3, r3, lsl #2
    3cea:	ldr	r2, [pc, #584]	; (3f34 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3cec:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3cf0:	add	r2, r3
    3cf2:	ldr	r3, [r2, #0]
    3cf4:	ite	ne
    3cf6:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3cfa:	orreq.w	r3, r3, #1
    3cfe:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d00:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3d02:	ldr	r3, [pc, #564]	; (3f38 <isr+0x630>)
    3d04:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3d06:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3d08:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3d0a:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3d0e:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3d10:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3d14:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3d16:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3d18:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3d1c:	ldr.w	r3, [r4, #432]	; 0x1b0
    3d20:	orr.w	r3, r3, #65536	; 0x10000
    3d24:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3d28:	ldr.w	r3, [r4, #432]	; 0x1b0
    3d2c:	cmp	r3, #0
    3d2e:	bne.n	3d28 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3d30:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3d34:	cmp	r3, #0
    3d36:	bne.w	3934 <isr+0x2c>
    3d3a:	b.n	39d2 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3d3c:	ldr	r2, [pc, #520]	; (3f48 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    3d3e:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3d40:	ldr	r3, [pc, #492]	; (3f30 <isr+0x628>)
    3d42:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3d44:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3d46:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3d48:	bl	3864 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3d4c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3d50:	cmp	r3, #0
    3d52:	bne.w	3934 <isr+0x2c>
    3d56:	b.n	39d2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3d58:	ldr	r3, [pc, #496]	; (3f4c <isr+0x644>)
    3d5a:	ldr	r1, [r3, #4]
    3d5c:	cmp	r1, #0
    3d5e:	beq.w	3b46 <isr+0x23e>
    3d62:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d64:	uxth.w	lr, r2
    3d68:	b.n	3d74 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3d6a:	adds	r3, #12
    3d6c:	ldr	r1, [r3, #4]
    3d6e:	cmp	r1, #0
    3d70:	beq.w	3b46 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d74:	ldrh	r7, [r3, #0]
    3d76:	cmp	r7, r0
    3d78:	bne.n	3d6a <isr+0x462>
    3d7a:	ldrh	r7, [r3, #2]
    3d7c:	cmp	r7, lr
    3d7e:	bne.n	3d6a <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    3d80:	lsrs	r7, r0, #8
    3d82:	cmp	r7, #3
    3d84:	beq.w	3f94 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    3d88:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3d8a:	lsrs	r2, r2, #16
    3d8c:	cmp	r3, r2
    3d8e:	it	cs
    3d90:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    3d92:	cmp.w	r0, #512	; 0x200
    3d96:	beq.w	3f10 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    3d9a:	cmp.w	r0, #1792	; 0x700
    3d9e:	beq.w	3eb4 <isr+0x5ac>
    3da2:	ldr	r7, [pc, #428]	; (3f50 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    3da4:	mov	r2, r3
    3da6:	str	r3, [sp, #4]
    3da8:	mov	r0, r7
    3daa:	bl	2b94 <memcpy>
    3dae:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3db0:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3db4:	add	r7, r3
	asm("dsb");
    3db6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3dba:	ldr	r1, [pc, #408]	; (3f54 <isr+0x64c>)
    3dbc:	str	r2, [r1, #0]
		location += 32;
    3dbe:	adds	r2, #32
	} while (location < end_addr);
    3dc0:	cmp	r7, r2
    3dc2:	bhi.n	3dba <isr+0x4b2>
	asm("dsb");
    3dc4:	dsb	sy
	asm("isb");
    3dc8:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    3dcc:	ldr	r0, [pc, #384]	; (3f50 <isr+0x648>)
    3dce:	mov	r1, r3
    3dd0:	bl	3864 <endpoint0_transmit.constprop.1>
    3dd4:	b.n	39ca <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3dd6:	lsls	r3, r1, #31
    3dd8:	bpl.w	39c2 <isr+0xba>
    3ddc:	b.n	39be <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3dde:	ldr	r7, [pc, #376]	; (3f58 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3de0:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    3de4:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3de6:	ldr	r1, [pc, #372]	; (3f5c <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3de8:	ldr	r3, [pc, #372]	; (3f60 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3dea:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3dec:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3df0:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3df2:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    3df6:	ldr	r1, [pc, #364]	; (3f64 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3df8:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3dfa:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3dfe:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3e02:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3e06:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e08:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3e0c:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e10:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3e14:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3e16:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3e18:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e1c:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e1e:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    3e20:	ldr.w	r3, [r4, #432]	; 0x1b0
    3e24:	cmp	r3, #0
    3e26:	bne.n	3e20 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    3e28:	ldr	r2, [pc, #268]	; (3f38 <isr+0x630>)
    3e2a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3e2c:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3e30:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3e32:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3e34:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3e38:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3e3a:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3e3e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3e40:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3e44:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3e46:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3e4a:	ldr.w	r3, [r5, #432]	; 0x1b0
    3e4e:	orrs	r3, r0
    3e50:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3e54:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3e58:	ldr.w	r3, [r4, #432]	; 0x1b0
    3e5c:	cmp	r3, #0
    3e5e:	bne.n	3e58 <isr+0x550>
    3e60:	b.n	39ca <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    3e62:	ldr	r4, [pc, #244]	; (3f58 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3e64:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3e68:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3e6a:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3e6c:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3e6e:	cmp	r4, r0
    3e70:	bne.w	3a8c <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3e74:	ldr	r1, [pc, #236]	; (3f64 <isr+0x65c>)
    3e76:	ldr	r4, [pc, #240]	; (3f68 <isr+0x660>)
    3e78:	ldmia	r1, {r0, r1}
    3e7a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3e7c:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3e7e:	str	r0, [r4, #0]
    3e80:	strh	r1, [r4, #4]
    3e82:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3e84:	bne.w	3a8c <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    3e88:	cpsid	i
	sof_usage |= (1 << interface);
    3e8a:	ldr	r0, [pc, #224]	; (3f6c <isr+0x664>)
    3e8c:	ldrb	r1, [r0, #0]
    3e8e:	orr.w	r1, r1, #4
    3e92:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    3e94:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    3e98:	lsls	r0, r1, #24
    3e9a:	bmi.n	3eaa <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3e9c:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3ea0:	movs	r0, #128	; 0x80
    3ea2:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3ea6:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    3eaa:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    3eac:	ldr	r2, [pc, #192]	; (3f70 <isr+0x668>)
    3eae:	movs	r1, #80	; 0x50
    3eb0:	strb	r1, [r2, #0]
    3eb2:	b.n	3a8c <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3eb4:	ldr	r0, [pc, #188]	; (3f74 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3eb6:	mov	r2, r3
    3eb8:	ldr	r7, [pc, #148]	; (3f50 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3eba:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    3ebe:	ldr	r1, [pc, #184]	; (3f78 <isr+0x670>)
    3ec0:	ldr	r0, [pc, #184]	; (3f7c <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    3ec2:	str	r3, [sp, #4]
    3ec4:	cmp.w	lr, #0
    3ec8:	it	eq
    3eca:	moveq	r1, r0
    3ecc:	mov	r0, r7
    3ece:	bl	2b94 <memcpy>
					usb_descriptor_buffer[1] = 7;
    3ed2:	movs	r2, #7
    3ed4:	ldr	r3, [sp, #4]
    3ed6:	strb	r2, [r7, #1]
    3ed8:	b.n	3db0 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3eda:	ldr.w	r2, [r3, #328]	; 0x148
    3ede:	bic.w	r2, r2, #128	; 0x80
    3ee2:	str.w	r2, [r3, #328]	; 0x148
    3ee6:	b.n	3a76 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3ee8:	ldr	r0, [pc, #148]	; (3f80 <isr+0x678>)
    3eea:	bl	382c <run_callbacks>
    3eee:	b.n	3ab2 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    3ef0:	ldr	r0, [pc, #144]	; (3f84 <isr+0x67c>)
    3ef2:	bl	382c <run_callbacks>
    3ef6:	b.n	3aa0 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3ef8:	ldr	r0, [pc, #140]	; (3f88 <isr+0x680>)
    3efa:	bl	382c <run_callbacks>
    3efe:	b.n	3a9a <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    3f00:	ldr	r0, [pc, #136]	; (3f8c <isr+0x684>)
    3f02:	bl	382c <run_callbacks>
    3f06:	b.n	3aac <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    3f08:	ldr	r0, [pc, #132]	; (3f90 <isr+0x688>)
    3f0a:	bl	382c <run_callbacks>
    3f0e:	b.n	3aa6 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    3f10:	ldr	r0, [pc, #96]	; (3f74 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3f12:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3f14:	ldr	r1, [pc, #100]	; (3f7c <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    3f16:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3f18:	ldr	r0, [pc, #92]	; (3f78 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    3f1a:	str	r3, [sp, #4]
    3f1c:	cmp	r7, #0
    3f1e:	it	eq
    3f20:	moveq	r1, r0
    3f22:	ldr	r0, [pc, #44]	; (3f50 <isr+0x648>)
    3f24:	bl	2b94 <memcpy>
    3f28:	ldr	r7, [pc, #36]	; (3f50 <isr+0x648>)
    3f2a:	ldr	r3, [sp, #4]
    3f2c:	b.n	3db0 <isr+0x4a8>
    3f2e:	nop
    3f30:	.word	0x200022c8
    3f34:	.word	0x402e01c0
    3f38:	.word	0x20003020
    3f3c:	.word	0x200022e4
    3f40:	.word	0x200026c8
    3f44:	.word	0x20002208
    3f48:	.word	0x200022d8
    3f4c:	.word	0x200007e0
    3f50:	.word	0x20203000
    3f54:	.word	0xe000ef70
    3f58:	.word	0x200022c0
    3f5c:	.word	0x00070080
    3f60:	.word	0x20003000
    3f64:	.word	0x200022d0
    3f68:	.word	0x200026c0
    3f6c:	.word	0x200022a8
    3f70:	.word	0x200022b8
    3f74:	.word	0x200022b0
    3f78:	.word	0x60001654
    3f7c:	.word	0x60001698
    3f80:	.word	0x20004200
    3f84:	.word	0x20004140
    3f88:	.word	0x20004100
    3f8c:	.word	0x200041c0
    3f90:	.word	0x20004180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3f94:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    3f96:	ldrb	r3, [r1, #0]
    3f98:	cmp	r3, r2
    3f9a:	it	cs
    3f9c:	movcs	r3, r2
    3f9e:	b.n	3d9a <isr+0x492>

00003fa0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3fa0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3fa2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    3fa6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3faa:	ite	ne
    3fac:	movne	r7, #0
    3fae:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3fb2:	cmp	r2, #2
    3fb4:	bls.n	3fba <usb_config_rx+0x1a>
    3fb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3fba:	mov.w	sl, r0, lsl #7
    3fbe:	ldr.w	r9, [pc, #64]	; 4000 <usb_config_rx+0x60>
    3fc2:	mov	r5, r1
    3fc4:	mov	r4, r0
    3fc6:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3fca:	movs	r1, #0
    3fcc:	movs	r2, #64	; 0x40
    3fce:	mov	r8, r3
    3fd0:	mov	r0, r6
    3fd2:	bl	8870 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3fd6:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3fd8:	orr.w	r1, r7, r5, lsl #16
    3fdc:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3fe0:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3fe4:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    3fe6:	cmp.w	r8, #0
    3fea:	beq.n	3fb6 <usb_config_rx+0x16>
    3fec:	ldr	r3, [pc, #12]	; (3ffc <usb_config_rx+0x5c>)
    3fee:	lsls	r0, r4
    3ff0:	ldr	r4, [r3, #0]
    3ff2:	orrs	r0, r4
    3ff4:	str	r0, [r3, #0]
    3ff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ffa:	nop
    3ffc:	.word	0x200022a4
    4000:	.word	0x20004000

00004004 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4004:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4006:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    400a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    400e:	ite	ne
    4010:	movne	r7, #0
    4012:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4016:	cmp	r2, #2
    4018:	bls.n	401e <usb_config_tx+0x1a>
    401a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    401e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4020:	lsls	r5, r0, #7
    4022:	ldr.w	r9, [pc, #68]	; 4068 <usb_config_tx+0x64>
    4026:	mov	r8, r1
    4028:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    402a:	movs	r1, #0
    402c:	mov	r4, r0
    402e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4030:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    4034:	mov	r0, sl
    4036:	bl	8870 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    403a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    403c:	orr.w	r1, r7, r8, lsl #16
    4040:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    4044:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4048:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    404c:	cmp	r6, #0
    404e:	beq.n	401a <usb_config_tx+0x16>
    4050:	add.w	r0, r4, #16
    4054:	ldr	r3, [pc, #12]	; (4064 <usb_config_tx+0x60>)
    4056:	lsls	r2, r0
    4058:	ldr	r0, [r3, #0]
    405a:	orrs	r2, r0
    405c:	str	r2, [r3, #0]
    405e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4062:	nop
    4064:	.word	0x200022a4
    4068:	.word	0x20004000

0000406c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    406c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    406e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    4070:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4072:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    4076:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4078:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    407a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    407c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    4080:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    4084:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    4088:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    408c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    408e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    4090:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    4092:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    4094:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    4096:	pop	{r4, r5, r6, r7}
    4098:	bx	lr
    409a:	nop

0000409c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    409c:	subs	r3, r0, #2
    409e:	cmp	r3, #2
    40a0:	bls.n	40a4 <usb_transmit+0x8>
    40a2:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    40a4:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    40a6:	ldr	r3, [pc, #24]	; (40c0 <usb_transmit+0x24>)
    40a8:	add.w	r4, r0, #16
    40ac:	movs	r5, #1
    40ae:	mov	r2, r1
    40b0:	add.w	r0, r3, r0, lsl #7
    40b4:	lsl.w	r1, r5, r4
}
    40b8:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    40ba:	b.w	37d0 <schedule_transfer>
    40be:	nop
    40c0:	.word	0x20004040

000040c4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    40c4:	subs	r3, r0, #2
    40c6:	cmp	r3, #2
    40c8:	bls.n	40cc <usb_receive+0x8>
    40ca:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    40cc:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    40ce:	ldr	r3, [pc, #20]	; (40e4 <usb_receive+0x20>)
    40d0:	movs	r4, #1
    40d2:	mov	r2, r1
    40d4:	lsl.w	r1, r4, r0
    40d8:	add.w	r0, r3, r0, lsl #7
}
    40dc:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    40e0:	b.w	37d0 <schedule_transfer>
    40e4:	.word	0x20004000

000040e8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    40e8:	ldr	r0, [r0, #4]
#endif
}
    40ea:	bx	lr

000040ec <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    40ec:	cmp	r0, #0
    40ee:	beq.n	41a0 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    40f0:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    40f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40f6:	sub	sp, #20
    40f8:	mov	fp, r0
    40fa:	ldr	r4, [pc, #168]	; (41a4 <delay+0xb8>)
    40fc:	ldr	r5, [pc, #168]	; (41a8 <delay+0xbc>)
    40fe:	ldr	r6, [pc, #172]	; (41ac <delay+0xc0>)
    4100:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    4104:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    4108:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    410a:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    410c:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    4110:	cmp	r1, #0
    4112:	bne.n	4104 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4114:	ldr	r7, [pc, #152]	; (41b0 <delay+0xc4>)
    4116:	strd	r8, r9, [sp, #8]
    411a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    411c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    411e:	ldr	r2, [pc, #148]	; (41b4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    4120:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4124:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4126:	ldr	r2, [r2, #0]
    4128:	movs	r7, #1
    412a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    412e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4132:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    4134:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4136:	cmp	r3, r1
    4138:	it	eq
    413a:	cmpeq	r2, r8
    413c:	ite	cs
    413e:	movcs	sl, r8
    4140:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    4142:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    4146:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    414a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    414c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    414e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    4152:	cmp	r3, #0
    4154:	bne.n	4146 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4156:	ldr	r0, [sp, #4]
    4158:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    415a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    415c:	ldr	r0, [pc, #84]	; (41b4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    415e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4162:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4164:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4168:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    416c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4170:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4174:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    4176:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4178:	cmp	r1, r3
    417a:	it	eq
    417c:	cmpeq	r0, r8
    417e:	ite	cs
    4180:	movcs	r3, r8
    4182:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    4184:	add	r2, r3
    4186:	cmp	r2, lr
    4188:	bcc.n	419a <delay+0xae>
			if (--msec == 0) return;
    418a:	subs.w	fp, fp, #1
			start += 1000;
    418e:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    4192:	bne.n	4146 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    4194:	add	sp, #20
    4196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    419a:	bl	45d4 <yield>
	}
    419e:	b.n	4146 <delay+0x5a>
    41a0:	bx	lr
    41a2:	nop
    41a4:	.word	0x20004280
    41a8:	.word	0x200022e4
    41ac:	.word	0x200022dc
    41b0:	.word	0xe0001004
    41b4:	.word	0x200022e0

000041b8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    41b8:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    41ba:	ldr	r2, [pc, #24]	; (41d4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    41bc:	movs	r1, #7
    41be:	ldr	r3, [pc, #24]	; (41d8 <Panic_Temp_isr+0x20>)
    41c0:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    41c2:	ldr	r3, [r2, #56]	; 0x38
    41c4:	orr.w	r3, r3, #64	; 0x40
    41c8:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    41ca:	dsb	sy
  while (1) asm ("wfi");
    41ce:	wfi
    41d0:	b.n	41ce <Panic_Temp_isr+0x16>
    41d2:	nop
    41d4:	.word	0x400d4000
    41d8:	.word	0x400ac000

000041dc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    41dc:	ldr	r0, [pc, #656]	; (4470 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    41de:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    41e2:	ldr	r3, [pc, #656]	; (4474 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    41e4:	ldr	r2, [r0, #120]	; 0x78
    41e6:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    41ea:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    41ec:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    41ee:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    41f0:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    41f4:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    41f8:	ldr	r4, [pc, #636]	; (4478 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    41fa:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    41fe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4200:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4204:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4206:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4208:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    420c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4210:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4214:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    4218:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    421c:	ldrh.w	r0, [r3, #392]	; 0x188
    4220:	uxth	r0, r0
    4222:	orr.w	r0, r0, #240	; 0xf0
    4226:	strh.w	r0, [r3, #392]	; 0x188
    422a:	add.w	r0, r1, r1, lsl #1
    422e:	ldr	r3, [pc, #580]	; (4474 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    4230:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4232:	movs	r5, #0
    4234:	lsls	r0, r0, #5
    4236:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4238:	cmp	r1, #4
    423a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    423c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4240:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    4242:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4244:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    4246:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4248:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    424a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    424c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    424e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4250:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4252:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4254:	bne.n	422a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4256:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    425a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    425e:	ldr	r3, [pc, #540]	; (447c <pwm_init+0x2a0>)
    4260:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4264:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4266:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4268:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    426c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    426e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4272:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4276:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    427a:	ldrh.w	r0, [r4, #392]	; 0x188
    427e:	uxth	r0, r0
    4280:	orr.w	r0, r0, #3840	; 0xf00
    4284:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4288:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    428c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4290:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    4294:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4298:	ldrh.w	r0, [r3, #392]	; 0x188
    429c:	uxth	r0, r0
    429e:	orr.w	r0, r0, #240	; 0xf0
    42a2:	strh.w	r0, [r3, #392]	; 0x188
    42a6:	add.w	r0, r1, r1, lsl #1
    42aa:	ldr	r3, [pc, #464]	; (447c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    42ac:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    42ae:	movs	r5, #0
    42b0:	lsls	r0, r0, #5
    42b2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    42b4:	cmp	r1, #4
    42b6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    42b8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    42ba:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    42be:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    42c0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    42c2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    42c4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    42c6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    42c8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    42ca:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    42cc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    42ce:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    42d0:	bne.n	42a6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42d2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    42d6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    42da:	ldr	r3, [pc, #420]	; (4480 <pwm_init+0x2a4>)
    42dc:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42e0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    42e2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    42e4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    42e8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42ea:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    42ee:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    42f2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    42f6:	ldrh.w	r0, [r4, #392]	; 0x188
    42fa:	uxth	r0, r0
    42fc:	orr.w	r0, r0, #3840	; 0xf00
    4300:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4304:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4308:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    430c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    4310:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4314:	ldrh.w	r0, [r3, #392]	; 0x188
    4318:	uxth	r0, r0
    431a:	orr.w	r0, r0, #240	; 0xf0
    431e:	strh.w	r0, [r3, #392]	; 0x188
    4322:	add.w	r0, r1, r1, lsl #1
    4326:	ldr	r3, [pc, #344]	; (4480 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    4328:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    432a:	movs	r5, #0
    432c:	lsls	r0, r0, #5
    432e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4330:	cmp	r1, #4
    4332:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4334:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4336:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    433a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    433c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    433e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4340:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    4342:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    4344:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4346:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4348:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    434a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    434c:	bne.n	4322 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    434e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4352:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4356:	ldr	r3, [pc, #300]	; (4484 <pwm_init+0x2a8>)
    4358:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    435c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    435e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4360:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4364:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4366:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    436a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    436e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4372:	ldrh.w	r0, [r4, #392]	; 0x188
    4376:	uxth	r0, r0
    4378:	orr.w	r0, r0, #3840	; 0xf00
    437c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4380:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4384:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4388:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    438c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4390:	ldrh.w	r0, [r3, #392]	; 0x188
    4394:	uxth	r0, r0
    4396:	orr.w	r0, r0, #240	; 0xf0
    439a:	strh.w	r0, [r3, #392]	; 0x188
    439e:	add.w	r0, r1, r1, lsl #1
    43a2:	ldr	r3, [pc, #224]	; (4484 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    43a4:	adds	r1, #1
    43a6:	lsls	r0, r0, #5
    43a8:	mov	r4, r3
    43aa:	cmp	r1, #4
    43ac:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    43ae:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    43b0:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    43b4:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    43b6:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    43b8:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    43ba:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    43bc:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    43be:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    43c0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    43c2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    43c4:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    43c6:	bne.n	439e <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43c8:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    43cc:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    43ce:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    43d0:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43d4:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    43d6:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    43da:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    43dc:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43e0:	orrs	r3, r7
    43e2:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    43e6:	ldrh.w	r3, [r4, #392]	; 0x188
    43ea:	uxth	r3, r3
    43ec:	orr.w	r3, r3, #3840	; 0xf00
    43f0:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    43f4:	lsls	r0, r2, #5
    43f6:	ldr	r3, [pc, #144]	; (4488 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    43f8:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    43fa:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    43fc:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    43fe:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    4400:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4402:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4404:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4406:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    440a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    440c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    440e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4410:	bne.n	43f4 <pwm_init+0x218>
    4412:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4414:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4416:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    441a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    441e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4420:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4424:	lsls	r0, r2, #5
    4426:	ldr	r3, [pc, #100]	; (448c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4428:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    442a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    442c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    442e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    4430:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4432:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4434:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4436:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4438:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    443a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    443c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    443e:	bne.n	4424 <pwm_init+0x248>
    4440:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4442:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4444:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4448:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    444c:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    444e:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4452:	lsls	r0, r2, #5
    4454:	ldr	r3, [pc, #56]	; (4490 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4456:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4458:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    445a:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    445c:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    445e:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4460:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4462:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4464:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4466:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4468:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    446a:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    446c:	bne.n	4452 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    446e:	pop	{r4, r5, r6, r7, pc}
    4470:	.word	0x400fc000
    4474:	.word	0x403dc000
    4478:	.word	0xfc030000
    447c:	.word	0x403e0000
    4480:	.word	0x403e4000
    4484:	.word	0x403e8000
    4488:	.word	0x401dc000
    448c:	.word	0x401e0000
    4490:	.word	0x401e4000

00004494 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    4494:	lsls	r0, r0, #4
    4496:	ldr	r3, [pc, #28]	; (44b4 <digitalWrite.part.0+0x20>)
    4498:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    449a:	ldr	r3, [r3, r0]
	mask = p->mask;
    449c:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    449e:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    44a0:	tst	r0, r2
    44a2:	beq.n	44aa <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    44a4:	cbnz	r1, 44ac <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    44a6:	str.w	r2, [r3, #136]	; 0x88
    44aa:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    44ac:	str.w	r2, [r3, #132]	; 0x84
    44b0:	bx	lr
    44b2:	nop
    44b4:	.word	0x20000560

000044b8 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    44b8:	lsls	r0, r0, #4
    44ba:	ldr	r3, [pc, #20]	; (44d0 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    44bc:	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    44be:	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    44c0:	ldr	r2, [r2, #8]
    44c2:	ldr	r3, [r1, #12]
    44c4:	tst	r2, r3
}
    44c6:	ite	ne
    44c8:	movne	r0, #1
    44ca:	moveq	r0, #0
    44cc:	bx	lr
    44ce:	nop
    44d0:	.word	0x20000560

000044d4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    44d4:	cmp	r0, #39	; 0x27
    44d6:	bhi.n	44dc <digitalWrite+0x8>
    44d8:	b.w	4494 <digitalWrite.part.0>
    44dc:	bx	lr
    44de:	nop

000044e0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    44e0:	cmp	r0, #39	; 0x27
    44e2:	bhi.n	44e8 <digitalRead+0x8>
    44e4:	b.w	44b8 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    44e8:	movs	r0, #0
    44ea:	bx	lr

000044ec <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    44ec:	cmp	r0, #39	; 0x27
    44ee:	bhi.n	452a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    44f0:	lsls	r0, r0, #4
    44f2:	ldr	r2, [pc, #104]	; (455c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    44f4:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    44f6:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    44fa:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    44fc:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    44fe:	beq.n	452c <pinMode+0x40>
    4500:	cmp	r1, #4
    4502:	beq.n	452c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    4504:	ldr	r4, [r3, #12]
    4506:	ldr	r2, [r0, #4]
    4508:	bic.w	r2, r2, r4
    450c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    450e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    4510:	cbz	r1, 454e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    4512:	cmp	r1, #2
    4514:	beq.n	4554 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    4516:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    4518:	ldr	r3, [r3, #4]
}
    451a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    451e:	ite	eq
    4520:	ldreq	r1, [pc, #60]	; (4560 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    4522:	ldrne	r1, [pc, #64]	; (4564 <pinMode+0x78>)
    4524:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    4526:	movs	r2, #21
    4528:	str	r2, [r3, #0]
}
    452a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    452c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    452e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4530:	ldr	r4, [r0, #4]
    4532:	orr.w	r2, r2, r4
    4536:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4538:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    453a:	beq.n	454e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    453c:	movw	r1, #2104	; 0x838
    4540:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    4542:	ldr	r3, [r3, #4]
    4544:	movs	r2, #21
}
    4546:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    454a:	str	r2, [r3, #0]
}
    454c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    454e:	movs	r1, #56	; 0x38
    4550:	str	r1, [r2, #0]
    4552:	b.n	4542 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4554:	ldr	r1, [pc, #16]	; (4568 <pinMode+0x7c>)
    4556:	str	r1, [r2, #0]
    4558:	b.n	4542 <pinMode+0x56>
    455a:	nop
    455c:	.word	0x20000560
    4560:	.word	0x00013038
    4564:	.word	0x00010038
    4568:	.word	0x0001f038

0000456c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    456c:	ldr	r2, [pc, #72]	; (45b8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    456e:	ldr	r3, [pc, #76]	; (45bc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4570:	ldr.w	r0, [r2, #544]	; 0x220
    4574:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4578:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    457a:	push	{r4, lr}
    457c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    457e:	bhi.n	4586 <usb_init_serialnumber+0x1a>
    4580:	add.w	r0, r0, r0, lsl #2
    4584:	lsls	r0, r0, #1
    4586:	ldr	r4, [pc, #56]	; (45c0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    4588:	add	r1, sp, #4
    458a:	movs	r2, #10
    458c:	bl	4958 <ultoa>
    4590:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    4592:	movs	r3, #0
    4594:	mov	r0, r4
		char c = buf[i];
    4596:	ldrb.w	r2, [r1], #1
    459a:	adds	r3, #1
		if (!c) break;
    459c:	cbz	r2, 45ae <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    459e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    45a0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    45a4:	bne.n	4596 <usb_init_serialnumber+0x2a>
    45a6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    45a8:	strb	r3, [r4, #0]
}
    45aa:	add	sp, #16
    45ac:	pop	{r4, pc}
    45ae:	lsls	r3, r3, #1
    45b0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    45b2:	strb	r3, [r4, #0]
}
    45b4:	add	sp, #16
    45b6:	pop	{r4, pc}
    45b8:	.word	0x401f4400
    45bc:	.word	0x0098967f
    45c0:	.word	0x200011bc

000045c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    45c4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    45c6:	bl	7c <setup>
	while (1) {
		loop();
    45ca:	bl	b8 <loop>
		yield();
    45ce:	bl	45d4 <yield>
    45d2:	b.n	45ca <main+0x6>

000045d4 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    45d4:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    45d6:	ldr	r4, [pc, #132]	; (465c <yield+0x88>)
    45d8:	ldrb	r3, [r4, #0]
    45da:	cbnz	r3, 45fe <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    45dc:	ldr	r3, [pc, #128]	; (4660 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    45de:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    45e0:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    45e2:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    45e4:	cbnz	r3, 462e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    45e6:	ldr	r3, [pc, #124]	; (4664 <yield+0x90>)
    45e8:	ldrb	r3, [r3, #0]
    45ea:	cmp	r3, #0
    45ec:	bne.n	4642 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    45ee:	ldr	r3, [pc, #120]	; (4668 <yield+0x94>)

	running = 0;
    45f0:	movs	r1, #0
    45f2:	ldr	r2, [r3, #0]
    45f4:	strb	r1, [r4, #0]
    45f6:	cbz	r2, 45fe <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    45f8:	mrs	r2, IPSR
		if (ipsr != 0) return;
    45fc:	cbz	r2, 4600 <yield+0x2c>
    45fe:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4600:	mrs	r0, PRIMASK
		__disable_irq();
    4604:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4606:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    4608:	cbz	r2, 4648 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    460a:	ldr	r4, [pc, #96]	; (466c <yield+0x98>)
    460c:	ldrb	r1, [r4, #0]
    460e:	cbnz	r1, 4648 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4610:	movs	r6, #1
		firstYield = first->_next;
    4612:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4614:	strb	r6, [r4, #0]
		firstYield = first->_next;
    4616:	str	r5, [r3, #0]
		if (firstYield) {
    4618:	cbz	r5, 4650 <yield+0x7c>
			firstYield->_prev = nullptr;
    461a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    461c:	cbnz	r0, 4620 <yield+0x4c>
    461e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4620:	movs	r5, #0
		(*(first->_function))(*first);
    4622:	ldr	r3, [r2, #8]
    4624:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4626:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    4628:	blx	r3
		runningFromYield = false;
    462a:	strb	r5, [r4, #0]
    462c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    462e:	bl	333c <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    4632:	cmp	r0, #0
    4634:	beq.n	45e6 <yield+0x12>
    4636:	bl	4884 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    463a:	ldr	r3, [pc, #40]	; (4664 <yield+0x90>)
    463c:	ldrb	r3, [r3, #0]
    463e:	cmp	r3, #0
    4640:	beq.n	45ee <yield+0x1a>
    4642:	bl	49a8 <HardwareSerial::processSerialEvents()>
    4646:	b.n	45ee <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4648:	cmp	r0, #0
    464a:	bne.n	45fe <yield+0x2a>
    464c:	cpsie	i
    464e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4650:	ldr	r3, [pc, #28]	; (4670 <yield+0x9c>)
    4652:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4654:	cmp	r0, #0
    4656:	bne.n	4620 <yield+0x4c>
    4658:	b.n	461e <yield+0x4a>
    465a:	nop
    465c:	.word	0x200022fc
    4660:	.word	0x200011d2
    4664:	.word	0x20002338
    4668:	.word	0x20002310
    466c:	.word	0x20002314
    4670:	.word	0x2000230c

00004674 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4674:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4676:	mrs	r2, PRIMASK
		__disable_irq();
    467a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    467c:	ldrb	r3, [r0, #29]
    467e:	cbnz	r3, 468e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4680:	ldrb	r1, [r0, #28]
    4682:	cmp	r1, #1
    4684:	beq.n	4698 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4686:	cmp	r1, #3
    4688:	beq.n	46ac <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    468a:	movs	r3, #1
    468c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    468e:	cbnz	r2, 4692 <EventResponder::triggerEventNotImmediate()+0x1e>
    4690:	cpsie	i
	}
	enableInterrupts(irq);
}
    4692:	ldr.w	r4, [sp], #4
    4696:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4698:	ldr	r4, [pc, #68]	; (46e0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    469a:	ldr	r1, [r4, #0]
    469c:	cbz	r1, 46c8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    469e:	ldr	r1, [pc, #68]	; (46e4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    46a0:	str	r3, [r0, #20]
				_prev = lastYield;
    46a2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    46a4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    46a6:	str	r3, [r0, #24]
				_prev->_next = this;
    46a8:	str	r0, [r3, #20]
    46aa:	b.n	468a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    46ac:	ldr	r4, [pc, #56]	; (46e8 <EventResponder::triggerEventNotImmediate()+0x74>)
    46ae:	ldr	r1, [r4, #0]
    46b0:	cbz	r1, 46d4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    46b2:	ldr	r1, [pc, #56]	; (46ec <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    46b4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    46b6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    46b8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    46ba:	str	r3, [r0, #24]
				_prev->_next = this;
    46bc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    46be:	ldr	r3, [pc, #48]	; (46f0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    46c0:	mov.w	r1, #268435456	; 0x10000000
    46c4:	str	r1, [r3, #0]
    46c6:	b.n	468a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    46c8:	ldr	r3, [pc, #24]	; (46e4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    46ca:	str	r1, [r0, #20]
				_prev = nullptr;
    46cc:	str	r1, [r0, #24]
				firstYield = this;
    46ce:	str	r0, [r4, #0]
				lastYield = this;
    46d0:	str	r0, [r3, #0]
    46d2:	b.n	468a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    46d4:	ldr	r3, [pc, #20]	; (46ec <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    46d6:	str	r1, [r0, #20]
				_prev = nullptr;
    46d8:	str	r1, [r0, #24]
				firstInterrupt = this;
    46da:	str	r0, [r4, #0]
				lastInterrupt = this;
    46dc:	str	r0, [r3, #0]
    46de:	b.n	46be <EventResponder::triggerEventNotImmediate()+0x4a>
    46e0:	.word	0x20002310
    46e4:	.word	0x2000230c
    46e8:	.word	0x20002300
    46ec:	.word	0x20002304
    46f0:	.word	0xe000ed04

000046f4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    46f4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    46f6:	mrs	r1, PRIMASK
		__disable_irq();
    46fa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    46fc:	ldr	r4, [pc, #48]	; (4730 <EventResponder::runFromInterrupt()+0x3c>)
    46fe:	ldr	r3, [r4, #0]
		if (first) {
    4700:	cbz	r3, 4726 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4702:	ldr	r6, [pc, #48]	; (4734 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4704:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4706:	ldr	r2, [r3, #20]
    4708:	str	r2, [r4, #0]
			if (firstInterrupt) {
    470a:	cbz	r2, 472c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    470c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    470e:	cbnz	r1, 4712 <EventResponder::runFromInterrupt()+0x1e>
    4710:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4712:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    4714:	mov	r0, r3
    4716:	ldr	r3, [r3, #8]
    4718:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    471a:	mrs	r1, PRIMASK
		__disable_irq();
    471e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4720:	ldr	r3, [r4, #0]
		if (first) {
    4722:	cmp	r3, #0
    4724:	bne.n	4706 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4726:	cbnz	r1, 472a <EventResponder::runFromInterrupt()+0x36>
    4728:	cpsie	i
    472a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    472c:	str	r2, [r6, #0]
    472e:	b.n	470e <EventResponder::runFromInterrupt()+0x1a>
    4730:	.word	0x20002300
    4734:	.word	0x20002304

00004738 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4738:	b.w	46f4 <EventResponder::runFromInterrupt()>

0000473c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    473c:	ldr	r2, [pc, #96]	; (47a0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    473e:	push	{r4, r5}
	if (listActive == nullptr) {
    4740:	ldr	r4, [r2, #0]
    4742:	cmp	r4, #0
    4744:	beq.n	4798 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4746:	ldr	r3, [r0, #0]
    4748:	ldr	r1, [r4, #0]
    474a:	cmp	r3, r1
    474c:	bcs.n	476e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    474e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4750:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4752:	str	r4, [r0, #8]
		_prev = nullptr;
    4754:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4756:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4758:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    475a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    475c:	movs	r3, #2
}
    475e:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4760:	strb	r3, [r0, #20]
}
    4762:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    4764:	str	r3, [r0, #0]
    4766:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4768:	ldr	r1, [r2, #0]
    476a:	cmp	r3, r1
    476c:	bcc.n	4780 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    476e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4770:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4772:	cmp	r2, #0
    4774:	bne.n	4764 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4776:	str	r2, [r0, #8]
		_prev = timer;
    4778:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    477a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    477c:	str	r0, [r4, #8]
    477e:	b.n	475c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4780:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    4782:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4784:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    4786:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4788:	str	r5, [r0, #12]
				timer->_prev = this;
    478a:	str	r0, [r4, #12]
				_prev->_next = this;
    478c:	ldr	r1, [r0, #12]
    478e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    4790:	str	r3, [r4, #0]
				_state = TimerActive;
    4792:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4794:	pop	{r4, r5}
    4796:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4798:	str	r4, [r0, #8]
		_prev = nullptr;
    479a:	str	r4, [r0, #12]
		listActive = this;
    479c:	str	r0, [r2, #0]
    479e:	b.n	475c <MillisTimer::addToActiveList()+0x20>
    47a0:	.word	0x20002308

000047a4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    47a4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    47a6:	ldr	r6, [pc, #136]	; (4830 <MillisTimer::runFromTimer()+0x8c>)
    47a8:	ldr	r4, [r6, #0]
	while (timer) {
    47aa:	cbz	r4, 47f8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    47ac:	ldr	r3, [r4, #0]
    47ae:	cmp	r3, #0
    47b0:	bne.n	4828 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    47b2:	mov	r5, r3
    47b4:	ldr	r7, [pc, #124]	; (4834 <MillisTimer::runFromTimer()+0x90>)
    47b6:	b.n	47c2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    47b8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    47ba:	cbz	r4, 47f8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    47bc:	ldr	r3, [r4, #0]
    47be:	cmp	r3, #0
    47c0:	bne.n	4828 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    47c2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    47c4:	cbz	r3, 47c8 <MillisTimer::runFromTimer()+0x24>
    47c6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    47c8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    47ca:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    47cc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    47ce:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    47d0:	ldr	r3, [r3, #0]
    47d2:	cmp	r3, r7
    47d4:	bne.n	481a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    47d6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    47d8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    47da:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    47dc:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    47de:	beq.n	4822 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    47e0:	bl	4674 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    47e4:	ldr	r3, [r4, #4]
    47e6:	cmp	r3, #0
    47e8:	beq.n	47b8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    47ea:	str	r3, [r4, #0]
				timer->addToActiveList();
    47ec:	mov	r0, r4
    47ee:	bl	473c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    47f2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    47f4:	cmp	r4, #0
    47f6:	bne.n	47bc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    47f8:	mrs	r3, PRIMASK
		__disable_irq();
    47fc:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    47fe:	ldr	r2, [pc, #56]	; (4838 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4800:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4802:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4804:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4806:	cbnz	r3, 480a <MillisTimer::runFromTimer()+0x66>
    4808:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    480a:	cbz	r0, 4818 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    480c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    480e:	bl	473c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4812:	mov	r0, r4
    4814:	cmp	r0, #0
    4816:	bne.n	480c <MillisTimer::runFromTimer()+0x68>
    4818:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    481a:	mov	r2, r4
    481c:	movs	r1, #0
    481e:	blx	r3
    4820:	b.n	47e4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4822:	ldr	r3, [r0, #8]
    4824:	blx	r3
    4826:	b.n	47e4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4828:	subs	r3, #1
    482a:	str	r3, [r4, #0]
			break;
    482c:	b.n	47f8 <MillisTimer::runFromTimer()+0x54>
    482e:	nop
    4830:	.word	0x20002308
    4834:	.word	0x00002b79
    4838:	.word	0x20002318

0000483c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    483c:	ldr	r2, [pc, #16]	; (4850 <systick_isr+0x14>)
    483e:	ldr	r3, [pc, #20]	; (4854 <systick_isr+0x18>)
    4840:	ldr	r1, [r2, #0]
	systick_millis_count++;
    4842:	ldr	r2, [pc, #20]	; (4858 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4844:	str	r1, [r3, #0]
	systick_millis_count++;
    4846:	ldr	r3, [r2, #0]
    4848:	adds	r3, #1
    484a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    484c:	b.w	47a4 <MillisTimer::runFromTimer()>
    4850:	.word	0xe0001004
    4854:	.word	0x200022dc
    4858:	.word	0x200022e4

0000485c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    485c:	b.w	3348 <usb_serial_flush_input>

00004860 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4860:	b.w	32f8 <usb_serial_peekchar>

00004864 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4864:	b.w	33bc <usb_serial_getchar>

00004868 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4868:	b.w	333c <usb_serial_available>

0000486c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    486c:	b.w	346c <usb_serial_flush_output>

00004870 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4870:	b.w	3420 <usb_serial_write_buffer_free>

00004874 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4874:	mov	r0, r1
    4876:	mov	r1, r2
    4878:	b.w	3408 <usb_serial_write>

0000487c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    487c:	mov	r0, r1
    487e:	b.w	33dc <usb_serial_putchar>
    4882:	nop

00004884 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    4884:	ldr	r3, [pc, #4]	; (488c <serialEvent()+0x8>)
    4886:	movs	r2, #0
    4888:	strb	r2, [r3, #0]
    488a:	bx	lr
    488c:	.word	0x200011d2

00004890 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4890:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    4892:	ldr	r4, [pc, #24]	; (48ac <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4894:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4896:	ldr	r3, [r0, #0]
    4898:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    489a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    489c:	add	r1, sp, #4
    489e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    48a0:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    48a4:	blx	r3
}
    48a6:	add	sp, #8
    48a8:	pop	{r4, pc}
    48aa:	nop
    48ac:	.word	0x20000874

000048b0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    48b0:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    48b2:	push	{r4, lr}
    48b4:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    48b6:	ldr	r3, [r3, #4]
    48b8:	blx	r3
	return len;
}
    48ba:	mov	r0, r4
    48bc:	pop	{r4, pc}
    48be:	nop

000048c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    48c0:	push	{r4, r5, r6, r7, lr}
    48c2:	mov	r6, r0
    48c4:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    48c6:	cmp	r2, #0
    48c8:	beq.n	4932 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    48ca:	cmp	r2, #1
    48cc:	it	eq
    48ce:	moveq	r2, #10
	}


	if (n == 0) {
    48d0:	cbz	r1, 4928 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    48d2:	movs	r5, #33	; 0x21
    48d4:	b.n	48d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    48d6:	uxtb	r5, r7
    48d8:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    48da:	udiv	r4, r1, r2
    48de:	mls	r1, r2, r4, r1
    48e2:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    48e4:	cmp	r1, #9
    48e6:	add.w	r1, r0, #55	; 0x37
    48ea:	add.w	r0, r0, #48	; 0x30
    48ee:	it	hi
    48f0:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    48f2:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    48f4:	add	r4, sp, #40	; 0x28
    48f6:	it	ls
    48f8:	uxtbls	r0, r0
    48fa:	add	r4, r5
    48fc:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    4900:	cmp	r1, #0
    4902:	bne.n	48d6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4904:	cbz	r3, 4914 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4906:	subs	r5, #1
		buf[i] = '-';
    4908:	add	r3, sp, #40	; 0x28
    490a:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    490c:	uxtb	r5, r5
		buf[i] = '-';
    490e:	add	r3, r5
    4910:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4914:	ldr	r3, [r6, #0]
    4916:	add	r1, sp, #4
    4918:	rsb	r2, r5, #34	; 0x22
    491c:	mov	r0, r6
    491e:	add	r1, r5
    4920:	ldr	r3, [r3, #4]
    4922:	blx	r3
}
    4924:	add	sp, #44	; 0x2c
    4926:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4928:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    492a:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    492c:	strb.w	r2, [sp, #37]	; 0x25
    4930:	b.n	4904 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    4932:	ldr	r3, [r0, #0]
    4934:	uxtb	r1, r1
    4936:	ldr	r3, [r3, #0]
    4938:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    493a:	add	sp, #44	; 0x2c
    493c:	pop	{r4, r5, r6, r7, pc}
    493e:	nop

00004940 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    4940:	cmp	r1, #0
    4942:	blt.n	494c <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    4944:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    4946:	movs	r2, #10
    4948:	b.w	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    494c:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    494e:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    4950:	movs	r2, #10
    4952:	b.w	48c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4956:	nop

00004958 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4958:	push	{r4, r5, r6, r7}
    495a:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    495c:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    495e:	mov	r7, r6
    4960:	b.n	4964 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4962:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4964:	udiv	r3, r0, r2
    4968:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    496c:	add.w	r4, r0, #55	; 0x37
    4970:	cmp	r0, #9
    4972:	add.w	r0, r0, #48	; 0x30
    4976:	uxtb	r4, r4
    4978:	it	ls
    497a:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    497c:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    497e:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    4982:	cmp	r3, #0
    4984:	bne.n	4962 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4986:	adds	r2, r1, r5
    4988:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    498a:	cbz	r5, 49a0 <ultoa+0x48>
    498c:	adds	r3, #1
		t = buf[j];
    498e:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    4992:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4994:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    4996:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4998:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    499a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    499e:	blt.n	498c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    49a0:	mov	r0, r1
    49a2:	pop	{r4, r5, r6, r7}
    49a4:	bx	lr
    49a6:	nop

000049a8 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    49a8:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    49aa:	ldr	r3, [pc, #28]	; (49c8 <HardwareSerial::processSerialEvents()+0x20>)
    49ac:	ldrb	r4, [r3, #0]
    49ae:	cbz	r4, 49c4 <HardwareSerial::processSerialEvents()+0x1c>
    49b0:	ldr	r5, [pc, #24]	; (49cc <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    49b2:	ldr.w	r3, [r5, #4]!
    49b6:	cmp	r3, #0
    49b8:	beq.n	49b2 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    49ba:	blx	r3
			if (--handlers_still_to_process == 0) return;
    49bc:	subs	r3, r4, #1
    49be:	ands.w	r4, r3, #255	; 0xff
    49c2:	bne.n	49b2 <HardwareSerial::processSerialEvents()+0xa>
    49c4:	pop	{r3, r4, r5, pc}
    49c6:	nop
    49c8:	.word	0x20002338
    49cc:	.word	0x20002318

000049d0 <sin>:
    49d0:	push	{lr}
    49d2:	vmov.f64	d7, d0
    49d6:	vmov	r3, s15
    49da:	ldr	r2, [pc, #140]	; (4a68 <sin+0x98>)
    49dc:	bic.w	r3, r3, #2147483648	; 0x80000000
    49e0:	cmp	r3, r2
    49e2:	sub	sp, #20
    49e4:	ble.n	4a1c <sin+0x4c>
    49e6:	ldr	r2, [pc, #132]	; (4a6c <sin+0x9c>)
    49e8:	cmp	r3, r2
    49ea:	ble.n	49f6 <sin+0x26>
    49ec:	vsub.f64	d0, d0, d0
    49f0:	add	sp, #20
    49f2:	ldr.w	pc, [sp], #4
    49f6:	mov	r0, sp
    49f8:	bl	5f60 <__ieee754_rem_pio2>
    49fc:	and.w	r0, r0, #3
    4a00:	cmp	r0, #1
    4a02:	beq.n	4a40 <sin+0x70>
    4a04:	cmp	r0, #2
    4a06:	beq.n	4a2c <sin+0x5c>
    4a08:	cbz	r0, 4a4e <sin+0x7e>
    4a0a:	vldr	d1, [sp, #8]
    4a0e:	vldr	d0, [sp]
    4a12:	bl	6828 <__kernel_cos>
    4a16:	vneg.f64	d0, d0
    4a1a:	b.n	49f0 <sin+0x20>
    4a1c:	movs	r0, #0
    4a1e:	vldr	d1, [pc, #64]	; 4a60 <sin+0x90>
    4a22:	bl	6fc8 <__kernel_sin>
    4a26:	add	sp, #20
    4a28:	ldr.w	pc, [sp], #4
    4a2c:	movs	r0, #1
    4a2e:	vldr	d1, [sp, #8]
    4a32:	vldr	d0, [sp]
    4a36:	bl	6fc8 <__kernel_sin>
    4a3a:	vneg.f64	d0, d0
    4a3e:	b.n	49f0 <sin+0x20>
    4a40:	vldr	d1, [sp, #8]
    4a44:	vldr	d0, [sp]
    4a48:	bl	6828 <__kernel_cos>
    4a4c:	b.n	49f0 <sin+0x20>
    4a4e:	movs	r0, #1
    4a50:	vldr	d1, [sp, #8]
    4a54:	vldr	d0, [sp]
    4a58:	bl	6fc8 <__kernel_sin>
    4a5c:	b.n	49f0 <sin+0x20>
    4a5e:	nop
	...
    4a68:	.word	0x3fe921fb
    4a6c:	.word	0x7fefffff

00004a70 <cosf>:
    4a70:	push	{lr}
    4a72:	vmov	r3, s0
    4a76:	ldr	r2, [pc, #128]	; (4af8 <cosf+0x88>)
    4a78:	bic.w	r3, r3, #2147483648	; 0x80000000
    4a7c:	cmp	r3, r2
    4a7e:	sub	sp, #12
    4a80:	ble.n	4ab6 <cosf+0x46>
    4a82:	cmp.w	r3, #2139095040	; 0x7f800000
    4a86:	blt.n	4a92 <cosf+0x22>
    4a88:	vsub.f32	s0, s0, s0
    4a8c:	add	sp, #12
    4a8e:	ldr.w	pc, [sp], #4
    4a92:	mov	r0, sp
    4a94:	bl	64ec <__ieee754_rem_pio2f>
    4a98:	and.w	r0, r0, #3
    4a9c:	cmp	r0, #1
    4a9e:	beq.n	4ad6 <cosf+0x66>
    4aa0:	cmp	r0, #2
    4aa2:	beq.n	4ac4 <cosf+0x54>
    4aa4:	cbz	r0, 4ae8 <cosf+0x78>
    4aa6:	movs	r0, #1
    4aa8:	vldr	s1, [sp, #4]
    4aac:	vldr	s0, [sp]
    4ab0:	bl	77ac <__kernel_sinf>
    4ab4:	b.n	4a8c <cosf+0x1c>
    4ab6:	vldr	s1, [pc, #68]	; 4afc <cosf+0x8c>
    4aba:	bl	7078 <__kernel_cosf>
    4abe:	add	sp, #12
    4ac0:	ldr.w	pc, [sp], #4
    4ac4:	vldr	s1, [sp, #4]
    4ac8:	vldr	s0, [sp]
    4acc:	bl	7078 <__kernel_cosf>
    4ad0:	vneg.f32	s0, s0
    4ad4:	b.n	4a8c <cosf+0x1c>
    4ad6:	vldr	s1, [sp, #4]
    4ada:	vldr	s0, [sp]
    4ade:	bl	77ac <__kernel_sinf>
    4ae2:	vneg.f32	s0, s0
    4ae6:	b.n	4a8c <cosf+0x1c>
    4ae8:	vldr	s1, [sp, #4]
    4aec:	vldr	s0, [sp]
    4af0:	bl	7078 <__kernel_cosf>
    4af4:	b.n	4a8c <cosf+0x1c>
    4af6:	nop
    4af8:	.word	0x3f490fd8
    4afc:	.word	0x00000000

00004b00 <sinf>:
    4b00:	push	{lr}
    4b02:	vmov	r3, s0
    4b06:	ldr	r2, [pc, #132]	; (4b8c <sinf+0x8c>)
    4b08:	bic.w	r3, r3, #2147483648	; 0x80000000
    4b0c:	cmp	r3, r2
    4b0e:	sub	sp, #12
    4b10:	ble.n	4b48 <sinf+0x48>
    4b12:	cmp.w	r3, #2139095040	; 0x7f800000
    4b16:	blt.n	4b22 <sinf+0x22>
    4b18:	vsub.f32	s0, s0, s0
    4b1c:	add	sp, #12
    4b1e:	ldr.w	pc, [sp], #4
    4b22:	mov	r0, sp
    4b24:	bl	64ec <__ieee754_rem_pio2f>
    4b28:	and.w	r0, r0, #3
    4b2c:	cmp	r0, #1
    4b2e:	beq.n	4b6c <sinf+0x6c>
    4b30:	cmp	r0, #2
    4b32:	beq.n	4b58 <sinf+0x58>
    4b34:	cbz	r0, 4b7a <sinf+0x7a>
    4b36:	vldr	s1, [sp, #4]
    4b3a:	vldr	s0, [sp]
    4b3e:	bl	7078 <__kernel_cosf>
    4b42:	vneg.f32	s0, s0
    4b46:	b.n	4b1c <sinf+0x1c>
    4b48:	movs	r0, #0
    4b4a:	vldr	s1, [pc, #68]	; 4b90 <sinf+0x90>
    4b4e:	bl	77ac <__kernel_sinf>
    4b52:	add	sp, #12
    4b54:	ldr.w	pc, [sp], #4
    4b58:	movs	r0, #1
    4b5a:	vldr	s1, [sp, #4]
    4b5e:	vldr	s0, [sp]
    4b62:	bl	77ac <__kernel_sinf>
    4b66:	vneg.f32	s0, s0
    4b6a:	b.n	4b1c <sinf+0x1c>
    4b6c:	vldr	s1, [sp, #4]
    4b70:	vldr	s0, [sp]
    4b74:	bl	7078 <__kernel_cosf>
    4b78:	b.n	4b1c <sinf+0x1c>
    4b7a:	movs	r0, #1
    4b7c:	vldr	s1, [sp, #4]
    4b80:	vldr	s0, [sp]
    4b84:	bl	77ac <__kernel_sinf>
    4b88:	b.n	4b1c <sinf+0x1c>
    4b8a:	nop
    4b8c:	.word	0x3f490fd8
    4b90:	.word	0x00000000

00004b94 <acos>:
    4b94:	push	{r4, lr}
    4b96:	vpush	{d8-d9}
    4b9a:	vmov.f64	d8, d0
    4b9e:	ldr	r4, [pc, #148]	; (4c34 <acos+0xa0>)
    4ba0:	sub	sp, #40	; 0x28
    4ba2:	bl	50d0 <__ieee754_acos>
    4ba6:	ldrsb.w	r3, [r4]
    4baa:	vmov.f64	d9, d0
    4bae:	adds	r3, #1
    4bb0:	beq.n	4c10 <acos+0x7c>
    4bb2:	vcmp.f64	d8, d8
    4bb6:	vmrs	APSR_nzcv, fpscr
    4bba:	bvs.n	4c10 <acos+0x7c>
    4bbc:	vmov.f64	d0, d8
    4bc0:	bl	7a44 <fabs>
    4bc4:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4bc8:	vcmpe.f64	d0, d7
    4bcc:	vmrs	APSR_nzcv, fpscr
    4bd0:	ble.n	4c10 <acos+0x7c>
    4bd2:	movs	r3, #1
    4bd4:	ldr	r2, [pc, #96]	; (4c38 <acos+0xa4>)
    4bd6:	str	r3, [sp, #0]
    4bd8:	ldr	r0, [pc, #96]	; (4c3c <acos+0xa8>)
    4bda:	str	r2, [sp, #4]
    4bdc:	movs	r3, #0
    4bde:	str	r3, [sp, #32]
    4be0:	vstr	d8, [sp, #16]
    4be4:	vstr	d8, [sp, #8]
    4be8:	bl	7b88 <nan>
    4bec:	ldrsb.w	r3, [r4]
    4bf0:	cmp	r3, #2
    4bf2:	vstr	d0, [sp, #24]
    4bf6:	beq.n	4c1c <acos+0x88>
    4bf8:	mov	r0, sp
    4bfa:	bl	7b80 <matherr>
    4bfe:	cbz	r0, 4c1c <acos+0x88>
    4c00:	ldr	r3, [sp, #32]
    4c02:	cbnz	r3, 4c2a <acos+0x96>
    4c04:	vldr	d0, [sp, #24]
    4c08:	add	sp, #40	; 0x28
    4c0a:	vpop	{d8-d9}
    4c0e:	pop	{r4, pc}
    4c10:	vmov.f64	d0, d9
    4c14:	add	sp, #40	; 0x28
    4c16:	vpop	{d8-d9}
    4c1a:	pop	{r4, pc}
    4c1c:	bl	816c <__errno>
    4c20:	movs	r3, #33	; 0x21
    4c22:	str	r3, [r0, #0]
    4c24:	ldr	r3, [sp, #32]
    4c26:	cmp	r3, #0
    4c28:	beq.n	4c04 <acos+0x70>
    4c2a:	bl	816c <__errno>
    4c2e:	ldr	r3, [sp, #32]
    4c30:	str	r3, [r0, #0]
    4c32:	b.n	4c04 <acos+0x70>
    4c34:	.word	0x200011e4
    4c38:	.word	0x20000878
    4c3c:	.word	0x20000ec4

00004c40 <asin>:
    4c40:	push	{r4, lr}
    4c42:	vpush	{d8-d9}
    4c46:	vmov.f64	d8, d0
    4c4a:	ldr	r4, [pc, #148]	; (4ce0 <asin+0xa0>)
    4c4c:	sub	sp, #40	; 0x28
    4c4e:	bl	5390 <__ieee754_asin>
    4c52:	ldrsb.w	r3, [r4]
    4c56:	vmov.f64	d9, d0
    4c5a:	adds	r3, #1
    4c5c:	beq.n	4cbc <asin+0x7c>
    4c5e:	vcmp.f64	d8, d8
    4c62:	vmrs	APSR_nzcv, fpscr
    4c66:	bvs.n	4cbc <asin+0x7c>
    4c68:	vmov.f64	d0, d8
    4c6c:	bl	7a44 <fabs>
    4c70:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4c74:	vcmpe.f64	d0, d7
    4c78:	vmrs	APSR_nzcv, fpscr
    4c7c:	ble.n	4cbc <asin+0x7c>
    4c7e:	movs	r3, #1
    4c80:	ldr	r2, [pc, #96]	; (4ce4 <asin+0xa4>)
    4c82:	str	r3, [sp, #0]
    4c84:	ldr	r0, [pc, #96]	; (4ce8 <asin+0xa8>)
    4c86:	str	r2, [sp, #4]
    4c88:	movs	r3, #0
    4c8a:	str	r3, [sp, #32]
    4c8c:	vstr	d8, [sp, #16]
    4c90:	vstr	d8, [sp, #8]
    4c94:	bl	7b88 <nan>
    4c98:	ldrsb.w	r3, [r4]
    4c9c:	cmp	r3, #2
    4c9e:	vstr	d0, [sp, #24]
    4ca2:	beq.n	4cc8 <asin+0x88>
    4ca4:	mov	r0, sp
    4ca6:	bl	7b80 <matherr>
    4caa:	cbz	r0, 4cc8 <asin+0x88>
    4cac:	ldr	r3, [sp, #32]
    4cae:	cbnz	r3, 4cd6 <asin+0x96>
    4cb0:	vldr	d0, [sp, #24]
    4cb4:	add	sp, #40	; 0x28
    4cb6:	vpop	{d8-d9}
    4cba:	pop	{r4, pc}
    4cbc:	vmov.f64	d0, d9
    4cc0:	add	sp, #40	; 0x28
    4cc2:	vpop	{d8-d9}
    4cc6:	pop	{r4, pc}
    4cc8:	bl	816c <__errno>
    4ccc:	movs	r3, #33	; 0x21
    4cce:	str	r3, [r0, #0]
    4cd0:	ldr	r3, [sp, #32]
    4cd2:	cmp	r3, #0
    4cd4:	beq.n	4cb0 <asin+0x70>
    4cd6:	bl	816c <__errno>
    4cda:	ldr	r3, [sp, #32]
    4cdc:	str	r3, [r0, #0]
    4cde:	b.n	4cb0 <asin+0x70>
    4ce0:	.word	0x200011e4
    4ce4:	.word	0x20000880
    4ce8:	.word	0x20000ec4

00004cec <atan2>:
    4cec:	b.w	55f8 <__ieee754_atan2>

00004cf0 <pow>:
    4cf0:	push	{r4, r5, r6, r7, lr}
    4cf2:	vpush	{d8-d11}
    4cf6:	vmov.f64	d10, d0
    4cfa:	vmov.f64	d9, d1
    4cfe:	ldr	r4, [pc, #600]	; (4f58 <pow+0x268>)
    4d00:	sub	sp, #44	; 0x2c
    4d02:	bl	57d8 <__ieee754_pow>
    4d06:	ldrsb.w	r3, [r4]
    4d0a:	vmov.f64	d8, d0
    4d0e:	adds	r2, r3, #1
    4d10:	beq.n	4d7c <pow+0x8c>
    4d12:	vcmp.f64	d9, d9
    4d16:	vmrs	APSR_nzcv, fpscr
    4d1a:	bvs.n	4d7c <pow+0x8c>
    4d1c:	vcmp.f64	d10, d10
    4d20:	vmrs	APSR_nzcv, fpscr
    4d24:	bvs.n	4e14 <pow+0x124>
    4d26:	vldr	d11, [pc, #552]	; 4f50 <pow+0x260>
    4d2a:	vcmp.f64	d10, d11
    4d2e:	vmrs	APSR_nzcv, fpscr
    4d32:	bne.n	4d88 <pow+0x98>
    4d34:	vcmp.f64	d9, d11
    4d38:	vmrs	APSR_nzcv, fpscr
    4d3c:	bne.n	4d66 <pow+0x76>
    4d3e:	movs	r2, #1
    4d40:	ldr	r1, [pc, #536]	; (4f5c <pow+0x26c>)
    4d42:	str	r2, [sp, #0]
    4d44:	movs	r2, #0
    4d46:	vstr	d10, [sp, #8]
    4d4a:	vstr	d9, [sp, #16]
    4d4e:	vstr	d11, [sp, #24]
    4d52:	str	r1, [sp, #4]
    4d54:	str	r2, [sp, #32]
    4d56:	cmp	r3, #0
    4d58:	beq.n	4df2 <pow+0x102>
    4d5a:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4d5e:	add	sp, #44	; 0x2c
    4d60:	vpop	{d8-d11}
    4d64:	pop	{r4, r5, r6, r7, pc}
    4d66:	vmov.f64	d0, d9
    4d6a:	bl	7a54 <finite>
    4d6e:	cbz	r0, 4d7c <pow+0x8c>
    4d70:	vcmpe.f64	d9, #0.0
    4d74:	vmrs	APSR_nzcv, fpscr
    4d78:	bmi.w	4ebc <pow+0x1cc>
    4d7c:	vmov.f64	d0, d8
    4d80:	add	sp, #44	; 0x2c
    4d82:	vpop	{d8-d11}
    4d86:	pop	{r4, r5, r6, r7, pc}
    4d88:	bl	7a54 <finite>
    4d8c:	mov	r5, r0
    4d8e:	cmp	r0, #0
    4d90:	beq.n	4e42 <pow+0x152>
    4d92:	vcmp.f64	d8, #0.0
    4d96:	vmrs	APSR_nzcv, fpscr
    4d9a:	mov.w	r6, #0
    4d9e:	mov.w	r7, #0
    4da2:	bne.n	4d7c <pow+0x8c>
    4da4:	vmov.f64	d0, d10
    4da8:	bl	7a54 <finite>
    4dac:	cmp	r0, #0
    4dae:	beq.n	4d7c <pow+0x8c>
    4db0:	vmov.f64	d0, d9
    4db4:	bl	7a54 <finite>
    4db8:	cmp	r0, #0
    4dba:	beq.n	4d7c <pow+0x8c>
    4dbc:	ldr	r2, [pc, #412]	; (4f5c <pow+0x26c>)
    4dbe:	str	r2, [sp, #4]
    4dc0:	vstr	d10, [sp, #8]
    4dc4:	vstr	d9, [sp, #16]
    4dc8:	strd	r6, r7, [sp, #24]
    4dcc:	movs	r1, #4
    4dce:	movs	r2, #0
    4dd0:	ldrsb.w	r3, [r4]
    4dd4:	str	r1, [sp, #0]
    4dd6:	str	r2, [sp, #32]
    4dd8:	cmp	r3, #2
    4dda:	beq.n	4de4 <pow+0xf4>
    4ddc:	mov	r0, sp
    4dde:	bl	7b80 <matherr>
    4de2:	cbnz	r0, 4dfc <pow+0x10c>
    4de4:	bl	816c <__errno>
    4de8:	movs	r3, #34	; 0x22
    4dea:	str	r3, [r0, #0]
    4dec:	b.n	4dfc <pow+0x10c>
    4dee:	vstr	d11, [sp, #24]
    4df2:	mov	r0, sp
    4df4:	bl	7b80 <matherr>
    4df8:	cmp	r0, #0
    4dfa:	beq.n	4ee4 <pow+0x1f4>
    4dfc:	ldr	r3, [sp, #32]
    4dfe:	cbz	r3, 4e08 <pow+0x118>
    4e00:	bl	816c <__errno>
    4e04:	ldr	r3, [sp, #32]
    4e06:	str	r3, [r0, #0]
    4e08:	vldr	d0, [sp, #24]
    4e0c:	add	sp, #44	; 0x2c
    4e0e:	vpop	{d8-d11}
    4e12:	pop	{r4, r5, r6, r7, pc}
    4e14:	vcmp.f64	d9, #0.0
    4e18:	vmrs	APSR_nzcv, fpscr
    4e1c:	bne.n	4d7c <pow+0x8c>
    4e1e:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4e22:	movs	r2, #1
    4e24:	ldr	r1, [pc, #308]	; (4f5c <pow+0x26c>)
    4e26:	str	r2, [sp, #0]
    4e28:	cmp	r3, #2
    4e2a:	mov.w	r2, #0
    4e2e:	vstr	d10, [sp, #8]
    4e32:	vstr	d9, [sp, #16]
    4e36:	str	r1, [sp, #4]
    4e38:	str	r2, [sp, #32]
    4e3a:	vstr	d0, [sp, #24]
    4e3e:	bne.n	4df2 <pow+0x102>
    4e40:	b.n	4d80 <pow+0x90>
    4e42:	vmov.f64	d0, d10
    4e46:	bl	7a54 <finite>
    4e4a:	cmp	r0, #0
    4e4c:	beq.n	4d92 <pow+0xa2>
    4e4e:	vmov.f64	d0, d9
    4e52:	bl	7a54 <finite>
    4e56:	cmp	r0, #0
    4e58:	beq.n	4d92 <pow+0xa2>
    4e5a:	vcmp.f64	d8, d8
    4e5e:	vmrs	APSR_nzcv, fpscr
    4e62:	ldrsb.w	r3, [r4]
    4e66:	ldr	r2, [pc, #244]	; (4f5c <pow+0x26c>)
    4e68:	str	r5, [sp, #32]
    4e6a:	bvs.n	4f2a <pow+0x23a>
    4e6c:	movs	r1, #3
    4e6e:	vstr	d10, [sp, #8]
    4e72:	vstr	d9, [sp, #16]
    4e76:	stmia.w	sp, {r1, r2}
    4e7a:	cmp	r3, #0
    4e7c:	bne.n	4eee <pow+0x1fe>
    4e7e:	vcmpe.f64	d10, #0.0
    4e82:	ldr	r3, [pc, #220]	; (4f60 <pow+0x270>)
    4e84:	mov.w	r2, #3758096384	; 0xe0000000
    4e88:	vmrs	APSR_nzcv, fpscr
    4e8c:	strd	r2, r3, [sp, #24]
    4e90:	bpl.n	4ddc <pow+0xec>
    4e92:	vmov.f64	d7, #96	; 0x3f000000  0.5
    4e96:	vmul.f64	d9, d9, d7
    4e9a:	vmov.f64	d0, d9
    4e9e:	bl	7b98 <rint>
    4ea2:	vcmp.f64	d9, d0
    4ea6:	vmrs	APSR_nzcv, fpscr
    4eaa:	beq.n	4f24 <pow+0x234>
    4eac:	ldr	r1, [pc, #180]	; (4f64 <pow+0x274>)
    4eae:	ldrsb.w	r3, [r4]
    4eb2:	mov.w	r0, #3758096384	; 0xe0000000
    4eb6:	strd	r0, r1, [sp, #24]
    4eba:	b.n	4dd8 <pow+0xe8>
    4ebc:	ldr	r2, [pc, #156]	; (4f5c <pow+0x26c>)
    4ebe:	ldrsb.w	r3, [r4]
    4ec2:	str	r2, [sp, #4]
    4ec4:	movs	r1, #1
    4ec6:	movs	r2, #0
    4ec8:	vstr	d10, [sp, #8]
    4ecc:	vstr	d9, [sp, #16]
    4ed0:	str	r1, [sp, #0]
    4ed2:	str	r2, [sp, #32]
    4ed4:	cmp	r3, #0
    4ed6:	beq.n	4dee <pow+0xfe>
    4ed8:	ldr	r1, [pc, #140]	; (4f68 <pow+0x278>)
    4eda:	movs	r0, #0
    4edc:	cmp	r3, #2
    4ede:	strd	r0, r1, [sp, #24]
    4ee2:	bne.n	4df2 <pow+0x102>
    4ee4:	bl	816c <__errno>
    4ee8:	movs	r3, #33	; 0x21
    4eea:	str	r3, [r0, #0]
    4eec:	b.n	4dfc <pow+0x10c>
    4eee:	ldr	r1, [pc, #124]	; (4f6c <pow+0x27c>)
    4ef0:	vcmpe.f64	d10, #0.0
    4ef4:	movs	r0, #0
    4ef6:	vmrs	APSR_nzcv, fpscr
    4efa:	strd	r0, r1, [sp, #24]
    4efe:	bpl.w	4dd8 <pow+0xe8>
    4f02:	vmov.f64	d7, #96	; 0x3f000000  0.5
    4f06:	vmul.f64	d9, d9, d7
    4f0a:	vmov.f64	d0, d9
    4f0e:	bl	7b98 <rint>
    4f12:	vcmp.f64	d9, d0
    4f16:	vmrs	APSR_nzcv, fpscr
    4f1a:	beq.n	4f24 <pow+0x234>
    4f1c:	ldr	r3, [pc, #72]	; (4f68 <pow+0x278>)
    4f1e:	movs	r2, #0
    4f20:	strd	r2, r3, [sp, #24]
    4f24:	ldrsb.w	r3, [r4]
    4f28:	b.n	4dd8 <pow+0xe8>
    4f2a:	movs	r1, #1
    4f2c:	vstr	d10, [sp, #8]
    4f30:	vstr	d9, [sp, #16]
    4f34:	stmia.w	sp, {r1, r2}
    4f38:	cmp	r3, #0
    4f3a:	beq.w	4dee <pow+0xfe>
    4f3e:	vdiv.f64	d7, d11, d11
    4f42:	cmp	r3, #2
    4f44:	vstr	d7, [sp, #24]
    4f48:	beq.n	4ee4 <pow+0x1f4>
    4f4a:	b.n	4df2 <pow+0x102>
    4f4c:	nop.w
	...
    4f58:	.word	0x200011e4
    4f5c:	.word	0x20000888
    4f60:	.word	0x47efffff
    4f64:	.word	0xc7efffff
    4f68:	.word	0xfff00000
    4f6c:	.word	0x7ff00000

00004f70 <sqrt>:
    4f70:	push	{lr}
    4f72:	vpush	{d8}
    4f76:	vmov.f64	d8, d0
    4f7a:	sub	sp, #44	; 0x2c
    4f7c:	bl	61fc <__ieee754_sqrt>
    4f80:	ldr	r3, [pc, #140]	; (5010 <sqrt+0xa0>)
    4f82:	ldrsb.w	r3, [r3]
    4f86:	adds	r2, r3, #1
    4f88:	beq.n	4fa2 <sqrt+0x32>
    4f8a:	vcmp.f64	d8, d8
    4f8e:	vmrs	APSR_nzcv, fpscr
    4f92:	bvs.n	4fa2 <sqrt+0x32>
    4f94:	vldr	d7, [pc, #112]	; 5008 <sqrt+0x98>
    4f98:	vcmpe.f64	d8, d7
    4f9c:	vmrs	APSR_nzcv, fpscr
    4fa0:	bmi.n	4fac <sqrt+0x3c>
    4fa2:	add	sp, #44	; 0x2c
    4fa4:	vpop	{d8}
    4fa8:	ldr.w	pc, [sp], #4
    4fac:	movs	r2, #1
    4fae:	ldr	r1, [pc, #100]	; (5014 <sqrt+0xa4>)
    4fb0:	str	r2, [sp, #0]
    4fb2:	movs	r2, #0
    4fb4:	vstr	d8, [sp, #16]
    4fb8:	vstr	d8, [sp, #8]
    4fbc:	str	r1, [sp, #4]
    4fbe:	str	r2, [sp, #32]
    4fc0:	cbz	r3, 4fe8 <sqrt+0x78>
    4fc2:	vdiv.f64	d6, d7, d7
    4fc6:	cmp	r3, #2
    4fc8:	vstr	d6, [sp, #24]
    4fcc:	bne.n	4fec <sqrt+0x7c>
    4fce:	bl	816c <__errno>
    4fd2:	movs	r3, #33	; 0x21
    4fd4:	str	r3, [r0, #0]
    4fd6:	ldr	r3, [sp, #32]
    4fd8:	cbnz	r3, 4ff8 <sqrt+0x88>
    4fda:	vldr	d0, [sp, #24]
    4fde:	add	sp, #44	; 0x2c
    4fe0:	vpop	{d8}
    4fe4:	ldr.w	pc, [sp], #4
    4fe8:	vstr	d7, [sp, #24]
    4fec:	mov	r0, sp
    4fee:	bl	7b80 <matherr>
    4ff2:	cmp	r0, #0
    4ff4:	bne.n	4fd6 <sqrt+0x66>
    4ff6:	b.n	4fce <sqrt+0x5e>
    4ff8:	bl	816c <__errno>
    4ffc:	ldr	r3, [sp, #32]
    4ffe:	str	r3, [r0, #0]
    5000:	b.n	4fda <sqrt+0x6a>
    5002:	nop
    5004:	nop.w
	...
    5010:	.word	0x200011e4
    5014:	.word	0x2000088c

00005018 <atan2f>:
    5018:	b.w	6380 <__ieee754_atan2f>
    501c:	movs	r0, r0
	...

00005020 <sqrtf>:
    5020:	push	{lr}
    5022:	vpush	{d8}
    5026:	sub	sp, #44	; 0x2c
    5028:	vmov.f32	s16, s0
    502c:	bl	6784 <__ieee754_sqrtf>
    5030:	ldr	r3, [pc, #148]	; (50c8 <sqrtf+0xa8>)
    5032:	ldrsb.w	r3, [r3]
    5036:	adds	r2, r3, #1
    5038:	beq.n	504e <sqrtf+0x2e>
    503a:	vcmp.f32	s16, s16
    503e:	vmrs	APSR_nzcv, fpscr
    5042:	bvs.n	504e <sqrtf+0x2e>
    5044:	vcmpe.f32	s16, #0.0
    5048:	vmrs	APSR_nzcv, fpscr
    504c:	bmi.n	5058 <sqrtf+0x38>
    504e:	add	sp, #44	; 0x2c
    5050:	vpop	{d8}
    5054:	ldr.w	pc, [sp], #4
    5058:	vcvt.f64.f32	d0, s16
    505c:	movs	r2, #1
    505e:	ldr	r1, [pc, #108]	; (50cc <sqrtf+0xac>)
    5060:	str	r2, [sp, #0]
    5062:	movs	r2, #0
    5064:	vstr	d0, [sp, #16]
    5068:	vstr	d0, [sp, #8]
    506c:	str	r1, [sp, #4]
    506e:	str	r2, [sp, #32]
    5070:	cbz	r3, 50a0 <sqrtf+0x80>
    5072:	vldr	d7, [pc, #76]	; 50c0 <sqrtf+0xa0>
    5076:	cmp	r3, #2
    5078:	vdiv.f64	d6, d7, d7
    507c:	vstr	d6, [sp, #24]
    5080:	bne.n	50a8 <sqrtf+0x88>
    5082:	bl	816c <__errno>
    5086:	movs	r3, #33	; 0x21
    5088:	str	r3, [r0, #0]
    508a:	ldr	r3, [sp, #32]
    508c:	cbnz	r3, 50b4 <sqrtf+0x94>
    508e:	vldr	d0, [sp, #24]
    5092:	vcvt.f32.f64	s0, d0
    5096:	add	sp, #44	; 0x2c
    5098:	vpop	{d8}
    509c:	ldr.w	pc, [sp], #4
    50a0:	movs	r2, #0
    50a2:	movs	r3, #0
    50a4:	strd	r2, r3, [sp, #24]
    50a8:	mov	r0, sp
    50aa:	bl	7b80 <matherr>
    50ae:	cmp	r0, #0
    50b0:	bne.n	508a <sqrtf+0x6a>
    50b2:	b.n	5082 <sqrtf+0x62>
    50b4:	bl	816c <__errno>
    50b8:	ldr	r3, [sp, #32]
    50ba:	str	r3, [r0, #0]
    50bc:	b.n	508e <sqrtf+0x6e>
    50be:	nop
	...
    50c8:	.word	0x200011e4
    50cc:	.word	0x20000894

000050d0 <__ieee754_acos>:
    50d0:	push	{lr}
    50d2:	vpush	{d8-d9}
    50d6:	sub	sp, #12
    50d8:	vstr	d0, [sp]
    50dc:	ldr	r2, [sp, #4]
    50de:	ldr	r1, [pc, #672]	; (5380 <__ieee754_acos+0x2b0>)
    50e0:	bic.w	r3, r2, #2147483648	; 0x80000000
    50e4:	cmp	r3, r1
    50e6:	ble.n	5110 <__ieee754_acos+0x40>
    50e8:	add.w	r3, r3, #3221225472	; 0xc0000000
    50ec:	ldr	r1, [sp, #0]
    50ee:	add.w	r3, r3, #1048576	; 0x100000
    50f2:	orrs	r3, r1
    50f4:	bne.n	51dc <__ieee754_acos+0x10c>
    50f6:	vldr	d7, [pc, #528]	; 5308 <__ieee754_acos+0x238>
    50fa:	vldr	d0, [pc, #532]	; 5310 <__ieee754_acos+0x240>
    50fe:	cmp	r2, #0
    5100:	it	gt
    5102:	vmovgt.f64	d0, d7
    5106:	add	sp, #12
    5108:	vpop	{d8-d9}
    510c:	ldr.w	pc, [sp], #4
    5110:	ldr	r1, [pc, #624]	; (5384 <__ieee754_acos+0x2b4>)
    5112:	cmp	r3, r1
    5114:	ble.n	51c8 <__ieee754_acos+0xf8>
    5116:	cmp	r2, #0
    5118:	ldrd	r0, r1, [sp]
    511c:	blt.w	5274 <__ieee754_acos+0x1a4>
    5120:	vmov.f64	d7, #96	; 0x3f000000  0.5
    5124:	vmov.f64	d9, #112	; 0x3f800000  1.0
    5128:	vmov	d6, r0, r1
    512c:	vsub.f64	d8, d9, d6
    5130:	vmul.f64	d8, d8, d7
    5134:	vmov.f64	d0, d8
    5138:	bl	61fc <__ieee754_sqrt>
    513c:	vldr	d5, [pc, #472]	; 5318 <__ieee754_acos+0x248>
    5140:	vldr	d6, [pc, #476]	; 5320 <__ieee754_acos+0x250>
    5144:	vldr	d7, [pc, #480]	; 5328 <__ieee754_acos+0x258>
    5148:	vfma.f64	d6, d8, d5
    514c:	vldr	d5, [pc, #480]	; 5330 <__ieee754_acos+0x260>
    5150:	vfma.f64	d7, d8, d6
    5154:	vldr	d6, [pc, #480]	; 5338 <__ieee754_acos+0x268>
    5158:	vfma.f64	d5, d8, d7
    515c:	vldr	d7, [pc, #480]	; 5340 <__ieee754_acos+0x270>
    5160:	vfma.f64	d6, d8, d5
    5164:	vstr	d0, [sp]
    5168:	vfma.f64	d7, d8, d6
    516c:	vmul.f64	d4, d7, d8
    5170:	ldrd	r2, r3, [sp]
    5174:	vldr	d3, [pc, #464]	; 5348 <__ieee754_acos+0x278>
    5178:	vldr	d7, [pc, #468]	; 5350 <__ieee754_acos+0x280>
    517c:	vldr	d5, [pc, #472]	; 5358 <__ieee754_acos+0x288>
    5180:	vfma.f64	d7, d8, d3
    5184:	vmov.f64	d3, d8
    5188:	movs	r2, #0
    518a:	vldr	d6, [pc, #468]	; 5360 <__ieee754_acos+0x290>
    518e:	vfma.f64	d5, d8, d7
    5192:	vmov	d7, r2, r3
    5196:	vfma.f64	d6, d8, d5
    519a:	vfms.f64	d3, d7, d7
    519e:	vadd.f64	d5, d0, d7
    51a2:	vdiv.f64	d0, d3, d5
    51a6:	vldr	d5, [sp]
    51aa:	vfma.f64	d9, d8, d6
    51ae:	vdiv.f64	d6, d4, d9
    51b2:	vfma.f64	d0, d5, d6
    51b6:	vadd.f64	d0, d0, d7
    51ba:	vadd.f64	d0, d0, d0
    51be:	add	sp, #12
    51c0:	vpop	{d8-d9}
    51c4:	ldr.w	pc, [sp], #4
    51c8:	ldr	r2, [pc, #444]	; (5388 <__ieee754_acos+0x2b8>)
    51ca:	cmp	r3, r2
    51cc:	bgt.n	51f2 <__ieee754_acos+0x122>
    51ce:	vldr	d0, [pc, #408]	; 5368 <__ieee754_acos+0x298>
    51d2:	add	sp, #12
    51d4:	vpop	{d8-d9}
    51d8:	ldr.w	pc, [sp], #4
    51dc:	vldr	d7, [sp]
    51e0:	vsub.f64	d7, d7, d7
    51e4:	vdiv.f64	d0, d7, d7
    51e8:	add	sp, #12
    51ea:	vpop	{d8-d9}
    51ee:	ldr.w	pc, [sp], #4
    51f2:	vldr	d7, [sp]
    51f6:	vmov.f64	d5, #112	; 0x3f800000  1.0
    51fa:	vldr	d3, [pc, #284]	; 5318 <__ieee754_acos+0x248>
    51fe:	vmul.f64	d7, d7, d7
    5202:	vldr	d4, [pc, #284]	; 5320 <__ieee754_acos+0x250>
    5206:	vldr	d6, [pc, #288]	; 5328 <__ieee754_acos+0x258>
    520a:	vfma.f64	d4, d7, d3
    520e:	vldr	d3, [pc, #288]	; 5330 <__ieee754_acos+0x260>
    5212:	vfma.f64	d6, d7, d4
    5216:	vldr	d4, [pc, #288]	; 5338 <__ieee754_acos+0x268>
    521a:	vfma.f64	d3, d7, d6
    521e:	vldr	d6, [pc, #288]	; 5340 <__ieee754_acos+0x270>
    5222:	vfma.f64	d4, d7, d3
    5226:	vldr	d1, [pc, #288]	; 5348 <__ieee754_acos+0x278>
    522a:	vfma.f64	d6, d7, d4
    522e:	vmul.f64	d6, d6, d7
    5232:	vldr	d2, [pc, #284]	; 5350 <__ieee754_acos+0x280>
    5236:	vldr	d3, [pc, #288]	; 5358 <__ieee754_acos+0x288>
    523a:	vfma.f64	d2, d7, d1
    523e:	vldr	d4, [pc, #288]	; 5360 <__ieee754_acos+0x290>
    5242:	vfma.f64	d3, d7, d2
    5246:	vldr	d0, [pc, #296]	; 5370 <__ieee754_acos+0x2a0>
    524a:	vfma.f64	d4, d7, d3
    524e:	vfma.f64	d5, d7, d4
    5252:	vldr	d7, [pc, #276]	; 5368 <__ieee754_acos+0x298>
    5256:	vdiv.f64	d4, d6, d5
    525a:	vldr	d6, [sp]
    525e:	vfms.f64	d0, d6, d4
    5262:	vsub.f64	d0, d6, d0
    5266:	vsub.f64	d0, d7, d0
    526a:	add	sp, #12
    526c:	vpop	{d8-d9}
    5270:	ldr.w	pc, [sp], #4
    5274:	vmov	d5, r0, r1
    5278:	vmov.f64	d6, #112	; 0x3f800000  1.0
    527c:	vldr	d4, [pc, #152]	; 5318 <__ieee754_acos+0x248>
    5280:	vadd.f64	d8, d5, d6
    5284:	vmov.f64	d7, #96	; 0x3f000000  0.5
    5288:	vldr	d5, [pc, #148]	; 5320 <__ieee754_acos+0x250>
    528c:	vmul.f64	d7, d8, d7
    5290:	vmov.f64	d0, d7
    5294:	vldr	d3, [pc, #144]	; 5328 <__ieee754_acos+0x258>
    5298:	vfma.f64	d5, d7, d4
    529c:	vldr	d8, [pc, #160]	; 5340 <__ieee754_acos+0x270>
    52a0:	vfma.f64	d3, d7, d5
    52a4:	vldr	d4, [pc, #136]	; 5330 <__ieee754_acos+0x260>
    52a8:	vldr	d5, [pc, #140]	; 5338 <__ieee754_acos+0x268>
    52ac:	vfma.f64	d4, d7, d3
    52b0:	vldr	d2, [pc, #148]	; 5348 <__ieee754_acos+0x278>
    52b4:	vfma.f64	d5, d7, d4
    52b8:	vfma.f64	d8, d7, d5
    52bc:	vldr	d3, [pc, #144]	; 5350 <__ieee754_acos+0x280>
    52c0:	vmul.f64	d8, d8, d7
    52c4:	vldr	d4, [pc, #144]	; 5358 <__ieee754_acos+0x288>
    52c8:	vfma.f64	d3, d7, d2
    52cc:	vldr	d5, [pc, #144]	; 5360 <__ieee754_acos+0x290>
    52d0:	vfma.f64	d4, d7, d3
    52d4:	vfma.f64	d5, d7, d4
    52d8:	vfma.f64	d6, d7, d5
    52dc:	vmov.f64	d9, d6
    52e0:	bl	61fc <__ieee754_sqrt>
    52e4:	vdiv.f64	d4, d8, d9
    52e8:	vmov.f64	d5, #0	; 0x40000000  2.0
    52ec:	vldr	d6, [pc, #136]	; 5378 <__ieee754_acos+0x2a8>
    52f0:	vldr	d7, [pc, #28]	; 5310 <__ieee754_acos+0x240>
    52f4:	vfma.f64	d6, d0, d4
    52f8:	vadd.f64	d0, d6, d0
    52fc:	vfms.f64	d7, d0, d5
    5300:	vmov.f64	d0, d7
    5304:	b.n	5106 <__ieee754_acos+0x36>
    5306:	nop
	...
    5310:	.word	0x54442d18
    5314:	.word	0x400921fb
    5318:	.word	0x0dfdf709
    531c:	.word	0x3f023de1
    5320:	.word	0x7501b288
    5324:	.word	0x3f49efe0
    5328:	.word	0xb5688f3b
    532c:	.word	0xbfa48228
    5330:	.word	0x0e884455
    5334:	.word	0x3fc9c155
    5338:	.word	0x03eb6f7d
    533c:	.word	0xbfd4d612
    5340:	.word	0x55555555
    5344:	.word	0x3fc55555
    5348:	.word	0xb12e9282
    534c:	.word	0x3fb3b8c5
    5350:	.word	0x1b8d0159
    5354:	.word	0xbfe6066c
    5358:	.word	0x9c598ac8
    535c:	.word	0x40002ae5
    5360:	.word	0x1c8a2d4b
    5364:	.word	0xc0033a27
    5368:	.word	0x54442d18
    536c:	.word	0x3ff921fb
    5370:	.word	0x33145c07
    5374:	.word	0x3c91a626
    5378:	.word	0x33145c07
    537c:	.word	0xbc91a626
    5380:	.word	0x3fefffff
    5384:	.word	0x3fdfffff
    5388:	.word	0x3c600000
    538c:	.word	0x00000000

00005390 <__ieee754_asin>:
    5390:	push	{r4, r5, lr}
    5392:	vmov	r5, s1
    5396:	vpush	{d8-d10}
    539a:	ldr	r3, [pc, #588]	; (55e8 <__ieee754_asin+0x258>)
    539c:	bic.w	r4, r5, #2147483648	; 0x80000000
    53a0:	cmp	r4, r3
    53a2:	sub	sp, #12
    53a4:	ble.n	53c8 <__ieee754_asin+0x38>
    53a6:	add.w	r4, r4, #3221225472	; 0xc0000000
    53aa:	vmov	r3, s0
    53ae:	add.w	r4, r4, #1048576	; 0x100000
    53b2:	orrs	r3, r4
    53b4:	beq.w	54c8 <__ieee754_asin+0x138>
    53b8:	vsub.f64	d7, d0, d0
    53bc:	vdiv.f64	d0, d7, d7
    53c0:	add	sp, #12
    53c2:	vpop	{d8-d10}
    53c6:	pop	{r4, r5, pc}
    53c8:	ldr	r3, [pc, #544]	; (55ec <__ieee754_asin+0x25c>)
    53ca:	cmp	r4, r3
    53cc:	bgt.n	53ec <__ieee754_asin+0x5c>
    53ce:	cmp.w	r4, #1044381696	; 0x3e400000
    53d2:	bge.w	5506 <__ieee754_asin+0x176>
    53d6:	vmov.f64	d6, #112	; 0x3f800000  1.0
    53da:	vldr	d7, [pc, #404]	; 5570 <__ieee754_asin+0x1e0>
    53de:	vadd.f64	d7, d0, d7
    53e2:	vcmpe.f64	d7, d6
    53e6:	vmrs	APSR_nzcv, fpscr
    53ea:	bgt.n	53c0 <__ieee754_asin+0x30>
    53ec:	bl	7a44 <fabs>
    53f0:	vmov.f64	d7, #112	; 0x3f800000  1.0
    53f4:	vmov.f64	d6, #96	; 0x3f000000  0.5
    53f8:	vsub.f64	d0, d7, d0
    53fc:	vldr	d5, [pc, #376]	; 5578 <__ieee754_asin+0x1e8>
    5400:	vmul.f64	d8, d0, d6
    5404:	vmov.f64	d0, d8
    5408:	vldr	d6, [pc, #372]	; 5580 <__ieee754_asin+0x1f0>
    540c:	vldr	d4, [pc, #376]	; 5588 <__ieee754_asin+0x1f8>
    5410:	vfma.f64	d6, d8, d5
    5414:	vldr	d9, [pc, #376]	; 5590 <__ieee754_asin+0x200>
    5418:	vfma.f64	d4, d8, d6
    541c:	vldr	d5, [pc, #376]	; 5598 <__ieee754_asin+0x208>
    5420:	vldr	d6, [pc, #380]	; 55a0 <__ieee754_asin+0x210>
    5424:	vfma.f64	d5, d8, d4
    5428:	vldr	d3, [pc, #380]	; 55a8 <__ieee754_asin+0x218>
    542c:	vfma.f64	d6, d8, d5
    5430:	vfma.f64	d9, d8, d6
    5434:	vldr	d4, [pc, #376]	; 55b0 <__ieee754_asin+0x220>
    5438:	vmul.f64	d9, d9, d8
    543c:	vldr	d5, [pc, #376]	; 55b8 <__ieee754_asin+0x228>
    5440:	vfma.f64	d4, d8, d3
    5444:	vldr	d6, [pc, #376]	; 55c0 <__ieee754_asin+0x230>
    5448:	vfma.f64	d5, d8, d4
    544c:	vfma.f64	d6, d8, d5
    5450:	vfma.f64	d7, d8, d6
    5454:	vmov.f64	d10, d7
    5458:	bl	61fc <__ieee754_sqrt>
    545c:	ldr	r3, [pc, #400]	; (55f0 <__ieee754_asin+0x260>)
    545e:	cmp	r4, r3
    5460:	vstr	d0, [sp]
    5464:	bgt.n	54e4 <__ieee754_asin+0x154>
    5466:	vmov.f64	d5, #0	; 0x40000000  2.0
    546a:	vdiv.f64	d4, d9, d10
    546e:	ldrd	r2, r3, [sp]
    5472:	vldr	d6, [sp]
    5476:	vldr	d7, [pc, #336]	; 55c8 <__ieee754_asin+0x238>
    547a:	vadd.f64	d2, d6, d6
    547e:	vldr	d1, [sp]
    5482:	movs	r2, #0
    5484:	vldr	d0, [pc, #328]	; 55d0 <__ieee754_asin+0x240>
    5488:	vmov	d6, r2, r3
    548c:	vneg.f64	d3, d6
    5490:	vfma.f64	d8, d3, d6
    5494:	vadd.f64	d6, d1, d6
    5498:	vmov.f64	d1, d7
    549c:	vfma.f64	d1, d3, d5
    54a0:	vmov.f64	d3, d1
    54a4:	vdiv.f64	d1, d8, d6
    54a8:	vfms.f64	d0, d1, d5
    54ac:	vfnms.f64	d0, d4, d2
    54b0:	vsub.f64	d0, d0, d3
    54b4:	vsub.f64	d0, d7, d0
    54b8:	cmp	r5, #0
    54ba:	it	le
    54bc:	vnegle.f64	d0, d0
    54c0:	add	sp, #12
    54c2:	vpop	{d8-d10}
    54c6:	pop	{r4, r5, pc}
    54c8:	vldr	d6, [pc, #268]	; 55d8 <__ieee754_asin+0x248>
    54cc:	vldr	d7, [pc, #256]	; 55d0 <__ieee754_asin+0x240>
    54d0:	vmul.f64	d7, d0, d7
    54d4:	vfma.f64	d7, d0, d6
    54d8:	vmov.f64	d0, d7
    54dc:	add	sp, #12
    54de:	vpop	{d8-d10}
    54e2:	pop	{r4, r5, pc}
    54e4:	vldr	d5, [sp]
    54e8:	vdiv.f64	d7, d9, d10
    54ec:	vmov.f64	d6, #0	; 0x40000000  2.0
    54f0:	vfma.f64	d5, d5, d7
    54f4:	vldr	d0, [pc, #232]	; 55e0 <__ieee754_asin+0x250>
    54f8:	vldr	d7, [pc, #220]	; 55d8 <__ieee754_asin+0x248>
    54fc:	vfma.f64	d0, d5, d6
    5500:	vsub.f64	d0, d7, d0
    5504:	b.n	54b8 <__ieee754_asin+0x128>
    5506:	vldr	d4, [pc, #112]	; 5578 <__ieee754_asin+0x1e8>
    550a:	vmul.f64	d7, d0, d0
    550e:	vmov.f64	d2, #112	; 0x3f800000  1.0
    5512:	vldr	d5, [pc, #108]	; 5580 <__ieee754_asin+0x1f0>
    5516:	vldr	d6, [pc, #112]	; 5588 <__ieee754_asin+0x1f8>
    551a:	vfma.f64	d5, d7, d4
    551e:	vldr	d4, [pc, #120]	; 5598 <__ieee754_asin+0x208>
    5522:	vfma.f64	d6, d7, d5
    5526:	vldr	d5, [pc, #120]	; 55a0 <__ieee754_asin+0x210>
    552a:	vfma.f64	d4, d7, d6
    552e:	vldr	d6, [pc, #96]	; 5590 <__ieee754_asin+0x200>
    5532:	vfma.f64	d5, d7, d4
    5536:	vldr	d1, [pc, #112]	; 55a8 <__ieee754_asin+0x218>
    553a:	vfma.f64	d6, d7, d5
    553e:	vmul.f64	d6, d6, d7
    5542:	vldr	d3, [pc, #108]	; 55b0 <__ieee754_asin+0x220>
    5546:	vldr	d4, [pc, #112]	; 55b8 <__ieee754_asin+0x228>
    554a:	vfma.f64	d3, d7, d1
    554e:	vldr	d5, [pc, #112]	; 55c0 <__ieee754_asin+0x230>
    5552:	vfma.f64	d4, d7, d3
    5556:	vfma.f64	d5, d7, d4
    555a:	vfma.f64	d2, d7, d5
    555e:	vdiv.f64	d5, d6, d2
    5562:	vfma.f64	d0, d0, d5
    5566:	add	sp, #12
    5568:	vpop	{d8-d10}
    556c:	pop	{r4, r5, pc}
    556e:	nop
    5570:	.word	0x8800759c
    5574:	.word	0x7e37e43c
    5578:	.word	0x0dfdf709
    557c:	.word	0x3f023de1
    5580:	.word	0x7501b288
    5584:	.word	0x3f49efe0
    5588:	.word	0xb5688f3b
    558c:	.word	0xbfa48228
    5590:	.word	0x55555555
    5594:	.word	0x3fc55555
    5598:	.word	0x0e884455
    559c:	.word	0x3fc9c155
    55a0:	.word	0x03eb6f7d
    55a4:	.word	0xbfd4d612
    55a8:	.word	0xb12e9282
    55ac:	.word	0x3fb3b8c5
    55b0:	.word	0x1b8d0159
    55b4:	.word	0xbfe6066c
    55b8:	.word	0x9c598ac8
    55bc:	.word	0x40002ae5
    55c0:	.word	0x1c8a2d4b
    55c4:	.word	0xc0033a27
    55c8:	.word	0x54442d18
    55cc:	.word	0x3fe921fb
    55d0:	.word	0x33145c07
    55d4:	.word	0x3c91a626
    55d8:	.word	0x54442d18
    55dc:	.word	0x3ff921fb
    55e0:	.word	0x33145c07
    55e4:	.word	0xbc91a626
    55e8:	.word	0x3fefffff
    55ec:	.word	0x3fdfffff
    55f0:	.word	0x3fef3332
    55f4:	.word	0x00000000

000055f8 <__ieee754_atan2>:
    55f8:	push	{r4, r5, r6, r7, lr}
    55fa:	sub	sp, #20
    55fc:	vstr	d1, [sp, #8]
    5600:	ldr	r2, [sp, #8]
    5602:	ldr	r0, [sp, #12]
    5604:	ldr	r1, [pc, #456]	; (57d0 <__ieee754_atan2+0x1d8>)
    5606:	negs	r3, r2
    5608:	vstr	d0, [sp]
    560c:	orrs	r3, r2
    560e:	bic.w	r5, r0, #2147483648	; 0x80000000
    5612:	orr.w	r3, r5, r3, lsr #31
    5616:	cmp	r3, r1
    5618:	ldmia.w	sp, {r4, r7}
    561c:	bhi.n	56a4 <__ieee754_atan2+0xac>
    561e:	negs	r3, r4
    5620:	orrs	r3, r4
    5622:	bic.w	lr, r7, #2147483648	; 0x80000000
    5626:	orr.w	r3, lr, r3, lsr #31
    562a:	cmp	r3, r1
    562c:	bhi.n	56a4 <__ieee754_atan2+0xac>
    562e:	add.w	r3, r0, #3221225472	; 0xc0000000
    5632:	add.w	r3, r3, #1048576	; 0x100000
    5636:	orrs	r3, r2
    5638:	beq.n	56e2 <__ieee754_atan2+0xea>
    563a:	asrs	r6, r0, #30
    563c:	and.w	r6, r6, #2
    5640:	orrs.w	r3, r4, lr
    5644:	orr.w	r6, r6, r7, lsr #31
    5648:	beq.n	56b4 <__ieee754_atan2+0xbc>
    564a:	orrs.w	r3, r2, r5
    564e:	beq.n	56ce <__ieee754_atan2+0xd6>
    5650:	cmp	r5, r1
    5652:	beq.n	56fa <__ieee754_atan2+0x102>
    5654:	cmp	lr, r1
    5656:	beq.n	56ce <__ieee754_atan2+0xd6>
    5658:	rsb	r5, r5, lr
    565c:	asrs	r5, r5, #20
    565e:	cmp	r5, #60	; 0x3c
    5660:	bgt.n	56ec <__ieee754_atan2+0xf4>
    5662:	cmp	r0, #0
    5664:	blt.n	573e <__ieee754_atan2+0x146>
    5666:	ldrd	r2, r3, [sp]
    566a:	vldr	d0, [sp, #8]
    566e:	vmov	d7, r2, r3
    5672:	vdiv.f64	d0, d7, d0
    5676:	bl	7a44 <fabs>
    567a:	bl	7840 <atan>
    567e:	vmov	r2, r3, d0
    5682:	cmp	r6, #1
    5684:	beq.n	5734 <__ieee754_atan2+0x13c>
    5686:	cmp	r6, #2
    5688:	beq.n	571e <__ieee754_atan2+0x126>
    568a:	cmp	r6, #0
    568c:	beq.n	5718 <__ieee754_atan2+0x120>
    568e:	vldr	d7, [pc, #232]	; 5778 <__ieee754_atan2+0x180>
    5692:	vldr	d6, [pc, #236]	; 5780 <__ieee754_atan2+0x188>
    5696:	vmov	d5, r2, r3
    569a:	vsub.f64	d7, d5, d7
    569e:	vsub.f64	d0, d7, d6
    56a2:	b.n	56b0 <__ieee754_atan2+0xb8>
    56a4:	vldr	d7, [sp, #8]
    56a8:	vldr	d6, [sp]
    56ac:	vadd.f64	d0, d7, d6
    56b0:	add	sp, #20
    56b2:	pop	{r4, r5, r6, r7, pc}
    56b4:	cmp	r6, #2
    56b6:	beq.n	56f4 <__ieee754_atan2+0xfc>
    56b8:	vldr	d0, [pc, #204]	; 5788 <__ieee754_atan2+0x190>
    56bc:	vldr	d7, [sp]
    56c0:	cmp	r6, #3
    56c2:	it	eq
    56c4:	vmoveq.f64	d7, d0
    56c8:	vmov.f64	d0, d7
    56cc:	b.n	56b0 <__ieee754_atan2+0xb8>
    56ce:	vldr	d7, [pc, #192]	; 5790 <__ieee754_atan2+0x198>
    56d2:	vldr	d0, [pc, #196]	; 5798 <__ieee754_atan2+0x1a0>
    56d6:	cmp	r7, #0
    56d8:	it	ge
    56da:	vmovge.f64	d0, d7
    56de:	add	sp, #20
    56e0:	pop	{r4, r5, r6, r7, pc}
    56e2:	add	sp, #20
    56e4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    56e8:	b.w	7840 <atan>
    56ec:	add	r3, pc, #160	; (adr r3, 5790 <__ieee754_atan2+0x198>)
    56ee:	ldrd	r2, r3, [r3]
    56f2:	b.n	5682 <__ieee754_atan2+0x8a>
    56f4:	vldr	d0, [pc, #136]	; 5780 <__ieee754_atan2+0x188>
    56f8:	b.n	56b0 <__ieee754_atan2+0xb8>
    56fa:	cmp	lr, r5
    56fc:	beq.n	5748 <__ieee754_atan2+0x150>
    56fe:	cmp	r6, #2
    5700:	beq.n	56f4 <__ieee754_atan2+0xfc>
    5702:	cmp	r6, #3
    5704:	beq.n	5762 <__ieee754_atan2+0x16a>
    5706:	vldr	d7, [pc, #152]	; 57a0 <__ieee754_atan2+0x1a8>
    570a:	vldr	d0, [pc, #156]	; 57a8 <__ieee754_atan2+0x1b0>
    570e:	cmp	r6, #1
    5710:	it	eq
    5712:	vmoveq.f64	d0, d7
    5716:	b.n	56b0 <__ieee754_atan2+0xb8>
    5718:	vmov	d0, r2, r3
    571c:	b.n	56b0 <__ieee754_atan2+0xb8>
    571e:	vldr	d7, [pc, #88]	; 5778 <__ieee754_atan2+0x180>
    5722:	vldr	d6, [pc, #92]	; 5780 <__ieee754_atan2+0x188>
    5726:	vmov	d5, r2, r3
    572a:	vsub.f64	d7, d5, d7
    572e:	vsub.f64	d0, d6, d7
    5732:	b.n	56b0 <__ieee754_atan2+0xb8>
    5734:	add.w	r3, r3, #2147483648	; 0x80000000
    5738:	vmov	d0, r2, r3
    573c:	b.n	56b0 <__ieee754_atan2+0xb8>
    573e:	adds	r5, #60	; 0x3c
    5740:	bge.n	5666 <__ieee754_atan2+0x6e>
    5742:	movs	r2, #0
    5744:	movs	r3, #0
    5746:	b.n	5682 <__ieee754_atan2+0x8a>
    5748:	cmp	r6, #2
    574a:	beq.n	576e <__ieee754_atan2+0x176>
    574c:	cmp	r6, #3
    574e:	beq.n	5768 <__ieee754_atan2+0x170>
    5750:	vldr	d7, [pc, #92]	; 57b0 <__ieee754_atan2+0x1b8>
    5754:	vldr	d0, [pc, #96]	; 57b8 <__ieee754_atan2+0x1c0>
    5758:	cmp	r6, #1
    575a:	it	eq
    575c:	vmoveq.f64	d0, d7
    5760:	b.n	56b0 <__ieee754_atan2+0xb8>
    5762:	vldr	d0, [pc, #36]	; 5788 <__ieee754_atan2+0x190>
    5766:	b.n	56b0 <__ieee754_atan2+0xb8>
    5768:	vldr	d0, [pc, #84]	; 57c0 <__ieee754_atan2+0x1c8>
    576c:	b.n	56b0 <__ieee754_atan2+0xb8>
    576e:	vldr	d0, [pc, #88]	; 57c8 <__ieee754_atan2+0x1d0>
    5772:	b.n	56b0 <__ieee754_atan2+0xb8>
    5774:	nop.w
    5778:	.word	0x33145c07
    577c:	.word	0x3ca1a626
    5780:	.word	0x54442d18
    5784:	.word	0x400921fb
    5788:	.word	0x54442d18
    578c:	.word	0xc00921fb
    5790:	.word	0x54442d18
    5794:	.word	0x3ff921fb
    5798:	.word	0x54442d18
    579c:	.word	0xbff921fb
    57a0:	.word	0x00000000
    57a4:	.word	0x80000000
	...
    57b0:	.word	0x54442d18
    57b4:	.word	0xbfe921fb
    57b8:	.word	0x54442d18
    57bc:	.word	0x3fe921fb
    57c0:	.word	0x7f3321d2
    57c4:	.word	0xc002d97c
    57c8:	.word	0x7f3321d2
    57cc:	.word	0x4002d97c
    57d0:	.word	0x7ff00000
    57d4:	.word	0x00000000

000057d8 <__ieee754_pow>:
    57d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57dc:	vmov	r0, r1, d1
    57e0:	vpush	{d8-d11}
    57e4:	bic.w	r5, r1, #2147483648	; 0x80000000
    57e8:	orrs.w	r4, r5, r0
    57ec:	sub	sp, #28
    57ee:	beq.n	5866 <__ieee754_pow+0x8e>
    57f0:	vmov	r2, r3, d0
    57f4:	ldr	r7, [pc, #424]	; (59a0 <__ieee754_pow+0x1c8>)
    57f6:	bic.w	r4, r3, #2147483648	; 0x80000000
    57fa:	cmp	r4, r7
    57fc:	vmov	sl, s0
    5800:	mov	r9, r3
    5802:	bgt.n	5858 <__ieee754_pow+0x80>
    5804:	mov	r8, r1
    5806:	vmov	r6, s2
    580a:	beq.n	5856 <__ieee754_pow+0x7e>
    580c:	cmp	r5, r7
    580e:	bgt.n	5858 <__ieee754_pow+0x80>
    5810:	ldr	r7, [pc, #396]	; (59a0 <__ieee754_pow+0x1c8>)
    5812:	cmp	r5, r7
    5814:	beq.n	590c <__ieee754_pow+0x134>
    5816:	cmp.w	r9, #0
    581a:	blt.n	5912 <__ieee754_pow+0x13a>
    581c:	mov.w	fp, #0
    5820:	cbnz	r6, 588c <__ieee754_pow+0xb4>
    5822:	ldr	r6, [pc, #380]	; (59a0 <__ieee754_pow+0x1c8>)
    5824:	cmp	r5, r6
    5826:	beq.w	594a <__ieee754_pow+0x172>
    582a:	ldr	r6, [pc, #376]	; (59a4 <__ieee754_pow+0x1cc>)
    582c:	cmp	r5, r6
    582e:	beq.n	58fe <__ieee754_pow+0x126>
    5830:	cmp.w	r8, #1073741824	; 0x40000000
    5834:	beq.w	5ce6 <__ieee754_pow+0x50e>
    5838:	ldr	r6, [pc, #364]	; (59a8 <__ieee754_pow+0x1d0>)
    583a:	cmp	r8, r6
    583c:	bne.n	588c <__ieee754_pow+0xb4>
    583e:	cmp.w	r9, #0
    5842:	blt.n	588c <__ieee754_pow+0xb4>
    5844:	vmov	d0, r2, r3
    5848:	add	sp, #28
    584a:	vpop	{d8-d11}
    584e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5852:	b.w	61fc <__ieee754_sqrt>
    5856:	cbz	r2, 5874 <__ieee754_pow+0x9c>
    5858:	add.w	r4, r4, #3221225472	; 0xc0000000
    585c:	add.w	r4, r4, #1048576	; 0x100000
    5860:	orrs.w	r3, r4, sl
    5864:	bne.n	5878 <__ieee754_pow+0xa0>
    5866:	vmov.f64	d0, #112	; 0x3f800000  1.0
    586a:	add	sp, #28
    586c:	vpop	{d8-d11}
    5870:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5874:	cmp	r5, r4
    5876:	ble.n	5810 <__ieee754_pow+0x38>
    5878:	ldr	r0, [pc, #304]	; (59ac <__ieee754_pow+0x1d4>)
    587a:	add	sp, #28
    587c:	vpop	{d8-d11}
    5880:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5884:	b.w	7b88 <nan>
    5888:	mov.w	fp, #0
    588c:	mov	r6, r2
    588e:	mov	r7, r3
    5890:	vmov	d0, r6, r7
    5894:	strd	r0, r1, [sp, #8]
    5898:	bl	7a44 <fabs>
    589c:	vstr	d0, [sp]
    58a0:	cmp.w	sl, #0
    58a4:	beq.n	58dc <__ieee754_pow+0x104>
    58a6:	mov.w	r9, r9, lsr #31
    58aa:	add.w	r9, r9, #4294967295
    58ae:	orrs.w	r3, fp, r9
    58b2:	beq.n	5972 <__ieee754_pow+0x19a>
    58b4:	ldr	r3, [pc, #248]	; (59b0 <__ieee754_pow+0x1d8>)
    58b6:	cmp	r5, r3
    58b8:	ble.w	59bc <__ieee754_pow+0x1e4>
    58bc:	add.w	r3, r3, #34603008	; 0x2100000
    58c0:	cmp	r5, r3
    58c2:	ble.w	5dfa <__ieee754_pow+0x622>
    58c6:	ldr	r3, [pc, #236]	; (59b4 <__ieee754_pow+0x1dc>)
    58c8:	cmp	r4, r3
    58ca:	ble.n	5980 <__ieee754_pow+0x1a8>
    58cc:	cmp.w	r8, #0
    58d0:	ble.n	5986 <__ieee754_pow+0x1ae>
    58d2:	vldr	d0, [pc, #188]	; 5990 <__ieee754_pow+0x1b8>
    58d6:	vmul.f64	d0, d0, d0
    58da:	b.n	586a <__ieee754_pow+0x92>
    58dc:	cbz	r4, 58e8 <__ieee754_pow+0x110>
    58de:	ldr	r3, [pc, #196]	; (59a4 <__ieee754_pow+0x1cc>)
    58e0:	bic.w	r2, r9, #3221225472	; 0xc0000000
    58e4:	cmp	r2, r3
    58e6:	bne.n	58a6 <__ieee754_pow+0xce>
    58e8:	cmp.w	r8, #0
    58ec:	blt.w	5de8 <__ieee754_pow+0x610>
    58f0:	cmp.w	r9, #0
    58f4:	blt.w	5cc4 <__ieee754_pow+0x4ec>
    58f8:	vldr	d0, [sp]
    58fc:	b.n	586a <__ieee754_pow+0x92>
    58fe:	cmp.w	r8, #0
    5902:	blt.w	5e7e <__ieee754_pow+0x6a6>
    5906:	vmov	d0, r2, r3
    590a:	b.n	586a <__ieee754_pow+0x92>
    590c:	cmp	r6, #0
    590e:	beq.n	5816 <__ieee754_pow+0x3e>
    5910:	b.n	5858 <__ieee754_pow+0x80>
    5912:	ldr	r7, [pc, #164]	; (59b8 <__ieee754_pow+0x1e0>)
    5914:	cmp	r5, r7
    5916:	bgt.n	596c <__ieee754_pow+0x194>
    5918:	sub.w	r7, r7, #55574528	; 0x3500000
    591c:	cmp	r5, r7
    591e:	ble.w	581c <__ieee754_pow+0x44>
    5922:	asrs	r7, r5, #20
    5924:	subw	r7, r7, #1023	; 0x3ff
    5928:	cmp	r7, #20
    592a:	ble.w	5e9a <__ieee754_pow+0x6c2>
    592e:	rsb	r7, r7, #52	; 0x34
    5932:	lsr.w	lr, r6, r7
    5936:	lsl.w	r7, lr, r7
    593a:	cmp	r6, r7
    593c:	bne.w	581c <__ieee754_pow+0x44>
    5940:	and.w	lr, lr, #1
    5944:	rsb	fp, lr, #2
    5948:	b.n	5820 <__ieee754_pow+0x48>
    594a:	add.w	r3, r4, #3221225472	; 0xc0000000
    594e:	add.w	r3, r3, #1048576	; 0x100000
    5952:	orrs.w	r3, r3, sl
    5956:	beq.n	5866 <__ieee754_pow+0x8e>
    5958:	ldr	r3, [pc, #88]	; (59b4 <__ieee754_pow+0x1dc>)
    595a:	cmp	r4, r3
    595c:	ble.w	5dd6 <__ieee754_pow+0x5fe>
    5960:	cmp.w	r8, #0
    5964:	blt.n	5986 <__ieee754_pow+0x1ae>
    5966:	vmov	d0, r0, r1
    596a:	b.n	586a <__ieee754_pow+0x92>
    596c:	mov.w	fp, #2
    5970:	b.n	5820 <__ieee754_pow+0x48>
    5972:	vmov	d7, r6, r7
    5976:	vsub.f64	d7, d7, d7
    597a:	vdiv.f64	d0, d7, d7
    597e:	b.n	586a <__ieee754_pow+0x92>
    5980:	cmp.w	r8, #0
    5984:	blt.n	58d2 <__ieee754_pow+0xfa>
    5986:	vldr	d0, [pc, #16]	; 5998 <__ieee754_pow+0x1c0>
    598a:	b.n	586a <__ieee754_pow+0x92>
    598c:	nop.w
    5990:	.word	0x8800759c
    5994:	.word	0x7e37e43c
	...
    59a0:	.word	0x7ff00000
    59a4:	.word	0x3ff00000
    59a8:	.word	0x3fe00000
    59ac:	.word	0x20000ec4
    59b0:	.word	0x41e00000
    59b4:	.word	0x3fefffff
    59b8:	.word	0x433fffff
    59bc:	cmp.w	r4, #1048576	; 0x100000
    59c0:	bge.w	5e7a <__ieee754_pow+0x6a2>
    59c4:	vldr	d6, [sp]
    59c8:	vldr	d7, [pc, #804]	; 5cf0 <__ieee754_pow+0x518>
    59cc:	vmul.f64	d7, d6, d7
    59d0:	vstr	d7, [sp]
    59d4:	ldr	r4, [sp, #4]
    59d6:	mvn.w	r6, #52	; 0x34
    59da:	ldr	r2, [pc, #948]	; (5d90 <__ieee754_pow+0x5b8>)
    59dc:	asrs	r3, r4, #20
    59de:	ubfx	r4, r4, #0, #20
    59e2:	subw	r3, r3, #1023	; 0x3ff
    59e6:	orr.w	r1, r4, #1069547520	; 0x3fc00000
    59ea:	cmp	r4, r2
    59ec:	add	r6, r3
    59ee:	orr.w	r1, r1, #3145728	; 0x300000
    59f2:	ble.w	5e6a <__ieee754_pow+0x692>
    59f6:	ldr	r3, [pc, #924]	; (5d94 <__ieee754_pow+0x5bc>)
    59f8:	cmp	r4, r3
    59fa:	ble.w	5ed6 <__ieee754_pow+0x6fe>
    59fe:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5a02:	vldr	d3, [pc, #756]	; 5cf8 <__ieee754_pow+0x520>
    5a06:	adds	r6, #1
    5a08:	sub.w	r1, r1, #1048576	; 0x100000
    5a0c:	movs	r5, #0
    5a0e:	vmov.f64	d0, d3
    5a12:	ldrd	r2, r3, [sp]
    5a16:	vmov.f64	d4, #112	; 0x3f800000  1.0
    5a1a:	mov	r3, r1
    5a1c:	vmov	d1, r2, r3
    5a20:	asrs	r4, r1, #1
    5a22:	vadd.f64	d6, d1, d7
    5a26:	vsub.f64	d2, d1, d7
    5a2a:	vdiv.f64	d5, d4, d6
    5a2e:	vmul.f64	d6, d2, d5
    5a32:	vstr	d6, [sp]
    5a36:	ldrd	r2, r3, [sp]
    5a3a:	orr.w	r4, r4, #536870912	; 0x20000000
    5a3e:	add.w	r4, r4, #524288	; 0x80000
    5a42:	movs	r2, #0
    5a44:	movs	r0, #0
    5a46:	adds	r1, r4, r5
    5a48:	vmov	d4, r2, r3
    5a4c:	vmov	d6, r0, r1
    5a50:	vneg.f64	d10, d4
    5a54:	vsub.f64	d7, d6, d7
    5a58:	vfma.f64	d2, d10, d6
    5a5c:	vsub.f64	d7, d1, d7
    5a60:	vmov.f64	d6, d2
    5a64:	vfma.f64	d6, d10, d7
    5a68:	vldr	d7, [sp]
    5a6c:	vmul.f64	d2, d6, d5
    5a70:	vldr	d6, [sp]
    5a74:	vadd.f64	d7, d7, d4
    5a78:	vmul.f64	d11, d6, d6
    5a7c:	vldr	d9, [pc, #640]	; 5d00 <__ieee754_pow+0x528>
    5a80:	vmul.f64	d6, d7, d2
    5a84:	vldr	d8, [pc, #640]	; 5d08 <__ieee754_pow+0x530>
    5a88:	vldr	d1, [pc, #644]	; 5d10 <__ieee754_pow+0x538>
    5a8c:	vfma.f64	d8, d11, d9
    5a90:	vldr	d7, [pc, #644]	; 5d18 <__ieee754_pow+0x540>
    5a94:	vfma.f64	d1, d11, d8
    5a98:	vmul.f64	d8, d11, d11
    5a9c:	vldr	d5, [pc, #640]	; 5d20 <__ieee754_pow+0x548>
    5aa0:	vfma.f64	d7, d11, d1
    5aa4:	vfma.f64	d5, d11, d7
    5aa8:	vldr	d7, [pc, #636]	; 5d28 <__ieee754_pow+0x550>
    5aac:	vfma.f64	d7, d11, d5
    5ab0:	vmov.f64	d5, #8	; 0x40400000  3.0
    5ab4:	vfma.f64	d6, d8, d7
    5ab8:	vmov.f64	d7, d5
    5abc:	vfma.f64	d7, d4, d4
    5ac0:	vadd.f64	d7, d7, d6
    5ac4:	vstr	d7, [sp, #16]
    5ac8:	str	r2, [sp, #16]
    5aca:	vldr	d9, [sp, #16]
    5ace:	vsub.f64	d5, d9, d5
    5ad2:	vfma.f64	d5, d10, d4
    5ad6:	vsub.f64	d5, d6, d5
    5ada:	vldr	d6, [sp]
    5ade:	vmul.f64	d6, d5, d6
    5ae2:	vfma.f64	d6, d2, d9
    5ae6:	vmov.f64	d5, d6
    5aea:	vfma.f64	d5, d4, d9
    5aee:	vstr	d5, [sp]
    5af2:	str	r2, [sp, #0]
    5af4:	vldr	d4, [sp]
    5af8:	vldr	d2, [pc, #564]	; 5d30 <__ieee754_pow+0x558>
    5afc:	vmov.f64	d5, d4
    5b00:	vfma.f64	d5, d10, d9
    5b04:	vldr	d7, [pc, #560]	; 5d38 <__ieee754_pow+0x560>
    5b08:	vsub.f64	d6, d6, d5
    5b0c:	vldr	d8, [pc, #560]	; 5d40 <__ieee754_pow+0x568>
    5b10:	vmul.f64	d7, d6, d7
    5b14:	vmov	s3, r6
    5b18:	vfma.f64	d7, d4, d8
    5b1c:	vcvt.f64.s32	d1, s3
    5b20:	vadd.f64	d7, d7, d0
    5b24:	vmov.f64	d6, d7
    5b28:	vfma.f64	d6, d4, d2
    5b2c:	vadd.f64	d6, d6, d3
    5b30:	vadd.f64	d6, d6, d1
    5b34:	vstr	d6, [sp]
    5b38:	str	r2, [sp, #0]
    5b3a:	vldr	d5, [sp]
    5b3e:	vsub.f64	d6, d5, d1
    5b42:	vsub.f64	d6, d6, d3
    5b46:	vfms.f64	d6, d4, d2
    5b4a:	vsub.f64	d6, d7, d6
    5b4e:	ldrd	r3, r4, [sp, #8]
    5b52:	vmov.f64	d0, #240	; 0xbf800000 -1.0
    5b56:	mov	r1, r4
    5b58:	movs	r0, #0
    5b5a:	vmov	d7, r3, r4
    5b5e:	vmov	d4, r0, r1
    5b62:	vmul.f64	d6, d6, d7
    5b66:	vsub.f64	d7, d7, d4
    5b6a:	vfma.f64	d6, d5, d7
    5b6e:	vmul.f64	d5, d5, d4
    5b72:	vadd.f64	d7, d6, d5
    5b76:	vstr	d7, [sp]
    5b7a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5b7e:	ldr	r3, [pc, #536]	; (5d98 <__ieee754_pow+0x5c0>)
    5b80:	ldr	r2, [sp, #4]
    5b82:	add.w	fp, fp, #4294967295
    5b86:	orrs.w	r4, fp, r9
    5b8a:	ite	ne
    5b8c:	vmovne.f64	d8, d7
    5b90:	vmoveq.f64	d8, d0
    5b94:	cmp	r2, r3
    5b96:	ldr	r4, [sp, #0]
    5b98:	ble.w	5da0 <__ieee754_pow+0x5c8>
    5b9c:	add.w	r3, r2, #3204448256	; 0xbf000000
    5ba0:	add.w	r3, r3, #7340032	; 0x700000
    5ba4:	orrs	r3, r4
    5ba6:	bne.w	5e8c <__ieee754_pow+0x6b4>
    5baa:	vadd.f64	d4, d6, d5
    5bae:	vsub.f64	d4, d4, d5
    5bb2:	vldr	d7, [pc, #404]	; 5d48 <__ieee754_pow+0x570>
    5bb6:	vadd.f64	d7, d6, d7
    5bba:	vcmpe.f64	d7, d4
    5bbe:	vmrs	APSR_nzcv, fpscr
    5bc2:	bgt.w	5e8c <__ieee754_pow+0x6b4>
    5bc6:	mov	r3, r2
    5bc8:	asrs	r3, r3, #20
    5bca:	mov.w	r1, #1048576	; 0x100000
    5bce:	subw	r3, r3, #1022	; 0x3fe
    5bd2:	asr.w	r3, r1, r3
    5bd6:	adds	r1, r3, r2
    5bd8:	ubfx	r0, r1, #20, #11
    5bdc:	ldr	r6, [pc, #444]	; (5d9c <__ieee754_pow+0x5c4>)
    5bde:	subw	r0, r0, #1023	; 0x3ff
    5be2:	asrs	r6, r0
    5be4:	bic.w	r5, r1, r6
    5be8:	movs	r4, #0
    5bea:	ubfx	r3, r1, #0, #20
    5bee:	vmov	d7, r4, r5
    5bf2:	rsb	r0, r0, #20
    5bf6:	orr.w	r3, r3, #1048576	; 0x100000
    5bfa:	asr.w	r0, r3, r0
    5bfe:	cmp	r2, #0
    5c00:	vsub.f64	d5, d5, d7
    5c04:	vadd.f64	d7, d6, d5
    5c08:	vstr	d7, [sp]
    5c0c:	it	lt
    5c0e:	neglt	r0, r0
    5c10:	lsls	r1, r0, #20
    5c12:	ldrd	r2, r3, [sp]
    5c16:	vmov.f64	d2, #0	; 0x40000000  2.0
    5c1a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5c1e:	vldr	d1, [pc, #304]	; 5d50 <__ieee754_pow+0x578>
    5c22:	vldr	d0, [pc, #308]	; 5d58 <__ieee754_pow+0x580>
    5c26:	movs	r2, #0
    5c28:	vldr	d4, [pc, #308]	; 5d60 <__ieee754_pow+0x588>
    5c2c:	vmov	d3, r2, r3
    5c30:	vldr	d9, [pc, #308]	; 5d68 <__ieee754_pow+0x590>
    5c34:	vmul.f64	d4, d3, d4
    5c38:	vsub.f64	d5, d3, d5
    5c3c:	vsub.f64	d5, d6, d5
    5c40:	vmov.f64	d6, d4
    5c44:	vfma.f64	d6, d5, d0
    5c48:	vldr	d5, [pc, #292]	; 5d70 <__ieee754_pow+0x598>
    5c4c:	vmov.f64	d4, d6
    5c50:	vfma.f64	d4, d3, d1
    5c54:	vmov.f64	d0, d4
    5c58:	vfms.f64	d0, d3, d1
    5c5c:	vsub.f64	d6, d6, d0
    5c60:	vldr	d0, [pc, #276]	; 5d78 <__ieee754_pow+0x5a0>
    5c64:	vmul.f64	d3, d4, d4
    5c68:	vfma.f64	d5, d3, d9
    5c6c:	vldr	d1, [pc, #272]	; 5d80 <__ieee754_pow+0x5a8>
    5c70:	vfma.f64	d0, d3, d5
    5c74:	vfma.f64	d6, d4, d6
    5c78:	vldr	d5, [pc, #268]	; 5d88 <__ieee754_pow+0x5b0>
    5c7c:	vfma.f64	d1, d3, d0
    5c80:	vfma.f64	d5, d3, d1
    5c84:	vmov.f64	d1, d4
    5c88:	vfms.f64	d1, d3, d5
    5c8c:	vmul.f64	d3, d4, d1
    5c90:	vsub.f64	d2, d1, d2
    5c94:	vdiv.f64	d5, d3, d2
    5c98:	vsub.f64	d6, d5, d6
    5c9c:	vsub.f64	d6, d6, d4
    5ca0:	vsub.f64	d7, d7, d6
    5ca4:	vstr	d7, [sp]
    5ca8:	ldr	r3, [sp, #4]
    5caa:	add	r1, r3
    5cac:	cmp.w	r1, #1048576	; 0x100000
    5cb0:	blt.w	5ee8 <__ieee754_pow+0x710>
    5cb4:	ldrd	r2, r3, [sp]
    5cb8:	mov	r3, r1
    5cba:	vmov	d0, r2, r3
    5cbe:	vmul.f64	d0, d0, d8
    5cc2:	b.n	586a <__ieee754_pow+0x92>
    5cc4:	add.w	r4, r4, #3221225472	; 0xc0000000
    5cc8:	add.w	r4, r4, #1048576	; 0x100000
    5ccc:	orrs.w	r3, r4, fp
    5cd0:	beq.w	5ec8 <__ieee754_pow+0x6f0>
    5cd4:	cmp.w	fp, #1
    5cd8:	bne.w	58f8 <__ieee754_pow+0x120>
    5cdc:	vldr	d7, [sp]
    5ce0:	vneg.f64	d0, d7
    5ce4:	b.n	586a <__ieee754_pow+0x92>
    5ce6:	vmov	d7, r2, r3
    5cea:	vmul.f64	d0, d7, d7
    5cee:	b.n	586a <__ieee754_pow+0x92>
    5cf0:	.word	0x00000000
    5cf4:	.word	0x43400000
	...
    5d00:	.word	0x4a454eef
    5d04:	.word	0x3fca7e28
    5d08:	.word	0x93c9db65
    5d0c:	.word	0x3fcd864a
    5d10:	.word	0xa91d4101
    5d14:	.word	0x3fd17460
    5d18:	.word	0x518f264d
    5d1c:	.word	0x3fd55555
    5d20:	.word	0xdb6fabff
    5d24:	.word	0x3fdb6db6
    5d28:	.word	0x33333303
    5d2c:	.word	0x3fe33333
    5d30:	.word	0xe0000000
    5d34:	.word	0x3feec709
    5d38:	.word	0xdc3a03fd
    5d3c:	.word	0x3feec709
    5d40:	.word	0x145b01f5
    5d44:	.word	0xbe3e2fe0
    5d48:	.word	0x652b82fe
    5d4c:	.word	0x3c971547
    5d50:	.word	0x00000000
    5d54:	.word	0x3fe62e43
    5d58:	.word	0xfefa39ef
    5d5c:	.word	0x3fe62e42
    5d60:	.word	0x0ca86c39
    5d64:	.word	0xbe205c61
    5d68:	.word	0x72bea4d0
    5d6c:	.word	0x3e663769
    5d70:	.word	0xc5d26bf1
    5d74:	.word	0xbebbbd41
    5d78:	.word	0xaf25de2c
    5d7c:	.word	0x3f11566a
    5d80:	.word	0x16bebd93
    5d84:	.word	0xbf66c16c
    5d88:	.word	0x5555553e
    5d8c:	.word	0x3fc55555
    5d90:	.word	0x0003988e
    5d94:	.word	0x000bb679
    5d98:	.word	0x408fffff
    5d9c:	.word	0x000fffff
    5da0:	ldr	r5, [pc, #420]	; (5f48 <__ieee754_pow+0x770>)
    5da2:	bic.w	r3, r2, #2147483648	; 0x80000000
    5da6:	cmp	r3, r5
    5da8:	ble.w	5eb4 <__ieee754_pow+0x6dc>
    5dac:	ldr	r1, [pc, #412]	; (5f4c <__ieee754_pow+0x774>)
    5dae:	add	r1, r2
    5db0:	orrs	r1, r4
    5db2:	bne.n	5dc8 <__ieee754_pow+0x5f0>
    5db4:	vadd.f64	d7, d6, d5
    5db8:	vsub.f64	d7, d7, d5
    5dbc:	vcmpe.f64	d6, d7
    5dc0:	vmrs	APSR_nzcv, fpscr
    5dc4:	bhi.w	5bc8 <__ieee754_pow+0x3f0>
    5dc8:	vldr	d0, [pc, #308]	; 5f00 <__ieee754_pow+0x728>
    5dcc:	vmul.f64	d7, d8, d0
    5dd0:	vmul.f64	d0, d7, d0
    5dd4:	b.n	586a <__ieee754_pow+0x92>
    5dd6:	cmp.w	r8, #0
    5dda:	bge.w	5986 <__ieee754_pow+0x1ae>
    5dde:	vmov	d7, r0, r1
    5de2:	vneg.f64	d0, d7
    5de6:	b.n	586a <__ieee754_pow+0x92>
    5de8:	vldr	d5, [sp]
    5dec:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5df0:	vdiv.f64	d6, d7, d5
    5df4:	vstr	d6, [sp]
    5df8:	b.n	58f0 <__ieee754_pow+0x118>
    5dfa:	ldr	r3, [pc, #340]	; (5f50 <__ieee754_pow+0x778>)
    5dfc:	cmp	r4, r3
    5dfe:	ble.w	5980 <__ieee754_pow+0x1a8>
    5e02:	ldr	r3, [pc, #336]	; (5f54 <__ieee754_pow+0x77c>)
    5e04:	cmp	r4, r3
    5e06:	bgt.w	58cc <__ieee754_pow+0xf4>
    5e0a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5e0e:	vmov.f64	d8, #80	; 0x3e800000  0.250
    5e12:	vldr	d5, [sp]
    5e16:	vldr	d2, [pc, #240]	; 5f08 <__ieee754_pow+0x730>
    5e1a:	vsub.f64	d7, d5, d7
    5e1e:	vmov.f64	d5, #96	; 0x3f000000  0.5
    5e22:	vldr	d3, [pc, #236]	; 5f10 <__ieee754_pow+0x738>
    5e26:	vneg.f64	d4, d7
    5e2a:	vmul.f64	d0, d7, d7
    5e2e:	vldr	d6, [pc, #232]	; 5f18 <__ieee754_pow+0x740>
    5e32:	vfma.f64	d3, d4, d8
    5e36:	vfma.f64	d5, d4, d3
    5e3a:	vldr	d1, [pc, #228]	; 5f20 <__ieee754_pow+0x748>
    5e3e:	vmul.f64	d5, d5, d0
    5e42:	vnmul.f64	d6, d6, d5
    5e46:	vfma.f64	d6, d7, d1
    5e4a:	vmov.f64	d5, d6
    5e4e:	vfma.f64	d5, d7, d2
    5e52:	vmov	r2, r3, d5
    5e56:	movs	r2, #0
    5e58:	vmov	d5, r2, r3
    5e5c:	vmov.f64	d7, d5
    5e60:	vfma.f64	d7, d4, d2
    5e64:	vsub.f64	d6, d6, d7
    5e68:	b.n	5b4e <__ieee754_pow+0x376>
    5e6a:	vldr	d3, [pc, #188]	; 5f28 <__ieee754_pow+0x750>
    5e6e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5e72:	vmov.f64	d0, d3
    5e76:	movs	r5, #0
    5e78:	b.n	5a12 <__ieee754_pow+0x23a>
    5e7a:	movs	r6, #0
    5e7c:	b.n	59da <__ieee754_pow+0x202>
    5e7e:	vmov	d6, r2, r3
    5e82:	vmov.f64	d7, #112	; 0x3f800000  1.0
    5e86:	vdiv.f64	d0, d7, d6
    5e8a:	b.n	586a <__ieee754_pow+0x92>
    5e8c:	vldr	d0, [pc, #160]	; 5f30 <__ieee754_pow+0x758>
    5e90:	vmul.f64	d7, d8, d0
    5e94:	vmul.f64	d0, d7, d0
    5e98:	b.n	586a <__ieee754_pow+0x92>
    5e9a:	cmp	r6, #0
    5e9c:	bne.w	5888 <__ieee754_pow+0xb0>
    5ea0:	rsb	r7, r7, #20
    5ea4:	asr.w	lr, r5, r7
    5ea8:	lsl.w	r7, lr, r7
    5eac:	cmp	r5, r7
    5eae:	beq.n	5ef2 <__ieee754_pow+0x71a>
    5eb0:	mov	fp, r6
    5eb2:	b.n	582a <__ieee754_pow+0x52>
    5eb4:	ldr	r4, [pc, #160]	; (5f58 <__ieee754_pow+0x780>)
    5eb6:	cmp	r3, r4
    5eb8:	bgt.w	5bc8 <__ieee754_pow+0x3f0>
    5ebc:	vadd.f64	d7, d6, d5
    5ec0:	mov	r1, r0
    5ec2:	vstr	d7, [sp]
    5ec6:	b.n	5c12 <__ieee754_pow+0x43a>
    5ec8:	vldr	d7, [sp]
    5ecc:	vsub.f64	d7, d7, d7
    5ed0:	vdiv.f64	d0, d7, d7
    5ed4:	b.n	586a <__ieee754_pow+0x92>
    5ed6:	vldr	d3, [pc, #96]	; 5f38 <__ieee754_pow+0x760>
    5eda:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    5ede:	vldr	d0, [pc, #96]	; 5f40 <__ieee754_pow+0x768>
    5ee2:	mov.w	r5, #262144	; 0x40000
    5ee6:	b.n	5a12 <__ieee754_pow+0x23a>
    5ee8:	vmov.f64	d0, d7
    5eec:	bl	7cb8 <scalbn>
    5ef0:	b.n	5cbe <__ieee754_pow+0x4e6>
    5ef2:	and.w	lr, lr, #1
    5ef6:	rsb	fp, lr, #2
    5efa:	b.n	582a <__ieee754_pow+0x52>
    5efc:	nop.w
    5f00:	.word	0xc2f8f359
    5f04:	.word	0x01a56e1f
    5f08:	.word	0x60000000
    5f0c:	.word	0x3ff71547
    5f10:	.word	0x55555555
    5f14:	.word	0x3fd55555
    5f18:	.word	0x652b82fe
    5f1c:	.word	0x3ff71547
    5f20:	.word	0xf85ddf44
    5f24:	.word	0x3e54ae0b
	...
    5f30:	.word	0x8800759c
    5f34:	.word	0x7e37e43c
    5f38:	.word	0x40000000
    5f3c:	.word	0x3fe2b803
    5f40:	.word	0x43cfd006
    5f44:	.word	0x3e4cfdeb
    5f48:	.word	0x4090cbff
    5f4c:	.word	0x3f6f3400
    5f50:	.word	0x3feffffe
    5f54:	.word	0x3ff00000
    5f58:	.word	0x3fe00000
    5f5c:	.word	0x00000000

00005f60 <__ieee754_rem_pio2>:
    5f60:	push	{r4, r5, r6, lr}
    5f62:	vmov	r2, r3, d0
    5f66:	ldr	r1, [pc, #632]	; (61e0 <__ieee754_rem_pio2+0x280>)
    5f68:	bic.w	r6, r3, #2147483648	; 0x80000000
    5f6c:	cmp	r6, r1
    5f6e:	sub	sp, #32
    5f70:	ble.n	6038 <__ieee754_rem_pio2+0xd8>
    5f72:	ldr	r1, [pc, #624]	; (61e4 <__ieee754_rem_pio2+0x284>)
    5f74:	cmp	r6, r1
    5f76:	mov	r5, r3
    5f78:	bgt.n	5fb4 <__ieee754_rem_pio2+0x54>
    5f7a:	cmp	r3, #0
    5f7c:	vldr	d7, [pc, #544]	; 61a0 <__ieee754_rem_pio2+0x240>
    5f80:	ble.w	6142 <__ieee754_rem_pio2+0x1e2>
    5f84:	vsub.f64	d7, d0, d7
    5f88:	sub.w	r1, r1, #634880	; 0x9b000
    5f8c:	sub.w	r1, r1, #1920	; 0x780
    5f90:	cmp	r6, r1
    5f92:	beq.n	605c <__ieee754_rem_pio2+0xfc>
    5f94:	vldr	d6, [pc, #528]	; 61a8 <__ieee754_rem_pio2+0x248>
    5f98:	vsub.f64	d5, d7, d6
    5f9c:	vsub.f64	d7, d7, d5
    5fa0:	movs	r3, #1
    5fa2:	vstr	d5, [r0]
    5fa6:	vsub.f64	d7, d7, d6
    5faa:	vstr	d7, [r0, #8]
    5fae:	mov	r0, r3
    5fb0:	add	sp, #32
    5fb2:	pop	{r4, r5, r6, pc}
    5fb4:	ldr	r1, [pc, #560]	; (61e8 <__ieee754_rem_pio2+0x288>)
    5fb6:	cmp	r6, r1
    5fb8:	mov	r4, r0
    5fba:	ble.n	606a <__ieee754_rem_pio2+0x10a>
    5fbc:	ldr	r1, [pc, #556]	; (61ec <__ieee754_rem_pio2+0x28c>)
    5fbe:	cmp	r6, r1
    5fc0:	bgt.n	604c <__ieee754_rem_pio2+0xec>
    5fc2:	mov	r0, r2
    5fc4:	asrs	r2, r6, #20
    5fc6:	subw	r2, r2, #1046	; 0x416
    5fca:	sub.w	r1, r6, r2, lsl #20
    5fce:	vmov	d6, r0, r1
    5fd2:	vldr	d7, [pc, #476]	; 61b0 <__ieee754_rem_pio2+0x250>
    5fd6:	vcvt.s32.f64	s8, d6
    5fda:	movs	r3, #0
    5fdc:	vcvt.f64.s32	d4, s8
    5fe0:	vsub.f64	d6, d6, d4
    5fe4:	vmul.f64	d6, d6, d7
    5fe8:	vcvt.s32.f64	s10, d6
    5fec:	vstr	d4, [sp, #8]
    5ff0:	vcvt.f64.s32	d5, s10
    5ff4:	vsub.f64	d6, d6, d5
    5ff8:	vmul.f64	d7, d6, d7
    5ffc:	vcmp.f64	d7, #0.0
    6000:	vmrs	APSR_nzcv, fpscr
    6004:	vstr	d5, [sp, #16]
    6008:	vstr	d7, [sp, #24]
    600c:	bne.w	6186 <__ieee754_rem_pio2+0x226>
    6010:	vcmp.f64	d5, #0.0
    6014:	vmrs	APSR_nzcv, fpscr
    6018:	ite	eq
    601a:	moveq	r3, #1
    601c:	movne	r3, #2
    601e:	ldr	r1, [pc, #464]	; (61f0 <__ieee754_rem_pio2+0x290>)
    6020:	str	r1, [sp, #4]
    6022:	movs	r1, #2
    6024:	str	r1, [sp, #0]
    6026:	add	r0, sp, #8
    6028:	mov	r1, r4
    602a:	bl	6948 <__kernel_rem_pio2>
    602e:	cmp	r5, #0
    6030:	blt.w	616a <__ieee754_rem_pio2+0x20a>
    6034:	mov	r3, r0
    6036:	b.n	6046 <__ieee754_rem_pio2+0xe6>
    6038:	movs	r4, #0
    603a:	movs	r5, #0
    603c:	vstr	d0, [r0]
    6040:	strd	r4, r5, [r0, #8]
    6044:	movs	r3, #0
    6046:	mov	r0, r3
    6048:	add	sp, #32
    604a:	pop	{r4, r5, r6, pc}
    604c:	vsub.f64	d7, d0, d0
    6050:	movs	r3, #0
    6052:	vstr	d7, [r0, #8]
    6056:	vstr	d7, [r0]
    605a:	b.n	6046 <__ieee754_rem_pio2+0xe6>
    605c:	vldr	d5, [pc, #344]	; 61b8 <__ieee754_rem_pio2+0x258>
    6060:	vldr	d6, [pc, #348]	; 61c0 <__ieee754_rem_pio2+0x260>
    6064:	vsub.f64	d7, d7, d5
    6068:	b.n	5f98 <__ieee754_rem_pio2+0x38>
    606a:	bl	7a44 <fabs>
    606e:	vmov.f64	d7, #96	; 0x3f000000  0.5
    6072:	vldr	d6, [pc, #340]	; 61c8 <__ieee754_rem_pio2+0x268>
    6076:	vfma.f64	d7, d0, d6
    607a:	vcvt.s32.f64	s15, d7
    607e:	vldr	d3, [pc, #288]	; 61a0 <__ieee754_rem_pio2+0x240>
    6082:	vmov	r3, s15
    6086:	vldr	d6, [pc, #288]	; 61a8 <__ieee754_rem_pio2+0x248>
    608a:	cmp	r3, #31
    608c:	vcvt.f64.s32	d5, s15
    6090:	vneg.f64	d4, d5
    6094:	vmul.f64	d7, d5, d6
    6098:	vfma.f64	d0, d4, d3
    609c:	bgt.n	60d6 <__ieee754_rem_pio2+0x176>
    609e:	ldr	r2, [pc, #340]	; (61f4 <__ieee754_rem_pio2+0x294>)
    60a0:	subs	r1, r3, #1
    60a2:	ldr.w	r2, [r2, r1, lsl #2]
    60a6:	cmp	r6, r2
    60a8:	beq.n	60d6 <__ieee754_rem_pio2+0x176>
    60aa:	vsub.f64	d6, d0, d7
    60ae:	vstr	d6, [r4]
    60b2:	vsub.f64	d0, d0, d6
    60b6:	vsub.f64	d0, d0, d7
    60ba:	cmp	r5, #0
    60bc:	vstr	d0, [r4, #8]
    60c0:	bge.n	6046 <__ieee754_rem_pio2+0xe6>
    60c2:	vneg.f64	d6, d6
    60c6:	vneg.f64	d0, d0
    60ca:	vstr	d6, [r4]
    60ce:	vstr	d0, [r4, #8]
    60d2:	negs	r3, r3
    60d4:	b.n	6046 <__ieee754_rem_pio2+0xe6>
    60d6:	vsub.f64	d6, d0, d7
    60da:	vmov	r2, s13
    60de:	asrs	r6, r6, #20
    60e0:	ubfx	r2, r2, #20, #11
    60e4:	subs	r2, r6, r2
    60e6:	cmp	r2, #16
    60e8:	vstr	d6, [r4]
    60ec:	ble.n	60b2 <__ieee754_rem_pio2+0x152>
    60ee:	vmov.f64	d3, d0
    60f2:	vldr	d7, [pc, #196]	; 61b8 <__ieee754_rem_pio2+0x258>
    60f6:	vldr	d6, [pc, #200]	; 61c0 <__ieee754_rem_pio2+0x260>
    60fa:	vfma.f64	d3, d4, d7
    60fe:	vsub.f64	d0, d0, d3
    6102:	vfma.f64	d0, d4, d7
    6106:	vmov.f64	d7, d0
    610a:	vfnms.f64	d7, d5, d6
    610e:	vsub.f64	d6, d3, d7
    6112:	vmov	r2, s13
    6116:	ubfx	r2, r2, #20, #11
    611a:	subs	r6, r6, r2
    611c:	cmp	r6, #49	; 0x31
    611e:	vstr	d6, [r4]
    6122:	ble.n	6198 <__ieee754_rem_pio2+0x238>
    6124:	vmov.f64	d0, d3
    6128:	vldr	d6, [pc, #164]	; 61d0 <__ieee754_rem_pio2+0x270>
    612c:	vldr	d2, [pc, #168]	; 61d8 <__ieee754_rem_pio2+0x278>
    6130:	vfma.f64	d0, d4, d6
    6134:	vsub.f64	d7, d3, d0
    6138:	vfma.f64	d7, d4, d6
    613c:	vfnms.f64	d7, d5, d2
    6140:	b.n	60aa <__ieee754_rem_pio2+0x14a>
    6142:	ldr	r1, [pc, #180]	; (61f8 <__ieee754_rem_pio2+0x298>)
    6144:	vadd.f64	d7, d0, d7
    6148:	cmp	r6, r1
    614a:	beq.n	618a <__ieee754_rem_pio2+0x22a>
    614c:	vldr	d6, [pc, #88]	; 61a8 <__ieee754_rem_pio2+0x248>
    6150:	vadd.f64	d5, d7, d6
    6154:	vsub.f64	d7, d7, d5
    6158:	mov.w	r3, #4294967295
    615c:	vadd.f64	d7, d7, d6
    6160:	vstr	d5, [r0]
    6164:	vstr	d7, [r0, #8]
    6168:	b.n	6046 <__ieee754_rem_pio2+0xe6>
    616a:	vldr	d6, [r4]
    616e:	vldr	d7, [r4, #8]
    6172:	vneg.f64	d6, d6
    6176:	vneg.f64	d7, d7
    617a:	negs	r3, r0
    617c:	vstr	d6, [r4]
    6180:	vstr	d7, [r4, #8]
    6184:	b.n	6046 <__ieee754_rem_pio2+0xe6>
    6186:	movs	r3, #3
    6188:	b.n	601e <__ieee754_rem_pio2+0xbe>
    618a:	vldr	d5, [pc, #44]	; 61b8 <__ieee754_rem_pio2+0x258>
    618e:	vldr	d6, [pc, #48]	; 61c0 <__ieee754_rem_pio2+0x260>
    6192:	vadd.f64	d7, d7, d5
    6196:	b.n	6150 <__ieee754_rem_pio2+0x1f0>
    6198:	vmov.f64	d0, d3
    619c:	b.n	60b2 <__ieee754_rem_pio2+0x152>
    619e:	nop
    61a0:	.word	0x54400000
    61a4:	.word	0x3ff921fb
    61a8:	.word	0x1a626331
    61ac:	.word	0x3dd0b461
    61b0:	.word	0x00000000
    61b4:	.word	0x41700000
    61b8:	.word	0x1a600000
    61bc:	.word	0x3dd0b461
    61c0:	.word	0x2e037073
    61c4:	.word	0x3ba3198a
    61c8:	.word	0x6dc9c883
    61cc:	.word	0x3fe45f30
    61d0:	.word	0x2e000000
    61d4:	.word	0x3ba3198a
    61d8:	.word	0x252049c1
    61dc:	.word	0x397b839a
    61e0:	.word	0x3fe921fb
    61e4:	.word	0x4002d97b
    61e8:	.word	0x413921fb
    61ec:	.word	0x7fefffff
    61f0:	.word	0x2000091c
    61f4:	.word	0x2000089c
    61f8:	.word	0x3ff921fb

000061fc <__ieee754_sqrt>:
    61fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6200:	sub	sp, #8
    6202:	vstr	d0, [sp]
    6206:	ldr	r1, [pc, #372]	; (637c <__ieee754_sqrt+0x180>)
    6208:	ldr	r3, [sp, #4]
    620a:	ldr	r0, [sp, #0]
    620c:	mov	r4, r1
    620e:	ands	r1, r3
    6210:	cmp	r1, r4
    6212:	beq.w	6346 <__ieee754_sqrt+0x14a>
    6216:	cmp	r3, #0
    6218:	mov	r2, r0
    621a:	ble.n	630c <__ieee754_sqrt+0x110>
    621c:	asrs	r7, r3, #20
    621e:	beq.w	6326 <__ieee754_sqrt+0x12a>
    6222:	subw	r7, r7, #1023	; 0x3ff
    6226:	ubfx	r3, r3, #0, #20
    622a:	lsls	r1, r7, #31
    622c:	orr.w	r3, r3, #1048576	; 0x100000
    6230:	bmi.n	6302 <__ieee754_sqrt+0x106>
    6232:	add.w	r1, r3, r2, lsr #31
    6236:	movs	r6, #0
    6238:	add	r3, r1
    623a:	asrs	r7, r7, #1
    623c:	lsls	r2, r2, #1
    623e:	mov	lr, r6
    6240:	movs	r0, #22
    6242:	mov.w	r1, #2097152	; 0x200000
    6246:	add.w	r4, lr, r1
    624a:	cmp	r4, r3
    624c:	mov.w	r5, r2, lsr #31
    6250:	mov.w	r2, r2, lsl #1
    6254:	bgt.n	625e <__ieee754_sqrt+0x62>
    6256:	subs	r3, r3, r4
    6258:	add.w	lr, r4, r1
    625c:	add	r6, r1
    625e:	subs	r0, #1
    6260:	add.w	r3, r5, r3, lsl #1
    6264:	mov.w	r1, r1, lsr #1
    6268:	bne.n	6246 <__ieee754_sqrt+0x4a>
    626a:	mov	ip, r0
    626c:	movs	r4, #32
    626e:	mov.w	r1, #2147483648	; 0x80000000
    6272:	b.n	6288 <__ieee754_sqrt+0x8c>
    6274:	beq.n	62b8 <__ieee754_sqrt+0xbc>
    6276:	add.w	r5, r3, r2, lsr #31
    627a:	subs	r4, #1
    627c:	mov.w	r1, r1, lsr #1
    6280:	add	r3, r5
    6282:	mov.w	r2, r2, lsl #1
    6286:	beq.n	62ca <__ieee754_sqrt+0xce>
    6288:	cmp	lr, r3
    628a:	add.w	r5, r1, ip
    628e:	bge.n	6274 <__ieee754_sqrt+0x78>
    6290:	cmp	r5, #0
    6292:	add.w	ip, r5, r1
    6296:	blt.n	62ac <__ieee754_sqrt+0xb0>
    6298:	mov	r8, lr
    629a:	cmp	r5, r2
    629c:	rsb	r3, lr, r3
    62a0:	bls.n	62a4 <__ieee754_sqrt+0xa8>
    62a2:	subs	r3, #1
    62a4:	subs	r2, r2, r5
    62a6:	add	r0, r1
    62a8:	mov	lr, r8
    62aa:	b.n	6276 <__ieee754_sqrt+0x7a>
    62ac:	cmp.w	ip, #0
    62b0:	blt.n	6298 <__ieee754_sqrt+0x9c>
    62b2:	add.w	r8, lr, #1
    62b6:	b.n	629a <__ieee754_sqrt+0x9e>
    62b8:	cmp	r5, r2
    62ba:	bhi.n	62f2 <__ieee754_sqrt+0xf6>
    62bc:	cmp	r5, #0
    62be:	add.w	ip, r5, r1
    62c2:	blt.n	6356 <__ieee754_sqrt+0x15a>
    62c4:	mov	r8, r3
    62c6:	movs	r3, #0
    62c8:	b.n	62a4 <__ieee754_sqrt+0xa8>
    62ca:	orrs	r3, r2
    62cc:	bne.n	62f6 <__ieee754_sqrt+0xfa>
    62ce:	lsrs	r0, r0, #1
    62d0:	asrs	r1, r6, #1
    62d2:	lsls	r3, r6, #31
    62d4:	add.w	r1, r1, #1069547520	; 0x3fc00000
    62d8:	add.w	r1, r1, #2097152	; 0x200000
    62dc:	it	mi
    62de:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    62e2:	add.w	r3, r1, r7, lsl #20
    62e6:	mov	r2, r0
    62e8:	vmov	d0, r2, r3
    62ec:	add	sp, #8
    62ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62f2:	mov	r3, lr
    62f4:	b.n	6276 <__ieee754_sqrt+0x7a>
    62f6:	adds	r2, r0, #1
    62f8:	beq.n	635e <__ieee754_sqrt+0x162>
    62fa:	and.w	r3, r0, #1
    62fe:	add	r0, r3
    6300:	b.n	62ce <__ieee754_sqrt+0xd2>
    6302:	lsls	r3, r3, #1
    6304:	add.w	r3, r3, r2, lsr #31
    6308:	lsls	r2, r2, #1
    630a:	b.n	6232 <__ieee754_sqrt+0x36>
    630c:	bic.w	r1, r3, #2147483648	; 0x80000000
    6310:	orrs	r1, r0
    6312:	beq.n	6350 <__ieee754_sqrt+0x154>
    6314:	cbnz	r3, 636e <__ieee754_sqrt+0x172>
    6316:	mov	r7, r3
    6318:	lsrs	r3, r2, #11
    631a:	subs	r7, #21
    631c:	lsls	r2, r2, #21
    631e:	cmp	r3, #0
    6320:	beq.n	6318 <__ieee754_sqrt+0x11c>
    6322:	lsls	r5, r3, #11
    6324:	bmi.n	6364 <__ieee754_sqrt+0x168>
    6326:	movs	r1, #0
    6328:	b.n	632c <__ieee754_sqrt+0x130>
    632a:	mov	r1, r0
    632c:	lsls	r3, r3, #1
    632e:	lsls	r4, r3, #11
    6330:	add.w	r0, r1, #1
    6334:	bpl.n	632a <__ieee754_sqrt+0x12e>
    6336:	rsb	r4, r0, #32
    633a:	lsr.w	r4, r2, r4
    633e:	orrs	r3, r4
    6340:	subs	r7, r7, r1
    6342:	lsls	r2, r0
    6344:	b.n	6222 <__ieee754_sqrt+0x26>
    6346:	vfma.f64	d0, d0, d0
    634a:	add	sp, #8
    634c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6350:	vldr	d0, [sp]
    6354:	b.n	62ec <__ieee754_sqrt+0xf0>
    6356:	cmp.w	ip, #0
    635a:	bge.n	62b2 <__ieee754_sqrt+0xb6>
    635c:	b.n	62c4 <__ieee754_sqrt+0xc8>
    635e:	adds	r6, #1
    6360:	mov	r0, r4
    6362:	b.n	62d0 <__ieee754_sqrt+0xd4>
    6364:	movs	r4, #32
    6366:	mov.w	r1, #4294967295
    636a:	movs	r0, #0
    636c:	b.n	633a <__ieee754_sqrt+0x13e>
    636e:	vldr	d7, [sp]
    6372:	vsub.f64	d7, d7, d7
    6376:	vdiv.f64	d0, d7, d7
    637a:	b.n	62ec <__ieee754_sqrt+0xf0>
    637c:	.word	0x7ff00000

00006380 <__ieee754_atan2f>:
    6380:	push	{r4, lr}
    6382:	sub	sp, #8
    6384:	vstr	s1, [sp, #4]
    6388:	ldr	r3, [sp, #4]
    638a:	bic.w	r2, r3, #2147483648	; 0x80000000
    638e:	cmp.w	r2, #2139095040	; 0x7f800000
    6392:	vmov.f32	s15, s0
    6396:	bgt.n	63cc <__ieee754_atan2f+0x4c>
    6398:	vmov	r0, s0
    639c:	bic.w	r1, r0, #2147483648	; 0x80000000
    63a0:	cmp.w	r1, #2139095040	; 0x7f800000
    63a4:	bgt.n	63cc <__ieee754_atan2f+0x4c>
    63a6:	cmp.w	r3, #1065353216	; 0x3f800000
    63aa:	beq.n	6440 <__ieee754_atan2f+0xc0>
    63ac:	asrs	r4, r3, #30
    63ae:	and.w	r4, r4, #2
    63b2:	orr.w	r4, r4, r0, lsr #31
    63b6:	cbnz	r1, 63d8 <__ieee754_atan2f+0x58>
    63b8:	cmp	r4, #2
    63ba:	beq.n	643a <__ieee754_atan2f+0xba>
    63bc:	vldr	s0, [pc, #256]	; 64c0 <__ieee754_atan2f+0x140>
    63c0:	cmp	r4, #3
    63c2:	it	ne
    63c4:	vmovne.f32	s0, s15
    63c8:	add	sp, #8
    63ca:	pop	{r4, pc}
    63cc:	vldr	s14, [sp, #4]
    63d0:	vadd.f32	s0, s14, s15
    63d4:	add	sp, #8
    63d6:	pop	{r4, pc}
    63d8:	cbz	r2, 6420 <__ieee754_atan2f+0xa0>
    63da:	cmp.w	r2, #2139095040	; 0x7f800000
    63de:	beq.n	644a <__ieee754_atan2f+0xca>
    63e0:	cmp.w	r1, #2139095040	; 0x7f800000
    63e4:	beq.n	6420 <__ieee754_atan2f+0xa0>
    63e6:	subs	r2, r1, r2
    63e8:	asrs	r2, r2, #23
    63ea:	cmp	r2, #60	; 0x3c
    63ec:	bgt.n	6434 <__ieee754_atan2f+0xb4>
    63ee:	cmp	r3, #0
    63f0:	blt.n	648a <__ieee754_atan2f+0x10a>
    63f2:	vldr	s0, [sp, #4]
    63f6:	vdiv.f32	s0, s15, s0
    63fa:	bl	7f8c <fabsf>
    63fe:	bl	7dd4 <atanf>
    6402:	cmp	r4, #1
    6404:	beq.n	647c <__ieee754_atan2f+0xfc>
    6406:	cmp	r4, #2
    6408:	beq.n	646a <__ieee754_atan2f+0xea>
    640a:	cmp	r4, #0
    640c:	beq.n	63d4 <__ieee754_atan2f+0x54>
    640e:	vldr	s14, [pc, #180]	; 64c4 <__ieee754_atan2f+0x144>
    6412:	vldr	s15, [pc, #180]	; 64c8 <__ieee754_atan2f+0x148>
    6416:	vadd.f32	s0, s0, s14
    641a:	vsub.f32	s0, s0, s15
    641e:	b.n	63d4 <__ieee754_atan2f+0x54>
    6420:	vldr	s15, [pc, #168]	; 64cc <__ieee754_atan2f+0x14c>
    6424:	vldr	s0, [pc, #168]	; 64d0 <__ieee754_atan2f+0x150>
    6428:	cmp	r0, #0
    642a:	it	ge
    642c:	vmovge.f32	s0, s15
    6430:	add	sp, #8
    6432:	pop	{r4, pc}
    6434:	vldr	s0, [pc, #148]	; 64cc <__ieee754_atan2f+0x14c>
    6438:	b.n	6402 <__ieee754_atan2f+0x82>
    643a:	vldr	s0, [pc, #140]	; 64c8 <__ieee754_atan2f+0x148>
    643e:	b.n	63d4 <__ieee754_atan2f+0x54>
    6440:	add	sp, #8
    6442:	ldmia.w	sp!, {r4, lr}
    6446:	b.w	7dd4 <atanf>
    644a:	cmp.w	r1, #2139095040	; 0x7f800000
    644e:	beq.n	6494 <__ieee754_atan2f+0x114>
    6450:	cmp	r4, #2
    6452:	beq.n	643a <__ieee754_atan2f+0xba>
    6454:	cmp	r4, #3
    6456:	beq.n	64ae <__ieee754_atan2f+0x12e>
    6458:	vldr	s15, [pc, #120]	; 64d4 <__ieee754_atan2f+0x154>
    645c:	vldr	s0, [pc, #120]	; 64d8 <__ieee754_atan2f+0x158>
    6460:	cmp	r4, #1
    6462:	it	eq
    6464:	vmoveq.f32	s0, s15
    6468:	b.n	63d4 <__ieee754_atan2f+0x54>
    646a:	vldr	s14, [pc, #88]	; 64c4 <__ieee754_atan2f+0x144>
    646e:	vldr	s15, [pc, #88]	; 64c8 <__ieee754_atan2f+0x148>
    6472:	vadd.f32	s0, s0, s14
    6476:	vsub.f32	s0, s15, s0
    647a:	b.n	63d4 <__ieee754_atan2f+0x54>
    647c:	vmov	r3, s0
    6480:	add.w	r3, r3, #2147483648	; 0x80000000
    6484:	vmov	s0, r3
    6488:	b.n	63d4 <__ieee754_atan2f+0x54>
    648a:	adds	r2, #60	; 0x3c
    648c:	bge.n	63f2 <__ieee754_atan2f+0x72>
    648e:	vldr	s0, [pc, #72]	; 64d8 <__ieee754_atan2f+0x158>
    6492:	b.n	6402 <__ieee754_atan2f+0x82>
    6494:	cmp	r4, #2
    6496:	beq.n	64ba <__ieee754_atan2f+0x13a>
    6498:	cmp	r4, #3
    649a:	beq.n	64b4 <__ieee754_atan2f+0x134>
    649c:	vldr	s15, [pc, #60]	; 64dc <__ieee754_atan2f+0x15c>
    64a0:	vldr	s0, [pc, #60]	; 64e0 <__ieee754_atan2f+0x160>
    64a4:	cmp	r4, #1
    64a6:	it	eq
    64a8:	vmoveq.f32	s0, s15
    64ac:	b.n	63d4 <__ieee754_atan2f+0x54>
    64ae:	vldr	s0, [pc, #16]	; 64c0 <__ieee754_atan2f+0x140>
    64b2:	b.n	63d4 <__ieee754_atan2f+0x54>
    64b4:	vldr	s0, [pc, #44]	; 64e4 <__ieee754_atan2f+0x164>
    64b8:	b.n	63d4 <__ieee754_atan2f+0x54>
    64ba:	vldr	s0, [pc, #44]	; 64e8 <__ieee754_atan2f+0x168>
    64be:	b.n	63d4 <__ieee754_atan2f+0x54>
    64c0:	.word	0xc0490fdb
    64c4:	.word	0x33bbbd2e
    64c8:	.word	0x40490fdb
    64cc:	.word	0x3fc90fdb
    64d0:	.word	0xbfc90fdb
    64d4:	.word	0x80000000
    64d8:	.word	0x00000000
    64dc:	.word	0xbf490fdb
    64e0:	.word	0x3f490fdb
    64e4:	.word	0xc016cbe4
    64e8:	.word	0x4016cbe4

000064ec <__ieee754_rem_pio2f>:
    64ec:	push	{r4, r5, r6, lr}
    64ee:	vmov	r3, s0
    64f2:	ldr	r2, [pc, #600]	; (674c <__ieee754_rem_pio2f+0x260>)
    64f4:	bic.w	r4, r3, #2147483648	; 0x80000000
    64f8:	cmp	r4, r2
    64fa:	sub	sp, #24
    64fc:	ble.n	65be <__ieee754_rem_pio2f+0xd2>
    64fe:	ldr	r2, [pc, #592]	; (6750 <__ieee754_rem_pio2f+0x264>)
    6500:	cmp	r4, r2
    6502:	vmov	r6, s0
    6506:	bgt.n	6540 <__ieee754_rem_pio2f+0x54>
    6508:	cmp	r3, #0
    650a:	vldr	s15, [pc, #584]	; 6754 <__ieee754_rem_pio2f+0x268>
    650e:	ldr	r2, [pc, #584]	; (6758 <__ieee754_rem_pio2f+0x26c>)
    6510:	bic.w	r4, r4, #15
    6514:	ble.w	66c2 <__ieee754_rem_pio2f+0x1d6>
    6518:	cmp	r4, r2
    651a:	vsub.f32	s15, s0, s15
    651e:	beq.n	65de <__ieee754_rem_pio2f+0xf2>
    6520:	vldr	s14, [pc, #568]	; 675c <__ieee754_rem_pio2f+0x270>
    6524:	vsub.f32	s13, s15, s14
    6528:	movs	r3, #1
    652a:	vsub.f32	s15, s15, s13
    652e:	vstr	s13, [r0]
    6532:	vsub.f32	s15, s15, s14
    6536:	vstr	s15, [r0, #4]
    653a:	mov	r0, r3
    653c:	add	sp, #24
    653e:	pop	{r4, r5, r6, pc}
    6540:	ldr	r2, [pc, #540]	; (6760 <__ieee754_rem_pio2f+0x274>)
    6542:	cmp	r4, r2
    6544:	mov	r5, r0
    6546:	ble.n	6602 <__ieee754_rem_pio2f+0x116>
    6548:	cmp.w	r4, #2139095040	; 0x7f800000
    654c:	bge.n	65ce <__ieee754_rem_pio2f+0xe2>
    654e:	asrs	r2, r4, #23
    6550:	subs	r2, #134	; 0x86
    6552:	sub.w	r3, r4, r2, lsl #23
    6556:	vmov	s14, r3
    655a:	vcvt.s32.f32	s13, s14
    655e:	vldr	s15, [pc, #516]	; 6764 <__ieee754_rem_pio2f+0x278>
    6562:	vcvt.f32.s32	s13, s13
    6566:	vsub.f32	s14, s14, s13
    656a:	vstr	s13, [sp, #12]
    656e:	vmul.f32	s14, s14, s15
    6572:	vcvt.s32.f32	s13, s14
    6576:	vcvt.f32.s32	s13, s13
    657a:	vsub.f32	s14, s14, s13
    657e:	vstr	s13, [sp, #16]
    6582:	vmul.f32	s15, s14, s15
    6586:	vcmp.f32	s15, #0.0
    658a:	vmrs	APSR_nzcv, fpscr
    658e:	vstr	s15, [sp, #20]
    6592:	bne.w	6704 <__ieee754_rem_pio2f+0x218>
    6596:	vcmp.f32	s13, #0.0
    659a:	vmrs	APSR_nzcv, fpscr
    659e:	ite	eq
    65a0:	moveq	r3, #1
    65a2:	movne	r3, #2
    65a4:	ldr	r1, [pc, #448]	; (6768 <__ieee754_rem_pio2f+0x27c>)
    65a6:	str	r1, [sp, #4]
    65a8:	movs	r1, #2
    65aa:	str	r1, [sp, #0]
    65ac:	add	r0, sp, #12
    65ae:	mov	r1, r5
    65b0:	bl	717c <__kernel_rem_pio2f>
    65b4:	cmp	r6, #0
    65b6:	blt.w	66e8 <__ieee754_rem_pio2f+0x1fc>
    65ba:	mov	r3, r0
    65bc:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    65be:	movs	r2, #0
    65c0:	vstr	s0, [r0]
    65c4:	str	r2, [r0, #4]
    65c6:	movs	r3, #0
    65c8:	mov	r0, r3
    65ca:	add	sp, #24
    65cc:	pop	{r4, r5, r6, pc}
    65ce:	vsub.f32	s15, s0, s0
    65d2:	movs	r3, #0
    65d4:	vstr	s15, [r0, #4]
    65d8:	vstr	s15, [r0]
    65dc:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    65de:	vldr	s13, [pc, #396]	; 676c <__ieee754_rem_pio2f+0x280>
    65e2:	vldr	s14, [pc, #396]	; 6770 <__ieee754_rem_pio2f+0x284>
    65e6:	vsub.f32	s15, s15, s13
    65ea:	movs	r3, #1
    65ec:	vsub.f32	s13, s15, s14
    65f0:	vsub.f32	s15, s15, s13
    65f4:	vstr	s13, [r0]
    65f8:	vsub.f32	s15, s15, s14
    65fc:	vstr	s15, [r0, #4]
    6600:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    6602:	bl	7f8c <fabsf>
    6606:	vldr	s13, [pc, #364]	; 6774 <__ieee754_rem_pio2f+0x288>
    660a:	vldr	s11, [pc, #328]	; 6754 <__ieee754_rem_pio2f+0x268>
    660e:	vldr	s14, [pc, #332]	; 675c <__ieee754_rem_pio2f+0x270>
    6612:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6616:	vfma.f32	s15, s0, s13
    661a:	vcvt.s32.f32	s15, s15
    661e:	vmov	r3, s15
    6622:	vcvt.f32.s32	s13, s15
    6626:	cmp	r3, #31
    6628:	vneg.f32	s12, s13
    662c:	vfma.f32	s0, s12, s11
    6630:	vmul.f32	s15, s13, s14
    6634:	bgt.n	6672 <__ieee754_rem_pio2f+0x186>
    6636:	ldr	r1, [pc, #320]	; (6778 <__ieee754_rem_pio2f+0x28c>)
    6638:	subs	r0, r3, #1
    663a:	bic.w	r2, r4, #255	; 0xff
    663e:	ldr.w	r1, [r1, r0, lsl #2]
    6642:	cmp	r2, r1
    6644:	beq.n	6672 <__ieee754_rem_pio2f+0x186>
    6646:	vsub.f32	s14, s0, s15
    664a:	vstr	s14, [r5]
    664e:	vsub.f32	s0, s0, s14
    6652:	cmp	r6, #0
    6654:	vsub.f32	s0, s0, s15
    6658:	vstr	s0, [r5, #4]
    665c:	bge.n	65c8 <__ieee754_rem_pio2f+0xdc>
    665e:	vneg.f32	s14, s14
    6662:	vneg.f32	s0, s0
    6666:	vstr	s14, [r5]
    666a:	vstr	s0, [r5, #4]
    666e:	negs	r3, r3
    6670:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    6672:	vsub.f32	s14, s0, s15
    6676:	asrs	r4, r4, #23
    6678:	vmov	r2, s14
    667c:	ubfx	r2, r2, #23, #8
    6680:	subs	r2, r4, r2
    6682:	cmp	r2, #8
    6684:	ble.n	664a <__ieee754_rem_pio2f+0x15e>
    6686:	vldr	s15, [pc, #228]	; 676c <__ieee754_rem_pio2f+0x280>
    668a:	vldr	s14, [pc, #228]	; 6770 <__ieee754_rem_pio2f+0x284>
    668e:	vmov.f32	s11, s0
    6692:	vfma.f32	s11, s12, s15
    6696:	vsub.f32	s0, s0, s11
    669a:	vfma.f32	s0, s12, s15
    669e:	vmov.f32	s15, s0
    66a2:	vfnms.f32	s15, s13, s14
    66a6:	vsub.f32	s14, s11, s15
    66aa:	vmov	r2, s14
    66ae:	ubfx	r2, r2, #23, #8
    66b2:	subs	r4, r4, r2
    66b4:	cmp	r4, #25
    66b6:	bgt.n	672e <__ieee754_rem_pio2f+0x242>
    66b8:	vstr	s14, [r5]
    66bc:	vmov.f32	s0, s11
    66c0:	b.n	664e <__ieee754_rem_pio2f+0x162>
    66c2:	cmp	r4, r2
    66c4:	vadd.f32	s15, s0, s15
    66c8:	beq.n	6708 <__ieee754_rem_pio2f+0x21c>
    66ca:	vldr	s14, [pc, #144]	; 675c <__ieee754_rem_pio2f+0x270>
    66ce:	vadd.f32	s13, s15, s14
    66d2:	mov.w	r3, #4294967295
    66d6:	vsub.f32	s15, s15, s13
    66da:	vstr	s13, [r0]
    66de:	vadd.f32	s15, s15, s14
    66e2:	vstr	s15, [r0, #4]
    66e6:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    66e8:	vldr	s14, [r5]
    66ec:	vldr	s15, [r5, #4]
    66f0:	vneg.f32	s14, s14
    66f4:	vneg.f32	s15, s15
    66f8:	negs	r3, r0
    66fa:	vstr	s14, [r5]
    66fe:	vstr	s15, [r5, #4]
    6702:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    6704:	movs	r3, #3
    6706:	b.n	65a4 <__ieee754_rem_pio2f+0xb8>
    6708:	vldr	s13, [pc, #96]	; 676c <__ieee754_rem_pio2f+0x280>
    670c:	vldr	s14, [pc, #96]	; 6770 <__ieee754_rem_pio2f+0x284>
    6710:	vadd.f32	s15, s15, s13
    6714:	mov.w	r3, #4294967295
    6718:	vadd.f32	s13, s15, s14
    671c:	vsub.f32	s15, s15, s13
    6720:	vstr	s13, [r0]
    6724:	vadd.f32	s15, s15, s14
    6728:	vstr	s15, [r0, #4]
    672c:	b.n	65c8 <__ieee754_rem_pio2f+0xdc>
    672e:	vldr	s14, [pc, #76]	; 677c <__ieee754_rem_pio2f+0x290>
    6732:	vldr	s10, [pc, #76]	; 6780 <__ieee754_rem_pio2f+0x294>
    6736:	vmov.f32	s0, s11
    673a:	vfma.f32	s0, s12, s14
    673e:	vsub.f32	s15, s11, s0
    6742:	vfma.f32	s15, s12, s14
    6746:	vfnms.f32	s15, s13, s10
    674a:	b.n	6646 <__ieee754_rem_pio2f+0x15a>
    674c:	.word	0x3f490fd8
    6750:	.word	0x4016cbe3
    6754:	.word	0x3fc90f80
    6758:	.word	0x3fc90fd0
    675c:	.word	0x37354443
    6760:	.word	0x43490f80
    6764:	.word	0x43800000
    6768:	.word	0x20000aa4
    676c:	.word	0x37354400
    6770:	.word	0x2e85a308
    6774:	.word	0x3f22f984
    6778:	.word	0x20000a24
    677c:	.word	0x2e85a300
    6780:	.word	0x248d3132

00006784 <__ieee754_sqrtf>:
    6784:	vmov	r3, s0
    6788:	bic.w	r2, r3, #2147483648	; 0x80000000
    678c:	cmp.w	r2, #2139095040	; 0x7f800000
    6790:	push	{r4, r5, r6}
    6792:	bcs.n	67f6 <__ieee754_sqrtf+0x72>
    6794:	cbz	r2, 67f2 <__ieee754_sqrtf+0x6e>
    6796:	cmp	r3, #0
    6798:	blt.n	6816 <__ieee754_sqrtf+0x92>
    679a:	cmp.w	r2, #8388608	; 0x800000
    679e:	mov.w	r0, r3, asr #23
    67a2:	bcc.n	67fe <__ieee754_sqrtf+0x7a>
    67a4:	sub.w	r2, r0, #127	; 0x7f
    67a8:	ubfx	r3, r3, #0, #23
    67ac:	lsls	r1, r2, #31
    67ae:	orr.w	r3, r3, #8388608	; 0x800000
    67b2:	it	mi
    67b4:	lslmi	r3, r3, #1
    67b6:	movs	r4, #0
    67b8:	asrs	r6, r2, #1
    67ba:	lsls	r3, r3, #1
    67bc:	mov	r5, r4
    67be:	movs	r1, #25
    67c0:	mov.w	r2, #16777216	; 0x1000000
    67c4:	adds	r0, r5, r2
    67c6:	cmp	r0, r3
    67c8:	bgt.n	67d0 <__ieee754_sqrtf+0x4c>
    67ca:	subs	r3, r3, r0
    67cc:	adds	r5, r0, r2
    67ce:	add	r4, r2
    67d0:	subs	r1, #1
    67d2:	mov.w	r3, r3, lsl #1
    67d6:	mov.w	r2, r2, lsr #1
    67da:	bne.n	67c4 <__ieee754_sqrtf+0x40>
    67dc:	cbz	r3, 67e4 <__ieee754_sqrtf+0x60>
    67de:	and.w	r3, r4, #1
    67e2:	add	r4, r3
    67e4:	asrs	r4, r4, #1
    67e6:	add.w	r4, r4, #1056964608	; 0x3f000000
    67ea:	add.w	r3, r4, r6, lsl #23
    67ee:	vmov	s0, r3
    67f2:	pop	{r4, r5, r6}
    67f4:	bx	lr
    67f6:	vfma.f32	s0, s0, s0
    67fa:	pop	{r4, r5, r6}
    67fc:	bx	lr
    67fe:	ands.w	r2, r3, #8388608	; 0x800000
    6802:	beq.n	6808 <__ieee754_sqrtf+0x84>
    6804:	b.n	6820 <__ieee754_sqrtf+0x9c>
    6806:	mov	r2, r1
    6808:	lsls	r3, r3, #1
    680a:	lsls	r4, r3, #8
    680c:	add.w	r1, r2, #1
    6810:	bpl.n	6806 <__ieee754_sqrtf+0x82>
    6812:	subs	r0, r0, r2
    6814:	b.n	67a4 <__ieee754_sqrtf+0x20>
    6816:	vsub.f32	s15, s0, s0
    681a:	vdiv.f32	s0, s15, s15
    681e:	b.n	67f2 <__ieee754_sqrtf+0x6e>
    6820:	mov.w	r2, #4294967295
    6824:	b.n	6812 <__ieee754_sqrtf+0x8e>
    6826:	nop

00006828 <__kernel_cos>:
    6828:	vmov	r3, s1
    682c:	bic.w	r3, r3, #2147483648	; 0x80000000
    6830:	cmp.w	r3, #1044381696	; 0x3e400000
    6834:	bge.n	6890 <__kernel_cos+0x68>
    6836:	vcvt.s32.f64	s15, d0
    683a:	vmov	r3, s15
    683e:	cmp	r3, #0
    6840:	beq.n	6906 <__kernel_cos+0xde>
    6842:	vmul.f64	d7, d0, d0
    6846:	vldr	d4, [pc, #200]	; 6910 <__kernel_cos+0xe8>
    684a:	vldr	d5, [pc, #204]	; 6918 <__kernel_cos+0xf0>
    684e:	vldr	d6, [pc, #208]	; 6920 <__kernel_cos+0xf8>
    6852:	vfma.f64	d5, d7, d4
    6856:	vldr	d4, [pc, #208]	; 6928 <__kernel_cos+0x100>
    685a:	vfma.f64	d6, d7, d5
    685e:	vldr	d5, [pc, #208]	; 6930 <__kernel_cos+0x108>
    6862:	vfma.f64	d4, d7, d6
    6866:	vldr	d6, [pc, #208]	; 6938 <__kernel_cos+0x110>
    686a:	vfma.f64	d5, d7, d4
    686e:	vfma.f64	d6, d7, d5
    6872:	vmul.f64	d6, d6, d7
    6876:	vnmul.f64	d0, d1, d0
    687a:	vmov.f64	d5, #96	; 0x3f000000  0.5
    687e:	vfma.f64	d0, d7, d6
    6882:	vmov.f64	d6, #112	; 0x3f800000  1.0
    6886:	vfnms.f64	d0, d7, d5
    688a:	vsub.f64	d0, d6, d0
    688e:	bx	lr
    6890:	vldr	d4, [pc, #124]	; 6910 <__kernel_cos+0xe8>
    6894:	vmul.f64	d7, d0, d0
    6898:	vldr	d5, [pc, #124]	; 6918 <__kernel_cos+0xf0>
    689c:	vldr	d6, [pc, #128]	; 6920 <__kernel_cos+0xf8>
    68a0:	vfma.f64	d5, d7, d4
    68a4:	vldr	d4, [pc, #128]	; 6928 <__kernel_cos+0x100>
    68a8:	vfma.f64	d6, d7, d5
    68ac:	ldr	r2, [pc, #144]	; (6940 <__kernel_cos+0x118>)
    68ae:	vfma.f64	d4, d7, d6
    68b2:	vldr	d5, [pc, #124]	; 6930 <__kernel_cos+0x108>
    68b6:	vldr	d6, [pc, #128]	; 6938 <__kernel_cos+0x110>
    68ba:	vfma.f64	d5, d7, d4
    68be:	cmp	r3, r2
    68c0:	vfma.f64	d6, d7, d5
    68c4:	vmul.f64	d6, d6, d7
    68c8:	ble.n	6876 <__kernel_cos+0x4e>
    68ca:	ldr	r2, [pc, #120]	; (6944 <__kernel_cos+0x11c>)
    68cc:	cmp	r3, r2
    68ce:	bgt.n	68fc <__kernel_cos+0xd4>
    68d0:	vmov.f64	d4, #112	; 0x3f800000  1.0
    68d4:	movs	r0, #0
    68d6:	sub.w	r1, r3, #2097152	; 0x200000
    68da:	vmov	d5, r0, r1
    68de:	vsub.f64	d4, d4, d5
    68e2:	vnmul.f64	d1, d1, d0
    68e6:	vmov.f64	d3, #96	; 0x3f000000  0.5
    68ea:	vfma.f64	d1, d7, d6
    68ee:	vfnms.f64	d5, d7, d3
    68f2:	vsub.f64	d5, d5, d1
    68f6:	vsub.f64	d0, d4, d5
    68fa:	bx	lr
    68fc:	vmov.f64	d4, #103	; 0x3f380000  0.7187500
    6900:	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    6904:	b.n	68e2 <__kernel_cos+0xba>
    6906:	vmov.f64	d0, #112	; 0x3f800000  1.0
    690a:	bx	lr
    690c:	nop.w
    6910:	.word	0xbe8838d4
    6914:	.word	0xbda8fae9
    6918:	.word	0xbdb4b1c4
    691c:	.word	0x3e21ee9e
    6920:	.word	0x809c52ad
    6924:	.word	0xbe927e4f
    6928:	.word	0x19cb1590
    692c:	.word	0x3efa01a0
    6930:	.word	0x16c15177
    6934:	.word	0xbf56c16c
    6938:	.word	0x5555554c
    693c:	.word	0x3fa55555
    6940:	.word	0x3fd33332
    6944:	.word	0x3fe90000

00006948 <__kernel_rem_pio2>:
    6948:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    694c:	vpush	{d8-d11}
    6950:	sub.w	sp, sp, #588	; 0x24c
    6954:	ldr	r4, [pc, #704]	; (6c18 <__kernel_rem_pio2+0x2d0>)
    6956:	ldr	r6, [sp, #656]	; 0x290
    6958:	ldr	r5, [pc, #704]	; (6c1c <__kernel_rem_pio2+0x2d4>)
    695a:	ldr.w	r6, [r4, r6, lsl #2]
    695e:	str	r3, [sp, #4]
    6960:	subs	r4, r2, #3
    6962:	smull	r7, r5, r5, r4
    6966:	asrs	r4, r4, #31
    6968:	rsb	r4, r4, r5, asr #2
    696c:	bic.w	r4, r4, r4, asr #31
    6970:	subs	r7, r3, #1
    6972:	add.w	sl, r4, #1
    6976:	sub.w	sl, sl, sl, lsl #2
    697a:	mov	fp, r1
    697c:	adds	r1, r6, r7
    697e:	str	r4, [sp, #8]
    6980:	mov	r9, r0
    6982:	add.w	sl, r2, sl, lsl #3
    6986:	sub.w	r3, r4, r7
    698a:	bmi.n	69be <__kernel_rem_pio2+0x76>
    698c:	add	r1, r3
    698e:	adds	r1, #1
    6990:	add	r2, sp, #104	; 0x68
    6992:	ldr	r0, [sp, #660]	; 0x294
    6994:	b.n	69ac <__kernel_rem_pio2+0x64>
    6996:	ldr.w	r4, [r0, r3, lsl #2]
    699a:	vmov	s15, r4
    699e:	adds	r3, #1
    69a0:	vcvt.f64.s32	d7, s15
    69a4:	cmp	r3, r1
    69a6:	vstmia	r2!, {d7}
    69aa:	beq.n	69be <__kernel_rem_pio2+0x76>
    69ac:	cmp	r3, #0
    69ae:	bge.n	6996 <__kernel_rem_pio2+0x4e>
    69b0:	vldr	d7, [pc, #588]	; 6c00 <__kernel_rem_pio2+0x2b8>
    69b4:	adds	r3, #1
    69b6:	cmp	r3, r1
    69b8:	vstmia	r2!, {d7}
    69bc:	bne.n	69ac <__kernel_rem_pio2+0x64>
    69be:	cmp	r6, #0
    69c0:	blt.w	6f88 <__kernel_rem_pio2+0x640>
    69c4:	ldr	r3, [sp, #4]
    69c6:	add	r0, sp, #424	; 0x1a8
    69c8:	add.w	lr, r6, #1
    69cc:	lsls	r4, r3, #3
    69ce:	add.w	lr, r0, lr, lsl #3
    69d2:	add.w	r1, r9, r4
    69d6:	mov	r5, r7
    69d8:	cmp	r7, #0
    69da:	blt.w	6d6e <__kernel_rem_pio2+0x426>
    69de:	add	r3, sp, #104	; 0x68
    69e0:	vldr	d7, [pc, #540]	; 6c00 <__kernel_rem_pio2+0x2b8>
    69e4:	add.w	r2, r3, r5, lsl #3
    69e8:	adds	r2, #8
    69ea:	mov	r3, r9
    69ec:	vldmia	r3!, {d5}
    69f0:	vldmdb	r2!, {d6}
    69f4:	cmp	r3, r1
    69f6:	vfma.f64	d7, d5, d6
    69fa:	bne.n	69ec <__kernel_rem_pio2+0xa4>
    69fc:	vstmia	r0!, {d7}
    6a00:	cmp	r0, lr
    6a02:	add.w	r5, r5, #1
    6a06:	bne.n	69d8 <__kernel_rem_pio2+0x90>
    6a08:	add.w	r3, r6, #1073741824	; 0x40000000
    6a0c:	subs	r3, #2
    6a0e:	lsls	r3, r3, #2
    6a10:	add	r2, sp, #24
    6a12:	vldr	d9, [pc, #500]	; 6c08 <__kernel_rem_pio2+0x2c0>
    6a16:	vldr	d8, [pc, #504]	; 6c10 <__kernel_rem_pio2+0x2c8>
    6a1a:	add.w	r8, r3, #4
    6a1e:	add	r3, r2
    6a20:	add	r4, r9
    6a22:	add	r8, r2
    6a24:	str	r3, [sp, #12]
    6a26:	mov	r5, r6
    6a28:	str.w	fp, [sp, #16]
    6a2c:	add	r3, sp, #584	; 0x248
    6a2e:	add.w	r3, r3, r5, lsl #3
    6a32:	cmp	r5, #0
    6a34:	vldr	d0, [r3, #-160]	; 0xffffff60
    6a38:	ble.n	6a6a <__kernel_rem_pio2+0x122>
    6a3a:	add	r1, sp, #424	; 0x1a8
    6a3c:	add.w	r3, r1, r5, lsl #3
    6a40:	add	r2, sp, #20
    6a42:	vmul.f64	d7, d0, d9
    6a46:	vcvt.s32.f64	s14, d7
    6a4a:	vldmdb	r3!, {d6}
    6a4e:	vcvt.f64.s32	d7, s14
    6a52:	vfms.f64	d0, d7, d8
    6a56:	vcvt.s32.f64	s11, d0
    6a5a:	cmp	r3, r1
    6a5c:	vmov	r0, s11
    6a60:	vadd.f64	d0, d7, d6
    6a64:	str.w	r0, [r2, #4]!
    6a68:	bne.n	6a42 <__kernel_rem_pio2+0xfa>
    6a6a:	mov	r0, sl
    6a6c:	bl	7cb8 <scalbn>
    6a70:	vmov.f64	d10, d0
    6a74:	vmov.f64	d0, #64	; 0x3e000000  0.125
    6a78:	vmul.f64	d0, d10, d0
    6a7c:	bl	7a68 <floor>
    6a80:	vmov.f64	d7, #32	; 0x41000000  8.0
    6a84:	vfms.f64	d10, d0, d7
    6a88:	vcvt.s32.f64	s15, d10
    6a8c:	cmp.w	sl, #0
    6a90:	vmov	fp, s15
    6a94:	vcvt.f64.s32	d7, s15
    6a98:	vsub.f64	d10, d10, d7
    6a9c:	ble.w	6d38 <__kernel_rem_pio2+0x3f0>
    6aa0:	add.w	lr, r5, #4294967295
    6aa4:	add	r3, sp, #24
    6aa6:	rsb	r2, sl, #24
    6aaa:	ldr.w	r3, [r3, lr, lsl #2]
    6aae:	asr.w	r0, r3, r2
    6ab2:	lsl.w	r2, r0, r2
    6ab6:	add	r1, sp, #24
    6ab8:	subs	r3, r3, r2
    6aba:	rsb	r2, sl, #23
    6abe:	str.w	r3, [r1, lr, lsl #2]
    6ac2:	add	fp, r0
    6ac4:	asr.w	r1, r3, r2
    6ac8:	cmp	r1, #0
    6aca:	ble.n	6b40 <__kernel_rem_pio2+0x1f8>
    6acc:	cmp	r5, #0
    6ace:	add.w	fp, fp, #1
    6ad2:	ble.w	6f1e <__kernel_rem_pio2+0x5d6>
    6ad6:	movs	r2, #0
    6ad8:	mov	r0, r2
    6ada:	add.w	lr, sp, #20
    6ade:	mov	ip, r1
    6ae0:	b.n	6af4 <__kernel_rem_pio2+0x1ac>
    6ae2:	rsb	r1, r3, #16777216	; 0x1000000
    6ae6:	cbz	r3, 6aee <__kernel_rem_pio2+0x1a6>
    6ae8:	str.w	r1, [lr]
    6aec:	movs	r0, #1
    6aee:	adds	r2, #1
    6af0:	cmp	r5, r2
    6af2:	ble.n	6b12 <__kernel_rem_pio2+0x1ca>
    6af4:	ldr.w	r3, [lr, #4]!
    6af8:	cmp	r0, #0
    6afa:	beq.n	6ae2 <__kernel_rem_pio2+0x19a>
    6afc:	rsb	r3, r3, #16711935	; 0xff00ff
    6b00:	adds	r2, #1
    6b02:	add.w	r3, r3, #65280	; 0xff00
    6b06:	cmp	r5, r2
    6b08:	str.w	r3, [lr]
    6b0c:	mov.w	r0, #1
    6b10:	bgt.n	6af4 <__kernel_rem_pio2+0x1ac>
    6b12:	mov	r1, ip
    6b14:	cmp.w	sl, #0
    6b18:	ble.n	6b3c <__kernel_rem_pio2+0x1f4>
    6b1a:	cmp.w	sl, #1
    6b1e:	beq.w	6d46 <__kernel_rem_pio2+0x3fe>
    6b22:	cmp.w	sl, #2
    6b26:	bne.n	6b3c <__kernel_rem_pio2+0x1f4>
    6b28:	subs	r2, r5, #1
    6b2a:	add	r3, sp, #24
    6b2c:	add.w	lr, sp, #24
    6b30:	ldr.w	r3, [r3, r2, lsl #2]
    6b34:	ubfx	r3, r3, #0, #22
    6b38:	str.w	r3, [lr, r2, lsl #2]
    6b3c:	cmp	r1, #2
    6b3e:	beq.n	6c20 <__kernel_rem_pio2+0x2d8>
    6b40:	vcmp.f64	d10, #0.0
    6b44:	vmrs	APSR_nzcv, fpscr
    6b48:	bne.n	6c44 <__kernel_rem_pio2+0x2fc>
    6b4a:	add.w	lr, r5, #4294967295
    6b4e:	cmp	r6, lr
    6b50:	bgt.n	6b72 <__kernel_rem_pio2+0x22a>
    6b52:	add.w	r2, r5, #1073741824	; 0x40000000
    6b56:	subs	r2, #1
    6b58:	add	r3, sp, #24
    6b5a:	add.w	r2, r3, r2, lsl #2
    6b5e:	movs	r0, #0
    6b60:	ldr.w	r3, [r2], #-4
    6b64:	cmp	r2, r8
    6b66:	orr.w	r0, r0, r3
    6b6a:	bne.n	6b60 <__kernel_rem_pio2+0x218>
    6b6c:	cmp	r0, #0
    6b6e:	bne.w	6d9c <__kernel_rem_pio2+0x454>
    6b72:	subs	r3, r6, #1
    6b74:	add	r2, sp, #24
    6b76:	ldr.w	r3, [r2, r3, lsl #2]
    6b7a:	cmp	r3, #0
    6b7c:	bne.w	6f18 <__kernel_rem_pio2+0x5d0>
    6b80:	ldr	r3, [sp, #12]
    6b82:	mov.w	lr, #1
    6b86:	ldr.w	r2, [r3], #-4
    6b8a:	add.w	lr, lr, #1
    6b8e:	cmp	r2, #0
    6b90:	beq.n	6b86 <__kernel_rem_pio2+0x23e>
    6b92:	add	lr, r5
    6b94:	adds	r3, r5, #1
    6b96:	cmp	r3, lr
    6b98:	bgt.n	6bf6 <__kernel_rem_pio2+0x2ae>
    6b9a:	ldr	r2, [sp, #8]
    6b9c:	adds	r0, r3, r2
    6b9e:	ldr	r2, [sp, #4]
    6ba0:	add.w	r0, r0, #1073741824	; 0x40000000
    6ba4:	adds	r1, r2, r5
    6ba6:	add.w	ip, lr, r2
    6baa:	ldr	r2, [sp, #660]	; 0x294
    6bac:	subs	r0, #1
    6bae:	add.w	r0, r2, r0, lsl #2
    6bb2:	add	r2, sp, #104	; 0x68
    6bb4:	add.w	r1, r2, r1, lsl #3
    6bb8:	add.w	ip, r2, ip, lsl #3
    6bbc:	add	r2, sp, #424	; 0x1a8
    6bbe:	add.w	r5, r2, r3, lsl #3
    6bc2:	ldr.w	r3, [r0, #4]!
    6bc6:	vmov	s14, r3
    6bca:	vcvt.f64.s32	d7, s14
    6bce:	cmp	r7, #0
    6bd0:	vstmia	r1!, {d7}
    6bd4:	vldr	d7, [pc, #40]	; 6c00 <__kernel_rem_pio2+0x2b8>
    6bd8:	blt.n	6bee <__kernel_rem_pio2+0x2a6>
    6bda:	mov	r3, r9
    6bdc:	mov	r2, r1
    6bde:	vldmia	r3!, {d5}
    6be2:	vldmdb	r2!, {d6}
    6be6:	cmp	r3, r4
    6be8:	vfma.f64	d7, d5, d6
    6bec:	bne.n	6bde <__kernel_rem_pio2+0x296>
    6bee:	cmp	r1, ip
    6bf0:	vstmia	r5!, {d7}
    6bf4:	bne.n	6bc2 <__kernel_rem_pio2+0x27a>
    6bf6:	mov	r5, lr
    6bf8:	b.n	6a2c <__kernel_rem_pio2+0xe4>
    6bfa:	nop
    6bfc:	nop.w
	...
    6c0c:	.word	0x3e700000
    6c10:	.word	0x00000000
    6c14:	.word	0x41700000
    6c18:	.word	0x20000dbc
    6c1c:	.word	0x2aaaaaab
    6c20:	vmov.f64	d0, #112	; 0x3f800000  1.0
    6c24:	vsub.f64	d10, d0, d10
    6c28:	cmp	r0, #0
    6c2a:	beq.n	6b40 <__kernel_rem_pio2+0x1f8>
    6c2c:	mov	r0, sl
    6c2e:	str	r1, [sp, #20]
    6c30:	bl	7cb8 <scalbn>
    6c34:	vsub.f64	d10, d10, d0
    6c38:	vcmp.f64	d10, #0.0
    6c3c:	vmrs	APSR_nzcv, fpscr
    6c40:	ldr	r1, [sp, #20]
    6c42:	beq.n	6b4a <__kernel_rem_pio2+0x202>
    6c44:	vmov.f64	d0, d10
    6c48:	rsb	r0, sl, #0
    6c4c:	vmov	s22, fp
    6c50:	mov	r9, r1
    6c52:	ldr.w	fp, [sp, #16]
    6c56:	bl	7cb8 <scalbn>
    6c5a:	vldr	d6, [pc, #836]	; 6fa0 <__kernel_rem_pio2+0x658>
    6c5e:	vcmpe.f64	d0, d6
    6c62:	vmrs	APSR_nzcv, fpscr
    6c66:	blt.w	6f4e <__kernel_rem_pio2+0x606>
    6c6a:	vldr	d7, [pc, #828]	; 6fa8 <__kernel_rem_pio2+0x660>
    6c6e:	vmul.f64	d7, d0, d7
    6c72:	vcvt.s32.f64	s14, d7
    6c76:	add	r1, sp, #24
    6c78:	vcvt.f64.s32	d5, s14
    6c7c:	vfms.f64	d0, d5, d6
    6c80:	vcvt.s32.f64	s0, d0
    6c84:	adds	r3, r5, #1
    6c86:	vmov	r2, s0
    6c8a:	str.w	r2, [r1, r5, lsl #2]
    6c8e:	vmov	r2, s14
    6c92:	str.w	r2, [r1, r3, lsl #2]
    6c96:	add.w	sl, sl, #24
    6c9a:	vmov.f64	d0, #112	; 0x3f800000  1.0
    6c9e:	mov	r0, sl
    6ca0:	str	r3, [sp, #4]
    6ca2:	bl	7cb8 <scalbn>
    6ca6:	ldr	r3, [sp, #4]
    6ca8:	cmp	r3, #0
    6caa:	blt.w	6f6a <__kernel_rem_pio2+0x622>
    6cae:	add	r4, sp, #424	; 0x1a8
    6cb0:	lsls	r7, r3, #3
    6cb2:	add	r2, sp, #24
    6cb4:	vldr	d6, [pc, #752]	; 6fa8 <__kernel_rem_pio2+0x660>
    6cb8:	add.w	r2, r2, r3, lsl #2
    6cbc:	add.w	ip, r4, r7
    6cc0:	adds	r2, #4
    6cc2:	add.w	r0, ip, #8
    6cc6:	vldmdb	r2!, {s14}
    6cca:	vcvt.f64.s32	d7, s14
    6cce:	vmul.f64	d7, d7, d0
    6cd2:	vstmdb	r0!, {d7}
    6cd6:	vmul.f64	d0, d0, d6
    6cda:	cmp	r0, r4
    6cdc:	bne.n	6cc6 <__kernel_rem_pio2+0x37e>
    6cde:	add.w	r8, sp, #416	; 0x1a0
    6ce2:	movs	r5, #0
    6ce4:	add.w	lr, sp, #264	; 0x108
    6ce8:	cmp	r6, #0
    6cea:	blt.w	6f12 <__kernel_rem_pio2+0x5ca>
    6cee:	ldr	r0, [pc, #720]	; (6fc0 <__kernel_rem_pio2+0x678>)
    6cf0:	mov	r1, ip
    6cf2:	vldr	d6, [pc, #700]	; 6fb0 <__kernel_rem_pio2+0x668>
    6cf6:	vldr	d7, [pc, #704]	; 6fb8 <__kernel_rem_pio2+0x670>
    6cfa:	movs	r2, #0
    6cfc:	b.n	6d06 <__kernel_rem_pio2+0x3be>
    6cfe:	cmp	r5, r2
    6d00:	blt.n	6d14 <__kernel_rem_pio2+0x3cc>
    6d02:	vldmia	r0!, {d6}
    6d06:	vldmia	r1!, {d5}
    6d0a:	adds	r2, #1
    6d0c:	cmp	r6, r2
    6d0e:	vfma.f64	d7, d5, d6
    6d12:	bge.n	6cfe <__kernel_rem_pio2+0x3b6>
    6d14:	sub.w	ip, ip, #8
    6d18:	add.w	r2, lr, r5, lsl #3
    6d1c:	cmp	ip, r8
    6d1e:	vstr	d7, [r2]
    6d22:	add.w	r5, r5, #1
    6d26:	bne.n	6ce8 <__kernel_rem_pio2+0x3a0>
    6d28:	ldr	r2, [sp, #656]	; 0x290
    6d2a:	cmp	r2, #3
    6d2c:	bhi.w	6e8a <__kernel_rem_pio2+0x542>
    6d30:	tbb	[pc, r2]
    6d34:	.word	0x50b5b5dd
    6d38:	bne.n	6d5c <__kernel_rem_pio2+0x414>
    6d3a:	subs	r3, r5, #1
    6d3c:	add	r2, sp, #24
    6d3e:	ldr.w	r1, [r2, r3, lsl #2]
    6d42:	asrs	r1, r1, #23
    6d44:	b.n	6ac8 <__kernel_rem_pio2+0x180>
    6d46:	subs	r2, r5, #1
    6d48:	add	r3, sp, #24
    6d4a:	add.w	lr, sp, #24
    6d4e:	ldr.w	r3, [r3, r2, lsl #2]
    6d52:	ubfx	r3, r3, #0, #23
    6d56:	str.w	r3, [lr, r2, lsl #2]
    6d5a:	b.n	6b3c <__kernel_rem_pio2+0x1f4>
    6d5c:	vmov.f64	d7, #96	; 0x3f000000  0.5
    6d60:	vcmpe.f64	d10, d7
    6d64:	vmrs	APSR_nzcv, fpscr
    6d68:	bge.n	6d82 <__kernel_rem_pio2+0x43a>
    6d6a:	movs	r1, #0
    6d6c:	b.n	6b40 <__kernel_rem_pio2+0x1f8>
    6d6e:	vldr	d7, [pc, #584]	; 6fb8 <__kernel_rem_pio2+0x670>
    6d72:	vstmia	r0!, {d7}
    6d76:	cmp	r0, lr
    6d78:	add.w	r5, r5, #1
    6d7c:	bne.w	69d8 <__kernel_rem_pio2+0x90>
    6d80:	b.n	6a08 <__kernel_rem_pio2+0xc0>
    6d82:	cmp	r5, #0
    6d84:	add.w	fp, fp, #1
    6d88:	it	gt
    6d8a:	movgt	r1, #2
    6d8c:	bgt.w	6ad6 <__kernel_rem_pio2+0x18e>
    6d90:	vmov.f64	d7, #112	; 0x3f800000  1.0
    6d94:	movs	r1, #2
    6d96:	vsub.f64	d10, d7, d10
    6d9a:	b.n	6b40 <__kernel_rem_pio2+0x1f8>
    6d9c:	add	r2, sp, #24
    6d9e:	vmov	s22, fp
    6da2:	ldr.w	r2, [r2, lr, lsl #2]
    6da6:	ldr.w	fp, [sp, #16]
    6daa:	mov	r3, lr
    6dac:	mov	r9, r1
    6dae:	sub.w	sl, sl, #24
    6db2:	cmp	r2, #0
    6db4:	bne.w	6c9a <__kernel_rem_pio2+0x352>
    6db8:	add.w	r2, lr, #1073741824	; 0x40000000
    6dbc:	subs	r2, #1
    6dbe:	add	r1, sp, #24
    6dc0:	add.w	r2, r1, r2, lsl #2
    6dc4:	ldr.w	r1, [r2], #-4
    6dc8:	subs	r3, #1
    6dca:	sub.w	sl, sl, #24
    6dce:	cmp	r1, #0
    6dd0:	beq.n	6dc4 <__kernel_rem_pio2+0x47c>
    6dd2:	b.n	6c9a <__kernel_rem_pio2+0x352>
    6dd4:	cmp	r3, #0
    6dd6:	ble.w	6f64 <__kernel_rem_pio2+0x61c>
    6dda:	add.w	r2, r3, #536870912	; 0x20000000
    6dde:	subs	r2, #1
    6de0:	add.w	r4, lr, r7
    6de4:	lsls	r0, r2, #3
    6de6:	vldr	d7, [r4]
    6dea:	add.w	r4, r0, #8
    6dee:	adds	r0, #16
    6df0:	add	r4, lr
    6df2:	add	r0, lr
    6df4:	add	r5, sp, #272	; 0x110
    6df6:	vldmdb	r4!, {d6}
    6dfa:	vadd.f64	d5, d6, d7
    6dfe:	vsub.f64	d6, d6, d5
    6e02:	vadd.f64	d7, d6, d7
    6e06:	vstmdb	r0!, {d7}
    6e0a:	vmov.f64	d7, d5
    6e0e:	cmp	r0, r5
    6e10:	vstr	d5, [r4]
    6e14:	bne.n	6df6 <__kernel_rem_pio2+0x4ae>
    6e16:	cmp	r3, #1
    6e18:	ble.w	6f64 <__kernel_rem_pio2+0x61c>
    6e1c:	lsls	r2, r2, #3
    6e1e:	add	r7, lr
    6e20:	add.w	r0, r2, #16
    6e24:	vldr	d7, [r7]
    6e28:	adds	r2, #8
    6e2a:	add	r0, lr
    6e2c:	add.w	r3, lr, r2
    6e30:	add	r4, sp, #280	; 0x118
    6e32:	mov	r2, r0
    6e34:	vldmdb	r3!, {d6}
    6e38:	vadd.f64	d5, d7, d6
    6e3c:	vsub.f64	d6, d6, d5
    6e40:	vadd.f64	d7, d6, d7
    6e44:	vstmdb	r2!, {d7}
    6e48:	vmov.f64	d7, d5
    6e4c:	cmp	r4, r2
    6e4e:	vstr	d5, [r3]
    6e52:	bne.n	6e34 <__kernel_rem_pio2+0x4ec>
    6e54:	vldr	d7, [pc, #352]	; 6fb8 <__kernel_rem_pio2+0x670>
    6e58:	vldmdb	r0!, {d6}
    6e5c:	cmp	r4, r0
    6e5e:	vadd.f64	d7, d7, d6
    6e62:	bne.n	6e58 <__kernel_rem_pio2+0x510>
    6e64:	mov	r3, r9
    6e66:	cmp	r3, #0
    6e68:	beq.n	6f38 <__kernel_rem_pio2+0x5f0>
    6e6a:	vneg.f64	d7, d7
    6e6e:	vldr	d5, [lr]
    6e72:	vldr	d6, [lr, #8]
    6e76:	vneg.f64	d5, d5
    6e7a:	vstr	d5, [fp]
    6e7e:	vstr	d7, [fp, #16]
    6e82:	vneg.f64	d7, d6
    6e86:	vstr	d7, [fp, #8]
    6e8a:	vmov	r3, s22
    6e8e:	and.w	r0, r3, #7
    6e92:	add.w	sp, sp, #588	; 0x24c
    6e96:	vpop	{d8-d11}
    6e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e9e:	vldr	d7, [pc, #280]	; 6fb8 <__kernel_rem_pio2+0x670>
    6ea2:	add.w	r2, r7, #8
    6ea6:	add	r2, lr
    6ea8:	vldmdb	r2!, {d6}
    6eac:	cmp	r2, lr
    6eae:	vadd.f64	d7, d7, d6
    6eb2:	bne.n	6ea8 <__kernel_rem_pio2+0x560>
    6eb4:	mov	r2, r9
    6eb6:	cbz	r2, 6f22 <__kernel_rem_pio2+0x5da>
    6eb8:	vneg.f64	d5, d7
    6ebc:	vldr	d6, [lr]
    6ec0:	cmp	r3, #0
    6ec2:	vstr	d5, [fp]
    6ec6:	vsub.f64	d7, d6, d7
    6eca:	ble.n	6ee4 <__kernel_rem_pio2+0x59c>
    6ecc:	add	r0, sp, #272	; 0x110
    6ece:	movs	r2, #1
    6ed0:	vldmia	r0!, {d6}
    6ed4:	adds	r2, #1
    6ed6:	cmp	r3, r2
    6ed8:	vadd.f64	d7, d7, d6
    6edc:	bge.n	6ed0 <__kernel_rem_pio2+0x588>
    6ede:	mov	r3, r9
    6ee0:	cmp	r3, #0
    6ee2:	beq.n	6e86 <__kernel_rem_pio2+0x53e>
    6ee4:	vneg.f64	d7, d7
    6ee8:	vstr	d7, [fp, #8]
    6eec:	b.n	6e8a <__kernel_rem_pio2+0x542>
    6eee:	vldr	d7, [pc, #200]	; 6fb8 <__kernel_rem_pio2+0x670>
    6ef2:	adds	r7, #8
    6ef4:	add	lr, r7
    6ef6:	vldmdb	lr!, {d6}
    6efa:	subs	r3, #1
    6efc:	adds	r2, r3, #1
    6efe:	vadd.f64	d7, d7, d6
    6f02:	bne.n	6ef6 <__kernel_rem_pio2+0x5ae>
    6f04:	mov	r3, r9
    6f06:	cbz	r3, 6f0c <__kernel_rem_pio2+0x5c4>
    6f08:	vneg.f64	d7, d7
    6f0c:	vstr	d7, [fp]
    6f10:	b.n	6e8a <__kernel_rem_pio2+0x542>
    6f12:	vldr	d7, [pc, #164]	; 6fb8 <__kernel_rem_pio2+0x670>
    6f16:	b.n	6d14 <__kernel_rem_pio2+0x3cc>
    6f18:	mov.w	lr, #1
    6f1c:	b.n	6b92 <__kernel_rem_pio2+0x24a>
    6f1e:	movs	r0, #0
    6f20:	b.n	6b14 <__kernel_rem_pio2+0x1cc>
    6f22:	vldr	d6, [lr]
    6f26:	cmp	r3, #0
    6f28:	vstr	d7, [fp]
    6f2c:	vsub.f64	d7, d6, d7
    6f30:	bgt.n	6ecc <__kernel_rem_pio2+0x584>
    6f32:	vstr	d7, [fp, #8]
    6f36:	b.n	6e8a <__kernel_rem_pio2+0x542>
    6f38:	ldrd	r0, r1, [lr]
    6f3c:	ldrd	r2, r3, [lr, #8]
    6f40:	vstr	d7, [fp, #16]
    6f44:	strd	r0, r1, [fp]
    6f48:	strd	r2, r3, [fp, #8]
    6f4c:	b.n	6e8a <__kernel_rem_pio2+0x542>
    6f4e:	vcvt.s32.f64	s0, d0
    6f52:	add	r1, sp, #24
    6f54:	vmov	r2, s0
    6f58:	mov	r3, r5
    6f5a:	str.w	r2, [r1, r5, lsl #2]
    6f5e:	b.n	6c9a <__kernel_rem_pio2+0x352>
    6f60:	add.w	lr, sp, #264	; 0x108
    6f64:	vldr	d7, [pc, #80]	; 6fb8 <__kernel_rem_pio2+0x670>
    6f68:	b.n	6e64 <__kernel_rem_pio2+0x51c>
    6f6a:	ldr	r2, [sp, #656]	; 0x290
    6f6c:	cmp	r2, #3
    6f6e:	bhi.n	6e8a <__kernel_rem_pio2+0x542>
    6f70:	add	r1, pc, #4	; (adr r1, 6f78 <__kernel_rem_pio2+0x630>)
    6f72:	ldr.w	pc, [r1, r2, lsl #2]
    6f76:	nop
    6f78:	.word	0x00006f99
    6f7c:	.word	0x00006f8f
    6f80:	.word	0x00006f8f
    6f84:	.word	0x00006f61
    6f88:	ldr	r3, [sp, #4]
    6f8a:	lsls	r4, r3, #3
    6f8c:	b.n	6a08 <__kernel_rem_pio2+0xc0>
    6f8e:	vldr	d7, [pc, #40]	; 6fb8 <__kernel_rem_pio2+0x670>
    6f92:	add.w	lr, sp, #264	; 0x108
    6f96:	b.n	6eb4 <__kernel_rem_pio2+0x56c>
    6f98:	vldr	d7, [pc, #28]	; 6fb8 <__kernel_rem_pio2+0x670>
    6f9c:	b.n	6f04 <__kernel_rem_pio2+0x5bc>
    6f9e:	nop
    6fa0:	.word	0x00000000
    6fa4:	.word	0x41700000
    6fa8:	.word	0x00000000
    6fac:	.word	0x3e700000
    6fb0:	.word	0x40000000
    6fb4:	.word	0x3ff921fb
	...
    6fc0:	.word	0x20000dd8
    6fc4:	.word	0x00000000

00006fc8 <__kernel_sin>:
    6fc8:	vmov	r3, s1
    6fcc:	bic.w	r3, r3, #2147483648	; 0x80000000
    6fd0:	cmp.w	r3, #1044381696	; 0x3e400000
    6fd4:	bge.n	6fe0 <__kernel_sin+0x18>
    6fd6:	vcvt.s32.f64	s15, d0
    6fda:	vmov	r3, s15
    6fde:	cbz	r3, 702a <__kernel_sin+0x62>
    6fe0:	vmul.f64	d7, d0, d0
    6fe4:	vmul.f64	d4, d0, d7
    6fe8:	vldr	d5, [pc, #84]	; 7040 <__kernel_sin+0x78>
    6fec:	vldr	d6, [pc, #88]	; 7048 <__kernel_sin+0x80>
    6ff0:	vldr	d3, [pc, #92]	; 7050 <__kernel_sin+0x88>
    6ff4:	vfma.f64	d6, d7, d5
    6ff8:	vldr	d5, [pc, #92]	; 7058 <__kernel_sin+0x90>
    6ffc:	vfma.f64	d3, d7, d6
    7000:	vldr	d6, [pc, #92]	; 7060 <__kernel_sin+0x98>
    7004:	vfma.f64	d5, d7, d3
    7008:	vfma.f64	d6, d7, d5
    700c:	cbz	r0, 702c <__kernel_sin+0x64>
    700e:	vnmul.f64	d6, d6, d4
    7012:	vmov.f64	d3, #96	; 0x3f000000  0.5
    7016:	vldr	d5, [pc, #80]	; 7068 <__kernel_sin+0xa0>
    701a:	vfma.f64	d6, d1, d3
    701e:	vfnms.f64	d1, d7, d6
    7022:	vfma.f64	d1, d4, d5
    7026:	vsub.f64	d0, d0, d1
    702a:	bx	lr
    702c:	vldr	d5, [pc, #64]	; 7070 <__kernel_sin+0xa8>
    7030:	vfma.f64	d5, d7, d6
    7034:	vfma.f64	d0, d4, d5
    7038:	bx	lr
    703a:	nop
    703c:	nop.w
    7040:	.word	0x5acfd57c
    7044:	.word	0x3de5d93a
    7048:	.word	0x8a2b9ceb
    704c:	.word	0xbe5ae5e6
    7050:	.word	0x57b1fe7d
    7054:	.word	0x3ec71de3
    7058:	.word	0x19c161d5
    705c:	.word	0xbf2a01a0
    7060:	.word	0x1110f8a6
    7064:	.word	0x3f811111
    7068:	.word	0x55555549
    706c:	.word	0x3fc55555
    7070:	.word	0x55555549
    7074:	.word	0xbfc55555

00007078 <__kernel_cosf>:
    7078:	vmov	r3, s0
    707c:	bic.w	r3, r3, #2147483648	; 0x80000000
    7080:	cmp.w	r3, #838860800	; 0x32000000
    7084:	bge.n	70e0 <__kernel_cosf+0x68>
    7086:	vcvt.s32.f32	s15, s0
    708a:	vmov	r3, s15
    708e:	cmp	r3, #0
    7090:	beq.n	7154 <__kernel_cosf+0xdc>
    7092:	vmul.f32	s14, s0, s0
    7096:	vldr	s9, [pc, #196]	; 715c <__kernel_cosf+0xe4>
    709a:	vldr	s10, [pc, #196]	; 7160 <__kernel_cosf+0xe8>
    709e:	vldr	s11, [pc, #196]	; 7164 <__kernel_cosf+0xec>
    70a2:	vldr	s12, [pc, #196]	; 7168 <__kernel_cosf+0xf0>
    70a6:	vldr	s15, [pc, #196]	; 716c <__kernel_cosf+0xf4>
    70aa:	vldr	s13, [pc, #196]	; 7170 <__kernel_cosf+0xf8>
    70ae:	vfma.f32	s10, s14, s9
    70b2:	vfma.f32	s11, s14, s10
    70b6:	vfma.f32	s12, s14, s11
    70ba:	vfma.f32	s15, s14, s12
    70be:	vfma.f32	s13, s14, s15
    70c2:	vmul.f32	s13, s13, s14
    70c6:	vnmul.f32	s1, s1, s0
    70ca:	vmov.f32	s12, #96	; 0x3f000000  0.5
    70ce:	vfma.f32	s1, s14, s13
    70d2:	vmov.f32	s15, #112	; 0x3f800000  1.0
    70d6:	vfnms.f32	s1, s14, s12
    70da:	vsub.f32	s0, s15, s1
    70de:	bx	lr
    70e0:	vmul.f32	s14, s0, s0
    70e4:	vldr	s9, [pc, #116]	; 715c <__kernel_cosf+0xe4>
    70e8:	vldr	s10, [pc, #116]	; 7160 <__kernel_cosf+0xe8>
    70ec:	vldr	s11, [pc, #116]	; 7164 <__kernel_cosf+0xec>
    70f0:	vldr	s12, [pc, #116]	; 7168 <__kernel_cosf+0xf0>
    70f4:	vldr	s15, [pc, #116]	; 716c <__kernel_cosf+0xf4>
    70f8:	vldr	s13, [pc, #116]	; 7170 <__kernel_cosf+0xf8>
    70fc:	ldr	r2, [pc, #116]	; (7174 <__kernel_cosf+0xfc>)
    70fe:	vfma.f32	s10, s14, s9
    7102:	cmp	r3, r2
    7104:	vfma.f32	s11, s14, s10
    7108:	vfma.f32	s12, s14, s11
    710c:	vfma.f32	s15, s14, s12
    7110:	vfma.f32	s13, s14, s15
    7114:	vmul.f32	s13, s13, s14
    7118:	ble.n	70c6 <__kernel_cosf+0x4e>
    711a:	ldr	r2, [pc, #92]	; (7178 <__kernel_cosf+0x100>)
    711c:	cmp	r3, r2
    711e:	bgt.n	714a <__kernel_cosf+0xd2>
    7120:	add.w	r3, r3, #4278190080	; 0xff000000
    7124:	vmov	s15, r3
    7128:	vmov.f32	s12, #112	; 0x3f800000  1.0
    712c:	vsub.f32	s12, s12, s15
    7130:	vnmul.f32	s1, s1, s0
    7134:	vmov.f32	s11, #96	; 0x3f000000  0.5
    7138:	vfma.f32	s1, s14, s13
    713c:	vfnms.f32	s15, s14, s11
    7140:	vsub.f32	s15, s15, s1
    7144:	vsub.f32	s0, s12, s15
    7148:	bx	lr
    714a:	vmov.f32	s12, #103	; 0x3f380000  0.7187500
    714e:	vmov.f32	s15, #82	; 0x3e900000  0.2812500
    7152:	b.n	7130 <__kernel_cosf+0xb8>
    7154:	vmov.f32	s0, #112	; 0x3f800000  1.0
    7158:	bx	lr
    715a:	nop
    715c:	.word	0xad47d74e
    7160:	.word	0x310f74f6
    7164:	.word	0xb493f27c
    7168:	.word	0x37d00d01
    716c:	.word	0xbab60b61
    7170:	.word	0x3d2aaaab
    7174:	.word	0x3e999999
    7178:	.word	0x3f480000

0000717c <__kernel_rem_pio2f>:
    717c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7180:	vpush	{d8-d9}
    7184:	sub	sp, #348	; 0x15c
    7186:	subs	r7, r3, #1
    7188:	ldr	r4, [pc, #656]	; (741c <__kernel_rem_pio2f+0x2a0>)
    718a:	ldr	r5, [sp, #400]	; 0x190
    718c:	str	r3, [sp, #4]
    718e:	subs	r3, r2, #3
    7190:	it	mi
    7192:	addmi	r3, r2, #4
    7194:	ldr.w	r6, [r4, r5, lsl #2]
    7198:	asrs	r3, r3, #3
    719a:	bic.w	r3, r3, r3, asr #31
    719e:	add.w	sl, r3, #1
    71a2:	mov	fp, r1
    71a4:	adds	r1, r6, r7
    71a6:	str	r3, [sp, #8]
    71a8:	mov	r9, r0
    71aa:	sub.w	sl, r2, sl, lsl #3
    71ae:	sub.w	r3, r3, r7
    71b2:	bmi.n	71de <__kernel_rem_pio2f+0x62>
    71b4:	add	r1, r3
    71b6:	ldr	r0, [sp, #404]	; 0x194
    71b8:	adds	r1, #1
    71ba:	add	r2, sp, #104	; 0x68
    71bc:	cmp	r3, #0
    71be:	itet	ge
    71c0:	ldrge.w	r4, [r0, r3, lsl #2]
    71c4:	vldrlt	s15, [pc, #600]	; 7420 <__kernel_rem_pio2f+0x2a4>
    71c8:	vmovge	s15, r4
    71cc:	add.w	r3, r3, #1
    71d0:	it	ge
    71d2:	vcvtge.f32.s32	s15, s15
    71d6:	cmp	r3, r1
    71d8:	vstmia	r2!, {s15}
    71dc:	bne.n	71bc <__kernel_rem_pio2f+0x40>
    71de:	cmp	r6, #0
    71e0:	blt.w	778c <__kernel_rem_pio2f+0x610>
    71e4:	ldr	r3, [sp, #4]
    71e6:	add	r0, sp, #264	; 0x108
    71e8:	add.w	lr, r6, #1
    71ec:	lsls	r4, r3, #2
    71ee:	add.w	lr, r0, lr, lsl #2
    71f2:	add.w	r1, r9, r4
    71f6:	mov	r5, r7
    71f8:	cmp	r7, #0
    71fa:	blt.w	757c <__kernel_rem_pio2f+0x400>
    71fe:	add	r3, sp, #104	; 0x68
    7200:	add.w	r2, r3, r5, lsl #2
    7204:	vldr	s15, [pc, #536]	; 7420 <__kernel_rem_pio2f+0x2a4>
    7208:	adds	r2, #4
    720a:	mov	r3, r9
    720c:	vldmia	r3!, {s13}
    7210:	vldmdb	r2!, {s14}
    7214:	cmp	r3, r1
    7216:	vfma.f32	s15, s13, s14
    721a:	bne.n	720c <__kernel_rem_pio2f+0x90>
    721c:	vstmia	r0!, {s15}
    7220:	cmp	r0, lr
    7222:	add.w	r5, r5, #1
    7226:	bne.n	71f8 <__kernel_rem_pio2f+0x7c>
    7228:	add.w	r3, r6, #1073741824	; 0x40000000
    722c:	subs	r3, #2
    722e:	lsls	r3, r3, #2
    7230:	add	r2, sp, #24
    7232:	add.w	r8, r3, #4
    7236:	vldr	s17, [pc, #496]	; 7428 <__kernel_rem_pio2f+0x2ac>
    723a:	vldr	s16, [pc, #488]	; 7424 <__kernel_rem_pio2f+0x2a8>
    723e:	str.w	fp, [sp, #16]
    7242:	add	r3, r2
    7244:	add	r4, r9
    7246:	add	r8, r2
    7248:	str	r3, [sp, #12]
    724a:	mov	r5, r6
    724c:	add	r3, sp, #344	; 0x158
    724e:	add.w	r3, r3, r5, lsl #2
    7252:	cmp	r5, #0
    7254:	vldr	s0, [r3, #-80]	; 0xffffffb0
    7258:	ble.n	728e <__kernel_rem_pio2f+0x112>
    725a:	add	r1, sp, #264	; 0x108
    725c:	add.w	r3, r1, r5, lsl #2
    7260:	add	r2, sp, #20
    7262:	vmul.f32	s15, s0, s17
    7266:	vmov.f32	s14, s0
    726a:	vcvt.s32.f32	s15, s15
    726e:	vldmdb	r3!, {s13}
    7272:	vcvt.f32.s32	s15, s15
    7276:	cmp	r3, r1
    7278:	vfms.f32	s14, s15, s16
    727c:	vadd.f32	s0, s15, s13
    7280:	vcvt.s32.f32	s14, s14
    7284:	vmov	r0, s14
    7288:	str.w	r0, [r2, #4]!
    728c:	bne.n	7262 <__kernel_rem_pio2f+0xe6>
    728e:	mov	r0, sl
    7290:	bl	802c <scalbnf>
    7294:	vmov.f32	s18, s0
    7298:	vmov.f32	s0, #64	; 0x3e000000  0.125
    729c:	vmul.f32	s0, s18, s0
    72a0:	bl	7f9c <floorf>
    72a4:	vmov.f32	s15, #32	; 0x41000000  8.0
    72a8:	vfms.f32	s18, s0, s15
    72ac:	cmp.w	sl, #0
    72b0:	vcvt.s32.f32	s15, s18
    72b4:	vmov	fp, s15
    72b8:	vcvt.f32.s32	s15, s15
    72bc:	vsub.f32	s18, s18, s15
    72c0:	ble.w	7546 <__kernel_rem_pio2f+0x3ca>
    72c4:	add.w	lr, r5, #4294967295
    72c8:	add	r3, sp, #24
    72ca:	rsb	r2, sl, #8
    72ce:	ldr.w	r3, [r3, lr, lsl #2]
    72d2:	asr.w	r0, r3, r2
    72d6:	lsl.w	r2, r0, r2
    72da:	add	r1, sp, #24
    72dc:	subs	r3, r3, r2
    72de:	rsb	r2, sl, #7
    72e2:	str.w	r3, [r1, lr, lsl #2]
    72e6:	add	fp, r0
    72e8:	asr.w	r1, r3, r2
    72ec:	cmp	r1, #0
    72ee:	ble.n	7360 <__kernel_rem_pio2f+0x1e4>
    72f0:	cmp	r5, #0
    72f2:	add.w	fp, fp, #1
    72f6:	ble.w	7742 <__kernel_rem_pio2f+0x5c6>
    72fa:	movs	r2, #0
    72fc:	mov	r0, r2
    72fe:	add.w	lr, sp, #20
    7302:	mov	ip, r1
    7304:	b.n	7318 <__kernel_rem_pio2f+0x19c>
    7306:	rsb	r1, r3, #256	; 0x100
    730a:	cbz	r3, 7312 <__kernel_rem_pio2f+0x196>
    730c:	str.w	r1, [lr]
    7310:	movs	r0, #1
    7312:	adds	r2, #1
    7314:	cmp	r5, r2
    7316:	ble.n	7332 <__kernel_rem_pio2f+0x1b6>
    7318:	ldr.w	r3, [lr, #4]!
    731c:	cmp	r0, #0
    731e:	beq.n	7306 <__kernel_rem_pio2f+0x18a>
    7320:	adds	r2, #1
    7322:	rsb	r3, r3, #255	; 0xff
    7326:	cmp	r5, r2
    7328:	str.w	r3, [lr]
    732c:	mov.w	r0, #1
    7330:	bgt.n	7318 <__kernel_rem_pio2f+0x19c>
    7332:	mov	r1, ip
    7334:	cmp.w	sl, #0
    7338:	ble.n	735c <__kernel_rem_pio2f+0x1e0>
    733a:	cmp.w	sl, #1
    733e:	beq.w	7554 <__kernel_rem_pio2f+0x3d8>
    7342:	cmp.w	sl, #2
    7346:	bne.n	735c <__kernel_rem_pio2f+0x1e0>
    7348:	subs	r2, r5, #1
    734a:	add	r3, sp, #24
    734c:	add.w	lr, sp, #24
    7350:	ldr.w	r3, [r3, r2, lsl #2]
    7354:	and.w	r3, r3, #63	; 0x3f
    7358:	str.w	r3, [lr, r2, lsl #2]
    735c:	cmp	r1, #2
    735e:	beq.n	742c <__kernel_rem_pio2f+0x2b0>
    7360:	vcmp.f32	s18, #0.0
    7364:	vmrs	APSR_nzcv, fpscr
    7368:	bne.n	7450 <__kernel_rem_pio2f+0x2d4>
    736a:	add.w	lr, r5, #4294967295
    736e:	cmp	r6, lr
    7370:	bgt.n	7392 <__kernel_rem_pio2f+0x216>
    7372:	add.w	r2, r5, #1073741824	; 0x40000000
    7376:	subs	r2, #1
    7378:	add	r3, sp, #24
    737a:	add.w	r2, r3, r2, lsl #2
    737e:	movs	r0, #0
    7380:	ldr.w	r3, [r2], #-4
    7384:	cmp	r2, r8
    7386:	orr.w	r0, r0, r3
    738a:	bne.n	7380 <__kernel_rem_pio2f+0x204>
    738c:	cmp	r0, #0
    738e:	bne.w	75aa <__kernel_rem_pio2f+0x42e>
    7392:	subs	r3, r6, #1
    7394:	add	r2, sp, #24
    7396:	ldr.w	r3, [r2, r3, lsl #2]
    739a:	cmp	r3, #0
    739c:	bne.w	773c <__kernel_rem_pio2f+0x5c0>
    73a0:	ldr	r3, [sp, #12]
    73a2:	mov.w	lr, #1
    73a6:	ldr.w	r2, [r3], #-4
    73aa:	add.w	lr, lr, #1
    73ae:	cmp	r2, #0
    73b0:	beq.n	73a6 <__kernel_rem_pio2f+0x22a>
    73b2:	add	lr, r5
    73b4:	adds	r3, r5, #1
    73b6:	cmp	r3, lr
    73b8:	bgt.n	7416 <__kernel_rem_pio2f+0x29a>
    73ba:	ldr	r2, [sp, #8]
    73bc:	adds	r0, r3, r2
    73be:	ldr	r2, [sp, #4]
    73c0:	add.w	r0, r0, #1073741824	; 0x40000000
    73c4:	adds	r1, r2, r5
    73c6:	add.w	ip, lr, r2
    73ca:	ldr	r2, [sp, #404]	; 0x194
    73cc:	subs	r0, #1
    73ce:	add.w	r0, r2, r0, lsl #2
    73d2:	add	r2, sp, #104	; 0x68
    73d4:	add.w	r1, r2, r1, lsl #2
    73d8:	add.w	ip, r2, ip, lsl #2
    73dc:	add	r2, sp, #264	; 0x108
    73de:	add.w	r5, r2, r3, lsl #2
    73e2:	ldr.w	r3, [r0, #4]!
    73e6:	vmov	s15, r3
    73ea:	vcvt.f32.s32	s15, s15
    73ee:	cmp	r7, #0
    73f0:	vstmia	r1!, {s15}
    73f4:	vldr	s15, [pc, #40]	; 7420 <__kernel_rem_pio2f+0x2a4>
    73f8:	blt.n	740e <__kernel_rem_pio2f+0x292>
    73fa:	mov	r3, r9
    73fc:	mov	r2, r1
    73fe:	vldmia	r3!, {s13}
    7402:	vldmdb	r2!, {s14}
    7406:	cmp	r3, r4
    7408:	vfma.f32	s15, s13, s14
    740c:	bne.n	73fe <__kernel_rem_pio2f+0x282>
    740e:	cmp	r1, ip
    7410:	vstmia	r5!, {s15}
    7414:	bne.n	73e2 <__kernel_rem_pio2f+0x266>
    7416:	mov	r5, lr
    7418:	b.n	724c <__kernel_rem_pio2f+0xd0>
    741a:	nop
    741c:	.word	0x20000e10
    7420:	.word	0x00000000
    7424:	.word	0x43800000
    7428:	.word	0x3b800000
    742c:	vmov.f32	s0, #112	; 0x3f800000  1.0
    7430:	vsub.f32	s18, s0, s18
    7434:	cmp	r0, #0
    7436:	beq.n	7360 <__kernel_rem_pio2f+0x1e4>
    7438:	mov	r0, sl
    743a:	str	r1, [sp, #20]
    743c:	bl	802c <scalbnf>
    7440:	vsub.f32	s18, s18, s0
    7444:	ldr	r1, [sp, #20]
    7446:	vcmp.f32	s18, #0.0
    744a:	vmrs	APSR_nzcv, fpscr
    744e:	beq.n	736a <__kernel_rem_pio2f+0x1ee>
    7450:	vmov.f32	s0, s18
    7454:	rsb	r0, sl, #0
    7458:	vmov	s19, fp
    745c:	mov	r8, r1
    745e:	ldr.w	fp, [sp, #16]
    7462:	bl	802c <scalbnf>
    7466:	vldr	s14, [pc, #-68]	; 7424 <__kernel_rem_pio2f+0x2a8>
    746a:	vcmpe.f32	s0, s14
    746e:	vmrs	APSR_nzcv, fpscr
    7472:	blt.w	7758 <__kernel_rem_pio2f+0x5dc>
    7476:	vldr	s15, [pc, #-80]	; 7428 <__kernel_rem_pio2f+0x2ac>
    747a:	vmul.f32	s15, s0, s15
    747e:	add	r1, sp, #24
    7480:	vcvt.s32.f32	s15, s15
    7484:	adds	r3, r5, #1
    7486:	vcvt.f32.s32	s15, s15
    748a:	add.w	sl, sl, #8
    748e:	vfms.f32	s0, s15, s14
    7492:	vcvt.s32.f32	s15, s15
    7496:	vcvt.s32.f32	s0, s0
    749a:	vmov	r2, s0
    749e:	str.w	r2, [r1, r5, lsl #2]
    74a2:	vmov	r2, s15
    74a6:	str.w	r2, [r1, r3, lsl #2]
    74aa:	mov	r0, sl
    74ac:	vmov.f32	s0, #112	; 0x3f800000  1.0
    74b0:	str	r3, [sp, #4]
    74b2:	bl	802c <scalbnf>
    74b6:	ldr	r3, [sp, #4]
    74b8:	cmp	r3, #0
    74ba:	blt.w	7770 <__kernel_rem_pio2f+0x5f4>
    74be:	lsls	r7, r3, #2
    74c0:	add	r4, sp, #264	; 0x108
    74c2:	add	r2, sp, #24
    74c4:	adds	r0, r7, #4
    74c6:	add.w	lr, r4, r7
    74ca:	vldr	s14, [pc, #-164]	; 7428 <__kernel_rem_pio2f+0x2ac>
    74ce:	add	r0, r2
    74d0:	add.w	r2, lr, #4
    74d4:	vldmdb	r0!, {s15}
    74d8:	vcvt.f32.s32	s15, s15
    74dc:	vmul.f32	s15, s15, s0
    74e0:	vmul.f32	s0, s0, s14
    74e4:	vstmdb	r2!, {s15}
    74e8:	cmp	r2, r4
    74ea:	bne.n	74d4 <__kernel_rem_pio2f+0x358>
    74ec:	add.w	ip, sp, #260	; 0x104
    74f0:	movs	r5, #0
    74f2:	cmp	r6, #0
    74f4:	blt.w	7720 <__kernel_rem_pio2f+0x5a4>
    74f8:	ldr	r0, [pc, #676]	; (77a0 <__kernel_rem_pio2f+0x624>)
    74fa:	vldr	s14, [pc, #680]	; 77a4 <__kernel_rem_pio2f+0x628>
    74fe:	vldr	s15, [pc, #680]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7502:	mov	r1, lr
    7504:	movs	r2, #0
    7506:	b.n	7512 <__kernel_rem_pio2f+0x396>
    7508:	cmp	r5, r2
    750a:	blt.n	7520 <__kernel_rem_pio2f+0x3a4>
    750c:	adds	r0, #4
    750e:	vldr	s14, [r0]
    7512:	vldmia	r1!, {s13}
    7516:	adds	r2, #1
    7518:	cmp	r6, r2
    751a:	vfma.f32	s15, s13, s14
    751e:	bge.n	7508 <__kernel_rem_pio2f+0x38c>
    7520:	sub.w	lr, lr, #4
    7524:	add	r2, sp, #344	; 0x158
    7526:	add.w	r2, r2, r5, lsl #2
    752a:	cmp	ip, lr
    752c:	vstr	s15, [r2, #-160]	; 0xffffff60
    7530:	add.w	r5, r5, #1
    7534:	bne.n	74f2 <__kernel_rem_pio2f+0x376>
    7536:	ldr	r2, [sp, #400]	; 0x190
    7538:	cmp	r2, #3
    753a:	bhi.w	769a <__kernel_rem_pio2f+0x51e>
    753e:	tbb	[pc, r2]
    7542:	.short	0xb5dc
    7544:	.short	0x50b5
    7546:	bne.n	756a <__kernel_rem_pio2f+0x3ee>
    7548:	subs	r3, r5, #1
    754a:	add	r2, sp, #24
    754c:	ldr.w	r1, [r2, r3, lsl #2]
    7550:	asrs	r1, r1, #8
    7552:	b.n	72ec <__kernel_rem_pio2f+0x170>
    7554:	subs	r2, r5, #1
    7556:	add	r3, sp, #24
    7558:	add.w	lr, sp, #24
    755c:	ldr.w	r3, [r3, r2, lsl #2]
    7560:	and.w	r3, r3, #127	; 0x7f
    7564:	str.w	r3, [lr, r2, lsl #2]
    7568:	b.n	735c <__kernel_rem_pio2f+0x1e0>
    756a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    756e:	vcmpe.f32	s18, s15
    7572:	vmrs	APSR_nzcv, fpscr
    7576:	bge.n	7590 <__kernel_rem_pio2f+0x414>
    7578:	movs	r1, #0
    757a:	b.n	7360 <__kernel_rem_pio2f+0x1e4>
    757c:	vldr	s15, [pc, #552]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7580:	vstmia	r0!, {s15}
    7584:	cmp	r0, lr
    7586:	add.w	r5, r5, #1
    758a:	bne.w	71f8 <__kernel_rem_pio2f+0x7c>
    758e:	b.n	7228 <__kernel_rem_pio2f+0xac>
    7590:	cmp	r5, #0
    7592:	add.w	fp, fp, #1
    7596:	it	gt
    7598:	movgt	r1, #2
    759a:	bgt.w	72fa <__kernel_rem_pio2f+0x17e>
    759e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    75a2:	vsub.f32	s18, s15, s18
    75a6:	movs	r1, #2
    75a8:	b.n	7360 <__kernel_rem_pio2f+0x1e4>
    75aa:	add	r2, sp, #24
    75ac:	vmov	s19, fp
    75b0:	ldr.w	r2, [r2, lr, lsl #2]
    75b4:	ldr.w	fp, [sp, #16]
    75b8:	mov	r3, lr
    75ba:	mov	r8, r1
    75bc:	sub.w	sl, sl, #8
    75c0:	cmp	r2, #0
    75c2:	bne.w	74aa <__kernel_rem_pio2f+0x32e>
    75c6:	add.w	r2, lr, #1073741824	; 0x40000000
    75ca:	subs	r2, #1
    75cc:	add	r1, sp, #24
    75ce:	add.w	r2, r1, r2, lsl #2
    75d2:	ldr.w	r1, [r2], #-4
    75d6:	subs	r3, #1
    75d8:	sub.w	sl, sl, #8
    75dc:	cmp	r1, #0
    75de:	beq.n	75d2 <__kernel_rem_pio2f+0x456>
    75e0:	b.n	74aa <__kernel_rem_pio2f+0x32e>
    75e2:	cmp	r3, #0
    75e4:	ble.w	776a <__kernel_rem_pio2f+0x5ee>
    75e8:	add.w	r2, r3, #1073741824	; 0x40000000
    75ec:	subs	r2, #1
    75ee:	lsls	r0, r2, #2
    75f0:	add	r1, sp, #344	; 0x158
    75f2:	adds	r5, r1, r7
    75f4:	adds	r4, r0, #4
    75f6:	add	r1, sp, #184	; 0xb8
    75f8:	adds	r0, #8
    75fa:	vldr	s14, [r5, #-160]	; 0xffffff60
    75fe:	add	r4, r1
    7600:	add	r0, r1
    7602:	add	r5, sp, #188	; 0xbc
    7604:	vldmdb	r4!, {s15}
    7608:	vadd.f32	s13, s15, s14
    760c:	vsub.f32	s15, s15, s13
    7610:	vadd.f32	s15, s15, s14
    7614:	vmov.f32	s14, s13
    7618:	vstmdb	r0!, {s15}
    761c:	cmp	r0, r5
    761e:	vstr	s13, [r4]
    7622:	bne.n	7604 <__kernel_rem_pio2f+0x488>
    7624:	cmp	r3, #1
    7626:	ble.w	776a <__kernel_rem_pio2f+0x5ee>
    762a:	lsls	r2, r2, #2
    762c:	add	r3, sp, #344	; 0x158
    762e:	add	r7, r3
    7630:	add.w	r0, r2, #8
    7634:	add	r3, sp, #184	; 0xb8
    7636:	add	r0, r3
    7638:	adds	r2, #4
    763a:	vldr	s14, [r7, #-160]	; 0xffffff60
    763e:	add	r3, r2
    7640:	add	r4, sp, #192	; 0xc0
    7642:	mov	r2, r0
    7644:	vldmdb	r3!, {s15}
    7648:	vadd.f32	s13, s14, s15
    764c:	vsub.f32	s15, s15, s13
    7650:	vadd.f32	s15, s15, s14
    7654:	vmov.f32	s14, s13
    7658:	vstmdb	r2!, {s15}
    765c:	cmp	r4, r2
    765e:	vstr	s13, [r3]
    7662:	bne.n	7644 <__kernel_rem_pio2f+0x4c8>
    7664:	vldr	s15, [pc, #320]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7668:	vldmdb	r0!, {s14}
    766c:	cmp	r4, r0
    766e:	vadd.f32	s15, s15, s14
    7672:	bne.n	7668 <__kernel_rem_pio2f+0x4ec>
    7674:	mov	r3, r8
    7676:	cmp	r3, #0
    7678:	beq.n	7746 <__kernel_rem_pio2f+0x5ca>
    767a:	vldr	s13, [sp, #184]	; 0xb8
    767e:	vldr	s14, [sp, #188]	; 0xbc
    7682:	vneg.f32	s15, s15
    7686:	vneg.f32	s13, s13
    768a:	vneg.f32	s14, s14
    768e:	vstr	s15, [fp, #8]
    7692:	vstr	s13, [fp]
    7696:	vstr	s14, [fp, #4]
    769a:	vmov	r3, s19
    769e:	and.w	r0, r3, #7
    76a2:	add	sp, #348	; 0x15c
    76a4:	vpop	{d8-d9}
    76a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76ac:	adds	r2, r7, #4
    76ae:	add	r0, sp, #184	; 0xb8
    76b0:	vldr	s15, [pc, #244]	; 77a8 <__kernel_rem_pio2f+0x62c>
    76b4:	add	r2, r0
    76b6:	vldmdb	r2!, {s14}
    76ba:	cmp	r2, r0
    76bc:	vadd.f32	s15, s15, s14
    76c0:	bne.n	76b6 <__kernel_rem_pio2f+0x53a>
    76c2:	mov	r2, r8
    76c4:	cbz	r2, 7726 <__kernel_rem_pio2f+0x5aa>
    76c6:	vldr	s13, [sp, #184]	; 0xb8
    76ca:	vneg.f32	s14, s15
    76ce:	cmp	r3, #0
    76d0:	vsub.f32	s15, s13, s15
    76d4:	vstr	s14, [fp]
    76d8:	ble.n	76f0 <__kernel_rem_pio2f+0x574>
    76da:	add	r0, sp, #188	; 0xbc
    76dc:	movs	r2, #1
    76de:	vldmia	r0!, {s14}
    76e2:	adds	r2, #1
    76e4:	cmp	r3, r2
    76e6:	vadd.f32	s15, s15, s14
    76ea:	bge.n	76de <__kernel_rem_pio2f+0x562>
    76ec:	mov	r3, r8
    76ee:	cbz	r3, 76f4 <__kernel_rem_pio2f+0x578>
    76f0:	vneg.f32	s15, s15
    76f4:	vstr	s15, [fp, #4]
    76f8:	b.n	769a <__kernel_rem_pio2f+0x51e>
    76fa:	add	r2, sp, #344	; 0x158
    76fc:	add	r2, r7
    76fe:	vldr	s15, [pc, #168]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7702:	subs	r2, #156	; 0x9c
    7704:	vldmdb	r2!, {s14}
    7708:	subs	r3, #1
    770a:	adds	r1, r3, #1
    770c:	vadd.f32	s15, s15, s14
    7710:	bne.n	7704 <__kernel_rem_pio2f+0x588>
    7712:	mov	r3, r8
    7714:	cbz	r3, 771a <__kernel_rem_pio2f+0x59e>
    7716:	vneg.f32	s15, s15
    771a:	vstr	s15, [fp]
    771e:	b.n	769a <__kernel_rem_pio2f+0x51e>
    7720:	vldr	s15, [pc, #132]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7724:	b.n	7520 <__kernel_rem_pio2f+0x3a4>
    7726:	vldr	s14, [sp, #184]	; 0xb8
    772a:	vstr	s15, [fp]
    772e:	cmp	r3, #0
    7730:	vsub.f32	s15, s14, s15
    7734:	bgt.n	76da <__kernel_rem_pio2f+0x55e>
    7736:	vstr	s15, [fp, #4]
    773a:	b.n	769a <__kernel_rem_pio2f+0x51e>
    773c:	mov.w	lr, #1
    7740:	b.n	73b2 <__kernel_rem_pio2f+0x236>
    7742:	movs	r0, #0
    7744:	b.n	7334 <__kernel_rem_pio2f+0x1b8>
    7746:	ldr	r2, [sp, #184]	; 0xb8
    7748:	ldr	r3, [sp, #188]	; 0xbc
    774a:	vstr	s15, [fp, #8]
    774e:	str.w	r2, [fp]
    7752:	str.w	r3, [fp, #4]
    7756:	b.n	769a <__kernel_rem_pio2f+0x51e>
    7758:	vcvt.s32.f32	s0, s0
    775c:	add	r1, sp, #24
    775e:	vmov	r2, s0
    7762:	mov	r3, r5
    7764:	str.w	r2, [r1, r5, lsl #2]
    7768:	b.n	74aa <__kernel_rem_pio2f+0x32e>
    776a:	vldr	s15, [pc, #60]	; 77a8 <__kernel_rem_pio2f+0x62c>
    776e:	b.n	7674 <__kernel_rem_pio2f+0x4f8>
    7770:	ldr	r2, [sp, #400]	; 0x190
    7772:	cmp	r2, #3
    7774:	bhi.n	769a <__kernel_rem_pio2f+0x51e>
    7776:	add	r1, pc, #4	; (adr r1, 777c <__kernel_rem_pio2f+0x600>)
    7778:	ldr.w	pc, [r1, r2, lsl #2]
    777c:	.word	0x00007799
    7780:	.word	0x00007793
    7784:	.word	0x00007793
    7788:	.word	0x0000776b
    778c:	ldr	r3, [sp, #4]
    778e:	lsls	r4, r3, #2
    7790:	b.n	7228 <__kernel_rem_pio2f+0xac>
    7792:	vldr	s15, [pc, #20]	; 77a8 <__kernel_rem_pio2f+0x62c>
    7796:	b.n	76c2 <__kernel_rem_pio2f+0x546>
    7798:	vldr	s15, [pc, #12]	; 77a8 <__kernel_rem_pio2f+0x62c>
    779c:	b.n	7712 <__kernel_rem_pio2f+0x596>
    779e:	nop
    77a0:	.word	0x20000e1c
    77a4:	.word	0x3fc90000
    77a8:	.word	0x00000000

000077ac <__kernel_sinf>:
    77ac:	vmov	r3, s0
    77b0:	bic.w	r3, r3, #2147483648	; 0x80000000
    77b4:	cmp.w	r3, #838860800	; 0x32000000
    77b8:	bge.n	77c4 <__kernel_sinf+0x18>
    77ba:	vcvt.s32.f32	s15, s0
    77be:	vmov	r3, s15
    77c2:	cbz	r3, 780e <__kernel_sinf+0x62>
    77c4:	vmul.f32	s15, s0, s0
    77c8:	vldr	s10, [pc, #84]	; 7820 <__kernel_sinf+0x74>
    77cc:	vldr	s11, [pc, #84]	; 7824 <__kernel_sinf+0x78>
    77d0:	vldr	s12, [pc, #84]	; 7828 <__kernel_sinf+0x7c>
    77d4:	vldr	s13, [pc, #84]	; 782c <__kernel_sinf+0x80>
    77d8:	vldr	s14, [pc, #84]	; 7830 <__kernel_sinf+0x84>
    77dc:	vfma.f32	s11, s15, s10
    77e0:	vmul.f32	s10, s0, s15
    77e4:	vfma.f32	s12, s15, s11
    77e8:	vfma.f32	s13, s15, s12
    77ec:	vfma.f32	s14, s15, s13
    77f0:	cbz	r0, 7810 <__kernel_sinf+0x64>
    77f2:	vnmul.f32	s14, s14, s10
    77f6:	vmov.f32	s13, #96	; 0x3f000000  0.5
    77fa:	vfma.f32	s14, s1, s13
    77fe:	vldr	s13, [pc, #52]	; 7834 <__kernel_sinf+0x88>
    7802:	vfnms.f32	s1, s15, s14
    7806:	vfma.f32	s1, s10, s13
    780a:	vsub.f32	s0, s0, s1
    780e:	bx	lr
    7810:	vldr	s13, [pc, #36]	; 7838 <__kernel_sinf+0x8c>
    7814:	vfma.f32	s13, s15, s14
    7818:	vfma.f32	s0, s10, s13
    781c:	bx	lr
    781e:	nop
    7820:	.word	0x2f2ec9d3
    7824:	.word	0xb2d72f34
    7828:	.word	0x3638ef1b
    782c:	.word	0xb9500d01
    7830:	.word	0x3c088889
    7834:	.word	0x3e2aaaab
    7838:	.word	0xbe2aaaab
    783c:	.word	0x00000000

00007840 <atan>:
    7840:	push	{r3, r4, r5, lr}
    7842:	vmov.f64	d7, d0
    7846:	vmov	r5, s15
    784a:	ldr	r3, [pc, #476]	; (7a28 <atan+0x1e8>)
    784c:	bic.w	r4, r5, #2147483648	; 0x80000000
    7850:	cmp	r4, r3
    7852:	ble.n	7872 <atan+0x32>
    7854:	ldr	r3, [pc, #468]	; (7a2c <atan+0x1ec>)
    7856:	cmp	r4, r3
    7858:	vmov	r2, s0
    785c:	bgt.n	7918 <atan+0xd8>
    785e:	beq.n	7914 <atan+0xd4>
    7860:	vldr	d7, [pc, #340]	; 79b8 <atan+0x178>
    7864:	vldr	d0, [pc, #344]	; 79c0 <atan+0x180>
    7868:	cmp	r5, #0
    786a:	it	gt
    786c:	vmovgt.f64	d0, d7
    7870:	pop	{r3, r4, r5, pc}
    7872:	ldr	r3, [pc, #444]	; (7a30 <atan+0x1f0>)
    7874:	cmp	r4, r3
    7876:	bgt.n	793a <atan+0xfa>
    7878:	sub.w	r3, r3, #29097984	; 0x1bc0000
    787c:	cmp	r4, r3
    787e:	ble.n	791e <atan+0xde>
    7880:	mov.w	r3, #4294967295
    7884:	vldr	d2, [pc, #320]	; 79c8 <atan+0x188>
    7888:	vmul.f64	d4, d7, d7
    788c:	vmul.f64	d6, d4, d4
    7890:	vldr	d3, [pc, #316]	; 79d0 <atan+0x190>
    7894:	vldr	d5, [pc, #320]	; 79d8 <atan+0x198>
    7898:	vfma.f64	d3, d6, d2
    789c:	vldr	d2, [pc, #320]	; 79e0 <atan+0x1a0>
    78a0:	vfma.f64	d5, d6, d3
    78a4:	vldr	d3, [pc, #320]	; 79e8 <atan+0x1a8>
    78a8:	vfma.f64	d2, d6, d5
    78ac:	vldr	d5, [pc, #320]	; 79f0 <atan+0x1b0>
    78b0:	vfma.f64	d3, d6, d2
    78b4:	vldr	d1, [pc, #320]	; 79f8 <atan+0x1b8>
    78b8:	vfma.f64	d5, d6, d3
    78bc:	vmul.f64	d5, d5, d4
    78c0:	vldr	d2, [pc, #316]	; 7a00 <atan+0x1c0>
    78c4:	vldr	d4, [pc, #320]	; 7a08 <atan+0x1c8>
    78c8:	vldr	d3, [pc, #324]	; 7a10 <atan+0x1d0>
    78cc:	vfma.f64	d4, d6, d1
    78d0:	vfma.f64	d2, d6, d4
    78d4:	vldr	d4, [pc, #320]	; 7a18 <atan+0x1d8>
    78d8:	vfma.f64	d3, d6, d2
    78dc:	adds	r2, r3, #1
    78de:	vfma.f64	d4, d6, d3
    78e2:	vmul.f64	d6, d4, d6
    78e6:	beq.n	796a <atan+0x12a>
    78e8:	vadd.f64	d5, d5, d6
    78ec:	ldr	r2, [pc, #324]	; (7a34 <atan+0x1f4>)
    78ee:	ldr	r1, [pc, #328]	; (7a38 <atan+0x1f8>)
    78f0:	lsls	r3, r3, #3
    78f2:	add	r2, r3
    78f4:	add	r3, r1
    78f6:	vldr	d6, [r2]
    78fa:	vldr	d0, [r3]
    78fe:	vfnms.f64	d6, d7, d5
    7902:	vsub.f64	d7, d6, d7
    7906:	cmp	r5, #0
    7908:	vsub.f64	d7, d0, d7
    790c:	blt.n	7964 <atan+0x124>
    790e:	vmov.f64	d0, d7
    7912:	pop	{r3, r4, r5, pc}
    7914:	cmp	r2, #0
    7916:	beq.n	7860 <atan+0x20>
    7918:	vadd.f64	d0, d7, d7
    791c:	pop	{r3, r4, r5, pc}
    791e:	vldr	d6, [pc, #256]	; 7a20 <atan+0x1e0>
    7922:	vmov.f64	d5, #112	; 0x3f800000  1.0
    7926:	vadd.f64	d6, d0, d6
    792a:	vcmpe.f64	d6, d5
    792e:	vmrs	APSR_nzcv, fpscr
    7932:	ble.n	7880 <atan+0x40>
    7934:	vmov.f64	d0, d7
    7938:	pop	{r3, r4, r5, pc}
    793a:	bl	7a44 <fabs>
    793e:	ldr	r3, [pc, #252]	; (7a3c <atan+0x1fc>)
    7940:	cmp	r4, r3
    7942:	bgt.n	7978 <atan+0x138>
    7944:	sub.w	r3, r3, #851968	; 0xd0000
    7948:	cmp	r4, r3
    794a:	bgt.n	79a2 <atan+0x162>
    794c:	vmov.f64	d7, #0	; 0x40000000  2.0
    7950:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    7954:	vadd.f64	d5, d0, d7
    7958:	vfma.f64	d6, d0, d7
    795c:	movs	r3, #0
    795e:	vdiv.f64	d7, d6, d5
    7962:	b.n	7884 <atan+0x44>
    7964:	vneg.f64	d0, d7
    7968:	pop	{r3, r4, r5, pc}
    796a:	vadd.f64	d6, d5, d6
    796e:	vfms.f64	d7, d7, d6
    7972:	vmov.f64	d0, d7
    7976:	pop	{r3, r4, r5, pc}
    7978:	ldr	r3, [pc, #196]	; (7a40 <atan+0x200>)
    797a:	cmp	r4, r3
    797c:	bgt.n	7996 <atan+0x156>
    797e:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    7982:	vmov.f64	d6, #112	; 0x3f800000  1.0
    7986:	vsub.f64	d5, d0, d7
    798a:	vfma.f64	d6, d0, d7
    798e:	movs	r3, #2
    7990:	vdiv.f64	d7, d5, d6
    7994:	b.n	7884 <atan+0x44>
    7996:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    799a:	movs	r3, #3
    799c:	vdiv.f64	d7, d6, d0
    79a0:	b.n	7884 <atan+0x44>
    79a2:	vmov.f64	d7, #112	; 0x3f800000  1.0
    79a6:	movs	r3, #1
    79a8:	vsub.f64	d6, d0, d7
    79ac:	vadd.f64	d0, d0, d7
    79b0:	vdiv.f64	d7, d6, d0
    79b4:	b.n	7884 <atan+0x44>
    79b6:	nop
    79b8:	.word	0x54442d18
    79bc:	.word	0x3ff921fb
    79c0:	.word	0x54442d18
    79c4:	.word	0xbff921fb
    79c8:	.word	0xe322da11
    79cc:	.word	0x3f90ad3a
    79d0:	.word	0x24760deb
    79d4:	.word	0x3fa97b4b
    79d8:	.word	0xa0d03d51
    79dc:	.word	0x3fb10d66
    79e0:	.word	0xc54c206e
    79e4:	.word	0x3fb745cd
    79e8:	.word	0x920083ff
    79ec:	.word	0x3fc24924
    79f0:	.word	0x5555550d
    79f4:	.word	0x3fd55555
    79f8:	.word	0x2c6a6c2f
    79fc:	.word	0xbfa2b444
    7a00:	.word	0xaf749a6d
    7a04:	.word	0xbfb3b0f2
    7a08:	.word	0x52defd9a
    7a0c:	.word	0xbfadde2d
    7a10:	.word	0xfe231671
    7a14:	.word	0xbfbc71c6
    7a18:	.word	0x9998ebc4
    7a1c:	.word	0xbfc99999
    7a20:	.word	0x8800759c
    7a24:	.word	0x7e37e43c
    7a28:	.word	0x440fffff
    7a2c:	.word	0x7ff00000
    7a30:	.word	0x3fdbffff
    7a34:	.word	0x20000e48
    7a38:	.word	0x20000e68
    7a3c:	.word	0x3ff2ffff
    7a40:	.word	0x40037fff

00007a44 <fabs>:
    7a44:	vmov	r2, r3, d0
    7a48:	bic.w	r3, r3, #2147483648	; 0x80000000
    7a4c:	vmov	d0, r2, r3
    7a50:	bx	lr
    7a52:	nop

00007a54 <finite>:
    7a54:	vmov	r3, s1
    7a58:	orr.w	r0, r3, #2147483648	; 0x80000000
    7a5c:	add.w	r0, r0, #1048576	; 0x100000
    7a60:	lsrs	r0, r0, #31
    7a62:	bx	lr
    7a64:	movs	r0, r0
	...

00007a68 <floor>:
    7a68:	push	{r4, r5, r6}
    7a6a:	sub	sp, #12
    7a6c:	vstr	d0, [sp]
    7a70:	ldr	r1, [sp, #4]
    7a72:	ldr	r4, [sp, #0]
    7a74:	ubfx	r2, r1, #20, #11
    7a78:	subw	r3, r2, #1023	; 0x3ff
    7a7c:	cmp	r3, #19
    7a7e:	mov	r5, r1
    7a80:	mov	r0, r4
    7a82:	bgt.n	7ac2 <floor+0x5a>
    7a84:	cmp	r3, #0
    7a86:	blt.n	7b10 <floor+0xa8>
    7a88:	ldr	r2, [pc, #236]	; (7b78 <floor+0x110>)
    7a8a:	asrs	r2, r3
    7a8c:	and.w	r6, r1, r2
    7a90:	orrs	r4, r6
    7a92:	beq.n	7acc <floor+0x64>
    7a94:	vldr	d7, [pc, #216]	; 7b70 <floor+0x108>
    7a98:	vldr	d6, [sp]
    7a9c:	vadd.f64	d7, d6, d7
    7aa0:	vcmpe.f64	d7, #0.0
    7aa4:	vmrs	APSR_nzcv, fpscr
    7aa8:	ble.n	7ab4 <floor+0x4c>
    7aaa:	cmp	r1, #0
    7aac:	blt.n	7b36 <floor+0xce>
    7aae:	bic.w	r1, r5, r2
    7ab2:	movs	r0, #0
    7ab4:	mov	r3, r1
    7ab6:	mov	r2, r0
    7ab8:	vmov	d0, r2, r3
    7abc:	add	sp, #12
    7abe:	pop	{r4, r5, r6}
    7ac0:	bx	lr
    7ac2:	cmp	r3, #51	; 0x33
    7ac4:	ble.n	7ad6 <floor+0x6e>
    7ac6:	cmp.w	r3, #1024	; 0x400
    7aca:	beq.n	7b2c <floor+0xc4>
    7acc:	vldr	d0, [sp]
    7ad0:	add	sp, #12
    7ad2:	pop	{r4, r5, r6}
    7ad4:	bx	lr
    7ad6:	subw	r2, r2, #1043	; 0x413
    7ada:	mov.w	r4, #4294967295
    7ade:	lsr.w	r2, r4, r2
    7ae2:	tst	r0, r2
    7ae4:	beq.n	7acc <floor+0x64>
    7ae6:	vldr	d7, [pc, #136]	; 7b70 <floor+0x108>
    7aea:	vldr	d6, [sp]
    7aee:	vadd.f64	d7, d6, d7
    7af2:	vcmpe.f64	d7, #0.0
    7af6:	vmrs	APSR_nzcv, fpscr
    7afa:	ble.n	7ab4 <floor+0x4c>
    7afc:	cmp	r1, #0
    7afe:	blt.n	7b42 <floor+0xda>
    7b00:	mov	r1, r5
    7b02:	bic.w	r0, r0, r2
    7b06:	mov	r3, r1
    7b08:	mov	r2, r0
    7b0a:	vmov	d0, r2, r3
    7b0e:	b.n	7abc <floor+0x54>
    7b10:	vldr	d7, [pc, #92]	; 7b70 <floor+0x108>
    7b14:	vadd.f64	d7, d0, d7
    7b18:	vcmpe.f64	d7, #0.0
    7b1c:	vmrs	APSR_nzcv, fpscr
    7b20:	ble.n	7ab4 <floor+0x4c>
    7b22:	cmp	r1, #0
    7b24:	blt.n	7b58 <floor+0xf0>
    7b26:	movs	r0, #0
    7b28:	mov	r1, r0
    7b2a:	b.n	7ab4 <floor+0x4c>
    7b2c:	vldr	d7, [sp]
    7b30:	vadd.f64	d0, d7, d7
    7b34:	b.n	7ad0 <floor+0x68>
    7b36:	mov.w	r1, #1048576	; 0x100000
    7b3a:	asr.w	r3, r1, r3
    7b3e:	add	r5, r3
    7b40:	b.n	7aae <floor+0x46>
    7b42:	cmp	r3, #20
    7b44:	beq.n	7b68 <floor+0x100>
    7b46:	movs	r1, #1
    7b48:	rsb	r3, r3, #52	; 0x34
    7b4c:	lsl.w	r3, r1, r3
    7b50:	adds	r0, r3, r0
    7b52:	it	cs
    7b54:	addcs	r5, r5, r1
    7b56:	b.n	7b00 <floor+0x98>
    7b58:	bic.w	r2, r1, #2147483648	; 0x80000000
    7b5c:	ldr	r3, [pc, #28]	; (7b7c <floor+0x114>)
    7b5e:	orrs	r2, r4
    7b60:	it	ne
    7b62:	movne	r1, r3
    7b64:	movs	r0, #0
    7b66:	b.n	7ab4 <floor+0x4c>
    7b68:	adds	r5, #1
    7b6a:	b.n	7b00 <floor+0x98>
    7b6c:	nop.w
    7b70:	.word	0x8800759c
    7b74:	.word	0x7e37e43c
    7b78:	.word	0x000fffff
    7b7c:	.word	0xbff00000

00007b80 <matherr>:
    7b80:	movs	r0, #0
    7b82:	bx	lr
    7b84:	movs	r0, r0
	...

00007b88 <nan>:
    7b88:	vldr	d0, [pc, #4]	; 7b90 <nan+0x8>
    7b8c:	bx	lr
    7b8e:	nop
    7b90:	.word	0x00000000
    7b94:	.word	0x7ff80000

00007b98 <rint>:
    7b98:	push	{r4, r5, r6, r7}
    7b9a:	vmov	r2, r3, d0
    7b9e:	ubfx	r5, r3, #20, #11
    7ba2:	subw	r0, r5, #1023	; 0x3ff
    7ba6:	cmp	r0, #19
    7ba8:	sub	sp, #16
    7baa:	mov	r1, r3
    7bac:	mov.w	r7, r3, lsr #31
    7bb0:	vmov	r4, s0
    7bb4:	bgt.n	7c10 <rint+0x78>
    7bb6:	cmp	r0, #0
    7bb8:	blt.n	7c4a <rint+0xb2>
    7bba:	ldr	r5, [pc, #240]	; (7cac <rint+0x114>)
    7bbc:	asrs	r5, r0
    7bbe:	and.w	r6, r3, r5
    7bc2:	orrs	r6, r2
    7bc4:	beq.n	7c1a <rint+0x82>
    7bc6:	lsrs	r5, r5, #1
    7bc8:	ands	r3, r5
    7bca:	orrs	r4, r3
    7bcc:	beq.n	7be8 <rint+0x50>
    7bce:	mov.w	r3, #262144	; 0x40000
    7bd2:	cmp	r0, #19
    7bd4:	bic.w	r5, r1, r5
    7bd8:	asr.w	r1, r3, r0
    7bdc:	orr.w	r1, r1, r5
    7be0:	ite	eq
    7be2:	moveq.w	r4, #2147483648	; 0x80000000
    7be6:	movne	r4, #0
    7be8:	ldr	r0, [pc, #196]	; (7cb0 <rint+0x118>)
    7bea:	add.w	r7, r0, r7, lsl #3
    7bee:	vldr	d0, [r7]
    7bf2:	mov	r3, r1
    7bf4:	mov	r2, r4
    7bf6:	vmov	d7, r2, r3
    7bfa:	vadd.f64	d7, d7, d0
    7bfe:	vstr	d7, [sp, #8]
    7c02:	vldr	d7, [sp, #8]
    7c06:	vsub.f64	d0, d7, d0
    7c0a:	add	sp, #16
    7c0c:	pop	{r4, r5, r6, r7}
    7c0e:	bx	lr
    7c10:	cmp	r0, #51	; 0x33
    7c12:	ble.n	7c24 <rint+0x8c>
    7c14:	cmp.w	r0, #1024	; 0x400
    7c18:	beq.n	7ca4 <rint+0x10c>
    7c1a:	vmov	d0, r2, r3
    7c1e:	add	sp, #16
    7c20:	pop	{r4, r5, r6, r7}
    7c22:	bx	lr
    7c24:	subw	r5, r5, #1043	; 0x413
    7c28:	mov.w	r0, #4294967295
    7c2c:	lsrs	r0, r5
    7c2e:	tst	r2, r0
    7c30:	beq.n	7c1a <rint+0x82>
    7c32:	lsrs	r0, r0, #1
    7c34:	tst	r2, r0
    7c36:	beq.n	7be8 <rint+0x50>
    7c38:	mov.w	r3, #1073741824	; 0x40000000
    7c3c:	bic.w	r0, r4, r0
    7c40:	asr.w	r5, r3, r5
    7c44:	orr.w	r4, r5, r0
    7c48:	b.n	7be8 <rint+0x50>
    7c4a:	bic.w	r0, r3, #2147483648	; 0x80000000
    7c4e:	orrs	r0, r2
    7c50:	vmov	r6, s0
    7c54:	beq.n	7c1a <rint+0x82>
    7c56:	ubfx	r0, r3, #0, #20
    7c5a:	orrs	r6, r0
    7c5c:	negs	r0, r6
    7c5e:	orrs	r6, r0
    7c60:	ldr	r0, [pc, #76]	; (7cb0 <rint+0x118>)
    7c62:	lsrs	r1, r3, #17
    7c64:	lsrs	r6, r6, #12
    7c66:	lsls	r1, r1, #17
    7c68:	and.w	r6, r6, #524288	; 0x80000
    7c6c:	add.w	r0, r0, r7, lsl #3
    7c70:	orr.w	r3, r6, r1
    7c74:	vldr	d6, [r0]
    7c78:	vmov	d7, r2, r3
    7c7c:	vadd.f64	d7, d7, d6
    7c80:	vstr	d7, [sp, #8]
    7c84:	vldr	d7, [sp, #8]
    7c88:	vsub.f64	d7, d7, d6
    7c8c:	vstr	d7, [sp]
    7c90:	ldr	r1, [sp, #4]
    7c92:	ldrd	r2, r3, [sp]
    7c96:	bic.w	r1, r1, #2147483648	; 0x80000000
    7c9a:	orr.w	r3, r1, r7, lsl #31
    7c9e:	vmov	d0, r2, r3
    7ca2:	b.n	7c1e <rint+0x86>
    7ca4:	vadd.f64	d0, d0, d0
    7ca8:	b.n	7c1e <rint+0x86>
    7caa:	nop
    7cac:	.word	0x000fffff
    7cb0:	.word	0x20000e88
    7cb4:	.word	0x00000000

00007cb8 <scalbn>:
    7cb8:	push	{r4, lr}
    7cba:	vpush	{d8}
    7cbe:	sub	sp, #8
    7cc0:	vstr	d0, [sp]
    7cc4:	ldr	r3, [sp, #4]
    7cc6:	ldr	r1, [sp, #0]
    7cc8:	ubfx	r2, r3, #20, #11
    7ccc:	cbnz	r2, 7d1a <scalbn+0x62>
    7cce:	bic.w	r3, r3, #2147483648	; 0x80000000
    7cd2:	orrs	r3, r1
    7cd4:	beq.n	7d32 <scalbn+0x7a>
    7cd6:	vldr	d7, [pc, #216]	; 7db0 <scalbn+0xf8>
    7cda:	ldr	r2, [pc, #244]	; (7dd0 <scalbn+0x118>)
    7cdc:	vmul.f64	d7, d0, d7
    7ce0:	cmp	r0, r2
    7ce2:	vstr	d7, [sp]
    7ce6:	ldr	r3, [sp, #4]
    7ce8:	blt.n	7d3e <scalbn+0x86>
    7cea:	ubfx	r2, r3, #20, #11
    7cee:	subs	r2, #54	; 0x36
    7cf0:	adds	r4, r0, r2
    7cf2:	movw	r2, #2046	; 0x7fe
    7cf6:	cmp	r4, r2
    7cf8:	bgt.n	7d5c <scalbn+0xa4>
    7cfa:	cmp	r4, #0
    7cfc:	ble.n	7d4e <scalbn+0x96>
    7cfe:	bic.w	r1, r3, #2139095040	; 0x7f800000
    7d02:	ldrd	r2, r3, [sp]
    7d06:	bic.w	r1, r1, #7340032	; 0x700000
    7d0a:	orr.w	r3, r1, r4, lsl #20
    7d0e:	vmov	d0, r2, r3
    7d12:	add	sp, #8
    7d14:	vpop	{d8}
    7d18:	pop	{r4, pc}
    7d1a:	movw	r1, #2047	; 0x7ff
    7d1e:	cmp	r2, r1
    7d20:	bne.n	7cf0 <scalbn+0x38>
    7d22:	vldr	d7, [sp]
    7d26:	vadd.f64	d0, d7, d7
    7d2a:	add	sp, #8
    7d2c:	vpop	{d8}
    7d30:	pop	{r4, pc}
    7d32:	vldr	d0, [sp]
    7d36:	add	sp, #8
    7d38:	vpop	{d8}
    7d3c:	pop	{r4, pc}
    7d3e:	vldr	d0, [pc, #120]	; 7db8 <scalbn+0x100>
    7d42:	vmul.f64	d0, d7, d0
    7d46:	add	sp, #8
    7d48:	vpop	{d8}
    7d4c:	pop	{r4, pc}
    7d4e:	cmn.w	r4, #53	; 0x35
    7d52:	bge.n	7d78 <scalbn+0xc0>
    7d54:	movw	r3, #50000	; 0xc350
    7d58:	cmp	r0, r3
    7d5a:	ble.n	7d98 <scalbn+0xe0>
    7d5c:	vldr	d8, [pc, #96]	; 7dc0 <scalbn+0x108>
    7d60:	vldr	d1, [sp]
    7d64:	vmov.f64	d0, d8
    7d68:	bl	80fc <copysign>
    7d6c:	vmul.f64	d0, d0, d8
    7d70:	add	sp, #8
    7d72:	vpop	{d8}
    7d76:	pop	{r4, pc}
    7d78:	bic.w	r1, r3, #2139095040	; 0x7f800000
    7d7c:	ldrd	r2, r3, [sp]
    7d80:	bic.w	r1, r1, #7340032	; 0x700000
    7d84:	adds	r4, #54	; 0x36
    7d86:	orr.w	r3, r1, r4, lsl #20
    7d8a:	vldr	d0, [pc, #60]	; 7dc8 <scalbn+0x110>
    7d8e:	vmov	d7, r2, r3
    7d92:	vmul.f64	d0, d7, d0
    7d96:	b.n	7d12 <scalbn+0x5a>
    7d98:	vldr	d8, [pc, #28]	; 7db8 <scalbn+0x100>
    7d9c:	vldr	d1, [sp]
    7da0:	vmov.f64	d0, d8
    7da4:	bl	80fc <copysign>
    7da8:	vmul.f64	d0, d0, d8
    7dac:	b.n	7d12 <scalbn+0x5a>
    7dae:	nop
    7db0:	.word	0x00000000
    7db4:	.word	0x43500000
    7db8:	.word	0xc2f8f359
    7dbc:	.word	0x01a56e1f
    7dc0:	.word	0x8800759c
    7dc4:	.word	0x7e37e43c
    7dc8:	.word	0x00000000
    7dcc:	.word	0x3c900000
    7dd0:	.word	0xffff3cb0

00007dd4 <atanf>:
    7dd4:	push	{r3, r4, r5, lr}
    7dd6:	vmov	r5, s0
    7dda:	bic.w	r4, r5, #2147483648	; 0x80000000
    7dde:	cmp.w	r4, #1350565888	; 0x50800000
    7de2:	vmov.f32	s15, s0
    7de6:	blt.n	7e00 <atanf+0x2c>
    7de8:	cmp.w	r4, #2139095040	; 0x7f800000
    7dec:	bgt.n	7ea0 <atanf+0xcc>
    7dee:	vldr	s15, [pc, #336]	; 7f40 <atanf+0x16c>
    7df2:	vldr	s0, [pc, #336]	; 7f44 <atanf+0x170>
    7df6:	cmp	r5, #0
    7df8:	it	gt
    7dfa:	vmovgt.f32	s0, s15
    7dfe:	pop	{r3, r4, r5, pc}
    7e00:	ldr	r3, [pc, #324]	; (7f48 <atanf+0x174>)
    7e02:	cmp	r4, r3
    7e04:	bgt.n	7ec2 <atanf+0xee>
    7e06:	cmp.w	r4, #822083584	; 0x31000000
    7e0a:	blt.n	7ea6 <atanf+0xd2>
    7e0c:	mov.w	r3, #4294967295
    7e10:	vmul.f32	s11, s15, s15
    7e14:	vldr	s2, [pc, #308]	; 7f4c <atanf+0x178>
    7e18:	vldr	s4, [pc, #308]	; 7f50 <atanf+0x17c>
    7e1c:	vldr	s6, [pc, #308]	; 7f54 <atanf+0x180>
    7e20:	vldr	s3, [pc, #308]	; 7f58 <atanf+0x184>
    7e24:	vldr	s5, [pc, #308]	; 7f5c <atanf+0x188>
    7e28:	vldr	s8, [pc, #308]	; 7f60 <atanf+0x18c>
    7e2c:	vldr	s7, [pc, #308]	; 7f64 <atanf+0x190>
    7e30:	vldr	s10, [pc, #308]	; 7f68 <atanf+0x194>
    7e34:	vldr	s9, [pc, #308]	; 7f6c <atanf+0x198>
    7e38:	vldr	s12, [pc, #308]	; 7f70 <atanf+0x19c>
    7e3c:	vldr	s13, [pc, #308]	; 7f74 <atanf+0x1a0>
    7e40:	vmul.f32	s14, s11, s11
    7e44:	adds	r2, r3, #1
    7e46:	vfma.f32	s4, s14, s2
    7e4a:	vfma.f32	s5, s14, s3
    7e4e:	vfma.f32	s6, s14, s4
    7e52:	vfma.f32	s7, s14, s5
    7e56:	vfma.f32	s8, s14, s6
    7e5a:	vfma.f32	s9, s14, s7
    7e5e:	vfma.f32	s10, s14, s8
    7e62:	vfma.f32	s13, s14, s9
    7e66:	vfma.f32	s12, s14, s10
    7e6a:	vmul.f32	s14, s13, s14
    7e6e:	vmul.f32	s13, s12, s11
    7e72:	beq.n	7ef2 <atanf+0x11e>
    7e74:	ldr	r2, [pc, #256]	; (7f78 <atanf+0x1a4>)
    7e76:	ldr	r1, [pc, #260]	; (7f7c <atanf+0x1a8>)
    7e78:	lsls	r3, r3, #2
    7e7a:	add	r2, r3
    7e7c:	vadd.f32	s13, s13, s14
    7e80:	vldr	s14, [r2]
    7e84:	vfnms.f32	s14, s15, s13
    7e88:	add	r3, r1
    7e8a:	cmp	r5, #0
    7e8c:	vldr	s0, [r3]
    7e90:	vsub.f32	s15, s14, s15
    7e94:	vsub.f32	s15, s0, s15
    7e98:	blt.n	7eec <atanf+0x118>
    7e9a:	vmov.f32	s0, s15
    7e9e:	pop	{r3, r4, r5, pc}
    7ea0:	vadd.f32	s0, s0, s0
    7ea4:	pop	{r3, r4, r5, pc}
    7ea6:	vldr	s14, [pc, #216]	; 7f80 <atanf+0x1ac>
    7eaa:	vadd.f32	s14, s0, s14
    7eae:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7eb2:	vcmpe.f32	s14, s13
    7eb6:	vmrs	APSR_nzcv, fpscr
    7eba:	ble.n	7e0c <atanf+0x38>
    7ebc:	vmov.f32	s0, s15
    7ec0:	pop	{r3, r4, r5, pc}
    7ec2:	bl	7f8c <fabsf>
    7ec6:	ldr	r3, [pc, #188]	; (7f84 <atanf+0x1b0>)
    7ec8:	cmp	r4, r3
    7eca:	bgt.n	7f00 <atanf+0x12c>
    7ecc:	sub.w	r3, r3, #6815744	; 0x680000
    7ed0:	cmp	r4, r3
    7ed2:	bgt.n	7f2a <atanf+0x156>
    7ed4:	vmov.f32	s15, #0	; 0x40000000  2.0
    7ed8:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    7edc:	vfma.f32	s14, s0, s15
    7ee0:	movs	r3, #0
    7ee2:	vadd.f32	s0, s0, s15
    7ee6:	vdiv.f32	s15, s14, s0
    7eea:	b.n	7e10 <atanf+0x3c>
    7eec:	vneg.f32	s0, s15
    7ef0:	pop	{r3, r4, r5, pc}
    7ef2:	vadd.f32	s13, s13, s14
    7ef6:	vfms.f32	s15, s15, s13
    7efa:	vmov.f32	s0, s15
    7efe:	pop	{r3, r4, r5, pc}
    7f00:	ldr	r3, [pc, #132]	; (7f88 <atanf+0x1b4>)
    7f02:	cmp	r4, r3
    7f04:	bgt.n	7f1e <atanf+0x14a>
    7f06:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    7f0a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    7f0e:	vfma.f32	s14, s0, s15
    7f12:	movs	r3, #2
    7f14:	vsub.f32	s0, s0, s15
    7f18:	vdiv.f32	s15, s0, s14
    7f1c:	b.n	7e10 <atanf+0x3c>
    7f1e:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    7f22:	vdiv.f32	s15, s14, s0
    7f26:	movs	r3, #3
    7f28:	b.n	7e10 <atanf+0x3c>
    7f2a:	vmov.f32	s15, #112	; 0x3f800000  1.0
    7f2e:	vsub.f32	s14, s0, s15
    7f32:	vadd.f32	s0, s0, s15
    7f36:	movs	r3, #1
    7f38:	vdiv.f32	s15, s14, s0
    7f3c:	b.n	7e10 <atanf+0x3c>
    7f3e:	nop
    7f40:	.word	0x3fc90fdb
    7f44:	.word	0xbfc90fdb
    7f48:	.word	0x3edfffff
    7f4c:	.word	0x3c8569d7
    7f50:	.word	0x3d4bda59
    7f54:	.word	0x3d886b35
    7f58:	.word	0xbd15a221
    7f5c:	.word	0xbd6ef16b
    7f60:	.word	0x3dba2e6e
    7f64:	.word	0xbd9d8795
    7f68:	.word	0x3e124925
    7f6c:	.word	0xbde38e38
    7f70:	.word	0x3eaaaaab
    7f74:	.word	0xbe4ccccd
    7f78:	.word	0x20000e98
    7f7c:	.word	0x20000ea8
    7f80:	.word	0x7149f2ca
    7f84:	.word	0x3f97ffff
    7f88:	.word	0x401bffff

00007f8c <fabsf>:
    7f8c:	vmov	r3, s0
    7f90:	bic.w	r3, r3, #2147483648	; 0x80000000
    7f94:	vmov	s0, r3
    7f98:	bx	lr
    7f9a:	nop

00007f9c <floorf>:
    7f9c:	vmov	r2, s0
    7fa0:	bic.w	r1, r2, #2147483648	; 0x80000000
    7fa4:	lsrs	r3, r1, #23
    7fa6:	subs	r3, #127	; 0x7f
    7fa8:	cmp	r3, #22
    7faa:	bgt.n	7fdc <floorf+0x40>
    7fac:	cmp	r3, #0
    7fae:	vmov	r0, s0
    7fb2:	blt.n	7fe8 <floorf+0x4c>
    7fb4:	ldr	r1, [pc, #104]	; (8020 <floorf+0x84>)
    7fb6:	asrs	r1, r3
    7fb8:	tst	r2, r1
    7fba:	beq.n	8002 <floorf+0x66>
    7fbc:	vldr	s15, [pc, #100]	; 8024 <floorf+0x88>
    7fc0:	vadd.f32	s15, s0, s15
    7fc4:	vcmpe.f32	s15, #0.0
    7fc8:	vmrs	APSR_nzcv, fpscr
    7fcc:	ble.n	8002 <floorf+0x66>
    7fce:	cmp	r2, #0
    7fd0:	blt.n	8004 <floorf+0x68>
    7fd2:	bic.w	r3, r0, r1
    7fd6:	vmov	s0, r3
    7fda:	bx	lr
    7fdc:	cmp.w	r1, #2139095040	; 0x7f800000
    7fe0:	bcc.n	8002 <floorf+0x66>
    7fe2:	vadd.f32	s0, s0, s0
    7fe6:	bx	lr
    7fe8:	vldr	s15, [pc, #56]	; 8024 <floorf+0x88>
    7fec:	vadd.f32	s15, s0, s15
    7ff0:	vcmpe.f32	s15, #0.0
    7ff4:	vmrs	APSR_nzcv, fpscr
    7ff8:	ble.n	8002 <floorf+0x66>
    7ffa:	cmp	r2, #0
    7ffc:	blt.n	8010 <floorf+0x74>
    7ffe:	vldr	s0, [pc, #40]	; 8028 <floorf+0x8c>
    8002:	bx	lr
    8004:	mov.w	r2, #8388608	; 0x800000
    8008:	asr.w	r3, r2, r3
    800c:	add	r0, r3
    800e:	b.n	7fd2 <floorf+0x36>
    8010:	cmp	r1, #0
    8012:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    8016:	it	ne
    8018:	vmovne.f32	s0, s15
    801c:	bx	lr
    801e:	nop
    8020:	.word	0x007fffff
    8024:	.word	0x7149f2ca
    8028:	.word	0x00000000

0000802c <scalbnf>:
    802c:	push	{r3, lr}
    802e:	vmov	r3, s0
    8032:	bics.w	r2, r3, #2147483648	; 0x80000000
    8036:	vpush	{d8}
    803a:	beq.n	8060 <scalbnf+0x34>
    803c:	cmp.w	r2, #2139095040	; 0x7f800000
    8040:	bcs.n	8066 <scalbnf+0x3a>
    8042:	cmp.w	r2, #8388608	; 0x800000
    8046:	bcc.n	8070 <scalbnf+0x44>
    8048:	lsrs	r2, r2, #23
    804a:	add	r2, r0
    804c:	cmp	r2, #254	; 0xfe
    804e:	bgt.n	80ae <scalbnf+0x82>
    8050:	cmp	r2, #0
    8052:	ble.n	808a <scalbnf+0x5e>
    8054:	bic.w	r3, r3, #2139095040	; 0x7f800000
    8058:	orr.w	r3, r3, r2, lsl #23
    805c:	vmov	s0, r3
    8060:	vpop	{d8}
    8064:	pop	{r3, pc}
    8066:	vpop	{d8}
    806a:	vadd.f32	s0, s0, s0
    806e:	pop	{r3, pc}
    8070:	ldr	r3, [pc, #116]	; (80e8 <scalbnf+0xbc>)
    8072:	vldr	s15, [pc, #120]	; 80ec <scalbnf+0xc0>
    8076:	cmp	r0, r3
    8078:	vmul.f32	s0, s0, s15
    807c:	blt.n	80c4 <scalbnf+0x98>
    807e:	vmov	r3, s0
    8082:	ubfx	r2, r3, #23, #8
    8086:	subs	r2, #25
    8088:	b.n	804a <scalbnf+0x1e>
    808a:	cmn.w	r2, #22
    808e:	bge.n	80ce <scalbnf+0xa2>
    8090:	movw	r3, #50000	; 0xc350
    8094:	cmp	r0, r3
    8096:	bgt.n	80ae <scalbnf+0x82>
    8098:	vldr	s16, [pc, #84]	; 80f0 <scalbnf+0xc4>
    809c:	vmov.f32	s1, s0
    80a0:	vmov.f32	s0, s16
    80a4:	bl	8118 <copysignf>
    80a8:	vmul.f32	s0, s0, s16
    80ac:	b.n	8060 <scalbnf+0x34>
    80ae:	vldr	s16, [pc, #68]	; 80f4 <scalbnf+0xc8>
    80b2:	vmov.f32	s1, s0
    80b6:	vmov.f32	s0, s16
    80ba:	bl	8118 <copysignf>
    80be:	vmul.f32	s0, s0, s16
    80c2:	b.n	8060 <scalbnf+0x34>
    80c4:	vldr	s1, [pc, #40]	; 80f0 <scalbnf+0xc4>
    80c8:	vmul.f32	s0, s0, s1
    80cc:	b.n	8060 <scalbnf+0x34>
    80ce:	adds	r2, #25
    80d0:	bic.w	r3, r3, #2139095040	; 0x7f800000
    80d4:	orr.w	r3, r3, r2, lsl #23
    80d8:	vldr	s15, [pc, #28]	; 80f8 <scalbnf+0xcc>
    80dc:	vmov	s0, r3
    80e0:	vmul.f32	s0, s0, s15
    80e4:	b.n	8060 <scalbnf+0x34>
    80e6:	nop
    80e8:	.word	0xffff3cb0
    80ec:	.word	0x4c000000
    80f0:	.word	0x0da24260
    80f4:	.word	0x7149f2ca
    80f8:	.word	0x33000000

000080fc <copysign>:
    80fc:	vmov	r2, r3, d0
    8100:	vmov	r0, s3
    8104:	bic.w	r1, r3, #2147483648	; 0x80000000
    8108:	and.w	r0, r0, #2147483648	; 0x80000000
    810c:	orr.w	r3, r1, r0
    8110:	vmov	d0, r2, r3
    8114:	bx	lr
    8116:	nop

00008118 <copysignf>:
    8118:	vmov	r3, s0
    811c:	bic.w	r2, r3, #2147483648	; 0x80000000
    8120:	vmov	r3, s1
    8124:	and.w	r3, r3, #2147483648	; 0x80000000
    8128:	orrs	r3, r2
    812a:	vmov	s0, r3
    812e:	bx	lr

00008130 <__assert_func>:
    8130:	push	{lr}
    8132:	ldr	r4, [pc, #40]	; (815c <__assert_func+0x2c>)
    8134:	ldr	r6, [r4, #0]
    8136:	mov	r5, r0
    8138:	sub	sp, #20
    813a:	mov	r4, r3
    813c:	ldr	r0, [r6, #12]
    813e:	cbz	r2, 8156 <__assert_func+0x26>
    8140:	ldr	r3, [pc, #28]	; (8160 <__assert_func+0x30>)
    8142:	str	r2, [sp, #8]
    8144:	stmia.w	sp, {r1, r3}
    8148:	mov	r2, r4
    814a:	mov	r3, r5
    814c:	ldr	r1, [pc, #20]	; (8164 <__assert_func+0x34>)
    814e:	bl	8178 <fiprintf>
    8152:	bl	2dc8 <abort>
    8156:	ldr	r3, [pc, #16]	; (8168 <__assert_func+0x38>)
    8158:	mov	r2, r3
    815a:	b.n	8142 <__assert_func+0x12>
    815c:	.word	0x20001610
    8160:	.word	0x20000eb8
    8164:	.word	0x20000ec8
    8168:	.word	0x20000ec4

0000816c <__errno>:
    816c:	ldr	r3, [pc, #4]	; (8174 <__errno+0x8>)
    816e:	ldr	r0, [r3, #0]
    8170:	bx	lr
    8172:	nop
    8174:	.word	0x20001610

00008178 <fiprintf>:
    8178:	push	{r1, r2, r3}
    817a:	push	{r4, lr}
    817c:	sub	sp, #12
    817e:	add	r3, sp, #20
    8180:	ldr	r4, [pc, #24]	; (819c <fiprintf+0x24>)
    8182:	ldr.w	r2, [r3], #4
    8186:	str	r3, [sp, #4]
    8188:	mov	r1, r0
    818a:	ldr	r0, [r4, #0]
    818c:	bl	a448 <_vfiprintf_r>
    8190:	add	sp, #12
    8192:	ldmia.w	sp!, {r4, lr}
    8196:	add	sp, #12
    8198:	bx	lr
    819a:	nop
    819c:	.word	0x20001610

000081a0 <__libc_init_array>:
    81a0:	push	{r4, r5, r6, lr}
    81a2:	ldr	r6, [pc, #60]	; (81e0 <__libc_init_array+0x40>)
    81a4:	ldr	r5, [pc, #60]	; (81e4 <__libc_init_array+0x44>)
    81a6:	subs	r6, r6, r5
    81a8:	asrs	r6, r6, #2
    81aa:	it	ne
    81ac:	movne	r4, #0
    81ae:	beq.n	81bc <__libc_init_array+0x1c>
    81b0:	adds	r4, #1
    81b2:	ldr.w	r3, [r5], #4
    81b6:	blx	r3
    81b8:	cmp	r6, r4
    81ba:	bne.n	81b0 <__libc_init_array+0x10>
    81bc:	ldr	r6, [pc, #40]	; (81e8 <__libc_init_array+0x48>)
    81be:	ldr	r5, [pc, #44]	; (81ec <__libc_init_array+0x4c>)
    81c0:	subs	r6, r6, r5
    81c2:	bl	d990 <___init_veneer>
    81c6:	asrs	r6, r6, #2
    81c8:	it	ne
    81ca:	movne	r4, #0
    81cc:	beq.n	81dc <__libc_init_array+0x3c>
    81ce:	adds	r4, #1
    81d0:	ldr.w	r3, [r5], #4
    81d4:	blx	r3
    81d6:	cmp	r6, r4
    81d8:	bne.n	81ce <__libc_init_array+0x2e>
    81da:	pop	{r4, r5, r6, pc}
    81dc:	pop	{r4, r5, r6, pc}
    81de:	nop
    81e0:	.word	0x60001740
    81e4:	.word	0x60001740
    81e8:	.word	0x60001748
    81ec:	.word	0x60001740

000081f0 <__locale_mb_cur_max>:
    81f0:	ldr	r3, [pc, #16]	; (8204 <__locale_mb_cur_max+0x14>)
    81f2:	ldr	r2, [pc, #20]	; (8208 <__locale_mb_cur_max+0x18>)
    81f4:	ldr	r3, [r3, #0]
    81f6:	ldr	r3, [r3, #52]	; 0x34
    81f8:	cmp	r3, #0
    81fa:	it	eq
    81fc:	moveq	r3, r2
    81fe:	ldrb.w	r0, [r3, #296]	; 0x128
    8202:	bx	lr
    8204:	.word	0x20001610
    8208:	.word	0x20001614

0000820c <_malloc_r>:
    820c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8210:	add.w	r5, r1, #11
    8214:	cmp	r5, #22
    8216:	sub	sp, #12
    8218:	mov	r6, r0
    821a:	bls.w	835c <_malloc_r+0x150>
    821e:	bics.w	r5, r5, #7
    8222:	bmi.w	83a4 <_malloc_r+0x198>
    8226:	cmp	r1, r5
    8228:	bhi.w	83a4 <_malloc_r+0x198>
    822c:	bl	890c <__malloc_lock>
    8230:	cmp.w	r5, #504	; 0x1f8
    8234:	bcc.w	8770 <_malloc_r+0x564>
    8238:	lsrs	r3, r5, #9
    823a:	beq.w	83b2 <_malloc_r+0x1a6>
    823e:	cmp	r3, #4
    8240:	bhi.w	854a <_malloc_r+0x33e>
    8244:	lsrs	r0, r5, #6
    8246:	add.w	lr, r0, #57	; 0x39
    824a:	mov.w	r3, lr, lsl #1
    824e:	adds	r0, #56	; 0x38
    8250:	ldr	r7, [pc, #784]	; (8564 <_malloc_r+0x358>)
    8252:	add.w	r3, r7, r3, lsl #2
    8256:	sub.w	r1, r3, #8
    825a:	ldr	r4, [r3, #4]
    825c:	cmp	r1, r4
    825e:	bne.n	8270 <_malloc_r+0x64>
    8260:	b.n	83bc <_malloc_r+0x1b0>
    8262:	cmp	r2, #0
    8264:	bge.w	83c0 <_malloc_r+0x1b4>
    8268:	ldr	r4, [r4, #12]
    826a:	cmp	r1, r4
    826c:	beq.w	83bc <_malloc_r+0x1b0>
    8270:	ldr	r3, [r4, #4]
    8272:	bic.w	r3, r3, #3
    8276:	subs	r2, r3, r5
    8278:	cmp	r2, #15
    827a:	ble.n	8262 <_malloc_r+0x56>
    827c:	ldr	r1, [pc, #740]	; (8564 <_malloc_r+0x358>)
    827e:	ldr	r4, [r7, #16]
    8280:	add.w	lr, r1, #8
    8284:	cmp	r4, lr
    8286:	beq.w	85f0 <_malloc_r+0x3e4>
    828a:	ldr	r3, [r4, #4]
    828c:	bic.w	r3, r3, #3
    8290:	subs	r2, r3, r5
    8292:	cmp	r2, #15
    8294:	bgt.w	85ca <_malloc_r+0x3be>
    8298:	cmp	r2, #0
    829a:	str.w	lr, [r1, #20]
    829e:	str.w	lr, [r1, #16]
    82a2:	bge.w	83e2 <_malloc_r+0x1d6>
    82a6:	cmp.w	r3, #512	; 0x200
    82aa:	bcs.w	857c <_malloc_r+0x370>
    82ae:	lsrs	r3, r3, #3
    82b0:	add.w	ip, r3, #1
    82b4:	movs	r2, #1
    82b6:	asrs	r3, r3, #2
    82b8:	lsl.w	r3, r2, r3
    82bc:	ldr	r2, [r1, #4]
    82be:	ldr.w	r8, [r1, ip, lsl #3]
    82c2:	str.w	r8, [r4, #8]
    82c6:	add.w	r9, r1, ip, lsl #3
    82ca:	orrs	r2, r3
    82cc:	sub.w	r3, r9, #8
    82d0:	str	r3, [r4, #12]
    82d2:	str	r2, [r1, #4]
    82d4:	str.w	r4, [r1, ip, lsl #3]
    82d8:	str.w	r4, [r8, #12]
    82dc:	asrs	r3, r0, #2
    82de:	movs	r4, #1
    82e0:	lsls	r4, r3
    82e2:	cmp	r4, r2
    82e4:	bhi.w	83fc <_malloc_r+0x1f0>
    82e8:	tst	r4, r2
    82ea:	bne.n	82fa <_malloc_r+0xee>
    82ec:	bic.w	r0, r0, #3
    82f0:	lsls	r4, r4, #1
    82f2:	tst	r4, r2
    82f4:	add.w	r0, r0, #4
    82f8:	beq.n	82f0 <_malloc_r+0xe4>
    82fa:	add.w	r9, r7, r0, lsl #3
    82fe:	mov	ip, r9
    8300:	mov	r8, r0
    8302:	ldr.w	r1, [ip, #12]
    8306:	cmp	ip, r1
    8308:	bne.n	831a <_malloc_r+0x10e>
    830a:	b.n	85f4 <_malloc_r+0x3e8>
    830c:	cmp	r2, #0
    830e:	bge.w	8614 <_malloc_r+0x408>
    8312:	ldr	r1, [r1, #12]
    8314:	cmp	ip, r1
    8316:	beq.w	85f4 <_malloc_r+0x3e8>
    831a:	ldr	r3, [r1, #4]
    831c:	bic.w	r3, r3, #3
    8320:	subs	r2, r3, r5
    8322:	cmp	r2, #15
    8324:	ble.n	830c <_malloc_r+0x100>
    8326:	mov	r4, r1
    8328:	ldr.w	ip, [r1, #12]
    832c:	ldr.w	r8, [r4, #8]!
    8330:	adds	r3, r1, r5
    8332:	orr.w	r5, r5, #1
    8336:	str	r5, [r1, #4]
    8338:	orr.w	r1, r2, #1
    833c:	str.w	ip, [r8, #12]
    8340:	mov	r0, r6
    8342:	str.w	r8, [ip, #8]
    8346:	str	r3, [r7, #20]
    8348:	str	r3, [r7, #16]
    834a:	str.w	lr, [r3, #12]
    834e:	str.w	lr, [r3, #8]
    8352:	str	r1, [r3, #4]
    8354:	str	r2, [r3, r2]
    8356:	bl	8910 <__malloc_unlock>
    835a:	b.n	839c <_malloc_r+0x190>
    835c:	cmp	r1, #16
    835e:	bhi.n	83a4 <_malloc_r+0x198>
    8360:	bl	890c <__malloc_lock>
    8364:	movs	r5, #16
    8366:	movs	r3, #6
    8368:	movs	r0, #2
    836a:	ldr	r7, [pc, #504]	; (8564 <_malloc_r+0x358>)
    836c:	add.w	r3, r7, r3, lsl #2
    8370:	sub.w	r2, r3, #8
    8374:	ldr	r4, [r3, #4]
    8376:	cmp	r4, r2
    8378:	beq.w	8606 <_malloc_r+0x3fa>
    837c:	ldr	r3, [r4, #4]
    837e:	ldr	r1, [r4, #12]
    8380:	ldr	r5, [r4, #8]
    8382:	bic.w	r3, r3, #3
    8386:	add	r3, r4
    8388:	mov	r0, r6
    838a:	ldr	r2, [r3, #4]
    838c:	str	r1, [r5, #12]
    838e:	orr.w	r2, r2, #1
    8392:	str	r5, [r1, #8]
    8394:	str	r2, [r3, #4]
    8396:	bl	8910 <__malloc_unlock>
    839a:	adds	r4, #8
    839c:	mov	r0, r4
    839e:	add	sp, #12
    83a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83a4:	movs	r4, #0
    83a6:	movs	r3, #12
    83a8:	mov	r0, r4
    83aa:	str	r3, [r6, #0]
    83ac:	add	sp, #12
    83ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83b2:	movs	r3, #128	; 0x80
    83b4:	mov.w	lr, #64	; 0x40
    83b8:	movs	r0, #63	; 0x3f
    83ba:	b.n	8250 <_malloc_r+0x44>
    83bc:	mov	r0, lr
    83be:	b.n	827c <_malloc_r+0x70>
    83c0:	add	r3, r4
    83c2:	ldr	r1, [r4, #12]
    83c4:	ldr	r2, [r3, #4]
    83c6:	ldr	r5, [r4, #8]
    83c8:	orr.w	r2, r2, #1
    83cc:	str	r1, [r5, #12]
    83ce:	mov	r0, r6
    83d0:	str	r5, [r1, #8]
    83d2:	str	r2, [r3, #4]
    83d4:	bl	8910 <__malloc_unlock>
    83d8:	adds	r4, #8
    83da:	mov	r0, r4
    83dc:	add	sp, #12
    83de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83e2:	add	r3, r4
    83e4:	mov	r0, r6
    83e6:	ldr	r2, [r3, #4]
    83e8:	orr.w	r2, r2, #1
    83ec:	str	r2, [r3, #4]
    83ee:	bl	8910 <__malloc_unlock>
    83f2:	adds	r4, #8
    83f4:	mov	r0, r4
    83f6:	add	sp, #12
    83f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83fc:	ldr	r4, [r7, #8]
    83fe:	ldr	r3, [r4, #4]
    8400:	bic.w	r8, r3, #3
    8404:	cmp	r8, r5
    8406:	bcc.n	8412 <_malloc_r+0x206>
    8408:	rsb	r3, r5, r8
    840c:	cmp	r3, #15
    840e:	bgt.w	852a <_malloc_r+0x31e>
    8412:	ldr	r3, [pc, #340]	; (8568 <_malloc_r+0x35c>)
    8414:	ldr.w	r9, [pc, #352]	; 8578 <_malloc_r+0x36c>
    8418:	ldr	r2, [r3, #0]
    841a:	ldr.w	r3, [r9]
    841e:	adds	r3, #1
    8420:	add	r2, r5
    8422:	add.w	sl, r4, r8
    8426:	beq.w	86ea <_malloc_r+0x4de>
    842a:	add.w	r2, r2, #4096	; 0x1000
    842e:	adds	r2, #15
    8430:	bic.w	r2, r2, #4080	; 0xff0
    8434:	bic.w	r2, r2, #15
    8438:	mov	r1, r2
    843a:	mov	r0, r6
    843c:	str	r2, [sp, #4]
    843e:	bl	8cf4 <_sbrk_r>
    8442:	cmp.w	r0, #4294967295
    8446:	mov	fp, r0
    8448:	ldr	r2, [sp, #4]
    844a:	beq.w	86fe <_malloc_r+0x4f2>
    844e:	cmp	sl, r0
    8450:	bhi.w	864c <_malloc_r+0x440>
    8454:	ldr	r3, [pc, #276]	; (856c <_malloc_r+0x360>)
    8456:	ldr	r1, [r3, #0]
    8458:	cmp	sl, fp
    845a:	add	r1, r2
    845c:	str	r1, [r3, #0]
    845e:	beq.w	8708 <_malloc_r+0x4fc>
    8462:	ldr.w	r0, [r9]
    8466:	ldr.w	lr, [pc, #272]	; 8578 <_malloc_r+0x36c>
    846a:	adds	r0, #1
    846c:	ittet	ne
    846e:	rsbne	sl, sl, fp
    8472:	addne	r1, sl
    8474:	streq.w	fp, [lr]
    8478:	strne	r1, [r3, #0]
    847a:	ands.w	r1, fp, #7
    847e:	beq.w	86b0 <_malloc_r+0x4a4>
    8482:	rsb	r0, r1, #8
    8486:	rsb	r1, r1, #4096	; 0x1000
    848a:	add	fp, r0
    848c:	adds	r1, #8
    848e:	add	r2, fp
    8490:	ubfx	r2, r2, #0, #12
    8494:	rsb	r9, r2, r1
    8498:	mov	r1, r9
    849a:	mov	r0, r6
    849c:	str	r3, [sp, #4]
    849e:	bl	8cf4 <_sbrk_r>
    84a2:	adds	r3, r0, #1
    84a4:	ldr	r3, [sp, #4]
    84a6:	beq.w	8728 <_malloc_r+0x51c>
    84aa:	rsb	r2, fp, r0
    84ae:	add	r2, r9
    84b0:	orr.w	r2, r2, #1
    84b4:	ldr	r1, [r3, #0]
    84b6:	str.w	fp, [r7, #8]
    84ba:	add	r1, r9
    84bc:	cmp	r4, r7
    84be:	str.w	r2, [fp, #4]
    84c2:	str	r1, [r3, #0]
    84c4:	ldr.w	r9, [pc, #164]	; 856c <_malloc_r+0x360>
    84c8:	beq.n	84f8 <_malloc_r+0x2ec>
    84ca:	cmp.w	r8, #15
    84ce:	bls.w	86cc <_malloc_r+0x4c0>
    84d2:	ldr	r2, [r4, #4]
    84d4:	sub.w	r3, r8, #12
    84d8:	bic.w	r3, r3, #7
    84dc:	adds	r0, r4, r3
    84de:	and.w	r2, r2, #1
    84e2:	mov.w	lr, #5
    84e6:	orrs	r2, r3
    84e8:	cmp	r3, #15
    84ea:	str	r2, [r4, #4]
    84ec:	str.w	lr, [r0, #4]
    84f0:	str.w	lr, [r0, #8]
    84f4:	bhi.w	8730 <_malloc_r+0x524>
    84f8:	ldr	r3, [pc, #116]	; (8570 <_malloc_r+0x364>)
    84fa:	ldr	r4, [r7, #8]
    84fc:	ldr	r2, [r3, #0]
    84fe:	cmp	r1, r2
    8500:	it	hi
    8502:	strhi	r1, [r3, #0]
    8504:	ldr	r3, [pc, #108]	; (8574 <_malloc_r+0x368>)
    8506:	ldr	r2, [r3, #0]
    8508:	cmp	r1, r2
    850a:	ldr	r2, [r4, #4]
    850c:	it	hi
    850e:	strhi	r1, [r3, #0]
    8510:	bic.w	r2, r2, #3
    8514:	cmp	r5, r2
    8516:	sub.w	r3, r2, r5
    851a:	bhi.n	8520 <_malloc_r+0x314>
    851c:	cmp	r3, #15
    851e:	bgt.n	852a <_malloc_r+0x31e>
    8520:	mov	r0, r6
    8522:	bl	8910 <__malloc_unlock>
    8526:	movs	r4, #0
    8528:	b.n	839c <_malloc_r+0x190>
    852a:	adds	r2, r4, r5
    852c:	orr.w	r3, r3, #1
    8530:	orr.w	r5, r5, #1
    8534:	str	r5, [r4, #4]
    8536:	mov	r0, r6
    8538:	str	r2, [r7, #8]
    853a:	str	r3, [r2, #4]
    853c:	bl	8910 <__malloc_unlock>
    8540:	adds	r4, #8
    8542:	mov	r0, r4
    8544:	add	sp, #12
    8546:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    854a:	cmp	r3, #20
    854c:	bls.n	8632 <_malloc_r+0x426>
    854e:	cmp	r3, #84	; 0x54
    8550:	bhi.w	869c <_malloc_r+0x490>
    8554:	lsrs	r0, r5, #12
    8556:	add.w	lr, r0, #111	; 0x6f
    855a:	mov.w	r3, lr, lsl #1
    855e:	adds	r0, #110	; 0x6e
    8560:	b.n	8250 <_malloc_r+0x44>
    8562:	nop
    8564:	.word	0x20001780
    8568:	.word	0x20002344
    856c:	.word	0x20002348
    8570:	.word	0x20002340
    8574:	.word	0x2000233c
    8578:	.word	0x20001b8c
    857c:	lsrs	r2, r3, #9
    857e:	cmp	r2, #4
    8580:	bls.n	8640 <_malloc_r+0x434>
    8582:	cmp	r2, #20
    8584:	bhi.w	86ee <_malloc_r+0x4e2>
    8588:	add.w	r1, r2, #92	; 0x5c
    858c:	lsls	r1, r1, #1
    858e:	adds	r2, #91	; 0x5b
    8590:	add.w	ip, r7, r1, lsl #2
    8594:	ldr.w	r1, [r7, r1, lsl #2]
    8598:	ldr.w	r8, [pc, #476]	; 8778 <_malloc_r+0x56c>
    859c:	sub.w	ip, ip, #8
    85a0:	cmp	ip, r1
    85a2:	beq.w	86b6 <_malloc_r+0x4aa>
    85a6:	ldr	r2, [r1, #4]
    85a8:	bic.w	r2, r2, #3
    85ac:	cmp	r3, r2
    85ae:	bcs.n	85b6 <_malloc_r+0x3aa>
    85b0:	ldr	r1, [r1, #8]
    85b2:	cmp	ip, r1
    85b4:	bne.n	85a6 <_malloc_r+0x39a>
    85b6:	ldr.w	ip, [r1, #12]
    85ba:	ldr	r2, [r7, #4]
    85bc:	str.w	ip, [r4, #12]
    85c0:	str	r1, [r4, #8]
    85c2:	str.w	r4, [ip, #8]
    85c6:	str	r4, [r1, #12]
    85c8:	b.n	82dc <_malloc_r+0xd0>
    85ca:	adds	r3, r4, r5
    85cc:	orr.w	r7, r2, #1
    85d0:	orr.w	r5, r5, #1
    85d4:	str	r5, [r4, #4]
    85d6:	mov	r0, r6
    85d8:	str	r3, [r1, #20]
    85da:	str	r3, [r1, #16]
    85dc:	str.w	lr, [r3, #12]
    85e0:	str.w	lr, [r3, #8]
    85e4:	str	r7, [r3, #4]
    85e6:	str	r2, [r3, r2]
    85e8:	adds	r4, #8
    85ea:	bl	8910 <__malloc_unlock>
    85ee:	b.n	839c <_malloc_r+0x190>
    85f0:	ldr	r2, [r1, #4]
    85f2:	b.n	82dc <_malloc_r+0xd0>
    85f4:	add.w	r8, r8, #1
    85f8:	tst.w	r8, #3
    85fc:	add.w	ip, ip, #8
    8600:	bne.w	8302 <_malloc_r+0xf6>
    8604:	b.n	8668 <_malloc_r+0x45c>
    8606:	ldr	r4, [r3, #12]
    8608:	cmp	r3, r4
    860a:	it	eq
    860c:	addeq	r0, #2
    860e:	beq.w	827c <_malloc_r+0x70>
    8612:	b.n	837c <_malloc_r+0x170>
    8614:	add	r3, r1
    8616:	mov	r4, r1
    8618:	ldr	r2, [r3, #4]
    861a:	ldr	r1, [r1, #12]
    861c:	ldr.w	r5, [r4, #8]!
    8620:	orr.w	r2, r2, #1
    8624:	str	r2, [r3, #4]
    8626:	mov	r0, r6
    8628:	str	r1, [r5, #12]
    862a:	str	r5, [r1, #8]
    862c:	bl	8910 <__malloc_unlock>
    8630:	b.n	839c <_malloc_r+0x190>
    8632:	add.w	lr, r3, #92	; 0x5c
    8636:	add.w	r0, r3, #91	; 0x5b
    863a:	mov.w	r3, lr, lsl #1
    863e:	b.n	8250 <_malloc_r+0x44>
    8640:	lsrs	r2, r3, #6
    8642:	add.w	r1, r2, #57	; 0x39
    8646:	lsls	r1, r1, #1
    8648:	adds	r2, #56	; 0x38
    864a:	b.n	8590 <_malloc_r+0x384>
    864c:	cmp	r4, r7
    864e:	ldr	r3, [pc, #296]	; (8778 <_malloc_r+0x56c>)
    8650:	beq.w	8454 <_malloc_r+0x248>
    8654:	ldr	r4, [r3, #8]
    8656:	ldr	r2, [r4, #4]
    8658:	bic.w	r2, r2, #3
    865c:	b.n	8514 <_malloc_r+0x308>
    865e:	ldr.w	r3, [r9], #-8
    8662:	cmp	r9, r3
    8664:	bne.w	876c <_malloc_r+0x560>
    8668:	tst.w	r0, #3
    866c:	add.w	r0, r0, #4294967295
    8670:	bne.n	865e <_malloc_r+0x452>
    8672:	ldr	r3, [r7, #4]
    8674:	bic.w	r3, r3, r4
    8678:	str	r3, [r7, #4]
    867a:	lsls	r4, r4, #1
    867c:	cmp	r4, r3
    867e:	bhi.w	83fc <_malloc_r+0x1f0>
    8682:	cmp	r4, #0
    8684:	beq.w	83fc <_malloc_r+0x1f0>
    8688:	tst	r4, r3
    868a:	mov	r0, r8
    868c:	bne.w	82fa <_malloc_r+0xee>
    8690:	lsls	r4, r4, #1
    8692:	tst	r4, r3
    8694:	add.w	r0, r0, #4
    8698:	beq.n	8690 <_malloc_r+0x484>
    869a:	b.n	82fa <_malloc_r+0xee>
    869c:	cmp.w	r3, #340	; 0x154
    86a0:	bhi.n	86d4 <_malloc_r+0x4c8>
    86a2:	lsrs	r0, r5, #15
    86a4:	add.w	lr, r0, #120	; 0x78
    86a8:	mov.w	r3, lr, lsl #1
    86ac:	adds	r0, #119	; 0x77
    86ae:	b.n	8250 <_malloc_r+0x44>
    86b0:	mov.w	r1, #4096	; 0x1000
    86b4:	b.n	848e <_malloc_r+0x282>
    86b6:	movs	r1, #1
    86b8:	ldr.w	r3, [r8, #4]
    86bc:	asrs	r2, r2, #2
    86be:	lsl.w	r2, r1, r2
    86c2:	orrs	r2, r3
    86c4:	str.w	r2, [r8, #4]
    86c8:	mov	r1, ip
    86ca:	b.n	85bc <_malloc_r+0x3b0>
    86cc:	movs	r3, #1
    86ce:	str.w	r3, [fp, #4]
    86d2:	b.n	8520 <_malloc_r+0x314>
    86d4:	movw	r2, #1364	; 0x554
    86d8:	cmp	r3, r2
    86da:	bhi.n	871e <_malloc_r+0x512>
    86dc:	lsrs	r0, r5, #18
    86de:	add.w	lr, r0, #125	; 0x7d
    86e2:	mov.w	r3, lr, lsl #1
    86e6:	adds	r0, #124	; 0x7c
    86e8:	b.n	8250 <_malloc_r+0x44>
    86ea:	adds	r2, #16
    86ec:	b.n	8438 <_malloc_r+0x22c>
    86ee:	cmp	r2, #84	; 0x54
    86f0:	bhi.n	8740 <_malloc_r+0x534>
    86f2:	lsrs	r2, r3, #12
    86f4:	add.w	r1, r2, #111	; 0x6f
    86f8:	lsls	r1, r1, #1
    86fa:	adds	r2, #110	; 0x6e
    86fc:	b.n	8590 <_malloc_r+0x384>
    86fe:	ldr	r4, [r7, #8]
    8700:	ldr	r2, [r4, #4]
    8702:	bic.w	r2, r2, #3
    8706:	b.n	8514 <_malloc_r+0x308>
    8708:	ubfx	r0, sl, #0, #12
    870c:	cmp	r0, #0
    870e:	bne.w	8462 <_malloc_r+0x256>
    8712:	add	r2, r8
    8714:	ldr	r3, [r7, #8]
    8716:	orr.w	r2, r2, #1
    871a:	str	r2, [r3, #4]
    871c:	b.n	84f8 <_malloc_r+0x2ec>
    871e:	movs	r3, #254	; 0xfe
    8720:	mov.w	lr, #127	; 0x7f
    8724:	movs	r0, #126	; 0x7e
    8726:	b.n	8250 <_malloc_r+0x44>
    8728:	movs	r2, #1
    872a:	mov.w	r9, #0
    872e:	b.n	84b4 <_malloc_r+0x2a8>
    8730:	add.w	r1, r4, #8
    8734:	mov	r0, r6
    8736:	bl	c54c <_free_r>
    873a:	ldr.w	r1, [r9]
    873e:	b.n	84f8 <_malloc_r+0x2ec>
    8740:	cmp.w	r2, #340	; 0x154
    8744:	bhi.n	8752 <_malloc_r+0x546>
    8746:	lsrs	r2, r3, #15
    8748:	add.w	r1, r2, #120	; 0x78
    874c:	lsls	r1, r1, #1
    874e:	adds	r2, #119	; 0x77
    8750:	b.n	8590 <_malloc_r+0x384>
    8752:	movw	r1, #1364	; 0x554
    8756:	cmp	r2, r1
    8758:	bhi.n	8766 <_malloc_r+0x55a>
    875a:	lsrs	r2, r3, #18
    875c:	add.w	r1, r2, #125	; 0x7d
    8760:	lsls	r1, r1, #1
    8762:	adds	r2, #124	; 0x7c
    8764:	b.n	8590 <_malloc_r+0x384>
    8766:	movs	r1, #254	; 0xfe
    8768:	movs	r2, #126	; 0x7e
    876a:	b.n	8590 <_malloc_r+0x384>
    876c:	ldr	r3, [r7, #4]
    876e:	b.n	867a <_malloc_r+0x46e>
    8770:	lsrs	r0, r5, #3
    8772:	adds	r3, r0, #1
    8774:	lsls	r3, r3, #1
    8776:	b.n	836a <_malloc_r+0x15e>
    8778:	.word	0x20001780

0000877c <__ascii_mbtowc>:
    877c:	sub	sp, #8
    877e:	cbz	r1, 8794 <__ascii_mbtowc+0x18>
    8780:	cbz	r2, 879a <__ascii_mbtowc+0x1e>
    8782:	cbz	r3, 87a0 <__ascii_mbtowc+0x24>
    8784:	ldrb	r3, [r2, #0]
    8786:	str	r3, [r1, #0]
    8788:	ldrb	r2, [r2, #0]
    878a:	adds	r0, r2, #0
    878c:	it	ne
    878e:	movne	r0, #1
    8790:	add	sp, #8
    8792:	bx	lr
    8794:	add	r1, sp, #4
    8796:	cmp	r2, #0
    8798:	bne.n	8782 <__ascii_mbtowc+0x6>
    879a:	mov	r0, r2
    879c:	add	sp, #8
    879e:	bx	lr
    87a0:	mvn.w	r0, #1
    87a4:	b.n	8790 <__ascii_mbtowc+0x14>
    87a6:	nop

000087a8 <memmove>:
    87a8:	cmp	r0, r1
    87aa:	push	{r4, r5, r6, r7, lr}
    87ac:	bls.n	87ca <memmove+0x22>
    87ae:	adds	r3, r1, r2
    87b0:	cmp	r0, r3
    87b2:	bcs.n	87ca <memmove+0x22>
    87b4:	adds	r1, r0, r2
    87b6:	cmp	r2, #0
    87b8:	beq.n	885e <memmove+0xb6>
    87ba:	subs	r2, r3, r2
    87bc:	ldrb.w	r4, [r3, #-1]!
    87c0:	strb.w	r4, [r1, #-1]!
    87c4:	cmp	r3, r2
    87c6:	bne.n	87bc <memmove+0x14>
    87c8:	pop	{r4, r5, r6, r7, pc}
    87ca:	cmp	r2, #15
    87cc:	bls.n	8860 <memmove+0xb8>
    87ce:	orr.w	r3, r1, r0
    87d2:	lsls	r3, r3, #30
    87d4:	bne.n	8864 <memmove+0xbc>
    87d6:	add.w	r4, r0, #16
    87da:	add.w	r3, r1, #16
    87de:	mov	r5, r2
    87e0:	ldr.w	r6, [r3, #-16]
    87e4:	str.w	r6, [r4, #-16]
    87e8:	ldr.w	r6, [r3, #-12]
    87ec:	str.w	r6, [r4, #-12]
    87f0:	ldr.w	r6, [r3, #-8]
    87f4:	str.w	r6, [r4, #-8]
    87f8:	subs	r5, #16
    87fa:	ldr.w	r6, [r3, #-4]
    87fe:	str.w	r6, [r4, #-4]
    8802:	cmp	r5, #15
    8804:	add.w	r3, r3, #16
    8808:	add.w	r4, r4, #16
    880c:	bhi.n	87e0 <memmove+0x38>
    880e:	sub.w	r3, r2, #16
    8812:	bic.w	r3, r3, #15
    8816:	and.w	lr, r2, #15
    881a:	adds	r3, #16
    881c:	cmp.w	lr, #3
    8820:	add	r1, r3
    8822:	add	r3, r0
    8824:	bls.n	886a <memmove+0xc2>
    8826:	subs	r6, r3, #4
    8828:	mov	r5, r1
    882a:	mov	r4, lr
    882c:	subs	r4, #4
    882e:	ldr.w	r7, [r5], #4
    8832:	str.w	r7, [r6, #4]!
    8836:	cmp	r4, #3
    8838:	bhi.n	882c <memmove+0x84>
    883a:	sub.w	r4, lr, #4
    883e:	bic.w	r4, r4, #3
    8842:	adds	r4, #4
    8844:	add	r3, r4
    8846:	add	r1, r4
    8848:	and.w	r2, r2, #3
    884c:	cbz	r2, 8868 <memmove+0xc0>
    884e:	subs	r3, #1
    8850:	add	r2, r1
    8852:	ldrb.w	r4, [r1], #1
    8856:	strb.w	r4, [r3, #1]!
    885a:	cmp	r2, r1
    885c:	bne.n	8852 <memmove+0xaa>
    885e:	pop	{r4, r5, r6, r7, pc}
    8860:	mov	r3, r0
    8862:	b.n	884c <memmove+0xa4>
    8864:	mov	r3, r0
    8866:	b.n	884e <memmove+0xa6>
    8868:	pop	{r4, r5, r6, r7, pc}
    886a:	mov	r2, lr
    886c:	b.n	884c <memmove+0xa4>
    886e:	nop

00008870 <memset>:
    8870:	push	{r4, r5, r6}
    8872:	lsls	r4, r0, #30
    8874:	beq.n	8904 <memset+0x94>
    8876:	subs	r4, r2, #1
    8878:	cmp	r2, #0
    887a:	beq.n	8900 <memset+0x90>
    887c:	uxtb	r5, r1
    887e:	mov	r3, r0
    8880:	b.n	8888 <memset+0x18>
    8882:	subs	r2, r4, #1
    8884:	cbz	r4, 8900 <memset+0x90>
    8886:	mov	r4, r2
    8888:	strb.w	r5, [r3], #1
    888c:	lsls	r2, r3, #30
    888e:	bne.n	8882 <memset+0x12>
    8890:	cmp	r4, #3
    8892:	bls.n	88f2 <memset+0x82>
    8894:	uxtb	r5, r1
    8896:	orr.w	r5, r5, r5, lsl #8
    889a:	cmp	r4, #15
    889c:	orr.w	r5, r5, r5, lsl #16
    88a0:	bls.n	88d6 <memset+0x66>
    88a2:	add.w	r2, r3, #16
    88a6:	mov	r6, r4
    88a8:	subs	r6, #16
    88aa:	cmp	r6, #15
    88ac:	str.w	r5, [r2, #-16]
    88b0:	str.w	r5, [r2, #-12]
    88b4:	str.w	r5, [r2, #-8]
    88b8:	str.w	r5, [r2, #-4]
    88bc:	add.w	r2, r2, #16
    88c0:	bhi.n	88a8 <memset+0x38>
    88c2:	sub.w	r2, r4, #16
    88c6:	bic.w	r2, r2, #15
    88ca:	and.w	r4, r4, #15
    88ce:	adds	r2, #16
    88d0:	cmp	r4, #3
    88d2:	add	r3, r2
    88d4:	bls.n	88f2 <memset+0x82>
    88d6:	mov	r6, r3
    88d8:	mov	r2, r4
    88da:	subs	r2, #4
    88dc:	cmp	r2, #3
    88de:	str.w	r5, [r6], #4
    88e2:	bhi.n	88da <memset+0x6a>
    88e4:	subs	r2, r4, #4
    88e6:	bic.w	r2, r2, #3
    88ea:	adds	r2, #4
    88ec:	add	r3, r2
    88ee:	and.w	r4, r4, #3
    88f2:	cbz	r4, 8900 <memset+0x90>
    88f4:	uxtb	r1, r1
    88f6:	add	r4, r3
    88f8:	strb.w	r1, [r3], #1
    88fc:	cmp	r3, r4
    88fe:	bne.n	88f8 <memset+0x88>
    8900:	pop	{r4, r5, r6}
    8902:	bx	lr
    8904:	mov	r4, r2
    8906:	mov	r3, r0
    8908:	b.n	8890 <memset+0x20>
    890a:	nop

0000890c <__malloc_lock>:
    890c:	bx	lr
    890e:	nop

00008910 <__malloc_unlock>:
    8910:	bx	lr
    8912:	nop

00008914 <_realloc_r>:
    8914:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8918:	mov	r7, r2
    891a:	sub	sp, #12
    891c:	cmp	r1, #0
    891e:	beq.w	8aa4 <_realloc_r+0x190>
    8922:	mov	r6, r1
    8924:	mov	r9, r0
    8926:	add.w	r5, r7, #11
    892a:	bl	890c <__malloc_lock>
    892e:	ldr.w	lr, [r6, #-4]
    8932:	cmp	r5, #22
    8934:	bic.w	r4, lr, #3
    8938:	sub.w	r8, r6, #8
    893c:	bhi.n	89c0 <_realloc_r+0xac>
    893e:	movs	r2, #16
    8940:	mov	r5, r2
    8942:	cmp	r7, r5
    8944:	bhi.n	89ca <_realloc_r+0xb6>
    8946:	cmp	r4, r2
    8948:	bge.n	8a36 <_realloc_r+0x122>
    894a:	ldr	r3, [pc, #804]	; (8c70 <_realloc_r+0x35c>)
    894c:	ldr	r1, [r3, #8]
    894e:	add.w	r0, r8, r4
    8952:	cmp	r0, r1
    8954:	ldr	r1, [r0, #4]
    8956:	beq.w	8b0c <_realloc_r+0x1f8>
    895a:	bic.w	r3, r1, #1
    895e:	add	r3, r0
    8960:	ldr	r3, [r3, #4]
    8962:	lsls	r3, r3, #31
    8964:	bpl.n	8a62 <_realloc_r+0x14e>
    8966:	tst.w	lr, #1
    896a:	beq.n	89d8 <_realloc_r+0xc4>
    896c:	mov	r1, r7
    896e:	mov	r0, r9
    8970:	bl	820c <_malloc_r>
    8974:	mov	r7, r0
    8976:	cbz	r0, 89b2 <_realloc_r+0x9e>
    8978:	ldr.w	r3, [r6, #-4]
    897c:	bic.w	r3, r3, #1
    8980:	add	r3, r8
    8982:	sub.w	r2, r0, #8
    8986:	cmp	r2, r3
    8988:	beq.w	8c14 <_realloc_r+0x300>
    898c:	subs	r2, r4, #4
    898e:	cmp	r2, #36	; 0x24
    8990:	bhi.w	8bf6 <_realloc_r+0x2e2>
    8994:	cmp	r2, #19
    8996:	bhi.w	8ba2 <_realloc_r+0x28e>
    899a:	mov	r3, r0
    899c:	mov	r2, r6
    899e:	ldr	r1, [r2, #0]
    89a0:	str	r1, [r3, #0]
    89a2:	ldr	r1, [r2, #4]
    89a4:	str	r1, [r3, #4]
    89a6:	ldr	r2, [r2, #8]
    89a8:	str	r2, [r3, #8]
    89aa:	mov	r1, r6
    89ac:	mov	r0, r9
    89ae:	bl	c54c <_free_r>
    89b2:	mov	r0, r9
    89b4:	bl	8910 <__malloc_unlock>
    89b8:	mov	r0, r7
    89ba:	add	sp, #12
    89bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89c0:	bic.w	r5, r5, #7
    89c4:	cmp	r5, #0
    89c6:	mov	r2, r5
    89c8:	bge.n	8942 <_realloc_r+0x2e>
    89ca:	movs	r3, #12
    89cc:	movs	r0, #0
    89ce:	str.w	r3, [r9]
    89d2:	add	sp, #12
    89d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89d8:	ldr.w	r3, [r6, #-8]
    89dc:	rsb	sl, r3, r8
    89e0:	ldr.w	r3, [sl, #4]
    89e4:	bic.w	ip, r3, #3
    89e8:	add.w	r3, r4, ip
    89ec:	cmp	r3, r2
    89ee:	blt.n	896c <_realloc_r+0x58>
    89f0:	mov	r7, sl
    89f2:	ldr.w	r1, [sl, #12]
    89f6:	ldr.w	r0, [r7, #8]!
    89fa:	subs	r2, r4, #4
    89fc:	cmp	r2, #36	; 0x24
    89fe:	str	r1, [r0, #12]
    8a00:	str	r0, [r1, #8]
    8a02:	bhi.w	8c34 <_realloc_r+0x320>
    8a06:	cmp	r2, #19
    8a08:	bls.w	8c30 <_realloc_r+0x31c>
    8a0c:	ldr	r1, [r6, #0]
    8a0e:	str.w	r1, [sl, #8]
    8a12:	ldr	r1, [r6, #4]
    8a14:	str.w	r1, [sl, #12]
    8a18:	cmp	r2, #27
    8a1a:	bhi.w	8c74 <_realloc_r+0x360>
    8a1e:	adds	r6, #8
    8a20:	add.w	r2, sl, #16
    8a24:	ldr	r1, [r6, #0]
    8a26:	str	r1, [r2, #0]
    8a28:	ldr	r1, [r6, #4]
    8a2a:	str	r1, [r2, #4]
    8a2c:	ldr	r1, [r6, #8]
    8a2e:	str	r1, [r2, #8]
    8a30:	mov	r6, r7
    8a32:	mov	r4, r3
    8a34:	mov	r8, sl
    8a36:	subs	r3, r4, r5
    8a38:	cmp	r3, #15
    8a3a:	bhi.n	8a78 <_realloc_r+0x164>
    8a3c:	ldr.w	r3, [r8, #4]
    8a40:	and.w	r3, r3, #1
    8a44:	orrs	r3, r4
    8a46:	add	r4, r8
    8a48:	str.w	r3, [r8, #4]
    8a4c:	ldr	r3, [r4, #4]
    8a4e:	orr.w	r3, r3, #1
    8a52:	str	r3, [r4, #4]
    8a54:	mov	r0, r9
    8a56:	bl	8910 <__malloc_unlock>
    8a5a:	mov	r0, r6
    8a5c:	add	sp, #12
    8a5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a62:	bic.w	r1, r1, #3
    8a66:	add	r1, r4
    8a68:	cmp	r1, r2
    8a6a:	blt.n	8ab0 <_realloc_r+0x19c>
    8a6c:	ldr	r3, [r0, #12]
    8a6e:	ldr	r2, [r0, #8]
    8a70:	mov	r4, r1
    8a72:	str	r3, [r2, #12]
    8a74:	str	r2, [r3, #8]
    8a76:	b.n	8a36 <_realloc_r+0x122>
    8a78:	ldr.w	r2, [r8, #4]
    8a7c:	add.w	r1, r8, r5
    8a80:	and.w	r2, r2, #1
    8a84:	orrs	r5, r2
    8a86:	orr.w	r2, r3, #1
    8a8a:	add	r3, r1
    8a8c:	str.w	r5, [r8, #4]
    8a90:	str	r2, [r1, #4]
    8a92:	ldr	r2, [r3, #4]
    8a94:	orr.w	r2, r2, #1
    8a98:	adds	r1, #8
    8a9a:	str	r2, [r3, #4]
    8a9c:	mov	r0, r9
    8a9e:	bl	c54c <_free_r>
    8aa2:	b.n	8a54 <_realloc_r+0x140>
    8aa4:	mov	r1, r2
    8aa6:	add	sp, #12
    8aa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8aac:	b.w	820c <_malloc_r>
    8ab0:	tst.w	lr, #1
    8ab4:	bne.w	896c <_realloc_r+0x58>
    8ab8:	ldr.w	r3, [r6, #-8]
    8abc:	rsb	sl, r3, r8
    8ac0:	ldr.w	r3, [sl, #4]
    8ac4:	bic.w	ip, r3, #3
    8ac8:	add.w	lr, r1, ip
    8acc:	cmp	lr, r2
    8ace:	blt.n	89e8 <_realloc_r+0xd4>
    8ad0:	ldr	r3, [r0, #12]
    8ad2:	ldr	r2, [r0, #8]
    8ad4:	mov	r7, sl
    8ad6:	str	r3, [r2, #12]
    8ad8:	str	r2, [r3, #8]
    8ada:	ldr.w	r1, [r7, #8]!
    8ade:	ldr.w	r3, [sl, #12]
    8ae2:	str	r3, [r1, #12]
    8ae4:	subs	r2, r4, #4
    8ae6:	cmp	r2, #36	; 0x24
    8ae8:	str	r1, [r3, #8]
    8aea:	bhi.w	8c20 <_realloc_r+0x30c>
    8aee:	cmp	r2, #19
    8af0:	bls.n	8bb8 <_realloc_r+0x2a4>
    8af2:	ldr	r3, [r6, #0]
    8af4:	str.w	r3, [sl, #8]
    8af8:	ldr	r3, [r6, #4]
    8afa:	str.w	r3, [sl, #12]
    8afe:	cmp	r2, #27
    8b00:	bhi.w	8c44 <_realloc_r+0x330>
    8b04:	adds	r6, #8
    8b06:	add.w	r3, sl, #16
    8b0a:	b.n	8bba <_realloc_r+0x2a6>
    8b0c:	bic.w	fp, r1, #3
    8b10:	add	fp, r4
    8b12:	add.w	r0, r5, #16
    8b16:	cmp	fp, r0
    8b18:	bge.n	8bce <_realloc_r+0x2ba>
    8b1a:	tst.w	lr, #1
    8b1e:	bne.w	896c <_realloc_r+0x58>
    8b22:	ldr.w	r1, [r6, #-8]
    8b26:	rsb	sl, r1, r8
    8b2a:	ldr.w	r1, [sl, #4]
    8b2e:	bic.w	ip, r1, #3
    8b32:	add	fp, ip
    8b34:	cmp	r0, fp
    8b36:	bgt.w	89e8 <_realloc_r+0xd4>
    8b3a:	mov	r7, sl
    8b3c:	ldr.w	r1, [sl, #12]
    8b40:	ldr.w	r0, [r7, #8]!
    8b44:	subs	r2, r4, #4
    8b46:	cmp	r2, #36	; 0x24
    8b48:	str	r1, [r0, #12]
    8b4a:	str	r0, [r1, #8]
    8b4c:	bhi.w	8cb8 <_realloc_r+0x3a4>
    8b50:	cmp	r2, #19
    8b52:	bls.w	8ca0 <_realloc_r+0x38c>
    8b56:	ldr	r1, [r6, #0]
    8b58:	str.w	r1, [sl, #8]
    8b5c:	ldr	r1, [r6, #4]
    8b5e:	str.w	r1, [sl, #12]
    8b62:	cmp	r2, #27
    8b64:	bhi.w	8cc6 <_realloc_r+0x3b2>
    8b68:	adds	r6, #8
    8b6a:	add.w	r2, sl, #16
    8b6e:	ldr	r1, [r6, #0]
    8b70:	str	r1, [r2, #0]
    8b72:	ldr	r1, [r6, #4]
    8b74:	str	r1, [r2, #4]
    8b76:	ldr	r1, [r6, #8]
    8b78:	str	r1, [r2, #8]
    8b7a:	add.w	r1, sl, r5
    8b7e:	rsb	r2, r5, fp
    8b82:	orr.w	r2, r2, #1
    8b86:	str	r1, [r3, #8]
    8b88:	str	r2, [r1, #4]
    8b8a:	ldr.w	r3, [sl, #4]
    8b8e:	and.w	r3, r3, #1
    8b92:	orrs	r5, r3
    8b94:	mov	r0, r9
    8b96:	str.w	r5, [sl, #4]
    8b9a:	bl	8910 <__malloc_unlock>
    8b9e:	mov	r0, r7
    8ba0:	b.n	8a5c <_realloc_r+0x148>
    8ba2:	ldr	r3, [r6, #0]
    8ba4:	str	r3, [r0, #0]
    8ba6:	ldr	r3, [r6, #4]
    8ba8:	str	r3, [r0, #4]
    8baa:	cmp	r2, #27
    8bac:	bhi.n	8bfe <_realloc_r+0x2ea>
    8bae:	add.w	r3, r0, #8
    8bb2:	add.w	r2, r6, #8
    8bb6:	b.n	899e <_realloc_r+0x8a>
    8bb8:	mov	r3, r7
    8bba:	ldr	r2, [r6, #0]
    8bbc:	str	r2, [r3, #0]
    8bbe:	ldr	r2, [r6, #4]
    8bc0:	str	r2, [r3, #4]
    8bc2:	ldr	r2, [r6, #8]
    8bc4:	str	r2, [r3, #8]
    8bc6:	mov	r6, r7
    8bc8:	mov	r4, lr
    8bca:	mov	r8, sl
    8bcc:	b.n	8a36 <_realloc_r+0x122>
    8bce:	add.w	r1, r8, r5
    8bd2:	rsb	fp, r5, fp
    8bd6:	orr.w	r2, fp, #1
    8bda:	str	r1, [r3, #8]
    8bdc:	str	r2, [r1, #4]
    8bde:	ldr.w	r3, [r6, #-4]
    8be2:	and.w	r3, r3, #1
    8be6:	orrs	r5, r3
    8be8:	mov	r0, r9
    8bea:	str.w	r5, [r6, #-4]
    8bee:	bl	8910 <__malloc_unlock>
    8bf2:	mov	r0, r6
    8bf4:	b.n	8a5c <_realloc_r+0x148>
    8bf6:	mov	r1, r6
    8bf8:	bl	87a8 <memmove>
    8bfc:	b.n	89aa <_realloc_r+0x96>
    8bfe:	ldr	r3, [r6, #8]
    8c00:	str	r3, [r0, #8]
    8c02:	ldr	r3, [r6, #12]
    8c04:	str	r3, [r0, #12]
    8c06:	cmp	r2, #36	; 0x24
    8c08:	beq.n	8c5c <_realloc_r+0x348>
    8c0a:	add.w	r3, r0, #16
    8c0e:	add.w	r2, r6, #16
    8c12:	b.n	899e <_realloc_r+0x8a>
    8c14:	ldr.w	r3, [r0, #-4]
    8c18:	bic.w	r3, r3, #3
    8c1c:	add	r4, r3
    8c1e:	b.n	8a36 <_realloc_r+0x122>
    8c20:	mov	r1, r6
    8c22:	mov	r0, r7
    8c24:	mov	r4, lr
    8c26:	mov	r8, sl
    8c28:	bl	87a8 <memmove>
    8c2c:	mov	r6, r7
    8c2e:	b.n	8a36 <_realloc_r+0x122>
    8c30:	mov	r2, r7
    8c32:	b.n	8a24 <_realloc_r+0x110>
    8c34:	mov	r1, r6
    8c36:	mov	r0, r7
    8c38:	mov	r4, r3
    8c3a:	mov	r8, sl
    8c3c:	bl	87a8 <memmove>
    8c40:	mov	r6, r7
    8c42:	b.n	8a36 <_realloc_r+0x122>
    8c44:	ldr	r3, [r6, #8]
    8c46:	str.w	r3, [sl, #16]
    8c4a:	ldr	r3, [r6, #12]
    8c4c:	str.w	r3, [sl, #20]
    8c50:	cmp	r2, #36	; 0x24
    8c52:	beq.n	8c8c <_realloc_r+0x378>
    8c54:	adds	r6, #16
    8c56:	add.w	r3, sl, #24
    8c5a:	b.n	8bba <_realloc_r+0x2a6>
    8c5c:	ldr	r3, [r6, #16]
    8c5e:	str	r3, [r0, #16]
    8c60:	ldr	r3, [r6, #20]
    8c62:	str	r3, [r0, #20]
    8c64:	add.w	r2, r6, #24
    8c68:	add.w	r3, r0, #24
    8c6c:	b.n	899e <_realloc_r+0x8a>
    8c6e:	nop
    8c70:	.word	0x20001780
    8c74:	ldr	r1, [r6, #8]
    8c76:	str.w	r1, [sl, #16]
    8c7a:	ldr	r1, [r6, #12]
    8c7c:	str.w	r1, [sl, #20]
    8c80:	cmp	r2, #36	; 0x24
    8c82:	beq.n	8ca4 <_realloc_r+0x390>
    8c84:	adds	r6, #16
    8c86:	add.w	r2, sl, #24
    8c8a:	b.n	8a24 <_realloc_r+0x110>
    8c8c:	ldr	r3, [r6, #16]
    8c8e:	str.w	r3, [sl, #24]
    8c92:	ldr	r3, [r6, #20]
    8c94:	str.w	r3, [sl, #28]
    8c98:	adds	r6, #24
    8c9a:	add.w	r3, sl, #32
    8c9e:	b.n	8bba <_realloc_r+0x2a6>
    8ca0:	mov	r2, r7
    8ca2:	b.n	8b6e <_realloc_r+0x25a>
    8ca4:	ldr	r2, [r6, #16]
    8ca6:	str.w	r2, [sl, #24]
    8caa:	ldr	r2, [r6, #20]
    8cac:	str.w	r2, [sl, #28]
    8cb0:	adds	r6, #24
    8cb2:	add.w	r2, sl, #32
    8cb6:	b.n	8a24 <_realloc_r+0x110>
    8cb8:	mov	r1, r6
    8cba:	mov	r0, r7
    8cbc:	str	r3, [sp, #4]
    8cbe:	bl	87a8 <memmove>
    8cc2:	ldr	r3, [sp, #4]
    8cc4:	b.n	8b7a <_realloc_r+0x266>
    8cc6:	ldr	r1, [r6, #8]
    8cc8:	str.w	r1, [sl, #16]
    8ccc:	ldr	r1, [r6, #12]
    8cce:	str.w	r1, [sl, #20]
    8cd2:	cmp	r2, #36	; 0x24
    8cd4:	beq.n	8cde <_realloc_r+0x3ca>
    8cd6:	adds	r6, #16
    8cd8:	add.w	r2, sl, #24
    8cdc:	b.n	8b6e <_realloc_r+0x25a>
    8cde:	ldr	r2, [r6, #16]
    8ce0:	str.w	r2, [sl, #24]
    8ce4:	ldr	r2, [r6, #20]
    8ce6:	str.w	r2, [sl, #28]
    8cea:	adds	r6, #24
    8cec:	add.w	r2, sl, #32
    8cf0:	b.n	8b6e <_realloc_r+0x25a>
    8cf2:	nop

00008cf4 <_sbrk_r>:
    8cf4:	push	{r3, r4, r5, lr}
    8cf6:	ldr	r4, [pc, #28]	; (8d14 <_sbrk_r+0x20>)
    8cf8:	movs	r3, #0
    8cfa:	mov	r5, r0
    8cfc:	mov	r0, r1
    8cfe:	str	r3, [r4, #0]
    8d00:	bl	2d74 <_sbrk>
    8d04:	adds	r3, r0, #1
    8d06:	beq.n	8d0a <_sbrk_r+0x16>
    8d08:	pop	{r3, r4, r5, pc}
    8d0a:	ldr	r3, [r4, #0]
    8d0c:	cmp	r3, #0
    8d0e:	beq.n	8d08 <_sbrk_r+0x14>
    8d10:	str	r3, [r5, #0]
    8d12:	pop	{r3, r4, r5, pc}
    8d14:	.word	0x20004284

00008d18 <sprintf>:
    8d18:	push	{r1, r2, r3}
    8d1a:	push	{r4, r5, r6, r7, lr}
    8d1c:	sub	sp, #112	; 0x70
    8d1e:	add	r3, sp, #132	; 0x84
    8d20:	ldr	r1, [pc, #60]	; (8d60 <sprintf+0x48>)
    8d22:	ldr.w	r2, [r3], #4
    8d26:	str	r3, [sp, #4]
    8d28:	mov	r5, r0
    8d2a:	mvn.w	r4, #2147483648	; 0x80000000
    8d2e:	ldr	r0, [r1, #0]
    8d30:	str	r5, [sp, #8]
    8d32:	mov.w	r7, #520	; 0x208
    8d36:	movw	r6, #65535	; 0xffff
    8d3a:	add	r1, sp, #8
    8d3c:	str	r5, [sp, #24]
    8d3e:	strh.w	r7, [sp, #20]
    8d42:	str	r4, [sp, #16]
    8d44:	str	r4, [sp, #28]
    8d46:	strh.w	r6, [sp, #22]
    8d4a:	bl	8e60 <_svfprintf_r>
    8d4e:	ldr	r3, [sp, #8]
    8d50:	movs	r2, #0
    8d52:	strb	r2, [r3, #0]
    8d54:	add	sp, #112	; 0x70
    8d56:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8d5a:	add	sp, #12
    8d5c:	bx	lr
    8d5e:	nop
    8d60:	.word	0x20001610
	...

00008d80 <strlen>:
    8d80:	pld	[r0]
    8d84:	strd	r4, r5, [sp, #-8]!
    8d88:	bic.w	r1, r0, #7
    8d8c:	mvn.w	ip, #0
    8d90:	ands.w	r4, r0, #7
    8d94:	pld	[r1, #32]
    8d98:	bne.w	8e2e <strlen+0xae>
    8d9c:	mov.w	r4, #0
    8da0:	mvn.w	r0, #7
    8da4:	ldrd	r2, r3, [r1]
    8da8:	pld	[r1, #64]	; 0x40
    8dac:	add.w	r0, r0, #8
    8db0:	uadd8	r2, r2, ip
    8db4:	sel	r2, r4, ip
    8db8:	uadd8	r3, r3, ip
    8dbc:	sel	r3, r2, ip
    8dc0:	cbnz	r3, 8e16 <strlen+0x96>
    8dc2:	ldrd	r2, r3, [r1, #8]
    8dc6:	uadd8	r2, r2, ip
    8dca:	add.w	r0, r0, #8
    8dce:	sel	r2, r4, ip
    8dd2:	uadd8	r3, r3, ip
    8dd6:	sel	r3, r2, ip
    8dda:	cbnz	r3, 8e16 <strlen+0x96>
    8ddc:	ldrd	r2, r3, [r1, #16]
    8de0:	uadd8	r2, r2, ip
    8de4:	add.w	r0, r0, #8
    8de8:	sel	r2, r4, ip
    8dec:	uadd8	r3, r3, ip
    8df0:	sel	r3, r2, ip
    8df4:	cbnz	r3, 8e16 <strlen+0x96>
    8df6:	ldrd	r2, r3, [r1, #24]
    8dfa:	add.w	r1, r1, #32
    8dfe:	uadd8	r2, r2, ip
    8e02:	add.w	r0, r0, #8
    8e06:	sel	r2, r4, ip
    8e0a:	uadd8	r3, r3, ip
    8e0e:	sel	r3, r2, ip
    8e12:	cmp	r3, #0
    8e14:	beq.n	8da4 <strlen+0x24>
    8e16:	cmp	r2, #0
    8e18:	itt	eq
    8e1a:	addeq	r0, #4
    8e1c:	moveq	r2, r3
    8e1e:	rev	r2, r2
    8e20:	clz	r2, r2
    8e24:	ldrd	r4, r5, [sp], #8
    8e28:	add.w	r0, r0, r2, lsr #3
    8e2c:	bx	lr
    8e2e:	ldrd	r2, r3, [r1]
    8e32:	and.w	r5, r4, #3
    8e36:	rsb	r0, r4, #0
    8e3a:	mov.w	r5, r5, lsl #3
    8e3e:	tst.w	r4, #4
    8e42:	pld	[r1, #64]	; 0x40
    8e46:	lsl.w	r5, ip, r5
    8e4a:	orn	r2, r2, r5
    8e4e:	itt	ne
    8e50:	ornne	r3, r3, r5
    8e54:	movne	r2, ip
    8e56:	mov.w	r4, #0
    8e5a:	b.n	8db0 <strlen+0x30>
    8e5c:	movs	r0, r0
	...

00008e60 <_svfprintf_r>:
    8e60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e64:	vpush	{d8-d10}
    8e68:	sub	sp, #228	; 0xe4
    8e6a:	mov	r4, r1
    8e6c:	str	r1, [sp, #12]
    8e6e:	mov	sl, r2
    8e70:	str	r3, [sp, #36]	; 0x24
    8e72:	str	r0, [sp, #20]
    8e74:	bl	ca74 <_localeconv_r>
    8e78:	ldr	r3, [r0, #0]
    8e7a:	str	r3, [sp, #64]	; 0x40
    8e7c:	mov	r0, r3
    8e7e:	bl	8d80 <strlen>
    8e82:	ldrh	r3, [r4, #12]
    8e84:	str	r0, [sp, #60]	; 0x3c
    8e86:	lsls	r1, r3, #24
    8e88:	bpl.n	8e92 <_svfprintf_r+0x32>
    8e8a:	ldr	r3, [r4, #16]
    8e8c:	cmp	r3, #0
    8e8e:	beq.w	9f8c <_svfprintf_r+0x112c>
    8e92:	movs	r3, #0
    8e94:	vldr	d8, [pc, #656]	; 9128 <_svfprintf_r+0x2c8>
    8e98:	vldr	d9, [pc, #660]	; 9130 <_svfprintf_r+0x2d0>
    8e9c:	str	r3, [sp, #52]	; 0x34
    8e9e:	str	r3, [sp, #116]	; 0x74
    8ea0:	str	r3, [sp, #112]	; 0x70
    8ea2:	str	r3, [sp, #68]	; 0x44
    8ea4:	str	r3, [sp, #24]
    8ea6:	add	r3, sp, #160	; 0xa0
    8ea8:	str	r3, [sp, #108]	; 0x6c
    8eaa:	mov	r9, r3
    8eac:	ldrb.w	r3, [sl]
    8eb0:	mov	r4, sl
    8eb2:	cbz	r3, 8ef0 <_svfprintf_r+0x90>
    8eb4:	cmp	r3, #37	; 0x25
    8eb6:	bne.n	8ebe <_svfprintf_r+0x5e>
    8eb8:	b.n	8ef0 <_svfprintf_r+0x90>
    8eba:	cmp	r3, #37	; 0x25
    8ebc:	beq.n	8ec6 <_svfprintf_r+0x66>
    8ebe:	ldrb.w	r3, [r4, #1]!
    8ec2:	cmp	r3, #0
    8ec4:	bne.n	8eba <_svfprintf_r+0x5a>
    8ec6:	rsb	r5, sl, r4
    8eca:	cbz	r5, 8ef0 <_svfprintf_r+0x90>
    8ecc:	ldr	r3, [sp, #112]	; 0x70
    8ece:	ldr	r2, [sp, #116]	; 0x74
    8ed0:	str.w	sl, [r9]
    8ed4:	adds	r3, #1
    8ed6:	add	r2, r5
    8ed8:	cmp	r3, #7
    8eda:	str.w	r5, [r9, #4]
    8ede:	str	r2, [sp, #116]	; 0x74
    8ee0:	str	r3, [sp, #112]	; 0x70
    8ee2:	bgt.w	902c <_svfprintf_r+0x1cc>
    8ee6:	add.w	r9, r9, #8
    8eea:	ldr	r3, [sp, #24]
    8eec:	add	r3, r5
    8eee:	str	r3, [sp, #24]
    8ef0:	ldrb	r3, [r4, #0]
    8ef2:	cmp	r3, #0
    8ef4:	beq.w	903e <_svfprintf_r+0x1de>
    8ef8:	movs	r3, #0
    8efa:	mov	r2, r3
    8efc:	strb.w	r3, [sp, #79]	; 0x4f
    8f00:	mov	r1, r3
    8f02:	str	r3, [sp, #28]
    8f04:	mov	fp, r3
    8f06:	mov.w	r8, #4294967295
    8f0a:	ldrb	r3, [r4, #1]
    8f0c:	add.w	sl, r4, #1
    8f10:	mov	r5, r8
    8f12:	add.w	sl, sl, #1
    8f16:	sub.w	r0, r3, #32
    8f1a:	cmp	r0, #88	; 0x58
    8f1c:	bhi.w	9710 <_svfprintf_r+0x8b0>
    8f20:	tbh	[pc, r0, lsl #1]
    8f24:	.word	0x03f60363
    8f28:	.word	0x036b03f6
    8f2c:	.word	0x03f603f6
    8f30:	.word	0x03f603f6
    8f34:	.word	0x03f603f6
    8f38:	.word	0x037e0370
    8f3c:	.word	0x005d03f6
    8f40:	.word	0x03f600df
    8f44:	.word	0x010c00fb
    8f48:	.word	0x010c010c
    8f4c:	.word	0x010c010c
    8f50:	.word	0x010c010c
    8f54:	.word	0x010c010c
    8f58:	.word	0x03f603f6
    8f5c:	.word	0x03f603f6
    8f60:	.word	0x03f603f6
    8f64:	.word	0x03f603f6
    8f68:	.word	0x03f603f6
    8f6c:	.word	0x015e011c
    8f70:	.word	0x015e03f6
    8f74:	.word	0x03f603f6
    8f78:	.word	0x03f603f6
    8f7c:	.word	0x03f602a1
    8f80:	.word	0x02a603f6
    8f84:	.word	0x03f603f6
    8f88:	.word	0x03f603f6
    8f8c:	.word	0x02d803f6
    8f90:	.word	0x03f603f6
    8f94:	.word	0x03f60305
    8f98:	.word	0x03f603f6
    8f9c:	.word	0x03f603f6
    8fa0:	.word	0x03f603f6
    8fa4:	.word	0x03f603f6
    8fa8:	.word	0x034303f6
    8fac:	.word	0x015e0356
    8fb0:	.word	0x015e015e
    8fb4:	.word	0x0356035e
    8fb8:	.word	0x03f603f6
    8fbc:	.word	0x03f603a4
    8fc0:	.word	0x00a203b1
    8fc4:	.word	0x03c30062
    8fc8:	.word	0x03c803f6
    8fcc:	.word	0x038303f6
    8fd0:	.word	0x03f603f6
    8fd4:	.short	0x038b
    8fd6:	ldr	r0, [sp, #28]
    8fd8:	str	r3, [sp, #36]	; 0x24
    8fda:	negs	r0, r0
    8fdc:	str	r0, [sp, #28]
    8fde:	orr.w	fp, fp, #4
    8fe2:	ldrb.w	r3, [sl]
    8fe6:	b.n	8f12 <_svfprintf_r+0xb2>
    8fe8:	mov	r8, r5
    8fea:	ldr	r0, [sp, #36]	; 0x24
    8fec:	movs	r1, #0
    8fee:	movs	r3, #48	; 0x30
    8ff0:	movs	r2, #120	; 0x78
    8ff2:	cmp	r8, r1
    8ff4:	strb.w	r3, [sp, #80]	; 0x50
    8ff8:	ldr	r4, [r0, #0]
    8ffa:	strb.w	r2, [sp, #81]	; 0x51
    8ffe:	add.w	r7, r0, #4
    9002:	mov.w	r5, #0
    9006:	strb.w	r1, [sp, #79]	; 0x4f
    900a:	orr.w	r3, fp, #2
    900e:	blt.w	974a <_svfprintf_r+0x8ea>
    9012:	bic.w	r3, fp, #128	; 0x80
    9016:	orr.w	fp, r3, #2
    901a:	orrs.w	r3, r4, r5
    901e:	str	r7, [sp, #36]	; 0x24
    9020:	beq.w	96f6 <_svfprintf_r+0x896>
    9024:	mov	r7, r1
    9026:	str	r2, [sp, #48]	; 0x30
    9028:	ldr	r0, [pc, #268]	; (9138 <_svfprintf_r+0x2d8>)
    902a:	b.n	958a <_svfprintf_r+0x72a>
    902c:	add	r2, sp, #108	; 0x6c
    902e:	ldr	r1, [sp, #12]
    9030:	ldr	r0, [sp, #20]
    9032:	bl	d2cc <__ssprint_r>
    9036:	cbnz	r0, 904c <_svfprintf_r+0x1ec>
    9038:	add.w	r9, sp, #160	; 0xa0
    903c:	b.n	8eea <_svfprintf_r+0x8a>
    903e:	ldr	r3, [sp, #116]	; 0x74
    9040:	cbz	r3, 904c <_svfprintf_r+0x1ec>
    9042:	ldr	r0, [sp, #20]
    9044:	ldr	r1, [sp, #12]
    9046:	add	r2, sp, #108	; 0x6c
    9048:	bl	d2cc <__ssprint_r>
    904c:	ldr	r3, [sp, #12]
    904e:	ldrh	r3, [r3, #12]
    9050:	tst.w	r3, #64	; 0x40
    9054:	ldr	r3, [sp, #24]
    9056:	it	ne
    9058:	movne.w	r3, #4294967295
    905c:	mov	r0, r3
    905e:	add	sp, #228	; 0xe4
    9060:	vpop	{d8-d10}
    9064:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9068:	str	r3, [sp, #48]	; 0x30
    906a:	mov	r8, r5
    906c:	cmp	r2, #0
    906e:	bne.w	a3a6 <_svfprintf_r+0x1546>
    9072:	ands.w	r3, fp, #32
    9076:	beq.w	9486 <_svfprintf_r+0x626>
    907a:	ldr	r7, [sp, #36]	; 0x24
    907c:	adds	r7, #7
    907e:	bic.w	r3, r7, #7
    9082:	movs	r7, #0
    9084:	add.w	r2, r3, #8
    9088:	cmp	r8, r7
    908a:	str	r2, [sp, #36]	; 0x24
    908c:	ldrd	r4, r5, [r3]
    9090:	strb.w	r7, [sp, #79]	; 0x4f
    9094:	blt.w	9d54 <_svfprintf_r+0xef4>
    9098:	orrs.w	r3, r4, r5
    909c:	bic.w	fp, fp, #128	; 0x80
    90a0:	beq.w	973a <_svfprintf_r+0x8da>
    90a4:	add	r6, sp, #160	; 0xa0
    90a6:	lsrs	r2, r4, #3
    90a8:	orr.w	r2, r2, r5, lsl #29
    90ac:	lsrs	r1, r5, #3
    90ae:	and.w	r3, r4, #7
    90b2:	mov	r5, r1
    90b4:	mov	r4, r2
    90b6:	adds	r3, #48	; 0x30
    90b8:	orrs.w	r2, r4, r5
    90bc:	strb.w	r3, [r6, #-1]!
    90c0:	bne.n	90a6 <_svfprintf_r+0x246>
    90c2:	tst.w	fp, #1
    90c6:	beq.w	9518 <_svfprintf_r+0x6b8>
    90ca:	cmp	r3, #48	; 0x30
    90cc:	beq.w	9518 <_svfprintf_r+0x6b8>
    90d0:	movs	r2, #48	; 0x30
    90d2:	subs	r3, r6, #1
    90d4:	strb.w	r2, [r6, #-1]
    90d8:	add	r2, sp, #160	; 0xa0
    90da:	subs	r2, r2, r3
    90dc:	str	r2, [sp, #32]
    90de:	mov	r6, r3
    90e0:	b.n	951e <_svfprintf_r+0x6be>
    90e2:	ldrb.w	r3, [sl]
    90e6:	cmp	r3, #42	; 0x2a
    90e8:	add.w	r4, sl, #1
    90ec:	beq.w	a34e <_svfprintf_r+0x14ee>
    90f0:	sub.w	r0, r3, #48	; 0x30
    90f4:	cmp	r0, #9
    90f6:	it	ls
    90f8:	movls	r5, #0
    90fa:	bhi.w	a2a8 <_svfprintf_r+0x1448>
    90fe:	ldrb.w	r3, [r4], #1
    9102:	add.w	r5, r5, r5, lsl #2
    9106:	add.w	r5, r0, r5, lsl #1
    910a:	sub.w	r0, r3, #48	; 0x30
    910e:	cmp	r0, #9
    9110:	bls.n	90fe <_svfprintf_r+0x29e>
    9112:	orr.w	r5, r5, r5, asr #31
    9116:	mov	sl, r4
    9118:	b.n	8f16 <_svfprintf_r+0xb6>
    911a:	orr.w	fp, fp, #128	; 0x80
    911e:	ldrb.w	r3, [sl]
    9122:	b.n	8f12 <_svfprintf_r+0xb2>
    9124:	nop.w
	...
    9130:	.word	0xffffffff
    9134:	.word	0x7fefffff
    9138:	.word	0x20000f3c
    913c:	sub.w	r0, r3, #48	; 0x30
    9140:	movs	r3, #0
    9142:	mov	r4, r3
    9144:	ldrb.w	r3, [sl], #1
    9148:	add.w	r4, r4, r4, lsl #2
    914c:	add.w	r4, r0, r4, lsl #1
    9150:	sub.w	r0, r3, #48	; 0x30
    9154:	cmp	r0, #9
    9156:	bls.n	9144 <_svfprintf_r+0x2e4>
    9158:	str	r4, [sp, #28]
    915a:	b.n	8f16 <_svfprintf_r+0xb6>
    915c:	str	r3, [sp, #48]	; 0x30
    915e:	mov	r8, r5
    9160:	cmp	r2, #0
    9162:	bne.w	a3be <_svfprintf_r+0x155e>
    9166:	orr.w	fp, fp, #16
    916a:	tst.w	fp, #32
    916e:	beq.w	9b78 <_svfprintf_r+0xd18>
    9172:	ldr	r7, [sp, #36]	; 0x24
    9174:	adds	r7, #7
    9176:	bic.w	r7, r7, #7
    917a:	ldrd	r2, r3, [r7]
    917e:	add.w	r1, r7, #8
    9182:	str	r1, [sp, #36]	; 0x24
    9184:	mov	r4, r2
    9186:	mov	r5, r3
    9188:	cmp	r2, #0
    918a:	sbcs.w	r3, r3, #0
    918e:	blt.w	9c00 <_svfprintf_r+0xda0>
    9192:	cmp.w	r8, #0
    9196:	ldrb.w	r7, [sp, #79]	; 0x4f
    919a:	blt.w	9508 <_svfprintf_r+0x6a8>
    919e:	orrs.w	r3, r4, r5
    91a2:	bic.w	fp, fp, #128	; 0x80
    91a6:	beq.w	9996 <_svfprintf_r+0xb36>
    91aa:	cmp	r5, #0
    91ac:	it	eq
    91ae:	cmpeq	r4, #10
    91b0:	bcc.w	9510 <_svfprintf_r+0x6b0>
    91b4:	add	r6, sp, #160	; 0xa0
    91b6:	mov	r0, r4
    91b8:	mov	r1, r5
    91ba:	movs	r2, #10
    91bc:	movs	r3, #0
    91be:	bl	d678 <__aeabi_uldivmod>
    91c2:	adds	r2, #48	; 0x30
    91c4:	strb.w	r2, [r6, #-1]!
    91c8:	mov	r0, r4
    91ca:	mov	r1, r5
    91cc:	movs	r3, #0
    91ce:	movs	r2, #10
    91d0:	bl	d678 <__aeabi_uldivmod>
    91d4:	mov	r4, r0
    91d6:	mov	r5, r1
    91d8:	orrs.w	r3, r4, r5
    91dc:	bne.n	91b6 <_svfprintf_r+0x356>
    91de:	b.n	9518 <_svfprintf_r+0x6b8>
    91e0:	str	r3, [sp, #48]	; 0x30
    91e2:	mov	r8, r5
    91e4:	cmp	r2, #0
    91e6:	bne.w	a3b6 <_svfprintf_r+0x1556>
    91ea:	ldr	r7, [sp, #36]	; 0x24
    91ec:	tst.w	fp, #8
    91f0:	add.w	r7, r7, #7
    91f4:	beq.w	9e78 <_svfprintf_r+0x1018>
    91f8:	bic.w	r3, r7, #7
    91fc:	vldr	d8, [r3]
    9200:	add.w	r2, r3, #8
    9204:	str	r2, [sp, #36]	; 0x24
    9206:	vabs.f64	d7, d8
    920a:	vcmp.f64	d7, d9
    920e:	vmrs	APSR_nzcv, fpscr
    9212:	ble.w	9d8e <_svfprintf_r+0xf2e>
    9216:	vcmpe.f64	d8, #0.0
    921a:	vmrs	APSR_nzcv, fpscr
    921e:	bmi.w	a1b6 <_svfprintf_r+0x1356>
    9222:	ldrb.w	r7, [sp, #79]	; 0x4f
    9226:	ldr	r6, [pc, #668]	; (94c4 <_svfprintf_r+0x664>)
    9228:	ldr	r3, [pc, #668]	; (94c8 <_svfprintf_r+0x668>)
    922a:	ldr	r1, [sp, #48]	; 0x30
    922c:	movs	r2, #3
    922e:	mov.w	r8, #0
    9232:	str	r2, [sp, #16]
    9234:	bic.w	fp, fp, #128	; 0x80
    9238:	cmp	r1, #71	; 0x47
    923a:	it	le
    923c:	movle	r6, r3
    923e:	str	r2, [sp, #32]
    9240:	str.w	r8, [sp, #56]	; 0x38
    9244:	cbz	r7, 924c <_svfprintf_r+0x3ec>
    9246:	ldr	r3, [sp, #16]
    9248:	adds	r3, #1
    924a:	str	r3, [sp, #16]
    924c:	ands.w	r3, fp, #2
    9250:	str	r3, [sp, #40]	; 0x28
    9252:	beq.n	925a <_svfprintf_r+0x3fa>
    9254:	ldr	r3, [sp, #16]
    9256:	adds	r3, #2
    9258:	str	r3, [sp, #16]
    925a:	ands.w	r3, fp, #132	; 0x84
    925e:	str	r3, [sp, #44]	; 0x2c
    9260:	bne.w	9764 <_svfprintf_r+0x904>
    9264:	ldr	r3, [sp, #28]
    9266:	ldr	r2, [sp, #16]
    9268:	subs	r4, r3, r2
    926a:	cmp	r4, #0
    926c:	ble.w	9764 <_svfprintf_r+0x904>
    9270:	cmp	r4, #16
    9272:	ldr	r1, [sp, #116]	; 0x74
    9274:	ldr	r2, [sp, #112]	; 0x70
    9276:	ldr	r7, [pc, #596]	; (94cc <_svfprintf_r+0x66c>)
    9278:	ble.n	92c2 <_svfprintf_r+0x462>
    927a:	mov	r0, r9
    927c:	movs	r5, #16
    927e:	mov	r9, r8
    9280:	mov	r8, r6
    9282:	ldr	r6, [sp, #20]
    9284:	b.n	9290 <_svfprintf_r+0x430>
    9286:	subs	r4, #16
    9288:	cmp	r4, #16
    928a:	add.w	r0, r0, #8
    928e:	ble.n	92bc <_svfprintf_r+0x45c>
    9290:	adds	r2, #1
    9292:	adds	r1, #16
    9294:	cmp	r2, #7
    9296:	str	r1, [sp, #116]	; 0x74
    9298:	str	r2, [sp, #112]	; 0x70
    929a:	str	r7, [r0, #0]
    929c:	str	r5, [r0, #4]
    929e:	ble.n	9286 <_svfprintf_r+0x426>
    92a0:	add	r2, sp, #108	; 0x6c
    92a2:	ldr	r1, [sp, #12]
    92a4:	mov	r0, r6
    92a6:	bl	d2cc <__ssprint_r>
    92aa:	cmp	r0, #0
    92ac:	bne.w	904c <_svfprintf_r+0x1ec>
    92b0:	subs	r4, #16
    92b2:	cmp	r4, #16
    92b4:	ldr	r1, [sp, #116]	; 0x74
    92b6:	ldr	r2, [sp, #112]	; 0x70
    92b8:	add	r0, sp, #160	; 0xa0
    92ba:	bgt.n	9290 <_svfprintf_r+0x430>
    92bc:	mov	r6, r8
    92be:	mov	r8, r9
    92c0:	mov	r9, r0
    92c2:	adds	r2, #1
    92c4:	adds	r3, r4, r1
    92c6:	cmp	r2, #7
    92c8:	str	r3, [sp, #116]	; 0x74
    92ca:	str	r2, [sp, #112]	; 0x70
    92cc:	str.w	r7, [r9]
    92d0:	str.w	r4, [r9, #4]
    92d4:	bgt.w	9a9c <_svfprintf_r+0xc3c>
    92d8:	ldrb.w	r7, [sp, #79]	; 0x4f
    92dc:	add.w	r9, r9, #8
    92e0:	cbz	r7, 9300 <_svfprintf_r+0x4a0>
    92e2:	ldr	r2, [sp, #112]	; 0x70
    92e4:	adds	r2, #1
    92e6:	adds	r3, #1
    92e8:	add.w	r0, sp, #79	; 0x4f
    92ec:	movs	r1, #1
    92ee:	cmp	r2, #7
    92f0:	str	r3, [sp, #116]	; 0x74
    92f2:	str	r2, [sp, #112]	; 0x70
    92f4:	stmia.w	r9, {r0, r1}
    92f8:	bgt.w	99ba <_svfprintf_r+0xb5a>
    92fc:	add.w	r9, r9, #8
    9300:	ldr	r2, [sp, #40]	; 0x28
    9302:	cbz	r2, 9320 <_svfprintf_r+0x4c0>
    9304:	ldr	r2, [sp, #112]	; 0x70
    9306:	adds	r2, #1
    9308:	adds	r3, #2
    930a:	add	r0, sp, #80	; 0x50
    930c:	movs	r1, #2
    930e:	cmp	r2, #7
    9310:	str	r3, [sp, #116]	; 0x74
    9312:	str	r2, [sp, #112]	; 0x70
    9314:	stmia.w	r9, {r0, r1}
    9318:	bgt.w	99d2 <_svfprintf_r+0xb72>
    931c:	add.w	r9, r9, #8
    9320:	ldr	r2, [sp, #44]	; 0x2c
    9322:	cmp	r2, #128	; 0x80
    9324:	beq.w	9824 <_svfprintf_r+0x9c4>
    9328:	ldr	r2, [sp, #32]
    932a:	rsb	r4, r2, r8
    932e:	cmp	r4, #0
    9330:	ble.n	939c <_svfprintf_r+0x53c>
    9332:	cmp	r4, #16
    9334:	ldr	r2, [sp, #112]	; 0x70
    9336:	ldr	r7, [pc, #408]	; (94d0 <_svfprintf_r+0x670>)
    9338:	ble.n	9382 <_svfprintf_r+0x522>
    933a:	mov	r1, r9
    933c:	mov.w	r8, #16
    9340:	mov	r9, r6
    9342:	ldr	r5, [sp, #20]
    9344:	ldr	r6, [sp, #12]
    9346:	b.n	9352 <_svfprintf_r+0x4f2>
    9348:	subs	r4, #16
    934a:	cmp	r4, #16
    934c:	add.w	r1, r1, #8
    9350:	ble.n	937e <_svfprintf_r+0x51e>
    9352:	adds	r2, #1
    9354:	adds	r3, #16
    9356:	cmp	r2, #7
    9358:	str	r3, [sp, #116]	; 0x74
    935a:	str	r2, [sp, #112]	; 0x70
    935c:	stmia.w	r1, {r7, r8}
    9360:	ble.n	9348 <_svfprintf_r+0x4e8>
    9362:	add	r2, sp, #108	; 0x6c
    9364:	mov	r1, r6
    9366:	mov	r0, r5
    9368:	bl	d2cc <__ssprint_r>
    936c:	cmp	r0, #0
    936e:	bne.w	904c <_svfprintf_r+0x1ec>
    9372:	subs	r4, #16
    9374:	cmp	r4, #16
    9376:	ldr	r3, [sp, #116]	; 0x74
    9378:	ldr	r2, [sp, #112]	; 0x70
    937a:	add	r1, sp, #160	; 0xa0
    937c:	bgt.n	9352 <_svfprintf_r+0x4f2>
    937e:	mov	r6, r9
    9380:	mov	r9, r1
    9382:	adds	r2, #1
    9384:	add	r3, r4
    9386:	cmp	r2, #7
    9388:	str	r3, [sp, #116]	; 0x74
    938a:	str	r2, [sp, #112]	; 0x70
    938c:	str.w	r7, [r9]
    9390:	str.w	r4, [r9, #4]
    9394:	bgt.w	99a2 <_svfprintf_r+0xb42>
    9398:	add.w	r9, r9, #8
    939c:	tst.w	fp, #256	; 0x100
    93a0:	bne.w	9768 <_svfprintf_r+0x908>
    93a4:	ldr	r2, [sp, #112]	; 0x70
    93a6:	ldr	r0, [sp, #32]
    93a8:	str.w	r6, [r9]
    93ac:	adds	r2, #1
    93ae:	add	r3, r0
    93b0:	cmp	r2, #7
    93b2:	str	r3, [sp, #116]	; 0x74
    93b4:	str.w	r0, [r9, #4]
    93b8:	str	r2, [sp, #112]	; 0x70
    93ba:	bgt.w	9942 <_svfprintf_r+0xae2>
    93be:	add.w	r9, r9, #8
    93c2:	tst.w	fp, #4
    93c6:	beq.n	9446 <_svfprintf_r+0x5e6>
    93c8:	ldr	r2, [sp, #28]
    93ca:	ldr	r1, [sp, #16]
    93cc:	subs	r4, r2, r1
    93ce:	cmp	r4, #0
    93d0:	ble.n	9446 <_svfprintf_r+0x5e6>
    93d2:	cmp	r4, #16
    93d4:	ldr	r2, [sp, #112]	; 0x70
    93d6:	ldr	r7, [pc, #244]	; (94cc <_svfprintf_r+0x66c>)
    93d8:	ble.n	9420 <_svfprintf_r+0x5c0>
    93da:	movs	r5, #16
    93dc:	ldr	r6, [sp, #20]
    93de:	ldr.w	r8, [sp, #12]
    93e2:	b.n	93ee <_svfprintf_r+0x58e>
    93e4:	subs	r4, #16
    93e6:	cmp	r4, #16
    93e8:	add.w	r9, r9, #8
    93ec:	ble.n	9420 <_svfprintf_r+0x5c0>
    93ee:	adds	r2, #1
    93f0:	adds	r3, #16
    93f2:	cmp	r2, #7
    93f4:	str	r3, [sp, #116]	; 0x74
    93f6:	str	r2, [sp, #112]	; 0x70
    93f8:	str.w	r7, [r9]
    93fc:	str.w	r5, [r9, #4]
    9400:	ble.n	93e4 <_svfprintf_r+0x584>
    9402:	add	r2, sp, #108	; 0x6c
    9404:	mov	r1, r8
    9406:	mov	r0, r6
    9408:	bl	d2cc <__ssprint_r>
    940c:	cmp	r0, #0
    940e:	bne.w	904c <_svfprintf_r+0x1ec>
    9412:	subs	r4, #16
    9414:	cmp	r4, #16
    9416:	ldr	r3, [sp, #116]	; 0x74
    9418:	ldr	r2, [sp, #112]	; 0x70
    941a:	add.w	r9, sp, #160	; 0xa0
    941e:	bgt.n	93ee <_svfprintf_r+0x58e>
    9420:	adds	r2, #1
    9422:	add	r3, r4
    9424:	cmp	r2, #7
    9426:	str	r3, [sp, #116]	; 0x74
    9428:	str	r2, [sp, #112]	; 0x70
    942a:	str.w	r7, [r9]
    942e:	str.w	r4, [r9, #4]
    9432:	ble.n	9446 <_svfprintf_r+0x5e6>
    9434:	add	r2, sp, #108	; 0x6c
    9436:	ldr	r1, [sp, #12]
    9438:	ldr	r0, [sp, #20]
    943a:	bl	d2cc <__ssprint_r>
    943e:	cmp	r0, #0
    9440:	bne.w	904c <_svfprintf_r+0x1ec>
    9444:	ldr	r3, [sp, #116]	; 0x74
    9446:	ldr	r2, [sp, #24]
    9448:	ldr	r1, [sp, #28]
    944a:	ldr	r0, [sp, #16]
    944c:	cmp	r1, r0
    944e:	ite	ge
    9450:	addge	r2, r2, r1
    9452:	addlt	r2, r2, r0
    9454:	str	r2, [sp, #24]
    9456:	cmp	r3, #0
    9458:	bne.w	995a <_svfprintf_r+0xafa>
    945c:	movs	r3, #0
    945e:	str	r3, [sp, #112]	; 0x70
    9460:	add.w	r9, sp, #160	; 0xa0
    9464:	b.n	8eac <_svfprintf_r+0x4c>
    9466:	orr.w	fp, fp, #8
    946a:	ldrb.w	r3, [sl]
    946e:	b.n	8f12 <_svfprintf_r+0xb2>
    9470:	str	r3, [sp, #48]	; 0x30
    9472:	mov	r8, r5
    9474:	cmp	r2, #0
    9476:	bne.w	a3ae <_svfprintf_r+0x154e>
    947a:	orr.w	fp, fp, #16
    947e:	ands.w	r3, fp, #32
    9482:	bne.w	907a <_svfprintf_r+0x21a>
    9486:	ands.w	r2, fp, #16
    948a:	bne.w	9bb0 <_svfprintf_r+0xd50>
    948e:	ands.w	r3, fp, #64	; 0x40
    9492:	beq.w	9bb0 <_svfprintf_r+0xd50>
    9496:	ldr	r1, [sp, #36]	; 0x24
    9498:	strb.w	r2, [sp, #79]	; 0x4f
    949c:	mov	r3, r1
    949e:	cmp.w	r8, #0
    94a2:	add.w	r3, r3, #4
    94a6:	ldrh	r4, [r1, #0]
    94a8:	mov.w	r5, #0
    94ac:	blt.w	a006 <_svfprintf_r+0x11a6>
    94b0:	orrs.w	r1, r4, r5
    94b4:	bic.w	fp, fp, #128	; 0x80
    94b8:	str	r3, [sp, #36]	; 0x24
    94ba:	beq.w	973a <_svfprintf_r+0x8da>
    94be:	mov	r7, r2
    94c0:	b.n	90a4 <_svfprintf_r+0x244>
    94c2:	nop
    94c4:	.word	0x20000f1c
    94c8:	.word	0x20000f18
    94cc:	.word	0x20000f58
    94d0:	.word	0x20000f08
    94d4:	str	r3, [sp, #48]	; 0x30
    94d6:	mov	r8, r5
    94d8:	cmp	r2, #0
    94da:	bne.w	a390 <_svfprintf_r+0x1530>
    94de:	orr.w	fp, fp, #16
    94e2:	ands.w	r3, fp, #32
    94e6:	beq.w	9ab8 <_svfprintf_r+0xc58>
    94ea:	ldr	r7, [sp, #36]	; 0x24
    94ec:	adds	r7, #7
    94ee:	bic.w	r3, r7, #7
    94f2:	movs	r7, #0
    94f4:	add.w	r2, r3, #8
    94f8:	cmp	r8, r7
    94fa:	str	r2, [sp, #36]	; 0x24
    94fc:	ldrd	r4, r5, [r3]
    9500:	strb.w	r7, [sp, #79]	; 0x4f
    9504:	bge.w	919e <_svfprintf_r+0x33e>
    9508:	orrs.w	r3, r4, r5
    950c:	bne.w	91aa <_svfprintf_r+0x34a>
    9510:	add	r6, sp, #224	; 0xe0
    9512:	adds	r4, #48	; 0x30
    9514:	strb.w	r4, [r6, #-65]!
    9518:	add	r3, sp, #160	; 0xa0
    951a:	subs	r3, r3, r6
    951c:	str	r3, [sp, #32]
    951e:	ldr	r3, [sp, #32]
    9520:	cmp	r3, r8
    9522:	it	lt
    9524:	movlt	r3, r8
    9526:	str	r3, [sp, #16]
    9528:	movs	r3, #0
    952a:	str	r3, [sp, #56]	; 0x38
    952c:	b.n	9244 <_svfprintf_r+0x3e4>
    952e:	str	r3, [sp, #48]	; 0x30
    9530:	mov	r8, r5
    9532:	cmp	r2, #0
    9534:	bne.w	a388 <_svfprintf_r+0x1528>
    9538:	tst.w	fp, #32
    953c:	ldr	r0, [pc, #776]	; (9848 <_svfprintf_r+0x9e8>)
    953e:	beq.w	964e <_svfprintf_r+0x7ee>
    9542:	ldr	r7, [sp, #36]	; 0x24
    9544:	adds	r7, #7
    9546:	bic.w	r3, r7, #7
    954a:	ldrd	r4, r5, [r3]
    954e:	add.w	r2, r3, #8
    9552:	str	r2, [sp, #36]	; 0x24
    9554:	ands.w	r7, fp, #1
    9558:	beq.w	99ea <_svfprintf_r+0xb8a>
    955c:	orrs.w	r3, r4, r5
    9560:	beq.w	9eaa <_svfprintf_r+0x104a>
    9564:	movs	r7, #0
    9566:	movs	r3, #48	; 0x30
    9568:	ldrb.w	r2, [sp, #48]	; 0x30
    956c:	strb.w	r3, [sp, #80]	; 0x50
    9570:	cmp	r8, r7
    9572:	strb.w	r2, [sp, #81]	; 0x51
    9576:	strb.w	r7, [sp, #79]	; 0x4f
    957a:	orr.w	r3, fp, #2
    957e:	blt.w	a1b0 <_svfprintf_r+0x1350>
    9582:	bic.w	r3, fp, #128	; 0x80
    9586:	orr.w	fp, r3, #2
    958a:	add	r6, sp, #160	; 0xa0
    958c:	lsrs	r3, r4, #4
    958e:	and.w	r1, r4, #15
    9592:	orr.w	r3, r3, r5, lsl #28
    9596:	lsrs	r2, r5, #4
    9598:	mov	r4, r3
    959a:	mov	r5, r2
    959c:	ldrb	r3, [r0, r1]
    959e:	strb.w	r3, [r6, #-1]!
    95a2:	orrs.w	r3, r4, r5
    95a6:	bne.n	958c <_svfprintf_r+0x72c>
    95a8:	b.n	9518 <_svfprintf_r+0x6b8>
    95aa:	ldr	r1, [sp, #36]	; 0x24
    95ac:	str	r3, [sp, #48]	; 0x30
    95ae:	ldr	r2, [r1, #0]
    95b0:	strb.w	r2, [sp, #120]	; 0x78
    95b4:	movs	r3, #0
    95b6:	mov	r2, r1
    95b8:	mov	r7, r3
    95ba:	strb.w	r3, [sp, #79]	; 0x4f
    95be:	adds	r2, #4
    95c0:	movs	r3, #1
    95c2:	str	r3, [sp, #16]
    95c4:	mov	r8, r7
    95c6:	str	r7, [sp, #56]	; 0x38
    95c8:	str	r2, [sp, #36]	; 0x24
    95ca:	str	r3, [sp, #32]
    95cc:	add	r6, sp, #120	; 0x78
    95ce:	b.n	924c <_svfprintf_r+0x3ec>
    95d0:	str	r3, [sp, #48]	; 0x30
    95d2:	mov	r8, r5
    95d4:	cmp	r2, #0
    95d6:	beq.w	916a <_svfprintf_r+0x30a>
    95da:	strb.w	r1, [sp, #79]	; 0x4f
    95de:	b.n	916a <_svfprintf_r+0x30a>
    95e0:	orr.w	fp, fp, #64	; 0x40
    95e4:	ldrb.w	r3, [sl]
    95e8:	b.n	8f12 <_svfprintf_r+0xb2>
    95ea:	ldrb.w	r3, [sl]
    95ee:	cmp	r1, #0
    95f0:	bne.w	8f12 <_svfprintf_r+0xb2>
    95f4:	movs	r2, #1
    95f6:	movs	r1, #32
    95f8:	b.n	8f12 <_svfprintf_r+0xb2>
    95fa:	orr.w	fp, fp, #1
    95fe:	ldrb.w	r3, [sl]
    9602:	b.n	8f12 <_svfprintf_r+0xb2>
    9604:	ldr	r4, [sp, #36]	; 0x24
    9606:	ldr	r3, [r4, #0]
    9608:	str	r3, [sp, #28]
    960a:	mov	r0, r3
    960c:	cmp	r0, #0
    960e:	mov	r3, r4
    9610:	add.w	r3, r3, #4
    9614:	blt.w	8fd6 <_svfprintf_r+0x176>
    9618:	str	r3, [sp, #36]	; 0x24
    961a:	ldrb.w	r3, [sl]
    961e:	b.n	8f12 <_svfprintf_r+0xb2>
    9620:	ldrb.w	r3, [sl]
    9624:	movs	r2, #1
    9626:	movs	r1, #43	; 0x2b
    9628:	b.n	8f12 <_svfprintf_r+0xb2>
    962a:	str	r3, [sp, #48]	; 0x30
    962c:	mov	r8, r5
    962e:	cmp	r2, #0
    9630:	beq.w	94e2 <_svfprintf_r+0x682>
    9634:	strb.w	r1, [sp, #79]	; 0x4f
    9638:	b.n	94e2 <_svfprintf_r+0x682>
    963a:	str	r3, [sp, #48]	; 0x30
    963c:	mov	r8, r5
    963e:	cmp	r2, #0
    9640:	bne.w	a398 <_svfprintf_r+0x1538>
    9644:	tst.w	fp, #32
    9648:	ldr	r0, [pc, #512]	; (984c <_svfprintf_r+0x9ec>)
    964a:	bne.w	9542 <_svfprintf_r+0x6e2>
    964e:	ldr	r2, [sp, #36]	; 0x24
    9650:	tst.w	fp, #16
    9654:	mov	r3, r2
    9656:	bne.w	9bdc <_svfprintf_r+0xd7c>
    965a:	tst.w	fp, #64	; 0x40
    965e:	beq.w	9bdc <_svfprintf_r+0xd7c>
    9662:	adds	r3, #4
    9664:	ldrh	r4, [r2, #0]
    9666:	str	r3, [sp, #36]	; 0x24
    9668:	movs	r5, #0
    966a:	b.n	9554 <_svfprintf_r+0x6f4>
    966c:	ldrb.w	r3, [sl]
    9670:	cmp	r3, #108	; 0x6c
    9672:	ittte	eq
    9674:	ldrbeq.w	r3, [sl, #1]
    9678:	orreq.w	fp, fp, #32
    967c:	addeq.w	sl, sl, #1
    9680:	orrne.w	fp, fp, #16
    9684:	b.n	8f12 <_svfprintf_r+0xb2>
    9686:	cmp	r2, #0
    9688:	bne.w	a36a <_svfprintf_r+0x150a>
    968c:	tst.w	fp, #32
    9690:	beq.w	9d60 <_svfprintf_r+0xf00>
    9694:	ldr	r2, [sp, #36]	; 0x24
    9696:	ldr	r1, [sp, #24]
    9698:	ldr	r3, [r2, #0]
    969a:	asrs	r5, r1, #31
    969c:	mov	r0, r1
    969e:	adds	r2, #4
    96a0:	mov	r1, r5
    96a2:	str	r2, [sp, #36]	; 0x24
    96a4:	strd	r0, r1, [r3]
    96a8:	b.n	8eac <_svfprintf_r+0x4c>
    96aa:	orr.w	fp, fp, #32
    96ae:	ldrb.w	r3, [sl]
    96b2:	b.n	8f12 <_svfprintf_r+0xb2>
    96b4:	ldr	r2, [sp, #36]	; 0x24
    96b6:	str	r3, [sp, #48]	; 0x30
    96b8:	ldr	r6, [r2, #0]
    96ba:	movs	r4, #0
    96bc:	strb.w	r4, [sp, #79]	; 0x4f
    96c0:	adds	r7, r2, #4
    96c2:	cmp	r6, #0
    96c4:	beq.w	a192 <_svfprintf_r+0x1332>
    96c8:	cmp	r5, #0
    96ca:	blt.w	a012 <_svfprintf_r+0x11b2>
    96ce:	mov	r2, r5
    96d0:	mov	r1, r4
    96d2:	mov	r0, r6
    96d4:	bl	cb80 <memchr>
    96d8:	cmp	r0, #0
    96da:	beq.w	a276 <_svfprintf_r+0x1416>
    96de:	subs	r3, r0, r6
    96e0:	str	r3, [sp, #32]
    96e2:	mov	r8, r4
    96e4:	bic.w	r3, r3, r3, asr #31
    96e8:	str	r7, [sp, #36]	; 0x24
    96ea:	str	r3, [sp, #16]
    96ec:	str.w	r8, [sp, #56]	; 0x38
    96f0:	ldrb.w	r7, [sp, #79]	; 0x4f
    96f4:	b.n	9244 <_svfprintf_r+0x3e4>
    96f6:	ldr	r0, [pc, #340]	; (984c <_svfprintf_r+0x9ec>)
    96f8:	str	r2, [sp, #48]	; 0x30
    96fa:	cmp.w	r8, #0
    96fe:	bne.w	9a0a <_svfprintf_r+0xbaa>
    9702:	mov	r7, r8
    9704:	mov.w	r8, #0
    9708:	str.w	r8, [sp, #32]
    970c:	add	r6, sp, #160	; 0xa0
    970e:	b.n	951e <_svfprintf_r+0x6be>
    9710:	str	r3, [sp, #48]	; 0x30
    9712:	cmp	r2, #0
    9714:	bne.w	a372 <_svfprintf_r+0x1512>
    9718:	ldr	r2, [sp, #48]	; 0x30
    971a:	cmp	r2, #0
    971c:	beq.w	903e <_svfprintf_r+0x1de>
    9720:	movs	r3, #0
    9722:	movs	r1, #1
    9724:	mov	r7, r3
    9726:	str	r1, [sp, #16]
    9728:	strb.w	r2, [sp, #120]	; 0x78
    972c:	strb.w	r3, [sp, #79]	; 0x4f
    9730:	mov	r8, r3
    9732:	str	r3, [sp, #56]	; 0x38
    9734:	str	r1, [sp, #32]
    9736:	add	r6, sp, #120	; 0x78
    9738:	b.n	924c <_svfprintf_r+0x3ec>
    973a:	cmp.w	r8, #0
    973e:	beq.w	a258 <_svfprintf_r+0x13f8>
    9742:	movs	r7, #0
    9744:	movs	r4, #0
    9746:	movs	r5, #0
    9748:	b.n	90a4 <_svfprintf_r+0x244>
    974a:	ldr	r0, [pc, #256]	; (984c <_svfprintf_r+0x9ec>)
    974c:	str	r2, [sp, #48]	; 0x30
    974e:	mov	fp, r3
    9750:	orrs.w	r3, r4, r5
    9754:	str	r7, [sp, #36]	; 0x24
    9756:	mov.w	r7, #0
    975a:	bne.w	958a <_svfprintf_r+0x72a>
    975e:	movs	r4, #0
    9760:	movs	r5, #0
    9762:	b.n	958a <_svfprintf_r+0x72a>
    9764:	ldr	r3, [sp, #116]	; 0x74
    9766:	b.n	92e0 <_svfprintf_r+0x480>
    9768:	ldr	r2, [sp, #48]	; 0x30
    976a:	cmp	r2, #101	; 0x65
    976c:	ble.w	98b2 <_svfprintf_r+0xa52>
    9770:	vcmp.f64	d8, #0.0
    9774:	vmrs	APSR_nzcv, fpscr
    9778:	bne.w	9a0e <_svfprintf_r+0xbae>
    977c:	ldr	r2, [sp, #112]	; 0x70
    977e:	ldr	r1, [pc, #208]	; (9850 <_svfprintf_r+0x9f0>)
    9780:	str.w	r1, [r9]
    9784:	adds	r2, #1
    9786:	adds	r3, #1
    9788:	movs	r1, #1
    978a:	cmp	r2, #7
    978c:	str	r3, [sp, #116]	; 0x74
    978e:	str	r2, [sp, #112]	; 0x70
    9790:	str.w	r1, [r9, #4]
    9794:	bgt.w	9ebc <_svfprintf_r+0x105c>
    9798:	add.w	r9, r9, #8
    979c:	ldr	r2, [sp, #84]	; 0x54
    979e:	ldr	r1, [sp, #52]	; 0x34
    97a0:	cmp	r2, r1
    97a2:	blt.n	97ac <_svfprintf_r+0x94c>
    97a4:	tst.w	fp, #1
    97a8:	beq.w	93c2 <_svfprintf_r+0x562>
    97ac:	ldr	r2, [sp, #112]	; 0x70
    97ae:	ldr	r0, [sp, #60]	; 0x3c
    97b0:	ldr	r1, [sp, #64]	; 0x40
    97b2:	str.w	r1, [r9]
    97b6:	adds	r2, #1
    97b8:	add	r3, r0
    97ba:	cmp	r2, #7
    97bc:	str	r3, [sp, #116]	; 0x74
    97be:	str.w	r0, [r9, #4]
    97c2:	str	r2, [sp, #112]	; 0x70
    97c4:	bgt.w	9f74 <_svfprintf_r+0x1114>
    97c8:	add.w	r9, r9, #8
    97cc:	ldr	r2, [sp, #52]	; 0x34
    97ce:	subs	r4, r2, #1
    97d0:	cmp	r4, #0
    97d2:	ble.w	93c2 <_svfprintf_r+0x562>
    97d6:	cmp	r4, #16
    97d8:	ldr	r2, [sp, #112]	; 0x70
    97da:	ldr	r7, [pc, #120]	; (9854 <_svfprintf_r+0x9f4>)
    97dc:	ble.w	9b98 <_svfprintf_r+0xd38>
    97e0:	movs	r5, #16
    97e2:	ldr	r6, [sp, #20]
    97e4:	ldr.w	r8, [sp, #12]
    97e8:	b.n	97f6 <_svfprintf_r+0x996>
    97ea:	add.w	r9, r9, #8
    97ee:	subs	r4, #16
    97f0:	cmp	r4, #16
    97f2:	ble.w	9b98 <_svfprintf_r+0xd38>
    97f6:	adds	r2, #1
    97f8:	adds	r3, #16
    97fa:	cmp	r2, #7
    97fc:	str	r3, [sp, #116]	; 0x74
    97fe:	str	r2, [sp, #112]	; 0x70
    9800:	str.w	r7, [r9]
    9804:	str.w	r5, [r9, #4]
    9808:	ble.n	97ea <_svfprintf_r+0x98a>
    980a:	add	r2, sp, #108	; 0x6c
    980c:	mov	r1, r8
    980e:	mov	r0, r6
    9810:	bl	d2cc <__ssprint_r>
    9814:	cmp	r0, #0
    9816:	bne.w	904c <_svfprintf_r+0x1ec>
    981a:	ldr	r3, [sp, #116]	; 0x74
    981c:	ldr	r2, [sp, #112]	; 0x70
    981e:	add.w	r9, sp, #160	; 0xa0
    9822:	b.n	97ee <_svfprintf_r+0x98e>
    9824:	ldr	r2, [sp, #28]
    9826:	ldr	r1, [sp, #16]
    9828:	subs	r4, r2, r1
    982a:	cmp	r4, #0
    982c:	ble.w	9328 <_svfprintf_r+0x4c8>
    9830:	cmp	r4, #16
    9832:	ldr	r2, [sp, #112]	; 0x70
    9834:	ldr	r7, [pc, #28]	; (9854 <_svfprintf_r+0x9f4>)
    9836:	ble.n	9896 <_svfprintf_r+0xa36>
    9838:	mov	r1, r9
    983a:	movs	r5, #16
    983c:	mov	r9, r8
    983e:	mov	r0, r3
    9840:	mov	r8, r6
    9842:	ldr	r6, [sp, #20]
    9844:	b.n	9862 <_svfprintf_r+0xa02>
    9846:	nop
    9848:	.word	0x20000f28
    984c:	.word	0x20000f3c
    9850:	.word	0x20000404
    9854:	.word	0x20000f08
    9858:	subs	r4, #16
    985a:	cmp	r4, #16
    985c:	add.w	r1, r1, #8
    9860:	ble.n	988e <_svfprintf_r+0xa2e>
    9862:	adds	r2, #1
    9864:	adds	r0, #16
    9866:	cmp	r2, #7
    9868:	str	r0, [sp, #116]	; 0x74
    986a:	str	r2, [sp, #112]	; 0x70
    986c:	str	r7, [r1, #0]
    986e:	str	r5, [r1, #4]
    9870:	ble.n	9858 <_svfprintf_r+0x9f8>
    9872:	add	r2, sp, #108	; 0x6c
    9874:	ldr	r1, [sp, #12]
    9876:	mov	r0, r6
    9878:	bl	d2cc <__ssprint_r>
    987c:	cmp	r0, #0
    987e:	bne.w	904c <_svfprintf_r+0x1ec>
    9882:	subs	r4, #16
    9884:	cmp	r4, #16
    9886:	ldr	r0, [sp, #116]	; 0x74
    9888:	ldr	r2, [sp, #112]	; 0x70
    988a:	add	r1, sp, #160	; 0xa0
    988c:	bgt.n	9862 <_svfprintf_r+0xa02>
    988e:	mov	r6, r8
    9890:	mov	r3, r0
    9892:	mov	r8, r9
    9894:	mov	r9, r1
    9896:	adds	r2, #1
    9898:	add	r3, r4
    989a:	cmp	r2, #7
    989c:	str	r3, [sp, #116]	; 0x74
    989e:	str	r2, [sp, #112]	; 0x70
    98a0:	str.w	r7, [r9]
    98a4:	str.w	r4, [r9, #4]
    98a8:	bgt.w	9d38 <_svfprintf_r+0xed8>
    98ac:	add.w	r9, r9, #8
    98b0:	b.n	9328 <_svfprintf_r+0x4c8>
    98b2:	ldr	r2, [sp, #52]	; 0x34
    98b4:	str.w	r6, [r9]
    98b8:	cmp	r2, #1
    98ba:	ldr	r2, [sp, #112]	; 0x70
    98bc:	add.w	r3, r3, #1
    98c0:	add.w	r2, r2, #1
    98c4:	mov.w	r1, #1
    98c8:	str	r3, [sp, #116]	; 0x74
    98ca:	str	r2, [sp, #112]	; 0x70
    98cc:	str.w	r1, [r9, #4]
    98d0:	ble.w	9cf4 <_svfprintf_r+0xe94>
    98d4:	cmp	r2, #7
    98d6:	bgt.w	9d04 <_svfprintf_r+0xea4>
    98da:	add.w	r9, r9, #8
    98de:	ldr	r0, [sp, #60]	; 0x3c
    98e0:	ldr	r1, [sp, #64]	; 0x40
    98e2:	str.w	r1, [r9]
    98e6:	adds	r2, #1
    98e8:	add	r3, r0
    98ea:	cmp	r2, #7
    98ec:	str	r3, [sp, #116]	; 0x74
    98ee:	str	r2, [sp, #112]	; 0x70
    98f0:	str.w	r0, [r9, #4]
    98f4:	bgt.w	9d1e <_svfprintf_r+0xebe>
    98f8:	add.w	r9, r9, #8
    98fc:	vcmp.f64	d8, #0.0
    9900:	vmrs	APSR_nzcv, fpscr
    9904:	ldr	r1, [sp, #52]	; 0x34
    9906:	beq.w	9af4 <_svfprintf_r+0xc94>
    990a:	subs	r1, #1
    990c:	adds	r2, #1
    990e:	adds	r6, #1
    9910:	add	r3, r1
    9912:	cmp	r2, #7
    9914:	str.w	r6, [r9]
    9918:	str	r2, [sp, #112]	; 0x70
    991a:	str	r3, [sp, #116]	; 0x74
    991c:	str.w	r1, [r9, #4]
    9920:	bgt.w	9b5e <_svfprintf_r+0xcfe>
    9924:	add.w	r9, r9, #8
    9928:	ldr	r0, [sp, #68]	; 0x44
    992a:	str.w	r0, [r9, #4]
    992e:	adds	r2, #1
    9930:	add	r3, r0
    9932:	add	r1, sp, #92	; 0x5c
    9934:	cmp	r2, #7
    9936:	str	r3, [sp, #116]	; 0x74
    9938:	str	r2, [sp, #112]	; 0x70
    993a:	str.w	r1, [r9]
    993e:	ble.w	93be <_svfprintf_r+0x55e>
    9942:	add	r2, sp, #108	; 0x6c
    9944:	ldr	r1, [sp, #12]
    9946:	ldr	r0, [sp, #20]
    9948:	bl	d2cc <__ssprint_r>
    994c:	cmp	r0, #0
    994e:	bne.w	904c <_svfprintf_r+0x1ec>
    9952:	ldr	r3, [sp, #116]	; 0x74
    9954:	add.w	r9, sp, #160	; 0xa0
    9958:	b.n	93c2 <_svfprintf_r+0x562>
    995a:	add	r2, sp, #108	; 0x6c
    995c:	ldr	r1, [sp, #12]
    995e:	ldr	r0, [sp, #20]
    9960:	bl	d2cc <__ssprint_r>
    9964:	cmp	r0, #0
    9966:	beq.w	945c <_svfprintf_r+0x5fc>
    996a:	b.w	904c <_svfprintf_r+0x1ec>
    996e:	ldr	r1, [sp, #36]	; 0x24
    9970:	cmp.w	r8, #0
    9974:	ldr	r4, [r1, #0]
    9976:	strb.w	r3, [sp, #79]	; 0x4f
    997a:	add.w	r7, r1, #4
    997e:	mov.w	r5, #0
    9982:	blt.w	a068 <_svfprintf_r+0x1208>
    9986:	orrs.w	r2, r4, r5
    998a:	str	r7, [sp, #36]	; 0x24
    998c:	bic.w	fp, fp, #128	; 0x80
    9990:	mov	r7, r3
    9992:	bne.w	91aa <_svfprintf_r+0x34a>
    9996:	cmp.w	r8, #0
    999a:	beq.w	9704 <_svfprintf_r+0x8a4>
    999e:	movs	r4, #0
    99a0:	b.n	9510 <_svfprintf_r+0x6b0>
    99a2:	add	r2, sp, #108	; 0x6c
    99a4:	ldr	r1, [sp, #12]
    99a6:	ldr	r0, [sp, #20]
    99a8:	bl	d2cc <__ssprint_r>
    99ac:	cmp	r0, #0
    99ae:	bne.w	904c <_svfprintf_r+0x1ec>
    99b2:	ldr	r3, [sp, #116]	; 0x74
    99b4:	add.w	r9, sp, #160	; 0xa0
    99b8:	b.n	939c <_svfprintf_r+0x53c>
    99ba:	add	r2, sp, #108	; 0x6c
    99bc:	ldr	r1, [sp, #12]
    99be:	ldr	r0, [sp, #20]
    99c0:	bl	d2cc <__ssprint_r>
    99c4:	cmp	r0, #0
    99c6:	bne.w	904c <_svfprintf_r+0x1ec>
    99ca:	ldr	r3, [sp, #116]	; 0x74
    99cc:	add.w	r9, sp, #160	; 0xa0
    99d0:	b.n	9300 <_svfprintf_r+0x4a0>
    99d2:	add	r2, sp, #108	; 0x6c
    99d4:	ldr	r1, [sp, #12]
    99d6:	ldr	r0, [sp, #20]
    99d8:	bl	d2cc <__ssprint_r>
    99dc:	cmp	r0, #0
    99de:	bne.w	904c <_svfprintf_r+0x1ec>
    99e2:	ldr	r3, [sp, #116]	; 0x74
    99e4:	add.w	r9, sp, #160	; 0xa0
    99e8:	b.n	9320 <_svfprintf_r+0x4c0>
    99ea:	cmp.w	r8, #0
    99ee:	strb.w	r7, [sp, #79]	; 0x4f
    99f2:	blt.w	9ed4 <_svfprintf_r+0x1074>
    99f6:	orrs.w	r3, r4, r5
    99fa:	bic.w	fp, fp, #128	; 0x80
    99fe:	bne.w	958a <_svfprintf_r+0x72a>
    9a02:	cmp.w	r8, #0
    9a06:	beq.w	9702 <_svfprintf_r+0x8a2>
    9a0a:	movs	r7, #0
    9a0c:	b.n	975e <_svfprintf_r+0x8fe>
    9a0e:	ldr	r4, [sp, #84]	; 0x54
    9a10:	cmp	r4, #0
    9a12:	ble.w	9ed8 <_svfprintf_r+0x1078>
    9a16:	ldr	r2, [sp, #56]	; 0x38
    9a18:	ldr	r1, [sp, #52]	; 0x34
    9a1a:	cmp	r2, r1
    9a1c:	it	ge
    9a1e:	movge	r2, r1
    9a20:	cmp	r2, #0
    9a22:	mov	r4, r2
    9a24:	ble.n	9a42 <_svfprintf_r+0xbe2>
    9a26:	ldr	r2, [sp, #112]	; 0x70
    9a28:	str.w	r6, [r9]
    9a2c:	adds	r2, #1
    9a2e:	add	r3, r4
    9a30:	cmp	r2, #7
    9a32:	str	r3, [sp, #116]	; 0x74
    9a34:	str.w	r4, [r9, #4]
    9a38:	str	r2, [sp, #112]	; 0x70
    9a3a:	bgt.w	a122 <_svfprintf_r+0x12c2>
    9a3e:	add.w	r9, r9, #8
    9a42:	ldr	r2, [sp, #56]	; 0x38
    9a44:	cmp	r4, #0
    9a46:	it	ge
    9a48:	subge	r2, r2, r4
    9a4a:	cmp	r2, #0
    9a4c:	mov	r4, r2
    9a4e:	ble.w	9c34 <_svfprintf_r+0xdd4>
    9a52:	cmp	r4, #16
    9a54:	ldr	r2, [sp, #112]	; 0x70
    9a56:	ldr	r7, [pc, #772]	; (9d5c <_svfprintf_r+0xefc>)
    9a58:	ble.w	9e8e <_svfprintf_r+0x102e>
    9a5c:	mov	r1, r9
    9a5e:	movs	r5, #16
    9a60:	mov	r9, r6
    9a62:	ldr.w	r8, [sp, #20]
    9a66:	ldr	r6, [sp, #12]
    9a68:	b.n	9a74 <_svfprintf_r+0xc14>
    9a6a:	adds	r1, #8
    9a6c:	subs	r4, #16
    9a6e:	cmp	r4, #16
    9a70:	ble.w	9e8a <_svfprintf_r+0x102a>
    9a74:	adds	r2, #1
    9a76:	adds	r3, #16
    9a78:	cmp	r2, #7
    9a7a:	str	r3, [sp, #116]	; 0x74
    9a7c:	str	r2, [sp, #112]	; 0x70
    9a7e:	str	r7, [r1, #0]
    9a80:	str	r5, [r1, #4]
    9a82:	ble.n	9a6a <_svfprintf_r+0xc0a>
    9a84:	add	r2, sp, #108	; 0x6c
    9a86:	mov	r1, r6
    9a88:	mov	r0, r8
    9a8a:	bl	d2cc <__ssprint_r>
    9a8e:	cmp	r0, #0
    9a90:	bne.w	904c <_svfprintf_r+0x1ec>
    9a94:	ldr	r3, [sp, #116]	; 0x74
    9a96:	ldr	r2, [sp, #112]	; 0x70
    9a98:	add	r1, sp, #160	; 0xa0
    9a9a:	b.n	9a6c <_svfprintf_r+0xc0c>
    9a9c:	add	r2, sp, #108	; 0x6c
    9a9e:	ldr	r1, [sp, #12]
    9aa0:	ldr	r0, [sp, #20]
    9aa2:	bl	d2cc <__ssprint_r>
    9aa6:	cmp	r0, #0
    9aa8:	bne.w	904c <_svfprintf_r+0x1ec>
    9aac:	ldrb.w	r7, [sp, #79]	; 0x4f
    9ab0:	ldr	r3, [sp, #116]	; 0x74
    9ab2:	add.w	r9, sp, #160	; 0xa0
    9ab6:	b.n	92e0 <_svfprintf_r+0x480>
    9ab8:	ands.w	r2, fp, #16
    9abc:	bne.w	996e <_svfprintf_r+0xb0e>
    9ac0:	ands.w	r3, fp, #64	; 0x40
    9ac4:	beq.w	996e <_svfprintf_r+0xb0e>
    9ac8:	ldr	r1, [sp, #36]	; 0x24
    9aca:	strb.w	r2, [sp, #79]	; 0x4f
    9ace:	mov	r3, r1
    9ad0:	cmp.w	r8, #0
    9ad4:	add.w	r3, r3, #4
    9ad8:	ldrh	r4, [r1, #0]
    9ada:	mov.w	r5, #0
    9ade:	blt.w	a00a <_svfprintf_r+0x11aa>
    9ae2:	orrs.w	r1, r4, r5
    9ae6:	bic.w	fp, fp, #128	; 0x80
    9aea:	str	r3, [sp, #36]	; 0x24
    9aec:	mov	r7, r2
    9aee:	bne.w	91aa <_svfprintf_r+0x34a>
    9af2:	b.n	9996 <_svfprintf_r+0xb36>
    9af4:	subs	r4, r1, #1
    9af6:	cmp	r4, #0
    9af8:	ble.w	9928 <_svfprintf_r+0xac8>
    9afc:	cmp	r4, #16
    9afe:	ldr	r7, [pc, #604]	; (9d5c <_svfprintf_r+0xefc>)
    9b00:	ble.n	9b48 <_svfprintf_r+0xce8>
    9b02:	movs	r5, #16
    9b04:	ldr	r6, [sp, #20]
    9b06:	ldr.w	r8, [sp, #12]
    9b0a:	b.n	9b16 <_svfprintf_r+0xcb6>
    9b0c:	subs	r4, #16
    9b0e:	cmp	r4, #16
    9b10:	add.w	r9, r9, #8
    9b14:	ble.n	9b48 <_svfprintf_r+0xce8>
    9b16:	adds	r2, #1
    9b18:	adds	r3, #16
    9b1a:	cmp	r2, #7
    9b1c:	str	r3, [sp, #116]	; 0x74
    9b1e:	str	r2, [sp, #112]	; 0x70
    9b20:	str.w	r7, [r9]
    9b24:	str.w	r5, [r9, #4]
    9b28:	ble.n	9b0c <_svfprintf_r+0xcac>
    9b2a:	add	r2, sp, #108	; 0x6c
    9b2c:	mov	r1, r8
    9b2e:	mov	r0, r6
    9b30:	bl	d2cc <__ssprint_r>
    9b34:	cmp	r0, #0
    9b36:	bne.w	904c <_svfprintf_r+0x1ec>
    9b3a:	subs	r4, #16
    9b3c:	cmp	r4, #16
    9b3e:	ldr	r3, [sp, #116]	; 0x74
    9b40:	ldr	r2, [sp, #112]	; 0x70
    9b42:	add.w	r9, sp, #160	; 0xa0
    9b46:	bgt.n	9b16 <_svfprintf_r+0xcb6>
    9b48:	adds	r2, #1
    9b4a:	add	r3, r4
    9b4c:	cmp	r2, #7
    9b4e:	str	r3, [sp, #116]	; 0x74
    9b50:	str	r2, [sp, #112]	; 0x70
    9b52:	str.w	r7, [r9]
    9b56:	str.w	r4, [r9, #4]
    9b5a:	ble.w	9924 <_svfprintf_r+0xac4>
    9b5e:	add	r2, sp, #108	; 0x6c
    9b60:	ldr	r1, [sp, #12]
    9b62:	ldr	r0, [sp, #20]
    9b64:	bl	d2cc <__ssprint_r>
    9b68:	cmp	r0, #0
    9b6a:	bne.w	904c <_svfprintf_r+0x1ec>
    9b6e:	ldr	r3, [sp, #116]	; 0x74
    9b70:	ldr	r2, [sp, #112]	; 0x70
    9b72:	add.w	r9, sp, #160	; 0xa0
    9b76:	b.n	9928 <_svfprintf_r+0xac8>
    9b78:	tst.w	fp, #16
    9b7c:	bne.n	9be6 <_svfprintf_r+0xd86>
    9b7e:	tst.w	fp, #64	; 0x40
    9b82:	beq.n	9be6 <_svfprintf_r+0xd86>
    9b84:	ldr	r1, [sp, #36]	; 0x24
    9b86:	ldrsh.w	r4, [r1]
    9b8a:	adds	r1, #4
    9b8c:	asrs	r5, r4, #31
    9b8e:	mov	r2, r4
    9b90:	mov	r3, r5
    9b92:	str	r1, [sp, #36]	; 0x24
    9b94:	b.w	9188 <_svfprintf_r+0x328>
    9b98:	adds	r2, #1
    9b9a:	add	r3, r4
    9b9c:	cmp	r2, #7
    9b9e:	str	r3, [sp, #116]	; 0x74
    9ba0:	str	r2, [sp, #112]	; 0x70
    9ba2:	str.w	r7, [r9]
    9ba6:	str.w	r4, [r9, #4]
    9baa:	ble.w	93be <_svfprintf_r+0x55e>
    9bae:	b.n	9942 <_svfprintf_r+0xae2>
    9bb0:	ldr	r1, [sp, #36]	; 0x24
    9bb2:	cmp.w	r8, #0
    9bb6:	ldr	r4, [r1, #0]
    9bb8:	strb.w	r3, [sp, #79]	; 0x4f
    9bbc:	add.w	r7, r1, #4
    9bc0:	mov.w	r5, #0
    9bc4:	blt.w	9d52 <_svfprintf_r+0xef2>
    9bc8:	orrs.w	r2, r4, r5
    9bcc:	bic.w	fp, fp, #128	; 0x80
    9bd0:	str	r7, [sp, #36]	; 0x24
    9bd2:	beq.w	973a <_svfprintf_r+0x8da>
    9bd6:	mov	r7, r3
    9bd8:	b.w	90a4 <_svfprintf_r+0x244>
    9bdc:	ldr	r4, [r3, #0]
    9bde:	adds	r3, #4
    9be0:	str	r3, [sp, #36]	; 0x24
    9be2:	movs	r5, #0
    9be4:	b.n	9554 <_svfprintf_r+0x6f4>
    9be6:	ldr	r2, [sp, #36]	; 0x24
    9be8:	ldr	r4, [r2, #0]
    9bea:	mov	r3, r2
    9bec:	adds	r3, #4
    9bee:	asrs	r5, r4, #31
    9bf0:	mov	r2, r4
    9bf2:	str	r3, [sp, #36]	; 0x24
    9bf4:	cmp	r2, #0
    9bf6:	mov	r3, r5
    9bf8:	sbcs.w	r3, r3, #0
    9bfc:	bge.w	9192 <_svfprintf_r+0x332>
    9c00:	negs	r4, r4
    9c02:	mov.w	r7, #45	; 0x2d
    9c06:	sbc.w	r5, r5, r5, lsl #1
    9c0a:	cmp.w	r8, #0
    9c0e:	strb.w	r7, [sp, #79]	; 0x4f
    9c12:	blt.w	91aa <_svfprintf_r+0x34a>
    9c16:	bic.w	fp, fp, #128	; 0x80
    9c1a:	b.w	91aa <_svfprintf_r+0x34a>
    9c1e:	add	r2, sp, #108	; 0x6c
    9c20:	ldr	r1, [sp, #12]
    9c22:	ldr	r0, [sp, #20]
    9c24:	bl	d2cc <__ssprint_r>
    9c28:	cmp	r0, #0
    9c2a:	bne.w	904c <_svfprintf_r+0x1ec>
    9c2e:	ldr	r3, [sp, #116]	; 0x74
    9c30:	add.w	r9, sp, #160	; 0xa0
    9c34:	ldr	r1, [sp, #56]	; 0x38
    9c36:	ldr	r2, [sp, #84]	; 0x54
    9c38:	add	r1, r6
    9c3a:	mov	r5, r1
    9c3c:	ldr	r1, [sp, #52]	; 0x34
    9c3e:	cmp	r2, r1
    9c40:	blt.n	9cd2 <_svfprintf_r+0xe72>
    9c42:	tst.w	fp, #1
    9c46:	bne.n	9cd2 <_svfprintf_r+0xe72>
    9c48:	ldr	r0, [sp, #52]	; 0x34
    9c4a:	add	r6, r0
    9c4c:	subs	r4, r6, r5
    9c4e:	subs	r2, r0, r2
    9c50:	cmp	r4, r2
    9c52:	it	ge
    9c54:	movge	r4, r2
    9c56:	cmp	r4, #0
    9c58:	mov	r6, r4
    9c5a:	ble.n	9c78 <_svfprintf_r+0xe18>
    9c5c:	ldr	r1, [sp, #112]	; 0x70
    9c5e:	str.w	r5, [r9]
    9c62:	adds	r1, #1
    9c64:	add	r3, r4
    9c66:	cmp	r1, #7
    9c68:	str	r3, [sp, #116]	; 0x74
    9c6a:	str.w	r4, [r9, #4]
    9c6e:	str	r1, [sp, #112]	; 0x70
    9c70:	bgt.w	a174 <_svfprintf_r+0x1314>
    9c74:	add.w	r9, r9, #8
    9c78:	cmp	r6, #0
    9c7a:	ite	ge
    9c7c:	subge	r4, r2, r6
    9c7e:	movlt	r4, r2
    9c80:	cmp	r4, #0
    9c82:	ble.w	93c2 <_svfprintf_r+0x562>
    9c86:	cmp	r4, #16
    9c88:	ldr	r2, [sp, #112]	; 0x70
    9c8a:	ldr	r7, [pc, #208]	; (9d5c <_svfprintf_r+0xefc>)
    9c8c:	ble.n	9b98 <_svfprintf_r+0xd38>
    9c8e:	movs	r5, #16
    9c90:	ldr	r6, [sp, #20]
    9c92:	ldr.w	r8, [sp, #12]
    9c96:	b.n	9ca4 <_svfprintf_r+0xe44>
    9c98:	add.w	r9, r9, #8
    9c9c:	subs	r4, #16
    9c9e:	cmp	r4, #16
    9ca0:	ble.w	9b98 <_svfprintf_r+0xd38>
    9ca4:	adds	r2, #1
    9ca6:	adds	r3, #16
    9ca8:	cmp	r2, #7
    9caa:	str	r3, [sp, #116]	; 0x74
    9cac:	str	r2, [sp, #112]	; 0x70
    9cae:	str.w	r7, [r9]
    9cb2:	str.w	r5, [r9, #4]
    9cb6:	ble.n	9c98 <_svfprintf_r+0xe38>
    9cb8:	add	r2, sp, #108	; 0x6c
    9cba:	mov	r1, r8
    9cbc:	mov	r0, r6
    9cbe:	bl	d2cc <__ssprint_r>
    9cc2:	cmp	r0, #0
    9cc4:	bne.w	904c <_svfprintf_r+0x1ec>
    9cc8:	ldr	r3, [sp, #116]	; 0x74
    9cca:	ldr	r2, [sp, #112]	; 0x70
    9ccc:	add.w	r9, sp, #160	; 0xa0
    9cd0:	b.n	9c9c <_svfprintf_r+0xe3c>
    9cd2:	ldr	r1, [sp, #112]	; 0x70
    9cd4:	ldr	r4, [sp, #60]	; 0x3c
    9cd6:	ldr	r0, [sp, #64]	; 0x40
    9cd8:	str.w	r0, [r9]
    9cdc:	adds	r1, #1
    9cde:	add	r3, r4
    9ce0:	cmp	r1, #7
    9ce2:	str	r3, [sp, #116]	; 0x74
    9ce4:	str.w	r4, [r9, #4]
    9ce8:	str	r1, [sp, #112]	; 0x70
    9cea:	bgt.w	a13a <_svfprintf_r+0x12da>
    9cee:	add.w	r9, r9, #8
    9cf2:	b.n	9c48 <_svfprintf_r+0xde8>
    9cf4:	tst.w	fp, #1
    9cf8:	bne.w	98d4 <_svfprintf_r+0xa74>
    9cfc:	cmp	r2, #7
    9cfe:	ble.w	9924 <_svfprintf_r+0xac4>
    9d02:	b.n	9b5e <_svfprintf_r+0xcfe>
    9d04:	add	r2, sp, #108	; 0x6c
    9d06:	ldr	r1, [sp, #12]
    9d08:	ldr	r0, [sp, #20]
    9d0a:	bl	d2cc <__ssprint_r>
    9d0e:	cmp	r0, #0
    9d10:	bne.w	904c <_svfprintf_r+0x1ec>
    9d14:	ldr	r3, [sp, #116]	; 0x74
    9d16:	ldr	r2, [sp, #112]	; 0x70
    9d18:	add.w	r9, sp, #160	; 0xa0
    9d1c:	b.n	98de <_svfprintf_r+0xa7e>
    9d1e:	add	r2, sp, #108	; 0x6c
    9d20:	ldr	r1, [sp, #12]
    9d22:	ldr	r0, [sp, #20]
    9d24:	bl	d2cc <__ssprint_r>
    9d28:	cmp	r0, #0
    9d2a:	bne.w	904c <_svfprintf_r+0x1ec>
    9d2e:	ldr	r3, [sp, #116]	; 0x74
    9d30:	ldr	r2, [sp, #112]	; 0x70
    9d32:	add.w	r9, sp, #160	; 0xa0
    9d36:	b.n	98fc <_svfprintf_r+0xa9c>
    9d38:	add	r2, sp, #108	; 0x6c
    9d3a:	ldr	r1, [sp, #12]
    9d3c:	ldr	r0, [sp, #20]
    9d3e:	bl	d2cc <__ssprint_r>
    9d42:	cmp	r0, #0
    9d44:	bne.w	904c <_svfprintf_r+0x1ec>
    9d48:	ldr	r3, [sp, #116]	; 0x74
    9d4a:	add.w	r9, sp, #160	; 0xa0
    9d4e:	b.w	9328 <_svfprintf_r+0x4c8>
    9d52:	str	r7, [sp, #36]	; 0x24
    9d54:	movs	r7, #0
    9d56:	b.w	90a4 <_svfprintf_r+0x244>
    9d5a:	nop
    9d5c:	.word	0x20000f08
    9d60:	tst.w	fp, #16
    9d64:	bne.n	9d7e <_svfprintf_r+0xf1e>
    9d66:	tst.w	fp, #64	; 0x40
    9d6a:	beq.n	9d7e <_svfprintf_r+0xf1e>
    9d6c:	ldr	r2, [sp, #36]	; 0x24
    9d6e:	ldr	r3, [r2, #0]
    9d70:	adds	r2, #4
    9d72:	str	r2, [sp, #36]	; 0x24
    9d74:	ldrh.w	r2, [sp, #24]
    9d78:	strh	r2, [r3, #0]
    9d7a:	b.w	8eac <_svfprintf_r+0x4c>
    9d7e:	ldr	r2, [sp, #36]	; 0x24
    9d80:	ldr	r3, [r2, #0]
    9d82:	adds	r2, #4
    9d84:	str	r2, [sp, #36]	; 0x24
    9d86:	ldr	r2, [sp, #24]
    9d88:	str	r2, [r3, #0]
    9d8a:	b.w	8eac <_svfprintf_r+0x4c>
    9d8e:	vcmp.f64	d8, d8
    9d92:	vmrs	APSR_nzcv, fpscr
    9d96:	bvs.w	a2d6 <_svfprintf_r+0x1476>
    9d9a:	ldr	r3, [sp, #48]	; 0x30
    9d9c:	cmp.w	r8, #4294967295
    9da0:	bic.w	r5, r3, #32
    9da4:	beq.w	a1f2 <_svfprintf_r+0x1392>
    9da8:	cmp	r5, #71	; 0x47
    9daa:	beq.w	9ffa <_svfprintf_r+0x119a>
    9dae:	orr.w	r3, fp, #256	; 0x100
    9db2:	str	r3, [sp, #40]	; 0x28
    9db4:	vmov	r3, s17
    9db8:	cmp	r3, #0
    9dba:	blt.w	a1f8 <_svfprintf_r+0x1398>
    9dbe:	vmov.f64	d10, d8
    9dc2:	movs	r7, #0
    9dc4:	ldr	r3, [sp, #48]	; 0x30
    9dc6:	cmp	r3, #102	; 0x66
    9dc8:	beq.w	a1d0 <_svfprintf_r+0x1370>
    9dcc:	cmp	r3, #70	; 0x46
    9dce:	beq.w	9faa <_svfprintf_r+0x114a>
    9dd2:	vmov.f64	d0, d10
    9dd6:	cmp	r5, #69	; 0x45
    9dd8:	ite	eq
    9dda:	addeq.w	r4, r8, #1
    9dde:	movne	r4, r8
    9de0:	add	r2, sp, #100	; 0x64
    9de2:	add	r3, sp, #88	; 0x58
    9de4:	str	r2, [sp, #4]
    9de6:	str	r3, [sp, #0]
    9de8:	mov	r2, r4
    9dea:	add	r3, sp, #84	; 0x54
    9dec:	movs	r1, #2
    9dee:	ldr	r0, [sp, #20]
    9df0:	bl	b4e8 <_dtoa_r>
    9df4:	ldr	r3, [sp, #48]	; 0x30
    9df6:	cmp	r3, #103	; 0x67
    9df8:	mov	r6, r0
    9dfa:	bne.w	a21a <_svfprintf_r+0x13ba>
    9dfe:	tst.w	fp, #1
    9e02:	beq.w	a2d2 <_svfprintf_r+0x1472>
    9e06:	adds	r1, r6, r4
    9e08:	vcmp.f64	d10, #0.0
    9e0c:	vmrs	APSR_nzcv, fpscr
    9e10:	beq.w	a11e <_svfprintf_r+0x12be>
    9e14:	ldr	r3, [sp, #100]	; 0x64
    9e16:	cmp	r1, r3
    9e18:	bls.n	9e28 <_svfprintf_r+0xfc8>
    9e1a:	movs	r0, #48	; 0x30
    9e1c:	adds	r2, r3, #1
    9e1e:	str	r2, [sp, #100]	; 0x64
    9e20:	strb	r0, [r3, #0]
    9e22:	ldr	r3, [sp, #100]	; 0x64
    9e24:	cmp	r1, r3
    9e26:	bhi.n	9e1c <_svfprintf_r+0xfbc>
    9e28:	subs	r3, r3, r6
    9e2a:	cmp	r5, #71	; 0x47
    9e2c:	str	r3, [sp, #52]	; 0x34
    9e2e:	beq.w	a070 <_svfprintf_r+0x1210>
    9e32:	ldr	r3, [sp, #48]	; 0x30
    9e34:	cmp	r3, #101	; 0x65
    9e36:	ble.w	a238 <_svfprintf_r+0x13d8>
    9e3a:	ldr	r3, [sp, #48]	; 0x30
    9e3c:	cmp	r3, #102	; 0x66
    9e3e:	ldr	r3, [sp, #84]	; 0x54
    9e40:	beq.w	a23c <_svfprintf_r+0x13dc>
    9e44:	str	r3, [sp, #56]	; 0x38
    9e46:	ldr	r2, [sp, #56]	; 0x38
    9e48:	ldr	r1, [sp, #52]	; 0x34
    9e4a:	cmp	r2, r1
    9e4c:	blt.w	a200 <_svfprintf_r+0x13a0>
    9e50:	tst.w	fp, #1
    9e54:	bne.w	a2c0 <_svfprintf_r+0x1460>
    9e58:	bic.w	r3, r2, r2, asr #31
    9e5c:	str	r2, [sp, #32]
    9e5e:	movs	r2, #103	; 0x67
    9e60:	str	r2, [sp, #48]	; 0x30
    9e62:	cmp	r7, #0
    9e64:	bne.w	a054 <_svfprintf_r+0x11f4>
    9e68:	mov	r8, r7
    9e6a:	str	r3, [sp, #16]
    9e6c:	ldr.w	fp, [sp, #40]	; 0x28
    9e70:	ldrb.w	r7, [sp, #79]	; 0x4f
    9e74:	b.w	9244 <_svfprintf_r+0x3e4>
    9e78:	bic.w	r7, r7, #7
    9e7c:	add.w	r3, r7, #8
    9e80:	vldr	d8, [r7]
    9e84:	str	r3, [sp, #36]	; 0x24
    9e86:	b.w	9206 <_svfprintf_r+0x3a6>
    9e8a:	mov	r6, r9
    9e8c:	mov	r9, r1
    9e8e:	adds	r2, #1
    9e90:	add	r3, r4
    9e92:	cmp	r2, #7
    9e94:	str	r3, [sp, #116]	; 0x74
    9e96:	str	r2, [sp, #112]	; 0x70
    9e98:	str.w	r7, [r9]
    9e9c:	str.w	r4, [r9, #4]
    9ea0:	bgt.w	9c1e <_svfprintf_r+0xdbe>
    9ea4:	add.w	r9, r9, #8
    9ea8:	b.n	9c34 <_svfprintf_r+0xdd4>
    9eaa:	movs	r7, #0
    9eac:	cmp	r8, r7
    9eae:	strb.w	r7, [sp, #79]	; 0x4f
    9eb2:	blt.w	975e <_svfprintf_r+0x8fe>
    9eb6:	bic.w	fp, fp, #128	; 0x80
    9eba:	b.n	96fa <_svfprintf_r+0x89a>
    9ebc:	add	r2, sp, #108	; 0x6c
    9ebe:	ldr	r1, [sp, #12]
    9ec0:	ldr	r0, [sp, #20]
    9ec2:	bl	d2cc <__ssprint_r>
    9ec6:	cmp	r0, #0
    9ec8:	bne.w	904c <_svfprintf_r+0x1ec>
    9ecc:	ldr	r3, [sp, #116]	; 0x74
    9ece:	add.w	r9, sp, #160	; 0xa0
    9ed2:	b.n	979c <_svfprintf_r+0x93c>
    9ed4:	ldr	r7, [sp, #36]	; 0x24
    9ed6:	b.n	9750 <_svfprintf_r+0x8f0>
    9ed8:	ldr	r2, [sp, #112]	; 0x70
    9eda:	ldr	r1, [pc, #740]	; (a1c0 <_svfprintf_r+0x1360>)
    9edc:	str.w	r1, [r9]
    9ee0:	adds	r2, #1
    9ee2:	adds	r3, #1
    9ee4:	movs	r1, #1
    9ee6:	cmp	r2, #7
    9ee8:	str	r3, [sp, #116]	; 0x74
    9eea:	str	r2, [sp, #112]	; 0x70
    9eec:	str.w	r1, [r9, #4]
    9ef0:	bgt.n	9fe0 <_svfprintf_r+0x1180>
    9ef2:	add.w	r9, r9, #8
    9ef6:	cbnz	r4, 9f04 <_svfprintf_r+0x10a4>
    9ef8:	ldr	r2, [sp, #52]	; 0x34
    9efa:	cbnz	r2, 9f04 <_svfprintf_r+0x10a4>
    9efc:	tst.w	fp, #1
    9f00:	beq.w	93c2 <_svfprintf_r+0x562>
    9f04:	ldr	r2, [sp, #112]	; 0x70
    9f06:	ldr	r0, [sp, #60]	; 0x3c
    9f08:	ldr	r1, [sp, #64]	; 0x40
    9f0a:	str.w	r1, [r9]
    9f0e:	adds	r2, #1
    9f10:	add	r3, r0
    9f12:	cmp	r2, #7
    9f14:	str	r3, [sp, #116]	; 0x74
    9f16:	str.w	r0, [r9, #4]
    9f1a:	str	r2, [sp, #112]	; 0x70
    9f1c:	bgt.w	a28c <_svfprintf_r+0x142c>
    9f20:	add.w	r9, r9, #8
    9f24:	negs	r4, r4
    9f26:	cmp	r4, #0
    9f28:	ble.w	a03a <_svfprintf_r+0x11da>
    9f2c:	cmp	r4, #16
    9f2e:	ldr	r7, [pc, #660]	; (a1c4 <_svfprintf_r+0x1364>)
    9f30:	ble.w	a158 <_svfprintf_r+0x12f8>
    9f34:	mov	r1, r9
    9f36:	movs	r5, #16
    9f38:	mov	r9, r6
    9f3a:	ldr.w	r8, [sp, #20]
    9f3e:	ldr	r6, [sp, #12]
    9f40:	b.n	9f4c <_svfprintf_r+0x10ec>
    9f42:	adds	r1, #8
    9f44:	subs	r4, #16
    9f46:	cmp	r4, #16
    9f48:	ble.w	a154 <_svfprintf_r+0x12f4>
    9f4c:	adds	r2, #1
    9f4e:	adds	r3, #16
    9f50:	cmp	r2, #7
    9f52:	str	r3, [sp, #116]	; 0x74
    9f54:	str	r2, [sp, #112]	; 0x70
    9f56:	str	r7, [r1, #0]
    9f58:	str	r5, [r1, #4]
    9f5a:	ble.n	9f42 <_svfprintf_r+0x10e2>
    9f5c:	add	r2, sp, #108	; 0x6c
    9f5e:	mov	r1, r6
    9f60:	mov	r0, r8
    9f62:	bl	d2cc <__ssprint_r>
    9f66:	cmp	r0, #0
    9f68:	bne.w	904c <_svfprintf_r+0x1ec>
    9f6c:	ldr	r3, [sp, #116]	; 0x74
    9f6e:	ldr	r2, [sp, #112]	; 0x70
    9f70:	add	r1, sp, #160	; 0xa0
    9f72:	b.n	9f44 <_svfprintf_r+0x10e4>
    9f74:	add	r2, sp, #108	; 0x6c
    9f76:	ldr	r1, [sp, #12]
    9f78:	ldr	r0, [sp, #20]
    9f7a:	bl	d2cc <__ssprint_r>
    9f7e:	cmp	r0, #0
    9f80:	bne.w	904c <_svfprintf_r+0x1ec>
    9f84:	ldr	r3, [sp, #116]	; 0x74
    9f86:	add.w	r9, sp, #160	; 0xa0
    9f8a:	b.n	97cc <_svfprintf_r+0x96c>
    9f8c:	movs	r1, #64	; 0x40
    9f8e:	ldr	r0, [sp, #20]
    9f90:	bl	820c <_malloc_r>
    9f94:	ldr	r2, [sp, #12]
    9f96:	str	r0, [r2, #0]
    9f98:	str	r0, [r2, #16]
    9f9a:	cmp	r0, #0
    9f9c:	beq.w	a37a <_svfprintf_r+0x151a>
    9fa0:	ldr	r2, [sp, #12]
    9fa2:	movs	r3, #64	; 0x40
    9fa4:	str	r3, [r2, #20]
    9fa6:	b.w	8e92 <_svfprintf_r+0x32>
    9faa:	add	r2, sp, #100	; 0x64
    9fac:	add	r3, sp, #88	; 0x58
    9fae:	str	r2, [sp, #4]
    9fb0:	str	r3, [sp, #0]
    9fb2:	mov	r2, r8
    9fb4:	add	r3, sp, #84	; 0x54
    9fb6:	movs	r1, #3
    9fb8:	vmov.f64	d0, d10
    9fbc:	ldr	r0, [sp, #20]
    9fbe:	bl	b4e8 <_dtoa_r>
    9fc2:	mov	r4, r8
    9fc4:	mov	r6, r0
    9fc6:	ldr	r3, [sp, #48]	; 0x30
    9fc8:	cmp	r3, #70	; 0x46
    9fca:	add.w	r1, r6, r4
    9fce:	bne.w	9e08 <_svfprintf_r+0xfa8>
    9fd2:	ldrb	r3, [r6, #0]
    9fd4:	cmp	r3, #48	; 0x30
    9fd6:	beq.w	a2f4 <_svfprintf_r+0x1494>
    9fda:	ldr	r4, [sp, #84]	; 0x54
    9fdc:	add	r1, r4
    9fde:	b.n	9e08 <_svfprintf_r+0xfa8>
    9fe0:	add	r2, sp, #108	; 0x6c
    9fe2:	ldr	r1, [sp, #12]
    9fe4:	ldr	r0, [sp, #20]
    9fe6:	bl	d2cc <__ssprint_r>
    9fea:	cmp	r0, #0
    9fec:	bne.w	904c <_svfprintf_r+0x1ec>
    9ff0:	ldr	r4, [sp, #84]	; 0x54
    9ff2:	ldr	r3, [sp, #116]	; 0x74
    9ff4:	add.w	r9, sp, #160	; 0xa0
    9ff8:	b.n	9ef6 <_svfprintf_r+0x1096>
    9ffa:	cmp.w	r8, #0
    9ffe:	it	eq
    a000:	moveq.w	r8, #1
    a004:	b.n	9dae <_svfprintf_r+0xf4e>
    a006:	str	r3, [sp, #36]	; 0x24
    a008:	b.n	9d54 <_svfprintf_r+0xef4>
    a00a:	str	r3, [sp, #36]	; 0x24
    a00c:	mov	r7, r2
    a00e:	b.w	9508 <_svfprintf_r+0x6a8>
    a012:	mov	r0, r6
    a014:	bl	8d80 <strlen>
    a018:	mov	r8, r4
    a01a:	mov	r3, r0
    a01c:	str	r0, [sp, #32]
    a01e:	b.w	96e4 <_svfprintf_r+0x884>
    a022:	add	r2, sp, #108	; 0x6c
    a024:	ldr	r1, [sp, #12]
    a026:	ldr	r0, [sp, #20]
    a028:	bl	d2cc <__ssprint_r>
    a02c:	cmp	r0, #0
    a02e:	bne.w	904c <_svfprintf_r+0x1ec>
    a032:	ldr	r3, [sp, #116]	; 0x74
    a034:	ldr	r2, [sp, #112]	; 0x70
    a036:	add.w	r9, sp, #160	; 0xa0
    a03a:	ldr	r0, [sp, #52]	; 0x34
    a03c:	str.w	r6, [r9]
    a040:	adds	r2, #1
    a042:	add	r3, r0
    a044:	cmp	r2, #7
    a046:	str	r3, [sp, #116]	; 0x74
    a048:	str	r2, [sp, #112]	; 0x70
    a04a:	str.w	r0, [r9, #4]
    a04e:	ble.w	93be <_svfprintf_r+0x55e>
    a052:	b.n	9942 <_svfprintf_r+0xae2>
    a054:	movs	r7, #45	; 0x2d
    a056:	str	r3, [sp, #16]
    a058:	ldr.w	fp, [sp, #40]	; 0x28
    a05c:	strb.w	r7, [sp, #79]	; 0x4f
    a060:	mov.w	r8, #0
    a064:	b.w	9246 <_svfprintf_r+0x3e6>
    a068:	str	r7, [sp, #36]	; 0x24
    a06a:	mov	r7, r3
    a06c:	b.w	9508 <_svfprintf_r+0x6a8>
    a070:	ldr	r3, [sp, #84]	; 0x54
    a072:	adds	r2, r3, #3
    a074:	blt.n	a07c <_svfprintf_r+0x121c>
    a076:	cmp	r8, r3
    a078:	bge.w	9e44 <_svfprintf_r+0xfe4>
    a07c:	ldr	r2, [sp, #48]	; 0x30
    a07e:	subs	r2, #2
    a080:	str	r2, [sp, #48]	; 0x30
    a082:	subs	r3, #1
    a084:	cmp	r3, #0
    a086:	ldrb.w	r2, [sp, #48]	; 0x30
    a08a:	str	r3, [sp, #84]	; 0x54
    a08c:	it	lt
    a08e:	neglt	r3, r3
    a090:	strb.w	r2, [sp, #92]	; 0x5c
    a094:	ite	lt
    a096:	movlt	r2, #45	; 0x2d
    a098:	movge	r2, #43	; 0x2b
    a09a:	cmp	r3, #9
    a09c:	strb.w	r2, [sp, #93]	; 0x5d
    a0a0:	ble.w	a2b0 <_svfprintf_r+0x1450>
    a0a4:	add.w	r0, sp, #107	; 0x6b
    a0a8:	mov	r4, r0
    a0aa:	ldr	r2, [pc, #284]	; (a1c8 <_svfprintf_r+0x1368>)
    a0ac:	smull	r2, r1, r2, r3
    a0b0:	asrs	r2, r3, #31
    a0b2:	rsb	r2, r2, r1, asr #2
    a0b6:	add.w	r1, r2, r2, lsl #2
    a0ba:	sub.w	r3, r3, r1, lsl #1
    a0be:	add.w	r1, r3, #48	; 0x30
    a0c2:	cmp	r2, #9
    a0c4:	mov	r3, r2
    a0c6:	strb.w	r1, [r4, #-1]!
    a0ca:	bgt.n	a0aa <_svfprintf_r+0x124a>
    a0cc:	mov	r1, r4
    a0ce:	adds	r3, #48	; 0x30
    a0d0:	uxtb	r2, r3
    a0d2:	strb.w	r2, [r1, #-1]!
    a0d6:	cmp	r0, r1
    a0d8:	bls.w	a3a0 <_svfprintf_r+0x1540>
    a0dc:	add.w	r1, sp, #94	; 0x5e
    a0e0:	mov	r3, r4
    a0e2:	b.n	a0e8 <_svfprintf_r+0x1288>
    a0e4:	ldrb.w	r2, [r3], #1
    a0e8:	strb.w	r2, [r1], #1
    a0ec:	cmp	r0, r3
    a0ee:	bne.n	a0e4 <_svfprintf_r+0x1284>
    a0f0:	adds	r3, r0, #1
    a0f2:	subs	r3, r3, r4
    a0f4:	add.w	r2, sp, #94	; 0x5e
    a0f8:	add	r3, r2
    a0fa:	add	r2, sp, #92	; 0x5c
    a0fc:	subs	r3, r3, r2
    a0fe:	ldr	r2, [sp, #52]	; 0x34
    a100:	str	r3, [sp, #68]	; 0x44
    a102:	cmp	r2, #1
    a104:	add	r3, r2
    a106:	str	r3, [sp, #32]
    a108:	ble.w	a30a <_svfprintf_r+0x14aa>
    a10c:	ldr	r3, [sp, #32]
    a10e:	ldr	r2, [sp, #60]	; 0x3c
    a110:	add	r3, r2
    a112:	movs	r2, #0
    a114:	str	r3, [sp, #32]
    a116:	str	r2, [sp, #56]	; 0x38
    a118:	bic.w	r3, r3, r3, asr #31
    a11c:	b.n	9e62 <_svfprintf_r+0x1002>
    a11e:	mov	r3, r1
    a120:	b.n	9e28 <_svfprintf_r+0xfc8>
    a122:	add	r2, sp, #108	; 0x6c
    a124:	ldr	r1, [sp, #12]
    a126:	ldr	r0, [sp, #20]
    a128:	bl	d2cc <__ssprint_r>
    a12c:	cmp	r0, #0
    a12e:	bne.w	904c <_svfprintf_r+0x1ec>
    a132:	ldr	r3, [sp, #116]	; 0x74
    a134:	add.w	r9, sp, #160	; 0xa0
    a138:	b.n	9a42 <_svfprintf_r+0xbe2>
    a13a:	add	r2, sp, #108	; 0x6c
    a13c:	ldr	r1, [sp, #12]
    a13e:	ldr	r0, [sp, #20]
    a140:	bl	d2cc <__ssprint_r>
    a144:	cmp	r0, #0
    a146:	bne.w	904c <_svfprintf_r+0x1ec>
    a14a:	ldr	r2, [sp, #84]	; 0x54
    a14c:	ldr	r3, [sp, #116]	; 0x74
    a14e:	add.w	r9, sp, #160	; 0xa0
    a152:	b.n	9c48 <_svfprintf_r+0xde8>
    a154:	mov	r6, r9
    a156:	mov	r9, r1
    a158:	adds	r2, #1
    a15a:	add	r3, r4
    a15c:	cmp	r2, #7
    a15e:	str	r3, [sp, #116]	; 0x74
    a160:	str	r2, [sp, #112]	; 0x70
    a162:	str.w	r7, [r9]
    a166:	str.w	r4, [r9, #4]
    a16a:	bgt.w	a022 <_svfprintf_r+0x11c2>
    a16e:	add.w	r9, r9, #8
    a172:	b.n	a03a <_svfprintf_r+0x11da>
    a174:	add	r2, sp, #108	; 0x6c
    a176:	ldr	r1, [sp, #12]
    a178:	ldr	r0, [sp, #20]
    a17a:	bl	d2cc <__ssprint_r>
    a17e:	cmp	r0, #0
    a180:	bne.w	904c <_svfprintf_r+0x1ec>
    a184:	ldr	r2, [sp, #84]	; 0x54
    a186:	ldr	r1, [sp, #52]	; 0x34
    a188:	ldr	r3, [sp, #116]	; 0x74
    a18a:	subs	r2, r1, r2
    a18c:	add.w	r9, sp, #160	; 0xa0
    a190:	b.n	9c78 <_svfprintf_r+0xe18>
    a192:	cmp	r5, #6
    a194:	mov	r3, r5
    a196:	it	cs
    a198:	movcs	r3, #6
    a19a:	str	r3, [sp, #32]
    a19c:	bic.w	r3, r3, r3, asr #31
    a1a0:	mov	r8, r6
    a1a2:	str	r7, [sp, #36]	; 0x24
    a1a4:	str	r6, [sp, #56]	; 0x38
    a1a6:	mov	r7, r6
    a1a8:	str	r3, [sp, #16]
    a1aa:	ldr	r6, [pc, #32]	; (a1cc <_svfprintf_r+0x136c>)
    a1ac:	b.w	9244 <_svfprintf_r+0x3e4>
    a1b0:	mov	fp, r3
    a1b2:	b.w	958a <_svfprintf_r+0x72a>
    a1b6:	movs	r7, #45	; 0x2d
    a1b8:	strb.w	r7, [sp, #79]	; 0x4f
    a1bc:	b.w	9226 <_svfprintf_r+0x3c6>
    a1c0:	.word	0x20000404
    a1c4:	.word	0x20000f08
    a1c8:	.word	0x66666667
    a1cc:	.word	0x20000f50
    a1d0:	add	r2, sp, #100	; 0x64
    a1d2:	add	r3, sp, #88	; 0x58
    a1d4:	str	r2, [sp, #4]
    a1d6:	str	r3, [sp, #0]
    a1d8:	movs	r1, #3
    a1da:	add	r3, sp, #84	; 0x54
    a1dc:	mov	r2, r8
    a1de:	vmov.f64	d0, d10
    a1e2:	ldr	r0, [sp, #20]
    a1e4:	bl	b4e8 <_dtoa_r>
    a1e8:	mov	r4, r8
    a1ea:	mov	r6, r0
    a1ec:	add.w	r1, r0, r8
    a1f0:	b.n	9fd2 <_svfprintf_r+0x1172>
    a1f2:	mov.w	r8, #6
    a1f6:	b.n	9dae <_svfprintf_r+0xf4e>
    a1f8:	vneg.f64	d10, d8
    a1fc:	movs	r7, #45	; 0x2d
    a1fe:	b.n	9dc4 <_svfprintf_r+0xf64>
    a200:	ldr	r2, [sp, #60]	; 0x3c
    a202:	ldr	r3, [sp, #52]	; 0x34
    a204:	add	r3, r2
    a206:	ldr	r2, [sp, #56]	; 0x38
    a208:	str	r3, [sp, #32]
    a20a:	cmp	r2, #0
    a20c:	ble.w	a31c <_svfprintf_r+0x14bc>
    a210:	movs	r2, #103	; 0x67
    a212:	bic.w	r3, r3, r3, asr #31
    a216:	str	r2, [sp, #48]	; 0x30
    a218:	b.n	9e62 <_svfprintf_r+0x1002>
    a21a:	ldr	r3, [sp, #48]	; 0x30
    a21c:	cmp	r3, #71	; 0x47
    a21e:	bne.w	9e06 <_svfprintf_r+0xfa6>
    a222:	tst.w	fp, #1
    a226:	bne.w	9fc6 <_svfprintf_r+0x1166>
    a22a:	ldr	r3, [sp, #100]	; 0x64
    a22c:	cmp	r5, #71	; 0x47
    a22e:	sub.w	r3, r3, r6
    a232:	str	r3, [sp, #52]	; 0x34
    a234:	beq.w	a070 <_svfprintf_r+0x1210>
    a238:	ldr	r3, [sp, #84]	; 0x54
    a23a:	b.n	a082 <_svfprintf_r+0x1222>
    a23c:	cmp	r3, #0
    a23e:	mov	r2, r3
    a240:	str	r3, [sp, #56]	; 0x38
    a242:	ble.n	a32c <_svfprintf_r+0x14cc>
    a244:	cmp.w	r8, #0
    a248:	bne.n	a2e2 <_svfprintf_r+0x1482>
    a24a:	tst.w	fp, #1
    a24e:	bne.n	a2e2 <_svfprintf_r+0x1482>
    a250:	bic.w	r3, r3, r3, asr #31
    a254:	str	r2, [sp, #32]
    a256:	b.n	9e62 <_svfprintf_r+0x1002>
    a258:	tst.w	fp, #1
    a25c:	mov	r7, r8
    a25e:	beq.n	a26c <_svfprintf_r+0x140c>
    a260:	add	r6, sp, #224	; 0xe0
    a262:	movs	r3, #48	; 0x30
    a264:	strb.w	r3, [r6, #-65]!
    a268:	b.w	9518 <_svfprintf_r+0x6b8>
    a26c:	str.w	r8, [sp, #32]
    a270:	add	r6, sp, #160	; 0xa0
    a272:	b.w	951e <_svfprintf_r+0x6be>
    a276:	bic.w	r3, r5, r5, asr #31
    a27a:	str	r7, [sp, #36]	; 0x24
    a27c:	str	r3, [sp, #16]
    a27e:	str	r5, [sp, #32]
    a280:	mov	r8, r0
    a282:	str	r0, [sp, #56]	; 0x38
    a284:	ldrb.w	r7, [sp, #79]	; 0x4f
    a288:	b.w	9244 <_svfprintf_r+0x3e4>
    a28c:	add	r2, sp, #108	; 0x6c
    a28e:	ldr	r1, [sp, #12]
    a290:	ldr	r0, [sp, #20]
    a292:	bl	d2cc <__ssprint_r>
    a296:	cmp	r0, #0
    a298:	bne.w	904c <_svfprintf_r+0x1ec>
    a29c:	ldr	r4, [sp, #84]	; 0x54
    a29e:	ldr	r3, [sp, #116]	; 0x74
    a2a0:	ldr	r2, [sp, #112]	; 0x70
    a2a2:	add.w	r9, sp, #160	; 0xa0
    a2a6:	b.n	9f24 <_svfprintf_r+0x10c4>
    a2a8:	mov	sl, r4
    a2aa:	movs	r5, #0
    a2ac:	b.w	8f16 <_svfprintf_r+0xb6>
    a2b0:	adds	r3, #48	; 0x30
    a2b2:	movs	r2, #48	; 0x30
    a2b4:	strb.w	r3, [sp, #95]	; 0x5f
    a2b8:	strb.w	r2, [sp, #94]	; 0x5e
    a2bc:	add	r3, sp, #96	; 0x60
    a2be:	b.n	a0fa <_svfprintf_r+0x129a>
    a2c0:	ldr	r2, [sp, #60]	; 0x3c
    a2c2:	ldr	r3, [sp, #56]	; 0x38
    a2c4:	add	r3, r2
    a2c6:	movs	r2, #103	; 0x67
    a2c8:	str	r3, [sp, #32]
    a2ca:	str	r2, [sp, #48]	; 0x30
    a2cc:	bic.w	r3, r3, r3, asr #31
    a2d0:	b.n	9e62 <_svfprintf_r+0x1002>
    a2d2:	ldr	r3, [sp, #100]	; 0x64
    a2d4:	b.n	9e28 <_svfprintf_r+0xfc8>
    a2d6:	ldr	r6, [pc, #240]	; (a3c8 <_svfprintf_r+0x1568>)
    a2d8:	ldr	r3, [pc, #240]	; (a3cc <_svfprintf_r+0x156c>)
    a2da:	ldrb.w	r7, [sp, #79]	; 0x4f
    a2de:	b.w	922a <_svfprintf_r+0x3ca>
    a2e2:	ldr	r3, [sp, #56]	; 0x38
    a2e4:	ldr	r2, [sp, #60]	; 0x3c
    a2e6:	adds	r5, r3, r2
    a2e8:	add.w	r3, r5, r8
    a2ec:	str	r3, [sp, #32]
    a2ee:	bic.w	r3, r3, r3, asr #31
    a2f2:	b.n	9e62 <_svfprintf_r+0x1002>
    a2f4:	vcmp.f64	d10, #0.0
    a2f8:	vmrs	APSR_nzcv, fpscr
    a2fc:	beq.w	9fda <_svfprintf_r+0x117a>
    a300:	rsb	r4, r4, #1
    a304:	str	r4, [sp, #84]	; 0x54
    a306:	add	r1, r4
    a308:	b.n	9e08 <_svfprintf_r+0xfa8>
    a30a:	ands.w	r3, fp, #1
    a30e:	bne.w	a10c <_svfprintf_r+0x12ac>
    a312:	str	r3, [sp, #56]	; 0x38
    a314:	ldr	r3, [sp, #32]
    a316:	bic.w	r3, r3, r3, asr #31
    a31a:	b.n	9e62 <_svfprintf_r+0x1002>
    a31c:	ldr	r3, [sp, #56]	; 0x38
    a31e:	ldr	r2, [sp, #32]
    a320:	rsb	r3, r3, #1
    a324:	add	r2, r3
    a326:	mov	r3, r2
    a328:	str	r2, [sp, #32]
    a32a:	b.n	a210 <_svfprintf_r+0x13b0>
    a32c:	cmp.w	r8, #0
    a330:	bne.n	a338 <_svfprintf_r+0x14d8>
    a332:	tst.w	fp, #1
    a336:	beq.n	a348 <_svfprintf_r+0x14e8>
    a338:	ldr	r3, [sp, #60]	; 0x3c
    a33a:	adds	r5, r3, #1
    a33c:	add.w	r3, r5, r8
    a340:	str	r3, [sp, #32]
    a342:	bic.w	r3, r3, r3, asr #31
    a346:	b.n	9e62 <_svfprintf_r+0x1002>
    a348:	movs	r3, #1
    a34a:	str	r3, [sp, #32]
    a34c:	b.n	9e62 <_svfprintf_r+0x1002>
    a34e:	ldr	r0, [sp, #36]	; 0x24
    a350:	ldrb.w	r3, [sl, #1]
    a354:	ldr	r5, [r0, #0]
    a356:	adds	r0, #4
    a358:	cmp	r5, #0
    a35a:	str	r0, [sp, #36]	; 0x24
    a35c:	mov	sl, r4
    a35e:	bge.w	8f12 <_svfprintf_r+0xb2>
    a362:	mov.w	r5, #4294967295
    a366:	b.w	8f12 <_svfprintf_r+0xb2>
    a36a:	strb.w	r1, [sp, #79]	; 0x4f
    a36e:	b.w	968c <_svfprintf_r+0x82c>
    a372:	strb.w	r1, [sp, #79]	; 0x4f
    a376:	b.w	9718 <_svfprintf_r+0x8b8>
    a37a:	ldr	r2, [sp, #20]
    a37c:	movs	r3, #12
    a37e:	str	r3, [r2, #0]
    a380:	mov.w	r0, #4294967295
    a384:	b.w	905e <_svfprintf_r+0x1fe>
    a388:	strb.w	r1, [sp, #79]	; 0x4f
    a38c:	b.w	9538 <_svfprintf_r+0x6d8>
    a390:	strb.w	r1, [sp, #79]	; 0x4f
    a394:	b.w	94de <_svfprintf_r+0x67e>
    a398:	strb.w	r1, [sp, #79]	; 0x4f
    a39c:	b.w	9644 <_svfprintf_r+0x7e4>
    a3a0:	add.w	r3, sp, #94	; 0x5e
    a3a4:	b.n	a0fa <_svfprintf_r+0x129a>
    a3a6:	strb.w	r1, [sp, #79]	; 0x4f
    a3aa:	b.w	9072 <_svfprintf_r+0x212>
    a3ae:	strb.w	r1, [sp, #79]	; 0x4f
    a3b2:	b.w	947a <_svfprintf_r+0x61a>
    a3b6:	strb.w	r1, [sp, #79]	; 0x4f
    a3ba:	b.w	91ea <_svfprintf_r+0x38a>
    a3be:	strb.w	r1, [sp, #79]	; 0x4f
    a3c2:	b.w	9166 <_svfprintf_r+0x306>
    a3c6:	nop
    a3c8:	.word	0x20000f24
    a3cc:	.word	0x20000f20

0000a3d0 <__sprint_r.part.0>:
    a3d0:	ldr	r3, [r1, #100]	; 0x64
    a3d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a3d6:	lsls	r4, r3, #18
    a3d8:	mov	sl, r2
    a3da:	bpl.n	a436 <__sprint_r.part.0+0x66>
    a3dc:	ldr	r3, [r2, #8]
    a3de:	ldr	r2, [r2, #0]
    a3e0:	cbz	r3, a432 <__sprint_r.part.0+0x62>
    a3e2:	mov	r7, r1
    a3e4:	mov	r8, r0
    a3e6:	add.w	r9, r2, #8
    a3ea:	ldmdb	r9, {r5, r6}
    a3ee:	lsrs	r6, r6, #2
    a3f0:	beq.n	a422 <__sprint_r.part.0+0x52>
    a3f2:	subs	r5, #4
    a3f4:	movs	r4, #0
    a3f6:	b.n	a3fc <__sprint_r.part.0+0x2c>
    a3f8:	cmp	r6, r4
    a3fa:	beq.n	a41e <__sprint_r.part.0+0x4e>
    a3fc:	mov	r2, r7
    a3fe:	ldr.w	r1, [r5, #4]!
    a402:	mov	r0, r8
    a404:	bl	c488 <_fputwc_r>
    a408:	adds	r3, r0, #1
    a40a:	add.w	r4, r4, #1
    a40e:	bne.n	a3f8 <__sprint_r.part.0+0x28>
    a410:	movs	r3, #0
    a412:	str.w	r3, [sl, #8]
    a416:	str.w	r3, [sl, #4]
    a41a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a41e:	ldr.w	r3, [sl, #8]
    a422:	sub.w	r3, r3, r6, lsl #2
    a426:	str.w	r3, [sl, #8]
    a42a:	add.w	r9, r9, #8
    a42e:	cmp	r3, #0
    a430:	bne.n	a3ea <__sprint_r.part.0+0x1a>
    a432:	movs	r0, #0
    a434:	b.n	a410 <__sprint_r.part.0+0x40>
    a436:	bl	c71c <__sfvwrite_r>
    a43a:	movs	r3, #0
    a43c:	str.w	r3, [sl, #8]
    a440:	str.w	r3, [sl, #4]
    a444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a448 <_vfiprintf_r>:
    a448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a44c:	sub	sp, #172	; 0xac
    a44e:	mov	r4, r3
    a450:	str	r1, [sp, #0]
    a452:	mov	r8, r2
    a454:	str	r3, [sp, #16]
    a456:	str	r0, [sp, #20]
    a458:	cbz	r0, a462 <_vfiprintf_r+0x1a>
    a45a:	ldr	r3, [r0, #56]	; 0x38
    a45c:	cmp	r3, #0
    a45e:	beq.w	a61e <_vfiprintf_r+0x1d6>
    a462:	ldr	r0, [sp, #0]
    a464:	ldrsh.w	r1, [r0, #12]
    a468:	uxth	r2, r1
    a46a:	lsls	r5, r2, #18
    a46c:	bmi.n	a47e <_vfiprintf_r+0x36>
    a46e:	ldr	r3, [r0, #100]	; 0x64
    a470:	orr.w	r2, r1, #8192	; 0x2000
    a474:	bic.w	r3, r3, #8192	; 0x2000
    a478:	strh	r2, [r0, #12]
    a47a:	str	r3, [r0, #100]	; 0x64
    a47c:	uxth	r2, r2
    a47e:	lsls	r1, r2, #28
    a480:	bpl.w	a5e6 <_vfiprintf_r+0x19e>
    a484:	ldr	r3, [sp, #0]
    a486:	ldr	r3, [r3, #16]
    a488:	cmp	r3, #0
    a48a:	beq.w	a5e6 <_vfiprintf_r+0x19e>
    a48e:	and.w	r2, r2, #26
    a492:	cmp	r2, #10
    a494:	beq.w	a602 <_vfiprintf_r+0x1ba>
    a498:	movs	r3, #0
    a49a:	add.w	fp, sp, #104	; 0x68
    a49e:	str	r3, [sp, #8]
    a4a0:	str	r3, [sp, #60]	; 0x3c
    a4a2:	str	r3, [sp, #56]	; 0x38
    a4a4:	str.w	fp, [sp, #52]	; 0x34
    a4a8:	mov	sl, fp
    a4aa:	ldrb.w	r3, [r8]
    a4ae:	mov	r4, r8
    a4b0:	cbz	r3, a4f2 <_vfiprintf_r+0xaa>
    a4b2:	cmp	r3, #37	; 0x25
    a4b4:	bne.n	a4bc <_vfiprintf_r+0x74>
    a4b6:	b.n	a4f2 <_vfiprintf_r+0xaa>
    a4b8:	cmp	r3, #37	; 0x25
    a4ba:	beq.n	a4c4 <_vfiprintf_r+0x7c>
    a4bc:	ldrb.w	r3, [r4, #1]!
    a4c0:	cmp	r3, #0
    a4c2:	bne.n	a4b8 <_vfiprintf_r+0x70>
    a4c4:	rsb	r5, r8, r4
    a4c8:	cbz	r5, a4f2 <_vfiprintf_r+0xaa>
    a4ca:	ldr	r3, [sp, #56]	; 0x38
    a4cc:	ldr	r2, [sp, #60]	; 0x3c
    a4ce:	str.w	r8, [sl]
    a4d2:	adds	r3, #1
    a4d4:	add	r2, r5
    a4d6:	cmp	r3, #7
    a4d8:	str.w	r5, [sl, #4]
    a4dc:	str	r2, [sp, #60]	; 0x3c
    a4de:	str	r3, [sp, #56]	; 0x38
    a4e0:	ble.n	a5da <_vfiprintf_r+0x192>
    a4e2:	cmp	r2, #0
    a4e4:	bne.w	af38 <_vfiprintf_r+0xaf0>
    a4e8:	ldr	r3, [sp, #8]
    a4ea:	str	r2, [sp, #56]	; 0x38
    a4ec:	add	r3, r5
    a4ee:	mov	sl, fp
    a4f0:	str	r3, [sp, #8]
    a4f2:	ldrb	r3, [r4, #0]
    a4f4:	cmp	r3, #0
    a4f6:	beq.w	ad76 <_vfiprintf_r+0x92e>
    a4fa:	movs	r1, #0
    a4fc:	mov.w	r3, #0
    a500:	mov.w	r2, #4294967295
    a504:	strb.w	r3, [sp, #47]	; 0x2f
    a508:	add.w	r8, r4, #1
    a50c:	ldrb	r3, [r4, #1]
    a50e:	str	r2, [sp, #4]
    a510:	mov	r0, r1
    a512:	mov	r6, r1
    a514:	mov	r4, r1
    a516:	add.w	r8, r8, #1
    a51a:	sub.w	r2, r3, #32
    a51e:	cmp	r2, #88	; 0x58
    a520:	bhi.w	ac4a <_vfiprintf_r+0x802>
    a524:	tbh	[pc, r2, lsl #1]
    a528:	.word	0x03910346
    a52c:	.word	0x034e0391
    a530:	.word	0x03910391
    a534:	.word	0x03910391
    a538:	.word	0x03910391
    a53c:	.word	0x02670289
    a540:	.word	0x00800391
    a544:	.word	0x0391026c
    a548:	.word	0x025901c6
    a54c:	.word	0x02590259
    a550:	.word	0x02590259
    a554:	.word	0x02590259
    a558:	.word	0x02590259
    a55c:	.word	0x03910391
    a560:	.word	0x03910391
    a564:	.word	0x03910391
    a568:	.word	0x03910391
    a56c:	.word	0x03910391
    a570:	.word	0x039101cb
    a574:	.word	0x03910391
    a578:	.word	0x03910391
    a57c:	.word	0x03910391
    a580:	.word	0x03910391
    a584:	.word	0x02140391
    a588:	.word	0x03910391
    a58c:	.word	0x03910391
    a590:	.word	0x02ee0391
    a594:	.word	0x03910391
    a598:	.word	0x03910311
    a59c:	.word	0x03910391
    a5a0:	.word	0x03910391
    a5a4:	.word	0x03910391
    a5a8:	.word	0x03910391
    a5ac:	.word	0x03340391
    a5b0:	.word	0x0391038a
    a5b4:	.word	0x03910391
    a5b8:	.word	0x038a0367
    a5bc:	.word	0x03910391
    a5c0:	.word	0x0391036c
    a5c4:	.word	0x02950379
    a5c8:	.word	0x02e90085
    a5cc:	.word	0x029b0391
    a5d0:	.word	0x02ba0391
    a5d4:	.word	0x03910391
    a5d8:	.short	0x0353
    a5da:	add.w	sl, sl, #8
    a5de:	ldr	r3, [sp, #8]
    a5e0:	add	r3, r5
    a5e2:	str	r3, [sp, #8]
    a5e4:	b.n	a4f2 <_vfiprintf_r+0xaa>
    a5e6:	ldr	r1, [sp, #0]
    a5e8:	ldr	r0, [sp, #20]
    a5ea:	bl	b2f8 <__swsetup_r>
    a5ee:	cmp	r0, #0
    a5f0:	bne.w	b0a4 <_vfiprintf_r+0xc5c>
    a5f4:	ldr	r3, [sp, #0]
    a5f6:	ldrh	r2, [r3, #12]
    a5f8:	and.w	r2, r2, #26
    a5fc:	cmp	r2, #10
    a5fe:	bne.w	a498 <_vfiprintf_r+0x50>
    a602:	ldr	r1, [sp, #0]
    a604:	ldrsh.w	r3, [r1, #14]
    a608:	cmp	r3, #0
    a60a:	blt.w	a498 <_vfiprintf_r+0x50>
    a60e:	mov	r3, r4
    a610:	mov	r2, r8
    a612:	ldr	r0, [sp, #20]
    a614:	bl	b244 <__sbprintf>
    a618:	add	sp, #172	; 0xac
    a61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a61e:	bl	c3dc <__sinit>
    a622:	b.n	a462 <_vfiprintf_r+0x1a>
    a624:	negs	r4, r4
    a626:	str	r3, [sp, #16]
    a628:	orr.w	r6, r6, #4
    a62c:	ldrb.w	r3, [r8]
    a630:	b.n	a516 <_vfiprintf_r+0xce>
    a632:	movs	r1, #48	; 0x30
    a634:	ldr	r0, [sp, #16]
    a636:	strb.w	r1, [sp, #48]	; 0x30
    a63a:	ldr	r1, [sp, #4]
    a63c:	str	r4, [sp, #24]
    a63e:	mov.w	r3, #0
    a642:	movs	r2, #120	; 0x78
    a644:	strb.w	r3, [sp, #47]	; 0x2f
    a648:	cmp	r1, #0
    a64a:	mov	r3, r0
    a64c:	strb.w	r2, [sp, #49]	; 0x31
    a650:	ldr	r4, [r0, #0]
    a652:	add.w	r3, r3, #4
    a656:	mov.w	r5, #0
    a65a:	orr.w	r2, r6, #2
    a65e:	blt.w	b0ac <_vfiprintf_r+0xc64>
    a662:	bic.w	r6, r6, #128	; 0x80
    a666:	orrs.w	r2, r4, r5
    a66a:	orr.w	r6, r6, #2
    a66e:	str	r3, [sp, #16]
    a670:	bne.w	aff2 <_vfiprintf_r+0xbaa>
    a674:	ldr	r0, [pc, #716]	; (a944 <_vfiprintf_r+0x4fc>)
    a676:	ldr	r3, [sp, #4]
    a678:	cmp	r3, #0
    a67a:	bne.w	aeb6 <_vfiprintf_r+0xa6e>
    a67e:	mov	r9, r3
    a680:	movs	r3, #0
    a682:	str	r3, [sp, #4]
    a684:	str	r3, [sp, #12]
    a686:	mov	r7, fp
    a688:	ldr	r3, [sp, #4]
    a68a:	ldr	r2, [sp, #12]
    a68c:	cmp	r3, r2
    a68e:	it	lt
    a690:	movlt	r3, r2
    a692:	mov	r5, r3
    a694:	cmp.w	r9, #0
    a698:	beq.n	a69c <_vfiprintf_r+0x254>
    a69a:	adds	r5, #1
    a69c:	ands.w	r3, r6, #2
    a6a0:	str	r3, [sp, #28]
    a6a2:	it	ne
    a6a4:	addne	r5, #2
    a6a6:	ands.w	r3, r6, #132	; 0x84
    a6aa:	str	r3, [sp, #32]
    a6ac:	bne.w	ac92 <_vfiprintf_r+0x84a>
    a6b0:	ldr	r3, [sp, #24]
    a6b2:	subs	r4, r3, r5
    a6b4:	cmp	r4, #0
    a6b6:	ble.w	ac92 <_vfiprintf_r+0x84a>
    a6ba:	cmp	r4, #16
    a6bc:	ble.w	b16c <_vfiprintf_r+0xd24>
    a6c0:	ldr.w	r9, [pc, #644]	; a948 <_vfiprintf_r+0x500>
    a6c4:	ldr.w	lr, [sp, #56]	; 0x38
    a6c8:	ldr	r2, [sp, #60]	; 0x3c
    a6ca:	mov	ip, sl
    a6cc:	movs	r3, #16
    a6ce:	mov	sl, r8
    a6d0:	mov	r0, lr
    a6d2:	mov	r8, r5
    a6d4:	mov	r5, r9
    a6d6:	ldr.w	r9, [sp, #20]
    a6da:	b.n	a6ec <_vfiprintf_r+0x2a4>
    a6dc:	add.w	lr, r0, #2
    a6e0:	add.w	ip, ip, #8
    a6e4:	mov	r0, r1
    a6e6:	subs	r4, #16
    a6e8:	cmp	r4, #16
    a6ea:	ble.n	a714 <_vfiprintf_r+0x2cc>
    a6ec:	adds	r1, r0, #1
    a6ee:	adds	r2, #16
    a6f0:	cmp	r1, #7
    a6f2:	str	r2, [sp, #60]	; 0x3c
    a6f4:	str.w	r5, [ip]
    a6f8:	str.w	r3, [ip, #4]
    a6fc:	str	r1, [sp, #56]	; 0x38
    a6fe:	ble.n	a6dc <_vfiprintf_r+0x294>
    a700:	cmp	r2, #0
    a702:	bne.w	ac74 <_vfiprintf_r+0x82c>
    a706:	subs	r4, #16
    a708:	cmp	r4, #16
    a70a:	mov	r0, r2
    a70c:	mov.w	lr, #1
    a710:	mov	ip, fp
    a712:	bgt.n	a6ec <_vfiprintf_r+0x2a4>
    a714:	mov	r9, r5
    a716:	mov	r0, lr
    a718:	mov	r5, r8
    a71a:	mov	r8, sl
    a71c:	mov	sl, ip
    a71e:	add	r2, r4
    a720:	cmp	r0, #7
    a722:	str	r2, [sp, #60]	; 0x3c
    a724:	str.w	r9, [sl]
    a728:	str.w	r4, [sl, #4]
    a72c:	str	r0, [sp, #56]	; 0x38
    a72e:	bgt.w	ae1c <_vfiprintf_r+0x9d4>
    a732:	ldrb.w	r3, [sp, #47]	; 0x2f
    a736:	add.w	sl, sl, #8
    a73a:	add.w	lr, r0, #1
    a73e:	cmp	r3, #0
    a740:	bne.w	aca4 <_vfiprintf_r+0x85c>
    a744:	ldr	r3, [sp, #28]
    a746:	cmp	r3, #0
    a748:	beq.w	acd2 <_vfiprintf_r+0x88a>
    a74c:	adds	r2, #2
    a74e:	add	r1, sp, #48	; 0x30
    a750:	movs	r3, #2
    a752:	cmp.w	lr, #7
    a756:	str	r2, [sp, #60]	; 0x3c
    a758:	str.w	lr, [sp, #56]	; 0x38
    a75c:	stmia.w	sl, {r1, r3}
    a760:	ble.w	ae54 <_vfiprintf_r+0xa0c>
    a764:	cmp	r2, #0
    a766:	bne.w	af7e <_vfiprintf_r+0xb36>
    a76a:	ldr	r3, [sp, #32]
    a76c:	cmp	r3, #128	; 0x80
    a76e:	mov.w	lr, #1
    a772:	mov	r0, r2
    a774:	mov	sl, fp
    a776:	bne.w	acda <_vfiprintf_r+0x892>
    a77a:	ldr	r3, [sp, #24]
    a77c:	subs	r4, r3, r5
    a77e:	cmp	r4, #0
    a780:	ble.w	acda <_vfiprintf_r+0x892>
    a784:	cmp	r4, #16
    a786:	ldr.w	r9, [pc, #452]	; a94c <_vfiprintf_r+0x504>
    a78a:	ble.w	b1a4 <_vfiprintf_r+0xd5c>
    a78e:	mov	lr, sl
    a790:	movs	r3, #16
    a792:	mov	sl, r8
    a794:	mov	r8, r5
    a796:	mov	r5, r9
    a798:	ldr.w	r9, [sp, #20]
    a79c:	b.n	a7ae <_vfiprintf_r+0x366>
    a79e:	add.w	ip, r0, #2
    a7a2:	add.w	lr, lr, #8
    a7a6:	mov	r0, r1
    a7a8:	subs	r4, #16
    a7aa:	cmp	r4, #16
    a7ac:	ble.n	a7d6 <_vfiprintf_r+0x38e>
    a7ae:	adds	r1, r0, #1
    a7b0:	adds	r2, #16
    a7b2:	cmp	r1, #7
    a7b4:	str	r2, [sp, #60]	; 0x3c
    a7b6:	str.w	r5, [lr]
    a7ba:	str.w	r3, [lr, #4]
    a7be:	str	r1, [sp, #56]	; 0x38
    a7c0:	ble.n	a79e <_vfiprintf_r+0x356>
    a7c2:	cmp	r2, #0
    a7c4:	bne.w	adf2 <_vfiprintf_r+0x9aa>
    a7c8:	subs	r4, #16
    a7ca:	cmp	r4, #16
    a7cc:	mov.w	ip, #1
    a7d0:	mov	r0, r2
    a7d2:	mov	lr, fp
    a7d4:	bgt.n	a7ae <_vfiprintf_r+0x366>
    a7d6:	mov	r9, r5
    a7d8:	mov	r5, r8
    a7da:	mov	r8, sl
    a7dc:	mov	sl, lr
    a7de:	add	r2, r4
    a7e0:	cmp.w	ip, #7
    a7e4:	str	r2, [sp, #60]	; 0x3c
    a7e6:	str.w	r9, [sl]
    a7ea:	str.w	r4, [sl, #4]
    a7ee:	str.w	ip, [sp, #56]	; 0x38
    a7f2:	bgt.w	af9a <_vfiprintf_r+0xb52>
    a7f6:	ldr	r3, [sp, #4]
    a7f8:	ldr	r1, [sp, #12]
    a7fa:	subs	r4, r3, r1
    a7fc:	cmp	r4, #0
    a7fe:	add.w	sl, sl, #8
    a802:	add.w	lr, ip, #1
    a806:	mov	r0, ip
    a808:	bgt.w	ace6 <_vfiprintf_r+0x89e>
    a80c:	ldr	r1, [sp, #12]
    a80e:	str.w	r7, [sl]
    a812:	add	r2, r1
    a814:	cmp.w	lr, #7
    a818:	str	r2, [sp, #60]	; 0x3c
    a81a:	str.w	r1, [sl, #4]
    a81e:	str.w	lr, [sp, #56]	; 0x38
    a822:	ble.w	adc2 <_vfiprintf_r+0x97a>
    a826:	cmp	r2, #0
    a828:	bne.w	aea0 <_vfiprintf_r+0xa58>
    a82c:	lsls	r0, r6, #29
    a82e:	str	r2, [sp, #56]	; 0x38
    a830:	bpl.n	a8a4 <_vfiprintf_r+0x45c>
    a832:	ldr	r3, [sp, #24]
    a834:	subs	r4, r3, r5
    a836:	cmp	r4, #0
    a838:	ble.n	a8a4 <_vfiprintf_r+0x45c>
    a83a:	mov	sl, fp
    a83c:	cmp	r4, #16
    a83e:	ble.w	b198 <_vfiprintf_r+0xd50>
    a842:	ldr.w	r9, [pc, #260]	; a948 <_vfiprintf_r+0x500>
    a846:	ldr	r1, [sp, #56]	; 0x38
    a848:	mov	r7, r9
    a84a:	movs	r6, #16
    a84c:	ldr.w	r9, [sp, #20]
    a850:	b.n	a860 <_vfiprintf_r+0x418>
    a852:	adds	r0, r1, #2
    a854:	add.w	sl, sl, #8
    a858:	mov	r1, r3
    a85a:	subs	r4, #16
    a85c:	cmp	r4, #16
    a85e:	ble.n	a888 <_vfiprintf_r+0x440>
    a860:	adds	r3, r1, #1
    a862:	adds	r2, #16
    a864:	cmp	r3, #7
    a866:	str	r2, [sp, #60]	; 0x3c
    a868:	str.w	r7, [sl]
    a86c:	str.w	r6, [sl, #4]
    a870:	str	r3, [sp, #56]	; 0x38
    a872:	ble.n	a852 <_vfiprintf_r+0x40a>
    a874:	cmp	r2, #0
    a876:	bne.w	ad96 <_vfiprintf_r+0x94e>
    a87a:	subs	r4, #16
    a87c:	cmp	r4, #16
    a87e:	mov.w	r0, #1
    a882:	mov	r1, r2
    a884:	mov	sl, fp
    a886:	bgt.n	a860 <_vfiprintf_r+0x418>
    a888:	mov	r9, r7
    a88a:	add	r2, r4
    a88c:	cmp	r0, #7
    a88e:	str	r2, [sp, #60]	; 0x3c
    a890:	str.w	r9, [sl]
    a894:	str.w	r4, [sl, #4]
    a898:	str	r0, [sp, #56]	; 0x38
    a89a:	ble.w	add4 <_vfiprintf_r+0x98c>
    a89e:	cmp	r2, #0
    a8a0:	bne.w	b0ee <_vfiprintf_r+0xca6>
    a8a4:	ldr	r3, [sp, #8]
    a8a6:	ldr	r2, [sp, #24]
    a8a8:	cmp	r2, r5
    a8aa:	ite	ge
    a8ac:	addge	r3, r3, r2
    a8ae:	addlt	r3, r3, r5
    a8b0:	str	r3, [sp, #8]
    a8b2:	b.n	ade8 <_vfiprintf_r+0x9a0>
    a8b4:	orr.w	r6, r6, #128	; 0x80
    a8b8:	ldrb.w	r3, [r8]
    a8bc:	b.n	a516 <_vfiprintf_r+0xce>
    a8be:	str	r4, [sp, #24]
    a8c0:	cmp	r1, #0
    a8c2:	bne.w	b224 <_vfiprintf_r+0xddc>
    a8c6:	orr.w	r6, r6, #16
    a8ca:	lsls	r3, r6, #26
    a8cc:	bpl.w	aef4 <_vfiprintf_r+0xaac>
    a8d0:	ldr	r1, [sp, #16]
    a8d2:	adds	r1, #7
    a8d4:	bic.w	r1, r1, #7
    a8d8:	ldrd	r2, r3, [r1]
    a8dc:	adds	r1, #8
    a8de:	str	r1, [sp, #16]
    a8e0:	mov	r4, r2
    a8e2:	mov	r5, r3
    a8e4:	cmp	r2, #0
    a8e6:	sbcs.w	r3, r3, #0
    a8ea:	blt.w	affa <_vfiprintf_r+0xbb2>
    a8ee:	ldr	r3, [sp, #4]
    a8f0:	ldrb.w	r9, [sp, #47]	; 0x2f
    a8f4:	cmp	r3, #0
    a8f6:	blt.w	af2e <_vfiprintf_r+0xae6>
    a8fa:	orrs.w	r3, r4, r5
    a8fe:	bic.w	r6, r6, #128	; 0x80
    a902:	beq.w	aae0 <_vfiprintf_r+0x698>
    a906:	cmp	r5, #0
    a908:	it	eq
    a90a:	cmpeq	r4, #10
    a90c:	bcc.w	aaea <_vfiprintf_r+0x6a2>
    a910:	mov	r7, fp
    a912:	mov	r0, r4
    a914:	mov	r1, r5
    a916:	movs	r2, #10
    a918:	movs	r3, #0
    a91a:	bl	d678 <__aeabi_uldivmod>
    a91e:	adds	r2, #48	; 0x30
    a920:	strb.w	r2, [r7, #-1]!
    a924:	mov	r0, r4
    a926:	mov	r1, r5
    a928:	movs	r3, #0
    a92a:	movs	r2, #10
    a92c:	bl	d678 <__aeabi_uldivmod>
    a930:	mov	r4, r0
    a932:	mov	r5, r1
    a934:	orrs.w	r3, r4, r5
    a938:	bne.n	a912 <_vfiprintf_r+0x4ca>
    a93a:	rsb	r3, r7, fp
    a93e:	str	r3, [sp, #12]
    a940:	b.n	a688 <_vfiprintf_r+0x240>
    a942:	nop
    a944:	.word	0x20000f3c
    a948:	.word	0x20000f78
    a94c:	.word	0x20000f68
    a950:	str	r4, [sp, #24]
    a952:	cmp	r1, #0
    a954:	bne.w	b21c <_vfiprintf_r+0xdd4>
    a958:	orr.w	r6, r6, #16
    a95c:	ands.w	r3, r6, #32
    a960:	beq.w	aec0 <_vfiprintf_r+0xa78>
    a964:	ldr	r3, [sp, #16]
    a966:	adds	r3, #7
    a968:	bic.w	r3, r3, #7
    a96c:	mov.w	r2, #0
    a970:	strb.w	r2, [sp, #47]	; 0x2f
    a974:	ldrd	r4, r5, [r3]
    a978:	add.w	r2, r3, #8
    a97c:	ldr	r3, [sp, #4]
    a97e:	str	r2, [sp, #16]
    a980:	cmp	r3, #0
    a982:	blt.w	ac6e <_vfiprintf_r+0x826>
    a986:	orrs.w	r3, r4, r5
    a98a:	bic.w	r6, r6, #128	; 0x80
    a98e:	bne.w	ac6e <_vfiprintf_r+0x826>
    a992:	ldr	r3, [sp, #4]
    a994:	cmp	r3, #0
    a996:	beq.w	b1fa <_vfiprintf_r+0xdb2>
    a99a:	mov.w	r9, #0
    a99e:	movs	r4, #0
    a9a0:	movs	r5, #0
    a9a2:	mov	r7, fp
    a9a4:	lsrs	r2, r4, #3
    a9a6:	orr.w	r2, r2, r5, lsl #29
    a9aa:	lsrs	r1, r5, #3
    a9ac:	and.w	r3, r4, #7
    a9b0:	mov	r5, r1
    a9b2:	mov	r4, r2
    a9b4:	adds	r3, #48	; 0x30
    a9b6:	orrs.w	r2, r4, r5
    a9ba:	strb.w	r3, [r7, #-1]!
    a9be:	bne.n	a9a4 <_vfiprintf_r+0x55c>
    a9c0:	lsls	r4, r6, #31
    a9c2:	bpl.n	a93a <_vfiprintf_r+0x4f2>
    a9c4:	cmp	r3, #48	; 0x30
    a9c6:	beq.n	a93a <_vfiprintf_r+0x4f2>
    a9c8:	movs	r2, #48	; 0x30
    a9ca:	subs	r3, r7, #1
    a9cc:	strb.w	r2, [r7, #-1]
    a9d0:	rsb	r2, r3, fp
    a9d4:	str	r2, [sp, #12]
    a9d6:	mov	r7, r3
    a9d8:	b.n	a688 <_vfiprintf_r+0x240>
    a9da:	sub.w	r2, r3, #48	; 0x30
    a9de:	movs	r4, #0
    a9e0:	ldrb.w	r3, [r8], #1
    a9e4:	add.w	r4, r4, r4, lsl #2
    a9e8:	add.w	r4, r2, r4, lsl #1
    a9ec:	sub.w	r2, r3, #48	; 0x30
    a9f0:	cmp	r2, #9
    a9f2:	bls.n	a9e0 <_vfiprintf_r+0x598>
    a9f4:	b.n	a51a <_vfiprintf_r+0xd2>
    a9f6:	ldrb.w	r3, [r8]
    a9fa:	movs	r1, #1
    a9fc:	movs	r0, #43	; 0x2b
    a9fe:	b.n	a516 <_vfiprintf_r+0xce>
    aa00:	ldrb.w	r3, [r8]
    aa04:	cmp	r3, #42	; 0x2a
    aa06:	add.w	r5, r8, #1
    aa0a:	beq.w	b1c8 <_vfiprintf_r+0xd80>
    aa0e:	sub.w	r2, r3, #48	; 0x30
    aa12:	cmp	r2, #9
    aa14:	mov	r8, r5
    aa16:	it	ls
    aa18:	movls	r5, #0
    aa1a:	bhi.w	b1ba <_vfiprintf_r+0xd72>
    aa1e:	ldrb.w	r3, [r8], #1
    aa22:	add.w	r5, r5, r5, lsl #2
    aa26:	add.w	r5, r2, r5, lsl #1
    aa2a:	sub.w	r2, r3, #48	; 0x30
    aa2e:	cmp	r2, #9
    aa30:	bls.n	aa1e <_vfiprintf_r+0x5d6>
    aa32:	orr.w	r2, r5, r5, asr #31
    aa36:	str	r2, [sp, #4]
    aa38:	b.n	a51a <_vfiprintf_r+0xd2>
    aa3a:	ldr	r2, [sp, #16]
    aa3c:	ldr	r4, [r2, #0]
    aa3e:	mov	r3, r2
    aa40:	cmp	r4, #0
    aa42:	add.w	r3, r3, #4
    aa46:	blt.w	a624 <_vfiprintf_r+0x1dc>
    aa4a:	str	r3, [sp, #16]
    aa4c:	ldrb.w	r3, [r8]
    aa50:	b.n	a516 <_vfiprintf_r+0xce>
    aa52:	str	r4, [sp, #24]
    aa54:	cmp	r1, #0
    aa56:	beq.n	a95c <_vfiprintf_r+0x514>
    aa58:	strb.w	r0, [sp, #47]	; 0x2f
    aa5c:	b.n	a95c <_vfiprintf_r+0x514>
    aa5e:	ldr	r2, [sp, #16]
    aa60:	str	r4, [sp, #24]
    aa62:	ldr	r7, [r2, #0]
    aa64:	mov.w	r3, #0
    aa68:	strb.w	r3, [sp, #47]	; 0x2f
    aa6c:	adds	r4, r2, #4
    aa6e:	ldr	r3, [sp, #4]
    aa70:	cmp	r7, #0
    aa72:	beq.w	b182 <_vfiprintf_r+0xd3a>
    aa76:	cmp	r3, #0
    aa78:	blt.w	b13a <_vfiprintf_r+0xcf2>
    aa7c:	mov	r2, r3
    aa7e:	movs	r1, #0
    aa80:	mov	r0, r7
    aa82:	bl	cb80 <memchr>
    aa86:	cmp	r0, #0
    aa88:	beq.w	b1aa <_vfiprintf_r+0xd62>
    aa8c:	subs	r3, r0, r7
    aa8e:	str	r3, [sp, #12]
    aa90:	movs	r3, #0
    aa92:	str	r4, [sp, #16]
    aa94:	ldrb.w	r9, [sp, #47]	; 0x2f
    aa98:	str	r3, [sp, #4]
    aa9a:	b.n	a688 <_vfiprintf_r+0x240>
    aa9c:	str	r4, [sp, #24]
    aa9e:	cmp	r1, #0
    aaa0:	bne.w	b216 <_vfiprintf_r+0xdce>
    aaa4:	ands.w	r9, r6, #32
    aaa8:	bne.n	ab16 <_vfiprintf_r+0x6ce>
    aaaa:	ands.w	r3, r6, #16
    aaae:	bne.n	aab8 <_vfiprintf_r+0x670>
    aab0:	ands.w	r9, r6, #64	; 0x40
    aab4:	bne.w	b10c <_vfiprintf_r+0xcc4>
    aab8:	ldr	r2, [sp, #16]
    aaba:	mov	r3, r2
    aabc:	ldr	r4, [r2, #0]
    aabe:	ldr	r2, [sp, #4]
    aac0:	strb.w	r9, [sp, #47]	; 0x2f
    aac4:	cmp	r2, #0
    aac6:	add.w	r3, r3, #4
    aaca:	mov.w	r5, #0
    aace:	blt.w	b136 <_vfiprintf_r+0xcee>
    aad2:	orrs.w	r2, r4, r5
    aad6:	bic.w	r6, r6, #128	; 0x80
    aada:	str	r3, [sp, #16]
    aadc:	bne.w	a906 <_vfiprintf_r+0x4be>
    aae0:	ldr	r3, [sp, #4]
    aae2:	cmp	r3, #0
    aae4:	beq.w	a680 <_vfiprintf_r+0x238>
    aae8:	movs	r4, #0
    aaea:	add	r7, sp, #168	; 0xa8
    aaec:	adds	r4, #48	; 0x30
    aaee:	strb.w	r4, [r7, #-65]!
    aaf2:	rsb	r3, r7, fp
    aaf6:	str	r3, [sp, #12]
    aaf8:	b.n	a688 <_vfiprintf_r+0x240>
    aafa:	orr.w	r6, r6, #32
    aafe:	ldrb.w	r3, [r8]
    ab02:	b.n	a516 <_vfiprintf_r+0xce>
    ab04:	str	r4, [sp, #24]
    ab06:	cmp	r1, #0
    ab08:	bne.w	b1e8 <_vfiprintf_r+0xda0>
    ab0c:	orr.w	r6, r6, #16
    ab10:	ands.w	r9, r6, #32
    ab14:	beq.n	aaaa <_vfiprintf_r+0x662>
    ab16:	ldr	r3, [sp, #16]
    ab18:	adds	r3, #7
    ab1a:	bic.w	r3, r3, #7
    ab1e:	mov.w	r2, #0
    ab22:	strb.w	r2, [sp, #47]	; 0x2f
    ab26:	ldrd	r4, r5, [r3]
    ab2a:	add.w	r2, r3, #8
    ab2e:	ldr	r3, [sp, #4]
    ab30:	str	r2, [sp, #16]
    ab32:	cmp	r3, #0
    ab34:	blt.w	af2a <_vfiprintf_r+0xae2>
    ab38:	orrs.w	r3, r4, r5
    ab3c:	bic.w	r6, r6, #128	; 0x80
    ab40:	mov.w	r9, #0
    ab44:	bne.w	a906 <_vfiprintf_r+0x4be>
    ab48:	b.n	aae0 <_vfiprintf_r+0x698>
    ab4a:	str	r4, [sp, #24]
    ab4c:	cmp	r1, #0
    ab4e:	bne.w	b1f4 <_vfiprintf_r+0xdac>
    ab52:	lsls	r2, r6, #26
    ab54:	ldr	r0, [pc, #696]	; (ae10 <_vfiprintf_r+0x9c8>)
    ab56:	bpl.n	abdc <_vfiprintf_r+0x794>
    ab58:	ldr	r2, [sp, #16]
    ab5a:	adds	r2, #7
    ab5c:	bic.w	r2, r2, #7
    ab60:	ldrd	r4, r5, [r2]
    ab64:	add.w	r1, r2, #8
    ab68:	str	r1, [sp, #16]
    ab6a:	ands.w	r9, r6, #1
    ab6e:	beq.w	ae60 <_vfiprintf_r+0xa18>
    ab72:	orrs.w	r2, r4, r5
    ab76:	bne.w	afc6 <_vfiprintf_r+0xb7e>
    ab7a:	mov.w	r3, #0
    ab7e:	strb.w	r3, [sp, #47]	; 0x2f
    ab82:	ldr	r3, [sp, #4]
    ab84:	cmp	r3, #0
    ab86:	blt.w	aeb6 <_vfiprintf_r+0xa6e>
    ab8a:	bic.w	r6, r6, #128	; 0x80
    ab8e:	b.n	a676 <_vfiprintf_r+0x22e>
    ab90:	ldr	r2, [sp, #16]
    ab92:	str	r4, [sp, #24]
    ab94:	ldr	r3, [r2, #0]
    ab96:	strb.w	r3, [sp, #64]	; 0x40
    ab9a:	mov	r3, r2
    ab9c:	mov.w	r1, #0
    aba0:	movs	r5, #1
    aba2:	adds	r3, #4
    aba4:	strb.w	r1, [sp, #47]	; 0x2f
    aba8:	str	r3, [sp, #16]
    abaa:	str	r5, [sp, #12]
    abac:	add	r7, sp, #64	; 0x40
    abae:	movs	r3, #0
    abb0:	str	r3, [sp, #4]
    abb2:	b.n	a69c <_vfiprintf_r+0x254>
    abb4:	ldrb.w	r3, [r8]
    abb8:	cmp	r0, #0
    abba:	bne.w	a516 <_vfiprintf_r+0xce>
    abbe:	movs	r1, #1
    abc0:	movs	r0, #32
    abc2:	b.n	a516 <_vfiprintf_r+0xce>
    abc4:	orr.w	r6, r6, #1
    abc8:	ldrb.w	r3, [r8]
    abcc:	b.n	a516 <_vfiprintf_r+0xce>
    abce:	str	r4, [sp, #24]
    abd0:	cmp	r1, #0
    abd2:	bne.w	b1ee <_vfiprintf_r+0xda6>
    abd6:	lsls	r2, r6, #26
    abd8:	ldr	r0, [pc, #568]	; (ae14 <_vfiprintf_r+0x9cc>)
    abda:	bmi.n	ab58 <_vfiprintf_r+0x710>
    abdc:	ldr	r1, [sp, #16]
    abde:	lsls	r7, r6, #27
    abe0:	mov	r2, r1
    abe2:	bmi.w	af20 <_vfiprintf_r+0xad8>
    abe6:	lsls	r5, r6, #25
    abe8:	bpl.w	af20 <_vfiprintf_r+0xad8>
    abec:	adds	r2, #4
    abee:	ldrh	r4, [r1, #0]
    abf0:	str	r2, [sp, #16]
    abf2:	movs	r5, #0
    abf4:	b.n	ab6a <_vfiprintf_r+0x722>
    abf6:	orr.w	r6, r6, #64	; 0x40
    abfa:	ldrb.w	r3, [r8]
    abfe:	b.n	a516 <_vfiprintf_r+0xce>
    ac00:	ldrb.w	r3, [r8]
    ac04:	cmp	r3, #108	; 0x6c
    ac06:	ittte	eq
    ac08:	ldrbeq.w	r3, [r8, #1]
    ac0c:	orreq.w	r6, r6, #32
    ac10:	addeq.w	r8, r8, #1
    ac14:	orrne.w	r6, r6, #16
    ac18:	b.n	a516 <_vfiprintf_r+0xce>
    ac1a:	cmp	r1, #0
    ac1c:	bne.w	b232 <_vfiprintf_r+0xdea>
    ac20:	lsls	r4, r6, #26
    ac22:	bpl.w	b05e <_vfiprintf_r+0xc16>
    ac26:	ldr	r2, [sp, #16]
    ac28:	ldr	r1, [sp, #8]
    ac2a:	ldr	r3, [r2, #0]
    ac2c:	asrs	r5, r1, #31
    ac2e:	mov	r0, r1
    ac30:	adds	r2, #4
    ac32:	mov	r1, r5
    ac34:	str	r2, [sp, #16]
    ac36:	strd	r0, r1, [r3]
    ac3a:	b.n	a4aa <_vfiprintf_r+0x62>
    ac3c:	str	r4, [sp, #24]
    ac3e:	cmp	r1, #0
    ac40:	beq.w	a8ca <_vfiprintf_r+0x482>
    ac44:	strb.w	r0, [sp, #47]	; 0x2f
    ac48:	b.n	a8ca <_vfiprintf_r+0x482>
    ac4a:	str	r4, [sp, #24]
    ac4c:	cmp	r1, #0
    ac4e:	bne.w	b22c <_vfiprintf_r+0xde4>
    ac52:	cmp	r3, #0
    ac54:	beq.w	ad76 <_vfiprintf_r+0x92e>
    ac58:	movs	r5, #1
    ac5a:	strb.w	r3, [sp, #64]	; 0x40
    ac5e:	mov.w	r3, #0
    ac62:	strb.w	r3, [sp, #47]	; 0x2f
    ac66:	str	r5, [sp, #12]
    ac68:	add	r7, sp, #64	; 0x40
    ac6a:	b.n	abae <_vfiprintf_r+0x766>
    ac6c:	str	r3, [sp, #16]
    ac6e:	mov.w	r9, #0
    ac72:	b.n	a9a2 <_vfiprintf_r+0x55a>
    ac74:	add	r2, sp, #52	; 0x34
    ac76:	ldr	r1, [sp, #0]
    ac78:	str	r3, [sp, #36]	; 0x24
    ac7a:	mov	r0, r9
    ac7c:	bl	a3d0 <__sprint_r.part.0>
    ac80:	cmp	r0, #0
    ac82:	bne.n	ad84 <_vfiprintf_r+0x93c>
    ac84:	ldr	r0, [sp, #56]	; 0x38
    ac86:	ldr	r2, [sp, #60]	; 0x3c
    ac88:	ldr	r3, [sp, #36]	; 0x24
    ac8a:	add.w	lr, r0, #1
    ac8e:	mov	ip, fp
    ac90:	b.n	a6e6 <_vfiprintf_r+0x29e>
    ac92:	ldr	r0, [sp, #56]	; 0x38
    ac94:	ldr	r2, [sp, #60]	; 0x3c
    ac96:	add.w	lr, r0, #1
    ac9a:	ldrb.w	r3, [sp, #47]	; 0x2f
    ac9e:	cmp	r3, #0
    aca0:	beq.w	a744 <_vfiprintf_r+0x2fc>
    aca4:	adds	r2, #1
    aca6:	add.w	r1, sp, #47	; 0x2f
    acaa:	movs	r3, #1
    acac:	cmp.w	lr, #7
    acb0:	str	r2, [sp, #60]	; 0x3c
    acb2:	str.w	lr, [sp, #56]	; 0x38
    acb6:	stmia.w	sl, {r1, r3}
    acba:	ble.w	ae3c <_vfiprintf_r+0x9f4>
    acbe:	cmp	r2, #0
    acc0:	bne.w	af60 <_vfiprintf_r+0xb18>
    acc4:	ldr	r1, [sp, #28]
    acc6:	cmp	r1, #0
    acc8:	bne.w	ae48 <_vfiprintf_r+0xa00>
    accc:	mov	lr, r3
    acce:	mov	r0, r2
    acd0:	mov	sl, fp
    acd2:	ldr	r3, [sp, #32]
    acd4:	cmp	r3, #128	; 0x80
    acd6:	beq.w	a77a <_vfiprintf_r+0x332>
    acda:	ldr	r3, [sp, #4]
    acdc:	ldr	r1, [sp, #12]
    acde:	subs	r4, r3, r1
    ace0:	cmp	r4, #0
    ace2:	ble.w	a80c <_vfiprintf_r+0x3c4>
    ace6:	cmp	r4, #16
    ace8:	ldr.w	r9, [pc, #300]	; ae18 <_vfiprintf_r+0x9d0>
    acec:	ble.n	ad3a <_vfiprintf_r+0x8f2>
    acee:	mov	ip, sl
    acf0:	movs	r3, #16
    acf2:	mov	sl, r8
    acf4:	mov	r8, r5
    acf6:	mov	r5, r9
    acf8:	ldr.w	r9, [sp, #20]
    acfc:	b.n	ad0e <_vfiprintf_r+0x8c6>
    acfe:	add.w	lr, r0, #2
    ad02:	add.w	ip, ip, #8
    ad06:	mov	r0, r1
    ad08:	subs	r4, #16
    ad0a:	cmp	r4, #16
    ad0c:	ble.n	ad32 <_vfiprintf_r+0x8ea>
    ad0e:	adds	r1, r0, #1
    ad10:	adds	r2, #16
    ad12:	cmp	r1, #7
    ad14:	str	r2, [sp, #60]	; 0x3c
    ad16:	str.w	r5, [ip]
    ad1a:	str.w	r3, [ip, #4]
    ad1e:	str	r1, [sp, #56]	; 0x38
    ad20:	ble.n	acfe <_vfiprintf_r+0x8b6>
    ad22:	cbnz	r2, ad5a <_vfiprintf_r+0x912>
    ad24:	subs	r4, #16
    ad26:	cmp	r4, #16
    ad28:	mov.w	lr, #1
    ad2c:	mov	r0, r2
    ad2e:	mov	ip, fp
    ad30:	bgt.n	ad0e <_vfiprintf_r+0x8c6>
    ad32:	mov	r9, r5
    ad34:	mov	r5, r8
    ad36:	mov	r8, sl
    ad38:	mov	sl, ip
    ad3a:	add	r2, r4
    ad3c:	cmp.w	lr, #7
    ad40:	str	r2, [sp, #60]	; 0x3c
    ad42:	str.w	r9, [sl]
    ad46:	str.w	r4, [sl, #4]
    ad4a:	str.w	lr, [sp, #56]	; 0x38
    ad4e:	bgt.n	adae <_vfiprintf_r+0x966>
    ad50:	add.w	sl, sl, #8
    ad54:	add.w	lr, lr, #1
    ad58:	b.n	a80c <_vfiprintf_r+0x3c4>
    ad5a:	add	r2, sp, #52	; 0x34
    ad5c:	ldr	r1, [sp, #0]
    ad5e:	str	r3, [sp, #4]
    ad60:	mov	r0, r9
    ad62:	bl	a3d0 <__sprint_r.part.0>
    ad66:	cbnz	r0, ad84 <_vfiprintf_r+0x93c>
    ad68:	ldr	r0, [sp, #56]	; 0x38
    ad6a:	ldr	r2, [sp, #60]	; 0x3c
    ad6c:	ldr	r3, [sp, #4]
    ad6e:	add.w	lr, r0, #1
    ad72:	mov	ip, fp
    ad74:	b.n	ad08 <_vfiprintf_r+0x8c0>
    ad76:	ldr	r3, [sp, #60]	; 0x3c
    ad78:	cbz	r3, ad84 <_vfiprintf_r+0x93c>
    ad7a:	ldr	r0, [sp, #20]
    ad7c:	ldr	r1, [sp, #0]
    ad7e:	add	r2, sp, #52	; 0x34
    ad80:	bl	a3d0 <__sprint_r.part.0>
    ad84:	ldr	r3, [sp, #0]
    ad86:	ldrh	r3, [r3, #12]
    ad88:	lsls	r2, r3, #25
    ad8a:	bmi.w	b0a4 <_vfiprintf_r+0xc5c>
    ad8e:	ldr	r0, [sp, #8]
    ad90:	add	sp, #172	; 0xac
    ad92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad96:	add	r2, sp, #52	; 0x34
    ad98:	ldr	r1, [sp, #0]
    ad9a:	mov	r0, r9
    ad9c:	bl	a3d0 <__sprint_r.part.0>
    ada0:	cmp	r0, #0
    ada2:	bne.n	ad84 <_vfiprintf_r+0x93c>
    ada4:	ldr	r1, [sp, #56]	; 0x38
    ada6:	ldr	r2, [sp, #60]	; 0x3c
    ada8:	adds	r0, r1, #1
    adaa:	mov	sl, fp
    adac:	b.n	a85a <_vfiprintf_r+0x412>
    adae:	cmp	r2, #0
    adb0:	bne.w	afaa <_vfiprintf_r+0xb62>
    adb4:	ldr	r2, [sp, #12]
    adb6:	str	r2, [sp, #108]	; 0x6c
    adb8:	movs	r3, #1
    adba:	str	r2, [sp, #60]	; 0x3c
    adbc:	str	r7, [sp, #104]	; 0x68
    adbe:	str	r3, [sp, #56]	; 0x38
    adc0:	mov	sl, fp
    adc2:	add.w	sl, sl, #8
    adc6:	lsls	r1, r6, #29
    adc8:	bpl.n	add4 <_vfiprintf_r+0x98c>
    adca:	ldr	r3, [sp, #24]
    adcc:	subs	r4, r3, r5
    adce:	cmp	r4, #0
    add0:	bgt.w	a83c <_vfiprintf_r+0x3f4>
    add4:	ldr	r3, [sp, #8]
    add6:	ldr	r1, [sp, #24]
    add8:	cmp	r1, r5
    adda:	ite	ge
    addc:	addge	r3, r3, r1
    adde:	addlt	r3, r3, r5
    ade0:	str	r3, [sp, #8]
    ade2:	cmp	r2, #0
    ade4:	bne.w	af4e <_vfiprintf_r+0xb06>
    ade8:	movs	r3, #0
    adea:	str	r3, [sp, #56]	; 0x38
    adec:	mov	sl, fp
    adee:	b.w	a4aa <_vfiprintf_r+0x62>
    adf2:	add	r2, sp, #52	; 0x34
    adf4:	ldr	r1, [sp, #0]
    adf6:	str	r3, [sp, #28]
    adf8:	mov	r0, r9
    adfa:	bl	a3d0 <__sprint_r.part.0>
    adfe:	cmp	r0, #0
    ae00:	bne.n	ad84 <_vfiprintf_r+0x93c>
    ae02:	ldr	r0, [sp, #56]	; 0x38
    ae04:	ldr	r2, [sp, #60]	; 0x3c
    ae06:	ldr	r3, [sp, #28]
    ae08:	add.w	ip, r0, #1
    ae0c:	mov	lr, fp
    ae0e:	b.n	a7a8 <_vfiprintf_r+0x360>
    ae10:	.word	0x20000f28
    ae14:	.word	0x20000f3c
    ae18:	.word	0x20000f68
    ae1c:	cmp	r2, #0
    ae1e:	bne.w	b088 <_vfiprintf_r+0xc40>
    ae22:	ldrb.w	r3, [sp, #47]	; 0x2f
    ae26:	cmp	r3, #0
    ae28:	beq.w	b016 <_vfiprintf_r+0xbce>
    ae2c:	movs	r3, #1
    ae2e:	add.w	r1, sp, #47	; 0x2f
    ae32:	mov	r2, r3
    ae34:	str	r3, [sp, #108]	; 0x6c
    ae36:	mov	lr, r3
    ae38:	str	r1, [sp, #104]	; 0x68
    ae3a:	mov	sl, fp
    ae3c:	mov	r0, lr
    ae3e:	add.w	sl, sl, #8
    ae42:	add.w	lr, lr, #1
    ae46:	b.n	a744 <_vfiprintf_r+0x2fc>
    ae48:	add	r1, sp, #48	; 0x30
    ae4a:	movs	r2, #2
    ae4c:	mov	lr, r3
    ae4e:	str	r1, [sp, #104]	; 0x68
    ae50:	str	r2, [sp, #108]	; 0x6c
    ae52:	mov	sl, fp
    ae54:	mov	r0, lr
    ae56:	add.w	sl, sl, #8
    ae5a:	add.w	lr, lr, #1
    ae5e:	b.n	acd2 <_vfiprintf_r+0x88a>
    ae60:	ldr	r3, [sp, #4]
    ae62:	strb.w	r9, [sp, #47]	; 0x2f
    ae66:	cmp	r3, #0
    ae68:	blt.w	b0c0 <_vfiprintf_r+0xc78>
    ae6c:	orrs.w	r3, r4, r5
    ae70:	bic.w	r6, r6, #128	; 0x80
    ae74:	beq.w	a676 <_vfiprintf_r+0x22e>
    ae78:	mov	r7, fp
    ae7a:	lsrs	r3, r4, #4
    ae7c:	and.w	r1, r4, #15
    ae80:	orr.w	r3, r3, r5, lsl #28
    ae84:	lsrs	r2, r5, #4
    ae86:	mov	r4, r3
    ae88:	mov	r5, r2
    ae8a:	ldrb	r3, [r0, r1]
    ae8c:	strb.w	r3, [r7, #-1]!
    ae90:	orrs.w	r3, r4, r5
    ae94:	bne.n	ae7a <_vfiprintf_r+0xa32>
    ae96:	rsb	r3, r7, fp
    ae9a:	str	r3, [sp, #12]
    ae9c:	b.w	a688 <_vfiprintf_r+0x240>
    aea0:	add	r2, sp, #52	; 0x34
    aea2:	ldr	r1, [sp, #0]
    aea4:	ldr	r0, [sp, #20]
    aea6:	bl	a3d0 <__sprint_r.part.0>
    aeaa:	cmp	r0, #0
    aeac:	bne.w	ad84 <_vfiprintf_r+0x93c>
    aeb0:	ldr	r2, [sp, #60]	; 0x3c
    aeb2:	mov	sl, fp
    aeb4:	b.n	adc6 <_vfiprintf_r+0x97e>
    aeb6:	mov.w	r9, #0
    aeba:	movs	r4, #0
    aebc:	movs	r5, #0
    aebe:	b.n	ae78 <_vfiprintf_r+0xa30>
    aec0:	ands.w	r2, r6, #16
    aec4:	beq.w	b02c <_vfiprintf_r+0xbe4>
    aec8:	ldr	r1, [sp, #16]
    aeca:	strb.w	r3, [sp, #47]	; 0x2f
    aece:	mov	r2, r1
    aed0:	ldr	r4, [r1, #0]
    aed2:	ldr	r1, [sp, #4]
    aed4:	cmp	r1, #0
    aed6:	add.w	r2, r2, #4
    aeda:	mov.w	r5, #0
    aede:	blt.w	b194 <_vfiprintf_r+0xd4c>
    aee2:	orrs.w	r1, r4, r5
    aee6:	bic.w	r6, r6, #128	; 0x80
    aeea:	str	r2, [sp, #16]
    aeec:	beq.w	a992 <_vfiprintf_r+0x54a>
    aef0:	mov	r9, r3
    aef2:	b.n	a9a2 <_vfiprintf_r+0x55a>
    aef4:	lsls	r7, r6, #27
    aef6:	bmi.n	af0e <_vfiprintf_r+0xac6>
    aef8:	lsls	r5, r6, #25
    aefa:	bpl.n	af0e <_vfiprintf_r+0xac6>
    aefc:	ldr	r1, [sp, #16]
    aefe:	ldrsh.w	r4, [r1]
    af02:	adds	r1, #4
    af04:	asrs	r5, r4, #31
    af06:	mov	r2, r4
    af08:	mov	r3, r5
    af0a:	str	r1, [sp, #16]
    af0c:	b.n	a8e4 <_vfiprintf_r+0x49c>
    af0e:	ldr	r2, [sp, #16]
    af10:	ldr	r4, [r2, #0]
    af12:	mov	r3, r2
    af14:	adds	r3, #4
    af16:	asrs	r5, r4, #31
    af18:	str	r3, [sp, #16]
    af1a:	mov	r2, r4
    af1c:	mov	r3, r5
    af1e:	b.n	a8e4 <_vfiprintf_r+0x49c>
    af20:	ldr	r4, [r2, #0]
    af22:	adds	r2, #4
    af24:	str	r2, [sp, #16]
    af26:	movs	r5, #0
    af28:	b.n	ab6a <_vfiprintf_r+0x722>
    af2a:	mov.w	r9, #0
    af2e:	orrs.w	r3, r4, r5
    af32:	bne.w	a906 <_vfiprintf_r+0x4be>
    af36:	b.n	aaea <_vfiprintf_r+0x6a2>
    af38:	add	r2, sp, #52	; 0x34
    af3a:	ldr	r1, [sp, #0]
    af3c:	ldr	r0, [sp, #20]
    af3e:	bl	a3d0 <__sprint_r.part.0>
    af42:	cmp	r0, #0
    af44:	bne.w	ad84 <_vfiprintf_r+0x93c>
    af48:	mov	sl, fp
    af4a:	b.w	a5de <_vfiprintf_r+0x196>
    af4e:	add	r2, sp, #52	; 0x34
    af50:	ldr	r1, [sp, #0]
    af52:	ldr	r0, [sp, #20]
    af54:	bl	a3d0 <__sprint_r.part.0>
    af58:	cmp	r0, #0
    af5a:	beq.w	ade8 <_vfiprintf_r+0x9a0>
    af5e:	b.n	ad84 <_vfiprintf_r+0x93c>
    af60:	add	r2, sp, #52	; 0x34
    af62:	ldr	r1, [sp, #0]
    af64:	ldr	r0, [sp, #20]
    af66:	bl	a3d0 <__sprint_r.part.0>
    af6a:	cmp	r0, #0
    af6c:	bne.w	ad84 <_vfiprintf_r+0x93c>
    af70:	ldr	r0, [sp, #56]	; 0x38
    af72:	ldr	r2, [sp, #60]	; 0x3c
    af74:	add.w	lr, r0, #1
    af78:	mov	sl, fp
    af7a:	b.w	a744 <_vfiprintf_r+0x2fc>
    af7e:	add	r2, sp, #52	; 0x34
    af80:	ldr	r1, [sp, #0]
    af82:	ldr	r0, [sp, #20]
    af84:	bl	a3d0 <__sprint_r.part.0>
    af88:	cmp	r0, #0
    af8a:	bne.w	ad84 <_vfiprintf_r+0x93c>
    af8e:	ldr	r0, [sp, #56]	; 0x38
    af90:	ldr	r2, [sp, #60]	; 0x3c
    af92:	add.w	lr, r0, #1
    af96:	mov	sl, fp
    af98:	b.n	acd2 <_vfiprintf_r+0x88a>
    af9a:	cmp	r2, #0
    af9c:	bne.w	b150 <_vfiprintf_r+0xd08>
    afa0:	mov.w	lr, #1
    afa4:	mov	r0, r2
    afa6:	mov	sl, fp
    afa8:	b.n	acda <_vfiprintf_r+0x892>
    afaa:	add	r2, sp, #52	; 0x34
    afac:	ldr	r1, [sp, #0]
    afae:	ldr	r0, [sp, #20]
    afb0:	bl	a3d0 <__sprint_r.part.0>
    afb4:	cmp	r0, #0
    afb6:	bne.w	ad84 <_vfiprintf_r+0x93c>
    afba:	ldr	r3, [sp, #56]	; 0x38
    afbc:	ldr	r2, [sp, #60]	; 0x3c
    afbe:	add.w	lr, r3, #1
    afc2:	mov	sl, fp
    afc4:	b.n	a80c <_vfiprintf_r+0x3c4>
    afc6:	movs	r2, #48	; 0x30
    afc8:	strb.w	r2, [sp, #48]	; 0x30
    afcc:	ldr	r2, [sp, #4]
    afce:	strb.w	r3, [sp, #49]	; 0x31
    afd2:	cmp	r2, #0
    afd4:	mov.w	r3, #0
    afd8:	strb.w	r3, [sp, #47]	; 0x2f
    afdc:	orr.w	r3, r6, #2
    afe0:	blt.w	b17a <_vfiprintf_r+0xd32>
    afe4:	bic.w	r6, r6, #128	; 0x80
    afe8:	orr.w	r6, r6, #2
    afec:	mov.w	r9, #0
    aff0:	b.n	ae78 <_vfiprintf_r+0xa30>
    aff2:	mov.w	r9, #0
    aff6:	ldr	r0, [pc, #576]	; (b238 <_vfiprintf_r+0xdf0>)
    aff8:	b.n	ae78 <_vfiprintf_r+0xa30>
    affa:	ldr	r3, [sp, #4]
    affc:	negs	r4, r4
    affe:	mov.w	r9, #45	; 0x2d
    b002:	sbc.w	r5, r5, r5, lsl #1
    b006:	cmp	r3, #0
    b008:	strb.w	r9, [sp, #47]	; 0x2f
    b00c:	blt.w	a906 <_vfiprintf_r+0x4be>
    b010:	bic.w	r6, r6, #128	; 0x80
    b014:	b.n	a906 <_vfiprintf_r+0x4be>
    b016:	ldr	r3, [sp, #28]
    b018:	cmp	r3, #0
    b01a:	beq.n	b102 <_vfiprintf_r+0xcba>
    b01c:	add	r3, sp, #48	; 0x30
    b01e:	movs	r2, #2
    b020:	str	r3, [sp, #104]	; 0x68
    b022:	str	r2, [sp, #108]	; 0x6c
    b024:	mov.w	lr, #1
    b028:	mov	sl, fp
    b02a:	b.n	ae54 <_vfiprintf_r+0xa0c>
    b02c:	ands.w	r9, r6, #64	; 0x40
    b030:	beq.n	b0c4 <_vfiprintf_r+0xc7c>
    b032:	ldr	r1, [sp, #16]
    b034:	strb.w	r2, [sp, #47]	; 0x2f
    b038:	mov	r3, r1
    b03a:	ldrh	r4, [r1, #0]
    b03c:	ldr	r1, [sp, #4]
    b03e:	cmp	r1, #0
    b040:	add.w	r3, r3, #4
    b044:	mov.w	r5, #0
    b048:	blt.w	ac6c <_vfiprintf_r+0x824>
    b04c:	orrs.w	r1, r4, r5
    b050:	bic.w	r6, r6, #128	; 0x80
    b054:	str	r3, [sp, #16]
    b056:	beq.w	a992 <_vfiprintf_r+0x54a>
    b05a:	mov	r9, r2
    b05c:	b.n	a9a2 <_vfiprintf_r+0x55a>
    b05e:	lsls	r0, r6, #27
    b060:	bmi.n	b078 <_vfiprintf_r+0xc30>
    b062:	lsls	r1, r6, #25
    b064:	bpl.n	b078 <_vfiprintf_r+0xc30>
    b066:	ldr	r2, [sp, #16]
    b068:	ldr	r3, [r2, #0]
    b06a:	adds	r2, #4
    b06c:	str	r2, [sp, #16]
    b06e:	ldrh.w	r2, [sp, #8]
    b072:	strh	r2, [r3, #0]
    b074:	b.w	a4aa <_vfiprintf_r+0x62>
    b078:	ldr	r2, [sp, #16]
    b07a:	ldr	r3, [r2, #0]
    b07c:	adds	r2, #4
    b07e:	str	r2, [sp, #16]
    b080:	ldr	r2, [sp, #8]
    b082:	str	r2, [r3, #0]
    b084:	b.w	a4aa <_vfiprintf_r+0x62>
    b088:	add	r2, sp, #52	; 0x34
    b08a:	ldr	r1, [sp, #0]
    b08c:	ldr	r0, [sp, #20]
    b08e:	bl	a3d0 <__sprint_r.part.0>
    b092:	cmp	r0, #0
    b094:	bne.w	ad84 <_vfiprintf_r+0x93c>
    b098:	ldr	r0, [sp, #56]	; 0x38
    b09a:	ldr	r2, [sp, #60]	; 0x3c
    b09c:	add.w	lr, r0, #1
    b0a0:	mov	sl, fp
    b0a2:	b.n	ac9a <_vfiprintf_r+0x852>
    b0a4:	mov.w	r0, #4294967295
    b0a8:	b.w	a618 <_vfiprintf_r+0x1d0>
    b0ac:	ldr	r0, [pc, #392]	; (b238 <_vfiprintf_r+0xdf0>)
    b0ae:	mov	r6, r2
    b0b0:	orrs.w	r2, r4, r5
    b0b4:	str	r3, [sp, #16]
    b0b6:	mov.w	r9, #0
    b0ba:	bne.w	ae78 <_vfiprintf_r+0xa30>
    b0be:	b.n	aeba <_vfiprintf_r+0xa72>
    b0c0:	ldr	r3, [sp, #16]
    b0c2:	b.n	b0b0 <_vfiprintf_r+0xc68>
    b0c4:	ldr	r2, [sp, #16]
    b0c6:	strb.w	r9, [sp, #47]	; 0x2f
    b0ca:	mov	r3, r2
    b0cc:	ldr	r4, [r2, #0]
    b0ce:	ldr	r2, [sp, #4]
    b0d0:	cmp	r2, #0
    b0d2:	add.w	r3, r3, #4
    b0d6:	mov.w	r5, #0
    b0da:	blt.w	ac6c <_vfiprintf_r+0x824>
    b0de:	orrs.w	r2, r4, r5
    b0e2:	bic.w	r6, r6, #128	; 0x80
    b0e6:	str	r3, [sp, #16]
    b0e8:	bne.w	a9a2 <_vfiprintf_r+0x55a>
    b0ec:	b.n	a992 <_vfiprintf_r+0x54a>
    b0ee:	add	r2, sp, #52	; 0x34
    b0f0:	ldr	r1, [sp, #0]
    b0f2:	ldr	r0, [sp, #20]
    b0f4:	bl	a3d0 <__sprint_r.part.0>
    b0f8:	cmp	r0, #0
    b0fa:	bne.w	ad84 <_vfiprintf_r+0x93c>
    b0fe:	ldr	r2, [sp, #60]	; 0x3c
    b100:	b.n	add4 <_vfiprintf_r+0x98c>
    b102:	mov	r0, r2
    b104:	mov.w	lr, #1
    b108:	mov	sl, fp
    b10a:	b.n	acda <_vfiprintf_r+0x892>
    b10c:	ldr	r1, [sp, #16]
    b10e:	strb.w	r3, [sp, #47]	; 0x2f
    b112:	mov	r2, r1
    b114:	ldrh	r4, [r1, #0]
    b116:	ldr	r1, [sp, #4]
    b118:	cmp	r1, #0
    b11a:	add.w	r2, r2, #4
    b11e:	mov.w	r5, #0
    b122:	blt.n	b1c2 <_vfiprintf_r+0xd7a>
    b124:	orrs.w	r1, r4, r5
    b128:	bic.w	r6, r6, #128	; 0x80
    b12c:	str	r2, [sp, #16]
    b12e:	mov	r9, r3
    b130:	bne.w	a906 <_vfiprintf_r+0x4be>
    b134:	b.n	aae0 <_vfiprintf_r+0x698>
    b136:	str	r3, [sp, #16]
    b138:	b.n	af2e <_vfiprintf_r+0xae6>
    b13a:	mov	r0, r7
    b13c:	str	r4, [sp, #16]
    b13e:	bl	8d80 <strlen>
    b142:	movs	r3, #0
    b144:	str	r0, [sp, #12]
    b146:	ldrb.w	r9, [sp, #47]	; 0x2f
    b14a:	str	r3, [sp, #4]
    b14c:	b.w	a688 <_vfiprintf_r+0x240>
    b150:	add	r2, sp, #52	; 0x34
    b152:	ldr	r1, [sp, #0]
    b154:	ldr	r0, [sp, #20]
    b156:	bl	a3d0 <__sprint_r.part.0>
    b15a:	cmp	r0, #0
    b15c:	bne.w	ad84 <_vfiprintf_r+0x93c>
    b160:	ldr	r0, [sp, #56]	; 0x38
    b162:	ldr	r2, [sp, #60]	; 0x3c
    b164:	add.w	lr, r0, #1
    b168:	mov	sl, fp
    b16a:	b.n	acda <_vfiprintf_r+0x892>
    b16c:	ldr	r0, [sp, #56]	; 0x38
    b16e:	ldr	r2, [sp, #60]	; 0x3c
    b170:	ldr.w	r9, [pc, #204]	; b240 <_vfiprintf_r+0xdf8>
    b174:	adds	r0, #1
    b176:	b.w	a71e <_vfiprintf_r+0x2d6>
    b17a:	mov	r6, r3
    b17c:	mov.w	r9, #0
    b180:	b.n	ae78 <_vfiprintf_r+0xa30>
    b182:	cmp	r3, #6
    b184:	it	cs
    b186:	movcs	r3, #6
    b188:	str	r3, [sp, #12]
    b18a:	str	r4, [sp, #16]
    b18c:	bic.w	r5, r3, r3, asr #31
    b190:	ldr	r7, [pc, #168]	; (b23c <_vfiprintf_r+0xdf4>)
    b192:	b.n	abae <_vfiprintf_r+0x766>
    b194:	str	r2, [sp, #16]
    b196:	b.n	ac6e <_vfiprintf_r+0x826>
    b198:	ldr	r0, [sp, #56]	; 0x38
    b19a:	ldr.w	r9, [pc, #164]	; b240 <_vfiprintf_r+0xdf8>
    b19e:	adds	r0, #1
    b1a0:	b.w	a88a <_vfiprintf_r+0x442>
    b1a4:	mov	ip, lr
    b1a6:	b.w	a7de <_vfiprintf_r+0x396>
    b1aa:	ldr	r3, [sp, #4]
    b1ac:	ldrb.w	r9, [sp, #47]	; 0x2f
    b1b0:	str	r3, [sp, #12]
    b1b2:	str	r4, [sp, #16]
    b1b4:	str	r0, [sp, #4]
    b1b6:	b.w	a688 <_vfiprintf_r+0x240>
    b1ba:	movs	r2, #0
    b1bc:	str	r2, [sp, #4]
    b1be:	b.w	a51a <_vfiprintf_r+0xd2>
    b1c2:	str	r2, [sp, #16]
    b1c4:	mov	r9, r3
    b1c6:	b.n	af2e <_vfiprintf_r+0xae6>
    b1c8:	ldr	r2, [sp, #16]
    b1ca:	ldr	r3, [r2, #0]
    b1cc:	str	r3, [sp, #4]
    b1ce:	adds	r2, #4
    b1d0:	cmp	r3, #0
    b1d2:	str	r2, [sp, #16]
    b1d4:	ldrb.w	r3, [r8, #1]
    b1d8:	mov	r8, r5
    b1da:	bge.w	a516 <_vfiprintf_r+0xce>
    b1de:	mov.w	r2, #4294967295
    b1e2:	str	r2, [sp, #4]
    b1e4:	b.w	a516 <_vfiprintf_r+0xce>
    b1e8:	strb.w	r0, [sp, #47]	; 0x2f
    b1ec:	b.n	ab0c <_vfiprintf_r+0x6c4>
    b1ee:	strb.w	r0, [sp, #47]	; 0x2f
    b1f2:	b.n	abd6 <_vfiprintf_r+0x78e>
    b1f4:	strb.w	r0, [sp, #47]	; 0x2f
    b1f8:	b.n	ab52 <_vfiprintf_r+0x70a>
    b1fa:	mov	r9, r3
    b1fc:	lsls	r3, r6, #31
    b1fe:	bpl.n	b20c <_vfiprintf_r+0xdc4>
    b200:	add	r7, sp, #168	; 0xa8
    b202:	movs	r3, #48	; 0x30
    b204:	strb.w	r3, [r7, #-65]!
    b208:	b.w	a93a <_vfiprintf_r+0x4f2>
    b20c:	ldr	r3, [sp, #4]
    b20e:	str	r3, [sp, #12]
    b210:	mov	r7, fp
    b212:	b.w	a688 <_vfiprintf_r+0x240>
    b216:	strb.w	r0, [sp, #47]	; 0x2f
    b21a:	b.n	aaa4 <_vfiprintf_r+0x65c>
    b21c:	strb.w	r0, [sp, #47]	; 0x2f
    b220:	b.w	a958 <_vfiprintf_r+0x510>
    b224:	strb.w	r0, [sp, #47]	; 0x2f
    b228:	b.w	a8c6 <_vfiprintf_r+0x47e>
    b22c:	strb.w	r0, [sp, #47]	; 0x2f
    b230:	b.n	ac52 <_vfiprintf_r+0x80a>
    b232:	strb.w	r0, [sp, #47]	; 0x2f
    b236:	b.n	ac20 <_vfiprintf_r+0x7d8>
    b238:	.word	0x20000f3c
    b23c:	.word	0x20000f50
    b240:	.word	0x20000f78

0000b244 <__sbprintf>:
    b244:	push	{r4, r5, r6, r7, lr}
    b246:	mov	r4, r1
    b248:	subw	sp, sp, #1132	; 0x46c
    b24c:	ldrh	r1, [r1, #12]
    b24e:	ldr	r6, [r4, #100]	; 0x64
    b250:	ldrh	r5, [r4, #14]
    b252:	str	r6, [sp, #100]	; 0x64
    b254:	bic.w	r1, r1, #2
    b258:	ldr	r6, [r4, #36]	; 0x24
    b25a:	strh.w	r5, [sp, #14]
    b25e:	movs	r5, #0
    b260:	ldr	r7, [r4, #28]
    b262:	strh.w	r1, [sp, #12]
    b266:	str	r6, [sp, #36]	; 0x24
    b268:	str	r5, [sp, #24]
    b26a:	add	r6, sp, #104	; 0x68
    b26c:	mov.w	r5, #1024	; 0x400
    b270:	mov	r1, sp
    b272:	str	r6, [sp, #0]
    b274:	str	r6, [sp, #16]
    b276:	str	r5, [sp, #8]
    b278:	str	r5, [sp, #20]
    b27a:	str	r7, [sp, #28]
    b27c:	mov	r6, r0
    b27e:	bl	a448 <_vfiprintf_r>
    b282:	subs	r5, r0, #0
    b284:	blt.n	b296 <__sbprintf+0x52>
    b286:	mov	r0, r6
    b288:	mov	r1, sp
    b28a:	bl	c2b4 <_fflush_r>
    b28e:	cmp	r0, #0
    b290:	it	ne
    b292:	movne.w	r5, #4294967295
    b296:	ldrh.w	r3, [sp, #12]
    b29a:	lsls	r3, r3, #25
    b29c:	bpl.n	b2a6 <__sbprintf+0x62>
    b29e:	ldrh	r3, [r4, #12]
    b2a0:	orr.w	r3, r3, #64	; 0x40
    b2a4:	strh	r3, [r4, #12]
    b2a6:	mov	r0, r5
    b2a8:	addw	sp, sp, #1132	; 0x46c
    b2ac:	pop	{r4, r5, r6, r7, pc}
    b2ae:	nop

0000b2b0 <__ascii_wctomb>:
    b2b0:	cbz	r1, b2bc <__ascii_wctomb+0xc>
    b2b2:	cmp	r2, #255	; 0xff
    b2b4:	bhi.n	b2c0 <__ascii_wctomb+0x10>
    b2b6:	strb	r2, [r1, #0]
    b2b8:	movs	r0, #1
    b2ba:	bx	lr
    b2bc:	mov	r0, r1
    b2be:	bx	lr
    b2c0:	movs	r3, #138	; 0x8a
    b2c2:	str	r3, [r0, #0]
    b2c4:	mov.w	r0, #4294967295
    b2c8:	bx	lr
    b2ca:	nop

0000b2cc <_write_r>:
    b2cc:	push	{r4, r5, r6, lr}
    b2ce:	mov	r5, r1
    b2d0:	ldr	r4, [pc, #32]	; (b2f4 <_write_r+0x28>)
    b2d2:	mov	r1, r2
    b2d4:	mov	r6, r0
    b2d6:	mov	r2, r3
    b2d8:	mov	r0, r5
    b2da:	movs	r3, #0
    b2dc:	str	r3, [r4, #0]
    b2de:	bl	48b0 <_write>
    b2e2:	adds	r3, r0, #1
    b2e4:	beq.n	b2e8 <_write_r+0x1c>
    b2e6:	pop	{r4, r5, r6, pc}
    b2e8:	ldr	r3, [r4, #0]
    b2ea:	cmp	r3, #0
    b2ec:	beq.n	b2e6 <_write_r+0x1a>
    b2ee:	str	r3, [r6, #0]
    b2f0:	pop	{r4, r5, r6, pc}
    b2f2:	nop
    b2f4:	.word	0x20004284

0000b2f8 <__swsetup_r>:
    b2f8:	push	{r3, r4, r5, lr}
    b2fa:	ldr	r3, [pc, #192]	; (b3bc <__swsetup_r+0xc4>)
    b2fc:	ldr	r3, [r3, #0]
    b2fe:	mov	r5, r0
    b300:	mov	r4, r1
    b302:	cbz	r3, b30a <__swsetup_r+0x12>
    b304:	ldr	r2, [r3, #56]	; 0x38
    b306:	cmp	r2, #0
    b308:	beq.n	b37c <__swsetup_r+0x84>
    b30a:	ldrsh.w	r2, [r4, #12]
    b30e:	uxth	r3, r2
    b310:	lsls	r0, r3, #28
    b312:	bpl.n	b32e <__swsetup_r+0x36>
    b314:	ldr	r0, [r4, #16]
    b316:	cbz	r0, b344 <__swsetup_r+0x4c>
    b318:	ands.w	r2, r3, #1
    b31c:	beq.n	b35c <__swsetup_r+0x64>
    b31e:	ldr	r3, [r4, #20]
    b320:	movs	r2, #0
    b322:	negs	r3, r3
    b324:	str	r3, [r4, #24]
    b326:	str	r2, [r4, #8]
    b328:	cbz	r0, b368 <__swsetup_r+0x70>
    b32a:	movs	r0, #0
    b32c:	pop	{r3, r4, r5, pc}
    b32e:	lsls	r1, r3, #27
    b330:	bpl.n	b3ac <__swsetup_r+0xb4>
    b332:	lsls	r0, r3, #29
    b334:	bmi.n	b384 <__swsetup_r+0x8c>
    b336:	ldr	r0, [r4, #16]
    b338:	orr.w	r3, r2, #8
    b33c:	strh	r3, [r4, #12]
    b33e:	uxth	r3, r3
    b340:	cmp	r0, #0
    b342:	bne.n	b318 <__swsetup_r+0x20>
    b344:	and.w	r2, r3, #640	; 0x280
    b348:	cmp.w	r2, #512	; 0x200
    b34c:	beq.n	b318 <__swsetup_r+0x20>
    b34e:	mov	r0, r5
    b350:	mov	r1, r4
    b352:	bl	caf0 <__smakebuf_r>
    b356:	ldrh	r3, [r4, #12]
    b358:	ldr	r0, [r4, #16]
    b35a:	b.n	b318 <__swsetup_r+0x20>
    b35c:	lsls	r1, r3, #30
    b35e:	it	pl
    b360:	ldrpl	r2, [r4, #20]
    b362:	str	r2, [r4, #8]
    b364:	cmp	r0, #0
    b366:	bne.n	b32a <__swsetup_r+0x32>
    b368:	ldrsh.w	r3, [r4, #12]
    b36c:	lsls	r2, r3, #24
    b36e:	bpl.n	b32c <__swsetup_r+0x34>
    b370:	orr.w	r3, r3, #64	; 0x40
    b374:	strh	r3, [r4, #12]
    b376:	mov.w	r0, #4294967295
    b37a:	pop	{r3, r4, r5, pc}
    b37c:	mov	r0, r3
    b37e:	bl	c3dc <__sinit>
    b382:	b.n	b30a <__swsetup_r+0x12>
    b384:	ldr	r1, [r4, #48]	; 0x30
    b386:	cbz	r1, b39e <__swsetup_r+0xa6>
    b388:	add.w	r3, r4, #64	; 0x40
    b38c:	cmp	r1, r3
    b38e:	beq.n	b39a <__swsetup_r+0xa2>
    b390:	mov	r0, r5
    b392:	bl	c54c <_free_r>
    b396:	ldrsh.w	r2, [r4, #12]
    b39a:	movs	r3, #0
    b39c:	str	r3, [r4, #48]	; 0x30
    b39e:	movs	r3, #0
    b3a0:	ldr	r0, [r4, #16]
    b3a2:	str	r3, [r4, #4]
    b3a4:	bic.w	r2, r2, #36	; 0x24
    b3a8:	str	r0, [r4, #0]
    b3aa:	b.n	b338 <__swsetup_r+0x40>
    b3ac:	orr.w	r2, r2, #64	; 0x40
    b3b0:	movs	r3, #9
    b3b2:	str	r3, [r5, #0]
    b3b4:	mov.w	r0, #4294967295
    b3b8:	strh	r2, [r4, #12]
    b3ba:	pop	{r3, r4, r5, pc}
    b3bc:	.word	0x20001610

0000b3c0 <quorem>:
    b3c0:	ldr	r2, [r0, #16]
    b3c2:	ldr	r3, [r1, #16]
    b3c4:	cmp	r3, r2
    b3c6:	bgt.w	b4e4 <quorem+0x124>
    b3ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3ce:	add.w	r8, r3, #4294967295
    b3d2:	add.w	r7, r1, #20
    b3d6:	add.w	fp, r0, #20
    b3da:	ldr.w	r2, [r7, r8, lsl #2]
    b3de:	ldr.w	r3, [fp, r8, lsl #2]
    b3e2:	mov.w	r4, r8, lsl #2
    b3e6:	sub	sp, #12
    b3e8:	adds	r2, #1
    b3ea:	udiv	r9, r3, r2
    b3ee:	add.w	r3, fp, r4
    b3f2:	str	r4, [sp, #0]
    b3f4:	add.w	sl, r7, r4
    b3f8:	str	r3, [sp, #4]
    b3fa:	cmp.w	r9, #0
    b3fe:	beq.n	b474 <quorem+0xb4>
    b400:	movs	r5, #0
    b402:	mov	ip, r7
    b404:	mov	lr, fp
    b406:	mov	r3, r5
    b408:	ldr.w	r6, [ip], #4
    b40c:	ldr.w	r2, [lr]
    b410:	uxth	r4, r6
    b412:	mla	r5, r9, r4, r5
    b416:	lsrs	r6, r6, #16
    b418:	lsrs	r4, r5, #16
    b41a:	mla	r4, r9, r6, r4
    b41e:	uxth	r5, r5
    b420:	subs	r3, r3, r5
    b422:	uxth	r6, r4
    b424:	uxtah	r3, r3, r2
    b428:	rsb	r6, r6, r2, lsr #16
    b42c:	add.w	r6, r6, r3, asr #16
    b430:	uxth	r3, r3
    b432:	orr.w	r3, r3, r6, lsl #16
    b436:	cmp	sl, ip
    b438:	str.w	r3, [lr], #4
    b43c:	mov.w	r5, r4, lsr #16
    b440:	mov.w	r3, r6, asr #16
    b444:	bcs.n	b408 <quorem+0x48>
    b446:	ldr	r3, [sp, #0]
    b448:	ldr.w	r3, [fp, r3]
    b44c:	cbnz	r3, b474 <quorem+0xb4>
    b44e:	ldr	r4, [sp, #4]
    b450:	subs	r3, r4, #4
    b452:	cmp	fp, r3
    b454:	bcs.n	b470 <quorem+0xb0>
    b456:	ldr.w	r3, [r4, #-4]
    b45a:	cbnz	r3, b470 <quorem+0xb0>
    b45c:	sub.w	r3, r4, #8
    b460:	b.n	b468 <quorem+0xa8>
    b462:	ldr	r2, [r3, #0]
    b464:	subs	r3, #4
    b466:	cbnz	r2, b470 <quorem+0xb0>
    b468:	cmp	fp, r3
    b46a:	add.w	r8, r8, #4294967295
    b46e:	bcc.n	b462 <quorem+0xa2>
    b470:	str.w	r8, [r0, #16]
    b474:	mov	r4, r0
    b476:	bl	d030 <__mcmp>
    b47a:	cmp	r0, #0
    b47c:	blt.n	b4dc <quorem+0x11c>
    b47e:	add.w	r9, r9, #1
    b482:	mov	r5, fp
    b484:	movs	r3, #0
    b486:	ldr.w	r1, [r7], #4
    b48a:	ldr	r0, [r5, #0]
    b48c:	uxth	r2, r1
    b48e:	subs	r2, r3, r2
    b490:	lsrs	r1, r1, #16
    b492:	uxtah	r2, r2, r0
    b496:	rsb	r3, r1, r0, lsr #16
    b49a:	add.w	r3, r3, r2, asr #16
    b49e:	uxth	r1, r2
    b4a0:	orr.w	r1, r1, r3, lsl #16
    b4a4:	cmp	sl, r7
    b4a6:	str.w	r1, [r5], #4
    b4aa:	mov.w	r3, r3, asr #16
    b4ae:	bcs.n	b486 <quorem+0xc6>
    b4b0:	ldr.w	r2, [fp, r8, lsl #2]
    b4b4:	add.w	r3, fp, r8, lsl #2
    b4b8:	cbnz	r2, b4dc <quorem+0x11c>
    b4ba:	subs	r2, r3, #4
    b4bc:	cmp	fp, r2
    b4be:	bcs.n	b4d8 <quorem+0x118>
    b4c0:	ldr.w	r2, [r3, #-4]
    b4c4:	cbnz	r2, b4d8 <quorem+0x118>
    b4c6:	subs	r3, #8
    b4c8:	b.n	b4d0 <quorem+0x110>
    b4ca:	ldr	r2, [r3, #0]
    b4cc:	subs	r3, #4
    b4ce:	cbnz	r2, b4d8 <quorem+0x118>
    b4d0:	cmp	fp, r3
    b4d2:	add.w	r8, r8, #4294967295
    b4d6:	bcc.n	b4ca <quorem+0x10a>
    b4d8:	str.w	r8, [r4, #16]
    b4dc:	mov	r0, r9
    b4de:	add	sp, #12
    b4e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4e4:	movs	r0, #0
    b4e6:	bx	lr

0000b4e8 <_dtoa_r>:
    b4e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4ec:	vmov	r6, r7, d0
    b4f0:	sub	sp, #76	; 0x4c
    b4f2:	ldr	r5, [r0, #64]	; 0x40
    b4f4:	str	r1, [sp, #4]
    b4f6:	mov	r4, r0
    b4f8:	mov	r8, r2
    b4fa:	str	r3, [sp, #16]
    b4fc:	vmov	sl, s0
    b500:	mov	fp, r7
    b502:	cbz	r5, b518 <_dtoa_r+0x30>
    b504:	ldr	r2, [r0, #68]	; 0x44
    b506:	str	r2, [r5, #4]
    b508:	movs	r3, #1
    b50a:	lsls	r3, r2
    b50c:	str	r3, [r5, #8]
    b50e:	mov	r1, r5
    b510:	bl	cc6c <_Bfree>
    b514:	movs	r3, #0
    b516:	str	r3, [r4, #64]	; 0x40
    b518:	cmp.w	fp, #0
    b51c:	mov	r6, fp
    b51e:	blt.n	b58a <_dtoa_r+0xa2>
    b520:	ldr	r2, [sp, #112]	; 0x70
    b522:	movs	r3, #0
    b524:	str	r3, [r2, #0]
    b526:	ldr	r3, [pc, #784]	; (b838 <_dtoa_r+0x350>)
    b528:	mov	r2, r3
    b52a:	ands	r3, r6
    b52c:	cmp	r3, r2
    b52e:	beq.n	b55c <_dtoa_r+0x74>
    b530:	vmov	d7, sl, fp
    b534:	vcmp.f64	d7, #0.0
    b538:	vmrs	APSR_nzcv, fpscr
    b53c:	strd	sl, fp, [sp, #8]
    b540:	bne.n	b598 <_dtoa_r+0xb0>
    b542:	ldr	r2, [sp, #16]
    b544:	movs	r3, #1
    b546:	str	r3, [r2, #0]
    b548:	ldr	r3, [sp, #116]	; 0x74
    b54a:	cmp	r3, #0
    b54c:	beq.w	b6be <_dtoa_r+0x1d6>
    b550:	ldr	r0, [pc, #744]	; (b83c <_dtoa_r+0x354>)
    b552:	str	r0, [r3, #0]
    b554:	subs	r0, #1
    b556:	add	sp, #76	; 0x4c
    b558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b55c:	ldr	r2, [sp, #16]
    b55e:	movw	r3, #9999	; 0x270f
    b562:	str	r3, [r2, #0]
    b564:	cmp.w	sl, #0
    b568:	beq.w	b690 <_dtoa_r+0x1a8>
    b56c:	ldr	r0, [pc, #720]	; (b840 <_dtoa_r+0x358>)
    b56e:	ldr	r3, [sp, #116]	; 0x74
    b570:	cmp	r3, #0
    b572:	beq.n	b556 <_dtoa_r+0x6e>
    b574:	ldrb	r3, [r0, #3]
    b576:	cmp	r3, #0
    b578:	beq.w	b6c2 <_dtoa_r+0x1da>
    b57c:	add.w	r3, r0, #8
    b580:	ldr	r2, [sp, #116]	; 0x74
    b582:	str	r3, [r2, #0]
    b584:	add	sp, #76	; 0x4c
    b586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b58a:	ldr	r2, [sp, #112]	; 0x70
    b58c:	movs	r3, #1
    b58e:	bic.w	r6, fp, #2147483648	; 0x80000000
    b592:	str	r3, [r2, #0]
    b594:	mov	fp, r6
    b596:	b.n	b526 <_dtoa_r+0x3e>
    b598:	add	r1, sp, #68	; 0x44
    b59a:	add	r2, sp, #64	; 0x40
    b59c:	vldr	d0, [sp, #8]
    b5a0:	mov	r0, r4
    b5a2:	bl	d188 <__d2b>
    b5a6:	lsrs	r1, r6, #20
    b5a8:	str	r0, [sp, #28]
    b5aa:	bne.n	b6a2 <_dtoa_r+0x1ba>
    b5ac:	ldr	r0, [sp, #64]	; 0x40
    b5ae:	ldr	r1, [sp, #68]	; 0x44
    b5b0:	add	r1, r0
    b5b2:	addw	r3, r1, #1074	; 0x432
    b5b6:	cmp	r3, #32
    b5b8:	ble.w	ba3e <_dtoa_r+0x556>
    b5bc:	rsb	r3, r3, #64	; 0x40
    b5c0:	addw	r2, r1, #1042	; 0x412
    b5c4:	lsls	r6, r3
    b5c6:	lsr.w	r3, sl, r2
    b5ca:	orrs	r3, r6
    b5cc:	vmov	s15, r3
    b5d0:	vcvt.f64.u32	d7, s15
    b5d4:	movs	r5, #1
    b5d6:	vmov	r2, r3, d7
    b5da:	subs	r1, #1
    b5dc:	sub.w	r3, r3, #32505856	; 0x1f00000
    b5e0:	str	r5, [sp, #40]	; 0x28
    b5e2:	vmov	d7, r2, r3
    b5e6:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b5ea:	vldr	d4, [pc, #564]	; b820 <_dtoa_r+0x338>
    b5ee:	vsub.f64	d6, d7, d6
    b5f2:	vldr	d7, [pc, #564]	; b828 <_dtoa_r+0x340>
    b5f6:	vldr	d5, [pc, #568]	; b830 <_dtoa_r+0x348>
    b5fa:	vfma.f64	d7, d6, d4
    b5fe:	vmov	s13, r1
    b602:	vcvt.f64.s32	d6, s13
    b606:	vfma.f64	d7, d6, d5
    b60a:	vcvt.s32.f64	s13, d7
    b60e:	vcmpe.f64	d7, #0.0
    b612:	vmrs	APSR_nzcv, fpscr
    b616:	vstr	s13, [sp, #8]
    b61a:	bmi.w	b856 <_dtoa_r+0x36e>
    b61e:	ldr	r5, [sp, #8]
    b620:	cmp	r5, #22
    b622:	bhi.w	b850 <_dtoa_r+0x368>
    b626:	ldr	r3, [pc, #540]	; (b844 <_dtoa_r+0x35c>)
    b628:	add.w	r3, r3, r5, lsl #3
    b62c:	vldr	d7, [r3]
    b630:	vmov	d6, sl, fp
    b634:	vcmpe.f64	d7, d6
    b638:	vmrs	APSR_nzcv, fpscr
    b63c:	ble.w	ba4c <_dtoa_r+0x564>
    b640:	subs	r3, r5, #1
    b642:	str	r3, [sp, #8]
    b644:	movs	r3, #0
    b646:	str	r3, [sp, #48]	; 0x30
    b648:	subs	r1, r0, r1
    b64a:	subs.w	r9, r1, #1
    b64e:	bmi.w	b880 <_dtoa_r+0x398>
    b652:	movs	r3, #0
    b654:	str	r3, [sp, #24]
    b656:	ldr	r3, [sp, #8]
    b658:	cmp	r3, #0
    b65a:	blt.w	b86e <_dtoa_r+0x386>
    b65e:	add	r9, r3
    b660:	str	r3, [sp, #44]	; 0x2c
    b662:	movs	r3, #0
    b664:	str	r3, [sp, #20]
    b666:	ldr	r3, [sp, #4]
    b668:	cmp	r3, #9
    b66a:	bhi.n	b6c6 <_dtoa_r+0x1de>
    b66c:	cmp	r3, #5
    b66e:	ble.w	c130 <_dtoa_r+0xc48>
    b672:	subs	r3, #4
    b674:	str	r3, [sp, #4]
    b676:	movs	r3, #0
    b678:	str	r3, [sp, #56]	; 0x38
    b67a:	ldr	r3, [sp, #4]
    b67c:	subs	r3, #2
    b67e:	cmp	r3, #3
    b680:	bhi.w	c142 <_dtoa_r+0xc5a>
    b684:	tbh	[pc, r3, lsl #1]
    b688:	.word	0x01e502a9
    b68c:	.word	0x03c802b5
    b690:	ldr	r3, [pc, #428]	; (b840 <_dtoa_r+0x358>)
    b692:	ldr	r2, [pc, #436]	; (b848 <_dtoa_r+0x360>)
    b694:	ubfx	r0, r6, #0, #20
    b698:	cmp	r0, #0
    b69a:	ite	ne
    b69c:	movne	r0, r3
    b69e:	moveq	r0, r2
    b6a0:	b.n	b56e <_dtoa_r+0x86>
    b6a2:	ldrd	r2, r3, [sp, #8]
    b6a6:	ubfx	r0, r3, #0, #20
    b6aa:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    b6ae:	movs	r5, #0
    b6b0:	subw	r1, r1, #1023	; 0x3ff
    b6b4:	orr.w	r3, r3, #3145728	; 0x300000
    b6b8:	ldr	r0, [sp, #64]	; 0x40
    b6ba:	str	r5, [sp, #40]	; 0x28
    b6bc:	b.n	b5e2 <_dtoa_r+0xfa>
    b6be:	ldr	r0, [pc, #396]	; (b84c <_dtoa_r+0x364>)
    b6c0:	b.n	b556 <_dtoa_r+0x6e>
    b6c2:	adds	r3, r0, #3
    b6c4:	b.n	b580 <_dtoa_r+0x98>
    b6c6:	movs	r1, #0
    b6c8:	str	r1, [r4, #68]	; 0x44
    b6ca:	mov	r0, r4
    b6cc:	mov	r8, r1
    b6ce:	str	r1, [sp, #4]
    b6d0:	bl	cc20 <_Balloc>
    b6d4:	mov.w	r7, #4294967295
    b6d8:	movs	r3, #1
    b6da:	str	r0, [sp, #32]
    b6dc:	str	r0, [r4, #64]	; 0x40
    b6de:	str	r7, [sp, #52]	; 0x34
    b6e0:	str	r3, [sp, #36]	; 0x24
    b6e2:	ldr	r3, [sp, #68]	; 0x44
    b6e4:	cmp	r3, #0
    b6e6:	blt.n	b7de <_dtoa_r+0x2f6>
    b6e8:	ldr	r2, [sp, #8]
    b6ea:	cmp	r2, #14
    b6ec:	bgt.n	b7de <_dtoa_r+0x2f6>
    b6ee:	ldr	r3, [pc, #340]	; (b844 <_dtoa_r+0x35c>)
    b6f0:	cmp.w	r8, #0
    b6f4:	add.w	r3, r3, r2, lsl #3
    b6f8:	vldr	d4, [r3]
    b6fc:	blt.w	bc08 <_dtoa_r+0x720>
    b700:	vneg.f64	d2, d4
    b704:	vmov	d7, sl, fp
    b708:	vdiv.f64	d6, d7, d4
    b70c:	vcvt.s32.f64	s12, d6
    b710:	ldr	r2, [sp, #32]
    b712:	vmov	r3, s12
    b716:	cmp	r7, #1
    b718:	add.w	r3, r3, #48	; 0x30
    b71c:	vcvt.f64.s32	d5, s12
    b720:	add.w	fp, r2, #1
    b724:	strb	r3, [r2, #0]
    b726:	vfma.f64	d7, d2, d5
    b72a:	beq.n	b772 <_dtoa_r+0x28a>
    b72c:	vmov.f64	d3, #36	; 0x41200000  10.0
    b730:	vmul.f64	d7, d7, d3
    b734:	vcmp.f64	d7, #0.0
    b738:	vmrs	APSR_nzcv, fpscr
    b73c:	beq.n	b7b4 <_dtoa_r+0x2cc>
    b73e:	ldr	r2, [sp, #32]
    b740:	b.n	b750 <_dtoa_r+0x268>
    b742:	vmul.f64	d7, d7, d3
    b746:	vcmp.f64	d7, #0.0
    b74a:	vmrs	APSR_nzcv, fpscr
    b74e:	beq.n	b7b4 <_dtoa_r+0x2cc>
    b750:	vdiv.f64	d6, d7, d4
    b754:	vcvt.s32.f64	s12, d6
    b758:	vmov	r3, s12
    b75c:	adds	r3, #48	; 0x30
    b75e:	strb.w	r3, [fp], #1
    b762:	rsb	r3, r2, fp
    b766:	cmp	r3, r7
    b768:	vcvt.f64.s32	d5, s12
    b76c:	vfma.f64	d7, d2, d5
    b770:	bne.n	b742 <_dtoa_r+0x25a>
    b772:	vadd.f64	d7, d7, d7
    b776:	vcmpe.f64	d4, d7
    b77a:	vmrs	APSR_nzcv, fpscr
    b77e:	bmi.n	b792 <_dtoa_r+0x2aa>
    b780:	vcmp.f64	d4, d7
    b784:	vmrs	APSR_nzcv, fpscr
    b788:	bne.n	b7b4 <_dtoa_r+0x2cc>
    b78a:	vmov	r3, s12
    b78e:	lsls	r3, r3, #31
    b790:	bpl.n	b7b4 <_dtoa_r+0x2cc>
    b792:	ldrb.w	r0, [fp, #-1]
    b796:	ldr	r2, [sp, #32]
    b798:	add.w	r3, fp, #4294967295
    b79c:	b.n	b7a8 <_dtoa_r+0x2c0>
    b79e:	cmp	r2, r3
    b7a0:	beq.w	bf6e <_dtoa_r+0xa86>
    b7a4:	ldrb.w	r0, [r3, #-1]!
    b7a8:	cmp	r0, #57	; 0x39
    b7aa:	add.w	fp, r3, #1
    b7ae:	beq.n	b79e <_dtoa_r+0x2b6>
    b7b0:	adds	r0, #1
    b7b2:	strb	r0, [r3, #0]
    b7b4:	ldr	r1, [sp, #28]
    b7b6:	mov	r0, r4
    b7b8:	bl	cc6c <_Bfree>
    b7bc:	movs	r2, #0
    b7be:	ldr	r3, [sp, #8]
    b7c0:	strb.w	r2, [fp]
    b7c4:	ldr	r2, [sp, #16]
    b7c6:	adds	r3, #1
    b7c8:	str	r3, [r2, #0]
    b7ca:	ldr	r3, [sp, #116]	; 0x74
    b7cc:	cmp	r3, #0
    b7ce:	beq.w	be9e <_dtoa_r+0x9b6>
    b7d2:	ldr	r0, [sp, #32]
    b7d4:	str.w	fp, [r3]
    b7d8:	add	sp, #76	; 0x4c
    b7da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7de:	ldr	r2, [sp, #36]	; 0x24
    b7e0:	cmp	r2, #0
    b7e2:	beq.n	b88c <_dtoa_r+0x3a4>
    b7e4:	ldr	r2, [sp, #4]
    b7e6:	cmp	r2, #1
    b7e8:	ble.w	bc48 <_dtoa_r+0x760>
    b7ec:	ldr	r1, [sp, #20]
    b7ee:	subs	r2, r7, #1
    b7f0:	cmp	r1, r2
    b7f2:	blt.w	bea4 <_dtoa_r+0x9bc>
    b7f6:	subs	r3, r1, r2
    b7f8:	str	r3, [sp, #56]	; 0x38
    b7fa:	cmp	r7, #0
    b7fc:	ldr	r3, [sp, #24]
    b7fe:	blt.w	c04a <_dtoa_r+0xb62>
    b802:	str	r3, [sp, #40]	; 0x28
    b804:	mov	r3, r7
    b806:	ldr	r2, [sp, #24]
    b808:	movs	r1, #1
    b80a:	add	r2, r3
    b80c:	mov	r0, r4
    b80e:	str	r2, [sp, #24]
    b810:	add	r9, r3
    b812:	bl	cd9c <__i2b>
    b816:	mov	r6, r0
    b818:	b.n	b896 <_dtoa_r+0x3ae>
    b81a:	nop
    b81c:	nop.w
    b820:	.word	0x636f4361
    b824:	.word	0x3fd287a7
    b828:	.word	0x8b60c8b3
    b82c:	.word	0x3fc68a28
    b830:	.word	0x509f79fb
    b834:	.word	0x3fd34413
    b838:	.word	0x7ff00000
    b83c:	.word	0x20000405
    b840:	.word	0x20001098
    b844:	.word	0x200010a0
    b848:	.word	0x2000108c
    b84c:	.word	0x20000404
    b850:	movs	r3, #1
    b852:	str	r3, [sp, #48]	; 0x30
    b854:	b.n	b648 <_dtoa_r+0x160>
    b856:	vcvt.f64.s32	d6, s13
    b85a:	vcmp.f64	d7, d6
    b85e:	vmrs	APSR_nzcv, fpscr
    b862:	beq.w	b61e <_dtoa_r+0x136>
    b866:	ldr	r3, [sp, #8]
    b868:	subs	r3, #1
    b86a:	str	r3, [sp, #8]
    b86c:	b.n	b61e <_dtoa_r+0x136>
    b86e:	ldr	r2, [sp, #24]
    b870:	ldr	r3, [sp, #8]
    b872:	subs	r2, r2, r3
    b874:	negs	r3, r3
    b876:	str	r3, [sp, #20]
    b878:	movs	r3, #0
    b87a:	str	r2, [sp, #24]
    b87c:	str	r3, [sp, #44]	; 0x2c
    b87e:	b.n	b666 <_dtoa_r+0x17e>
    b880:	rsb	r3, r9, #0
    b884:	str	r3, [sp, #24]
    b886:	mov.w	r9, #0
    b88a:	b.n	b656 <_dtoa_r+0x16e>
    b88c:	ldr	r3, [sp, #20]
    b88e:	str	r3, [sp, #56]	; 0x38
    b890:	ldr	r6, [sp, #36]	; 0x24
    b892:	ldr	r3, [sp, #24]
    b894:	str	r3, [sp, #40]	; 0x28
    b896:	ldr	r1, [sp, #40]	; 0x28
    b898:	mov	r3, r1
    b89a:	cbz	r1, b8b6 <_dtoa_r+0x3ce>
    b89c:	cmp.w	r9, #0
    b8a0:	ble.n	b8b6 <_dtoa_r+0x3ce>
    b8a2:	cmp	r1, r9
    b8a4:	ldr	r2, [sp, #24]
    b8a6:	it	ge
    b8a8:	movge	r3, r9
    b8aa:	subs	r2, r2, r3
    b8ac:	str	r2, [sp, #24]
    b8ae:	subs	r2, r1, r3
    b8b0:	str	r2, [sp, #40]	; 0x28
    b8b2:	rsb	r9, r3, r9
    b8b6:	ldr	r3, [sp, #20]
    b8b8:	cmp	r3, #0
    b8ba:	ble.w	bdbe <_dtoa_r+0x8d6>
    b8be:	ldr	r2, [sp, #36]	; 0x24
    b8c0:	cmp	r2, #0
    b8c2:	beq.w	bbfa <_dtoa_r+0x712>
    b8c6:	ldr	r2, [sp, #56]	; 0x38
    b8c8:	cmp	r2, #0
    b8ca:	beq.w	bbfa <_dtoa_r+0x712>
    b8ce:	mov	r1, r6
    b8d0:	mov	r0, r4
    b8d2:	bl	cee0 <__pow5mult>
    b8d6:	ldr	r2, [sp, #28]
    b8d8:	mov	r1, r0
    b8da:	mov	r6, r0
    b8dc:	mov	r0, r4
    b8de:	bl	cdb0 <__multiply>
    b8e2:	ldr	r1, [sp, #28]
    b8e4:	mov	r5, r0
    b8e6:	mov	r0, r4
    b8e8:	bl	cc6c <_Bfree>
    b8ec:	ldr	r3, [sp, #20]
    b8ee:	ldr	r2, [sp, #56]	; 0x38
    b8f0:	subs	r3, r3, r2
    b8f2:	str	r3, [sp, #20]
    b8f4:	bne.w	bbf8 <_dtoa_r+0x710>
    b8f8:	movs	r1, #1
    b8fa:	mov	r0, r4
    b8fc:	bl	cd9c <__i2b>
    b900:	ldr	r3, [sp, #44]	; 0x2c
    b902:	str	r0, [sp, #20]
    b904:	cmp	r3, #0
    b906:	beq.w	bc62 <_dtoa_r+0x77a>
    b90a:	mov	r1, r0
    b90c:	mov	r2, r3
    b90e:	mov	r0, r4
    b910:	bl	cee0 <__pow5mult>
    b914:	ldr	r3, [sp, #4]
    b916:	str	r0, [sp, #20]
    b918:	cmp	r3, #1
    b91a:	ble.w	be1e <_dtoa_r+0x936>
    b91e:	movs	r3, #0
    b920:	str	r3, [sp, #28]
    b922:	ldr	r2, [sp, #20]
    b924:	ldr	r3, [r2, #16]
    b926:	add.w	r3, r2, r3, lsl #2
    b92a:	ldr	r0, [r3, #16]
    b92c:	bl	cd00 <__hi0bits>
    b930:	rsb	r0, r0, #32
    b934:	add	r0, r9
    b936:	ands.w	r0, r0, #31
    b93a:	beq.w	bc5e <_dtoa_r+0x776>
    b93e:	rsb	r3, r0, #32
    b942:	cmp	r3, #4
    b944:	ble.w	c138 <_dtoa_r+0xc50>
    b948:	rsb	r0, r0, #28
    b94c:	ldr	r3, [sp, #24]
    b94e:	add	r3, r0
    b950:	str	r3, [sp, #24]
    b952:	ldr	r3, [sp, #40]	; 0x28
    b954:	add	r3, r0
    b956:	str	r3, [sp, #40]	; 0x28
    b958:	add	r9, r0
    b95a:	ldr	r3, [sp, #24]
    b95c:	cmp	r3, #0
    b95e:	ble.n	b96c <_dtoa_r+0x484>
    b960:	mov	r1, r5
    b962:	mov	r2, r3
    b964:	mov	r0, r4
    b966:	bl	cf80 <__lshift>
    b96a:	mov	r5, r0
    b96c:	cmp.w	r9, #0
    b970:	ble.n	b97e <_dtoa_r+0x496>
    b972:	mov	r2, r9
    b974:	ldr	r1, [sp, #20]
    b976:	mov	r0, r4
    b978:	bl	cf80 <__lshift>
    b97c:	str	r0, [sp, #20]
    b97e:	ldr	r3, [sp, #48]	; 0x30
    b980:	cmp	r3, #0
    b982:	bne.w	bd88 <_dtoa_r+0x8a0>
    b986:	cmp	r7, #0
    b988:	ble.w	bdcc <_dtoa_r+0x8e4>
    b98c:	ldr	r3, [sp, #36]	; 0x24
    b98e:	cmp	r3, #0
    b990:	bne.w	bc8a <_dtoa_r+0x7a2>
    b994:	ldr.w	fp, [sp, #32]
    b998:	ldr.w	sl, [sp, #20]
    b99c:	mov	r8, fp
    b99e:	b.n	b9a6 <_dtoa_r+0x4be>
    b9a0:	bl	cc80 <__multadd>
    b9a4:	mov	r5, r0
    b9a6:	mov	r1, sl
    b9a8:	mov	r0, r5
    b9aa:	bl	b3c0 <quorem>
    b9ae:	add.w	r9, r0, #48	; 0x30
    b9b2:	strb.w	r9, [r8], #1
    b9b6:	rsb	r3, fp, r8
    b9ba:	cmp	r3, r7
    b9bc:	mov.w	r2, #10
    b9c0:	mov.w	r3, #0
    b9c4:	mov	r1, r5
    b9c6:	mov	r0, r4
    b9c8:	blt.n	b9a0 <_dtoa_r+0x4b8>
    b9ca:	ldr	r3, [sp, #32]
    b9cc:	cmp	r7, #1
    b9ce:	ite	ge
    b9d0:	addge	r3, r3, r7
    b9d2:	addlt	r3, #1
    b9d4:	mov	fp, r3
    b9d6:	mov.w	sl, #0
    b9da:	mov	r1, r5
    b9dc:	movs	r2, #1
    b9de:	mov	r0, r4
    b9e0:	bl	cf80 <__lshift>
    b9e4:	ldr	r1, [sp, #20]
    b9e6:	str	r0, [sp, #28]
    b9e8:	bl	d030 <__mcmp>
    b9ec:	cmp	r0, #0
    b9ee:	ble.w	bf0a <_dtoa_r+0xa22>
    b9f2:	ldrb.w	r2, [fp, #-1]
    b9f6:	ldr	r1, [sp, #32]
    b9f8:	add.w	r3, fp, #4294967295
    b9fc:	b.n	ba08 <_dtoa_r+0x520>
    b9fe:	cmp	r3, r1
    ba00:	beq.w	be0a <_dtoa_r+0x922>
    ba04:	ldrb.w	r2, [r3, #-1]!
    ba08:	cmp	r2, #57	; 0x39
    ba0a:	add.w	fp, r3, #1
    ba0e:	beq.n	b9fe <_dtoa_r+0x516>
    ba10:	adds	r2, #1
    ba12:	strb	r2, [r3, #0]
    ba14:	ldr	r1, [sp, #20]
    ba16:	mov	r0, r4
    ba18:	bl	cc6c <_Bfree>
    ba1c:	cmp	r6, #0
    ba1e:	beq.w	b7b4 <_dtoa_r+0x2cc>
    ba22:	cmp.w	sl, #0
    ba26:	beq.n	ba34 <_dtoa_r+0x54c>
    ba28:	cmp	sl, r6
    ba2a:	beq.n	ba34 <_dtoa_r+0x54c>
    ba2c:	mov	r1, sl
    ba2e:	mov	r0, r4
    ba30:	bl	cc6c <_Bfree>
    ba34:	mov	r1, r6
    ba36:	mov	r0, r4
    ba38:	bl	cc6c <_Bfree>
    ba3c:	b.n	b7b4 <_dtoa_r+0x2cc>
    ba3e:	rsb	r3, r3, #32
    ba42:	lsl.w	r3, sl, r3
    ba46:	vmov	s15, r3
    ba4a:	b.n	b5d0 <_dtoa_r+0xe8>
    ba4c:	movs	r3, #0
    ba4e:	str	r3, [sp, #48]	; 0x30
    ba50:	b.n	b648 <_dtoa_r+0x160>
    ba52:	movs	r3, #0
    ba54:	str	r3, [sp, #36]	; 0x24
    ba56:	ldr	r3, [sp, #8]
    ba58:	add	r3, r8
    ba5a:	adds	r7, r3, #1
    ba5c:	cmp	r7, #0
    ba5e:	str	r3, [sp, #52]	; 0x34
    ba60:	ble.w	bebe <_dtoa_r+0x9d6>
    ba64:	mov	r6, r7
    ba66:	mov	r5, r7
    ba68:	movs	r1, #0
    ba6a:	cmp	r6, #23
    ba6c:	str	r1, [r4, #68]	; 0x44
    ba6e:	bls.n	ba86 <_dtoa_r+0x59e>
    ba70:	movs	r2, #1
    ba72:	movs	r3, #4
    ba74:	lsls	r3, r3, #1
    ba76:	add.w	r0, r3, #20
    ba7a:	cmp	r0, r6
    ba7c:	mov	r1, r2
    ba7e:	add.w	r2, r2, #1
    ba82:	bls.n	ba74 <_dtoa_r+0x58c>
    ba84:	str	r1, [r4, #68]	; 0x44
    ba86:	mov	r0, r4
    ba88:	bl	cc20 <_Balloc>
    ba8c:	cmp	r5, #14
    ba8e:	str	r0, [sp, #32]
    ba90:	str	r0, [r4, #64]	; 0x40
    ba92:	bhi.w	b6e2 <_dtoa_r+0x1fa>
    ba96:	ldr	r3, [sp, #56]	; 0x38
    ba98:	cmp	r3, #0
    ba9a:	beq.w	b6e2 <_dtoa_r+0x1fa>
    ba9e:	ldr	r1, [sp, #8]
    baa0:	cmp	r1, #0
    baa2:	strd	sl, fp, [sp, #56]	; 0x38
    baa6:	ble.w	bf2c <_dtoa_r+0xa44>
    baaa:	ldr	r3, [pc, #792]	; (bdc4 <_dtoa_r+0x8dc>)
    baac:	and.w	r2, r1, #15
    bab0:	add.w	r2, r3, r2, lsl #3
    bab4:	asrs	r3, r1, #4
    bab6:	lsls	r6, r3, #27
    bab8:	vldr	d6, [r2]
    babc:	bpl.w	beb6 <_dtoa_r+0x9ce>
    bac0:	ldr	r2, [pc, #772]	; (bdc8 <_dtoa_r+0x8e0>)
    bac2:	vldr	d7, [r2, #32]
    bac6:	vmov	d4, sl, fp
    baca:	and.w	r3, r3, #15
    bace:	movs	r1, #3
    bad0:	vdiv.f64	d5, d4, d7
    bad4:	cbz	r3, baee <_dtoa_r+0x606>
    bad6:	ldr	r2, [pc, #752]	; (bdc8 <_dtoa_r+0x8e0>)
    bad8:	lsls	r5, r3, #31
    bada:	bpl.n	bae6 <_dtoa_r+0x5fe>
    badc:	vldr	d7, [r2]
    bae0:	adds	r1, #1
    bae2:	vmul.f64	d6, d6, d7
    bae6:	asrs	r3, r3, #1
    bae8:	add.w	r2, r2, #8
    baec:	bne.n	bad8 <_dtoa_r+0x5f0>
    baee:	vdiv.f64	d4, d5, d6
    baf2:	ldr	r3, [sp, #48]	; 0x30
    baf4:	cbz	r3, bb06 <_dtoa_r+0x61e>
    baf6:	vmov.f64	d7, #112	; 0x3f800000  1.0
    bafa:	vcmpe.f64	d4, d7
    bafe:	vmrs	APSR_nzcv, fpscr
    bb02:	bmi.w	c074 <_dtoa_r+0xb8c>
    bb06:	vmov	s15, r1
    bb0a:	vcvt.f64.s32	d6, s15
    bb0e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    bb12:	vfma.f64	d7, d6, d4
    bb16:	vmov	r2, r3, d7
    bb1a:	sub.w	r3, r3, #54525952	; 0x3400000
    bb1e:	cmp	r7, #0
    bb20:	beq.w	be70 <_dtoa_r+0x988>
    bb24:	ldr	r6, [sp, #8]
    bb26:	mov	r1, r7
    bb28:	ldr	r0, [sp, #36]	; 0x24
    bb2a:	cmp	r0, #0
    bb2c:	beq.w	bfca <_dtoa_r+0xae2>
    bb30:	vmov.f64	d3, #96	; 0x3f000000  0.5
    bb34:	ldr	r0, [pc, #652]	; (bdc4 <_dtoa_r+0x8dc>)
    bb36:	ldr	r5, [sp, #32]
    bb38:	add.w	r0, r0, r1, lsl #3
    bb3c:	vldr	d6, [r0, #-8]
    bb40:	vcvt.s32.f64	s14, d4
    bb44:	vdiv.f64	d5, d3, d6
    bb48:	vmov	r0, s14
    bb4c:	vmov	d6, r2, r3
    bb50:	adds	r0, #48	; 0x30
    bb52:	uxtb	r0, r0
    bb54:	vsub.f64	d5, d5, d6
    bb58:	vcvt.f64.s32	d7, s14
    bb5c:	vsub.f64	d7, d4, d7
    bb60:	vcmpe.f64	d5, d7
    bb64:	vmrs	APSR_nzcv, fpscr
    bb68:	strb	r0, [r5, #0]
    bb6a:	add.w	fp, r5, #1
    bb6e:	bgt.n	bbd6 <_dtoa_r+0x6ee>
    bb70:	vmov.f64	d3, #112	; 0x3f800000  1.0
    bb74:	vsub.f64	d6, d3, d7
    bb78:	vcmpe.f64	d5, d6
    bb7c:	vmrs	APSR_nzcv, fpscr
    bb80:	bgt.w	c0e0 <_dtoa_r+0xbf8>
    bb84:	cmp	r1, #1
    bb86:	ble.w	bf24 <_dtoa_r+0xa3c>
    bb8a:	vmov.f64	d4, #36	; 0x41200000  10.0
    bb8e:	ldr	r3, [sp, #32]
    bb90:	add	r1, r3
    bb92:	b.n	bbaa <_dtoa_r+0x6c2>
    bb94:	vsub.f64	d6, d3, d7
    bb98:	vcmpe.f64	d6, d5
    bb9c:	vmrs	APSR_nzcv, fpscr
    bba0:	bmi.w	c0e0 <_dtoa_r+0xbf8>
    bba4:	cmp	fp, r1
    bba6:	beq.w	bf24 <_dtoa_r+0xa3c>
    bbaa:	vmul.f64	d7, d7, d4
    bbae:	vmul.f64	d5, d5, d4
    bbb2:	vcvt.s32.f64	s12, d7
    bbb6:	vmov	r3, s12
    bbba:	add.w	r0, r3, #48	; 0x30
    bbbe:	uxtb	r0, r0
    bbc0:	vcvt.f64.s32	d6, s12
    bbc4:	vsub.f64	d7, d7, d6
    bbc8:	vcmpe.f64	d7, d5
    bbcc:	vmrs	APSR_nzcv, fpscr
    bbd0:	strb.w	r0, [fp], #1
    bbd4:	bpl.n	bb94 <_dtoa_r+0x6ac>
    bbd6:	str	r6, [sp, #8]
    bbd8:	b.n	b7b4 <_dtoa_r+0x2cc>
    bbda:	movs	r3, #0
    bbdc:	str	r3, [sp, #36]	; 0x24
    bbde:	cmp.w	r8, #0
    bbe2:	ble.w	bec6 <_dtoa_r+0x9de>
    bbe6:	mov	r6, r8
    bbe8:	mov	r5, r8
    bbea:	str.w	r8, [sp, #52]	; 0x34
    bbee:	mov	r7, r8
    bbf0:	b.n	ba68 <_dtoa_r+0x580>
    bbf2:	movs	r3, #1
    bbf4:	str	r3, [sp, #36]	; 0x24
    bbf6:	b.n	bbde <_dtoa_r+0x6f6>
    bbf8:	str	r5, [sp, #28]
    bbfa:	ldr	r2, [sp, #20]
    bbfc:	ldr	r1, [sp, #28]
    bbfe:	mov	r0, r4
    bc00:	bl	cee0 <__pow5mult>
    bc04:	mov	r5, r0
    bc06:	b.n	b8f8 <_dtoa_r+0x410>
    bc08:	cmp	r7, #0
    bc0a:	bgt.w	b700 <_dtoa_r+0x218>
    bc0e:	bne.w	be96 <_dtoa_r+0x9ae>
    bc12:	vmov.f64	d7, #20	; 0x40a00000  5.0
    bc16:	vmul.f64	d4, d4, d7
    bc1a:	vmov	d7, sl, fp
    bc1e:	vcmpe.f64	d4, d7
    bc22:	vmrs	APSR_nzcv, fpscr
    bc26:	mov	r6, r7
    bc28:	str	r7, [sp, #20]
    bc2a:	blt.w	bdf8 <_dtoa_r+0x910>
    bc2e:	mvn.w	r3, r8
    bc32:	ldr.w	fp, [sp, #32]
    bc36:	str	r3, [sp, #8]
    bc38:	ldr	r1, [sp, #20]
    bc3a:	mov	r0, r4
    bc3c:	bl	cc6c <_Bfree>
    bc40:	cmp	r6, #0
    bc42:	beq.w	b7b4 <_dtoa_r+0x2cc>
    bc46:	b.n	ba34 <_dtoa_r+0x54c>
    bc48:	ldr	r2, [sp, #40]	; 0x28
    bc4a:	cmp	r2, #0
    bc4c:	beq.w	c054 <_dtoa_r+0xb6c>
    bc50:	ldr	r2, [sp, #20]
    bc52:	str	r2, [sp, #56]	; 0x38
    bc54:	ldr	r2, [sp, #24]
    bc56:	str	r2, [sp, #40]	; 0x28
    bc58:	addw	r3, r3, #1075	; 0x433
    bc5c:	b.n	b806 <_dtoa_r+0x31e>
    bc5e:	movs	r0, #28
    bc60:	b.n	b94c <_dtoa_r+0x464>
    bc62:	ldr	r3, [sp, #4]
    bc64:	cmp	r3, #1
    bc66:	ble.w	c0ea <_dtoa_r+0xc02>
    bc6a:	ldr	r3, [sp, #44]	; 0x2c
    bc6c:	str	r3, [sp, #28]
    bc6e:	movs	r0, #1
    bc70:	b.n	b934 <_dtoa_r+0x44c>
    bc72:	mov	r1, r6
    bc74:	movs	r3, #0
    bc76:	movs	r2, #10
    bc78:	mov	r0, r4
    bc7a:	bl	cc80 <__multadd>
    bc7e:	ldr	r3, [sp, #52]	; 0x34
    bc80:	cmp	r3, #0
    bc82:	mov	r6, r0
    bc84:	ble.w	c122 <_dtoa_r+0xc3a>
    bc88:	mov	r7, r3
    bc8a:	ldr	r3, [sp, #40]	; 0x28
    bc8c:	cmp	r3, #0
    bc8e:	ble.n	bc9c <_dtoa_r+0x7b4>
    bc90:	mov	r1, r6
    bc92:	mov	r2, r3
    bc94:	mov	r0, r4
    bc96:	bl	cf80 <__lshift>
    bc9a:	mov	r6, r0
    bc9c:	ldr	r3, [sp, #28]
    bc9e:	cmp	r3, #0
    bca0:	bne.w	bf80 <_dtoa_r+0xa98>
    bca4:	mov	r8, r6
    bca6:	ldr	r3, [sp, #32]
    bca8:	subs	r7, #1
    bcaa:	adds	r2, r3, r7
    bcac:	str	r2, [sp, #36]	; 0x24
    bcae:	and.w	r2, sl, #1
    bcb2:	str	r2, [sp, #40]	; 0x28
    bcb4:	mov	r7, r3
    bcb6:	ldr.w	fp, [sp, #20]
    bcba:	mov	r0, r5
    bcbc:	mov	r1, fp
    bcbe:	bl	b3c0 <quorem>
    bcc2:	mov	r1, r6
    bcc4:	mov	sl, r0
    bcc6:	mov	r0, r5
    bcc8:	bl	d030 <__mcmp>
    bccc:	mov	r2, r8
    bcce:	mov	r1, fp
    bcd0:	mov	r9, r0
    bcd2:	mov	r0, r4
    bcd4:	bl	d074 <__mdiff>
    bcd8:	ldr	r3, [r0, #12]
    bcda:	mov	fp, r0
    bcdc:	add.w	r2, sl, #48	; 0x30
    bce0:	cmp	r3, #0
    bce2:	bne.n	bd78 <_dtoa_r+0x890>
    bce4:	mov	r1, r0
    bce6:	mov	r0, r5
    bce8:	str	r2, [sp, #28]
    bcea:	bl	d030 <__mcmp>
    bcee:	mov	r1, fp
    bcf0:	str	r0, [sp, #24]
    bcf2:	mov	r0, r4
    bcf4:	bl	cc6c <_Bfree>
    bcf8:	ldr	r3, [sp, #24]
    bcfa:	ldr	r2, [sp, #28]
    bcfc:	cbnz	r3, bd0a <_dtoa_r+0x822>
    bcfe:	ldr	r1, [sp, #4]
    bd00:	cbnz	r1, bd0a <_dtoa_r+0x822>
    bd02:	ldr	r1, [sp, #40]	; 0x28
    bd04:	cmp	r1, #0
    bd06:	beq.w	c0f4 <_dtoa_r+0xc0c>
    bd0a:	cmp.w	r9, #0
    bd0e:	blt.w	bed0 <_dtoa_r+0x9e8>
    bd12:	bne.n	bd20 <_dtoa_r+0x838>
    bd14:	ldr	r1, [sp, #4]
    bd16:	cbnz	r1, bd20 <_dtoa_r+0x838>
    bd18:	ldr	r1, [sp, #40]	; 0x28
    bd1a:	cmp	r1, #0
    bd1c:	beq.w	bed0 <_dtoa_r+0x9e8>
    bd20:	cmp	r3, #0
    bd22:	bgt.w	bfa8 <_dtoa_r+0xac0>
    bd26:	ldr	r3, [sp, #36]	; 0x24
    bd28:	strb	r2, [r7, #0]
    bd2a:	add.w	r9, r7, #1
    bd2e:	cmp	r7, r3
    bd30:	mov	fp, r9
    bd32:	beq.w	bfc2 <_dtoa_r+0xada>
    bd36:	mov	r1, r5
    bd38:	movs	r3, #0
    bd3a:	movs	r2, #10
    bd3c:	mov	r0, r4
    bd3e:	bl	cc80 <__multadd>
    bd42:	cmp	r6, r8
    bd44:	mov	r5, r0
    bd46:	mov	r1, r6
    bd48:	mov.w	r3, #0
    bd4c:	mov.w	r2, #10
    bd50:	mov	r0, r4
    bd52:	beq.n	bd6c <_dtoa_r+0x884>
    bd54:	bl	cc80 <__multadd>
    bd58:	mov	r1, r8
    bd5a:	mov	r6, r0
    bd5c:	movs	r3, #0
    bd5e:	movs	r2, #10
    bd60:	mov	r0, r4
    bd62:	bl	cc80 <__multadd>
    bd66:	mov	r7, r9
    bd68:	mov	r8, r0
    bd6a:	b.n	bcb6 <_dtoa_r+0x7ce>
    bd6c:	bl	cc80 <__multadd>
    bd70:	mov	r7, r9
    bd72:	mov	r6, r0
    bd74:	mov	r8, r0
    bd76:	b.n	bcb6 <_dtoa_r+0x7ce>
    bd78:	mov	r1, r0
    bd7a:	mov	r0, r4
    bd7c:	str	r2, [sp, #24]
    bd7e:	bl	cc6c <_Bfree>
    bd82:	movs	r3, #1
    bd84:	ldr	r2, [sp, #24]
    bd86:	b.n	bd0a <_dtoa_r+0x822>
    bd88:	ldr	r1, [sp, #20]
    bd8a:	mov	r0, r5
    bd8c:	bl	d030 <__mcmp>
    bd90:	cmp	r0, #0
    bd92:	bge.w	b986 <_dtoa_r+0x49e>
    bd96:	mov	r1, r5
    bd98:	ldr	r5, [sp, #8]
    bd9a:	movs	r3, #0
    bd9c:	subs	r5, #1
    bd9e:	movs	r2, #10
    bda0:	mov	r0, r4
    bda2:	str	r5, [sp, #8]
    bda4:	bl	cc80 <__multadd>
    bda8:	ldr	r3, [sp, #36]	; 0x24
    bdaa:	mov	r5, r0
    bdac:	cmp	r3, #0
    bdae:	bne.w	bc72 <_dtoa_r+0x78a>
    bdb2:	ldr	r3, [sp, #52]	; 0x34
    bdb4:	cmp	r3, #0
    bdb6:	ble.w	c114 <_dtoa_r+0xc2c>
    bdba:	mov	r7, r3
    bdbc:	b.n	b994 <_dtoa_r+0x4ac>
    bdbe:	ldr	r5, [sp, #28]
    bdc0:	b.n	b8f8 <_dtoa_r+0x410>
    bdc2:	nop
    bdc4:	.word	0x200010a0
    bdc8:	.word	0x20001168
    bdcc:	ldr	r3, [sp, #4]
    bdce:	cmp	r3, #2
    bdd0:	ble.w	b98c <_dtoa_r+0x4a4>
    bdd4:	cmp	r7, #0
    bdd6:	bne.w	c0ac <_dtoa_r+0xbc4>
    bdda:	mov	r3, r7
    bddc:	ldr	r1, [sp, #20]
    bdde:	movs	r2, #5
    bde0:	mov	r0, r4
    bde2:	bl	cc80 <__multadd>
    bde6:	mov	r1, r0
    bde8:	str	r0, [sp, #20]
    bdea:	mov	r0, r5
    bdec:	bl	d030 <__mcmp>
    bdf0:	cmp	r0, #0
    bdf2:	str	r5, [sp, #28]
    bdf4:	ble.w	bc2e <_dtoa_r+0x746>
    bdf8:	ldr	r2, [sp, #8]
    bdfa:	ldr	r1, [sp, #32]
    bdfc:	movs	r3, #49	; 0x31
    bdfe:	adds	r2, #1
    be00:	str	r2, [sp, #8]
    be02:	strb	r3, [r1, #0]
    be04:	add.w	fp, r1, #1
    be08:	b.n	bc38 <_dtoa_r+0x750>
    be0a:	ldr	r2, [sp, #8]
    be0c:	adds	r2, #1
    be0e:	str	r2, [sp, #8]
    be10:	ldr	r2, [sp, #32]
    be12:	movs	r3, #49	; 0x31
    be14:	strb	r3, [r2, #0]
    be16:	b.n	ba14 <_dtoa_r+0x52c>
    be18:	movs	r3, #1
    be1a:	str	r3, [sp, #36]	; 0x24
    be1c:	b.n	ba56 <_dtoa_r+0x56e>
    be1e:	cmp.w	sl, #0
    be22:	bne.w	b91e <_dtoa_r+0x436>
    be26:	ubfx	r3, fp, #0, #20
    be2a:	cmp	r3, #0
    be2c:	bne.w	c066 <_dtoa_r+0xb7e>
    be30:	bic.w	r3, fp, #2147483648	; 0x80000000
    be34:	lsrs	r3, r3, #20
    be36:	lsls	r3, r3, #20
    be38:	cmp	r3, #0
    be3a:	beq.w	c0e6 <_dtoa_r+0xbfe>
    be3e:	ldr	r3, [sp, #24]
    be40:	adds	r3, #1
    be42:	str	r3, [sp, #24]
    be44:	movs	r3, #1
    be46:	add.w	r9, r9, #1
    be4a:	str	r3, [sp, #28]
    be4c:	ldr	r3, [sp, #44]	; 0x2c
    be4e:	movs	r0, #1
    be50:	cmp	r3, #0
    be52:	beq.w	b934 <_dtoa_r+0x44c>
    be56:	b.n	b922 <_dtoa_r+0x43a>
    be58:	vmov	s15, r1
    be5c:	vcvt.f64.s32	d6, s15
    be60:	vmov.f64	d7, #28	; 0x40e00000  7.0
    be64:	vfma.f64	d7, d4, d6
    be68:	vmov	r2, r3, d7
    be6c:	sub.w	r3, r3, #54525952	; 0x3400000
    be70:	vmov	d6, r2, r3
    be74:	vmov.f64	d7, #20	; 0x40a00000  5.0
    be78:	vsub.f64	d7, d4, d7
    be7c:	vcmpe.f64	d7, d6
    be80:	vmrs	APSR_nzcv, fpscr
    be84:	bgt.w	c042 <_dtoa_r+0xb5a>
    be88:	vneg.f64	d6, d6
    be8c:	vcmpe.f64	d7, d6
    be90:	vmrs	APSR_nzcv, fpscr
    be94:	bpl.n	bf24 <_dtoa_r+0xa3c>
    be96:	movs	r3, #0
    be98:	str	r3, [sp, #20]
    be9a:	mov	r6, r3
    be9c:	b.n	bc2e <_dtoa_r+0x746>
    be9e:	ldr	r0, [sp, #32]
    bea0:	b.w	b556 <_dtoa_r+0x6e>
    bea4:	ldr	r3, [sp, #20]
    bea6:	ldr	r1, [sp, #44]	; 0x2c
    bea8:	str	r2, [sp, #20]
    beaa:	subs	r3, r2, r3
    beac:	add	r1, r3
    beae:	movs	r3, #0
    beb0:	str	r1, [sp, #44]	; 0x2c
    beb2:	str	r3, [sp, #56]	; 0x38
    beb4:	b.n	b7fa <_dtoa_r+0x312>
    beb6:	vldr	d5, [sp, #56]	; 0x38
    beba:	movs	r1, #2
    bebc:	b.n	bad4 <_dtoa_r+0x5ec>
    bebe:	mov	r5, r7
    bec0:	movs	r1, #0
    bec2:	str	r1, [r4, #68]	; 0x44
    bec4:	b.n	ba86 <_dtoa_r+0x59e>
    bec6:	movs	r5, #1
    bec8:	str	r5, [sp, #52]	; 0x34
    beca:	mov	r7, r5
    becc:	mov	r8, r5
    bece:	b.n	bec0 <_dtoa_r+0x9d8>
    bed0:	cmp	r3, #0
    bed2:	mov	r9, r2
    bed4:	ble.n	befa <_dtoa_r+0xa12>
    bed6:	mov	r1, r5
    bed8:	movs	r2, #1
    beda:	mov	r0, r4
    bedc:	bl	cf80 <__lshift>
    bee0:	ldr	r1, [sp, #20]
    bee2:	mov	r5, r0
    bee4:	bl	d030 <__mcmp>
    bee8:	cmp	r0, #0
    beea:	ble.w	c106 <_dtoa_r+0xc1e>
    beee:	cmp.w	r9, #57	; 0x39
    bef2:	beq.w	c0b0 <_dtoa_r+0xbc8>
    bef6:	add.w	r9, sl, #49	; 0x31
    befa:	mov	sl, r6
    befc:	strb.w	r9, [r7]
    bf00:	add.w	fp, r7, #1
    bf04:	mov	r6, r8
    bf06:	str	r5, [sp, #28]
    bf08:	b.n	ba14 <_dtoa_r+0x52c>
    bf0a:	bne.n	bf16 <_dtoa_r+0xa2e>
    bf0c:	tst.w	r9, #1
    bf10:	beq.n	bf16 <_dtoa_r+0xa2e>
    bf12:	b.n	b9f2 <_dtoa_r+0x50a>
    bf14:	mov	fp, r2
    bf16:	ldrb.w	r3, [fp, #-1]
    bf1a:	cmp	r3, #48	; 0x30
    bf1c:	add.w	r2, fp, #4294967295
    bf20:	beq.n	bf14 <_dtoa_r+0xa2c>
    bf22:	b.n	ba14 <_dtoa_r+0x52c>
    bf24:	ldrd	sl, fp, [sp, #56]	; 0x38
    bf28:	b.w	b6e2 <_dtoa_r+0x1fa>
    bf2c:	ldr	r3, [sp, #8]
    bf2e:	negs	r3, r3
    bf30:	cmp	r3, #0
    bf32:	beq.w	c06c <_dtoa_r+0xb84>
    bf36:	ldr	r2, [pc, #556]	; (c164 <_dtoa_r+0xc7c>)
    bf38:	and.w	r1, r3, #15
    bf3c:	add.w	r2, r2, r1, lsl #3
    bf40:	vldr	d7, [r2]
    bf44:	vldr	d6, [sp, #56]	; 0x38
    bf48:	asrs	r3, r3, #4
    bf4a:	vmul.f64	d4, d6, d7
    bf4e:	beq.w	c11e <_dtoa_r+0xc36>
    bf52:	ldr	r2, [pc, #532]	; (c168 <_dtoa_r+0xc80>)
    bf54:	movs	r1, #2
    bf56:	lsls	r0, r3, #31
    bf58:	bpl.n	bf64 <_dtoa_r+0xa7c>
    bf5a:	vldr	d7, [r2]
    bf5e:	adds	r1, #1
    bf60:	vmul.f64	d4, d4, d7
    bf64:	asrs	r3, r3, #1
    bf66:	add.w	r2, r2, #8
    bf6a:	bne.n	bf56 <_dtoa_r+0xa6e>
    bf6c:	b.n	baf2 <_dtoa_r+0x60a>
    bf6e:	ldr	r1, [sp, #32]
    bf70:	movs	r2, #48	; 0x30
    bf72:	strb	r2, [r1, #0]
    bf74:	ldr	r2, [sp, #8]
    bf76:	ldrb.w	r0, [fp, #-1]
    bf7a:	adds	r2, #1
    bf7c:	str	r2, [sp, #8]
    bf7e:	b.n	b7b0 <_dtoa_r+0x2c8>
    bf80:	ldr	r1, [r6, #4]
    bf82:	mov	r0, r4
    bf84:	bl	cc20 <_Balloc>
    bf88:	ldr	r3, [r6, #16]
    bf8a:	adds	r2, r3, #2
    bf8c:	mov	r8, r0
    bf8e:	lsls	r2, r2, #2
    bf90:	add.w	r1, r6, #12
    bf94:	adds	r0, #12
    bf96:	bl	2b94 <memcpy>
    bf9a:	mov	r1, r8
    bf9c:	movs	r2, #1
    bf9e:	mov	r0, r4
    bfa0:	bl	cf80 <__lshift>
    bfa4:	mov	r8, r0
    bfa6:	b.n	bca6 <_dtoa_r+0x7be>
    bfa8:	cmp	r2, #57	; 0x39
    bfaa:	beq.w	c0b0 <_dtoa_r+0xbc8>
    bfae:	add.w	r9, r2, #1
    bfb2:	mov	sl, r6
    bfb4:	strb.w	r9, [r7]
    bfb8:	add.w	fp, r7, #1
    bfbc:	mov	r6, r8
    bfbe:	str	r5, [sp, #28]
    bfc0:	b.n	ba14 <_dtoa_r+0x52c>
    bfc2:	mov	sl, r6
    bfc4:	mov	r9, r2
    bfc6:	mov	r6, r8
    bfc8:	b.n	b9da <_dtoa_r+0x4f2>
    bfca:	ldr	r0, [pc, #408]	; (c164 <_dtoa_r+0xc7c>)
    bfcc:	vcvt.s32.f64	s12, d4
    bfd0:	subs	r5, r1, #1
    bfd2:	add.w	r0, r0, r5, lsl #3
    bfd6:	vmov	d7, r2, r3
    bfda:	vldr	d3, [r0]
    bfde:	vmov	r3, s12
    bfe2:	vmul.f64	d3, d3, d7
    bfe6:	ldr	r0, [sp, #32]
    bfe8:	adds	r3, #48	; 0x30
    bfea:	cmp	r1, #1
    bfec:	vcvt.f64.s32	d6, s12
    bff0:	strb	r3, [r0, #0]
    bff2:	add.w	fp, r0, #1
    bff6:	vsub.f64	d7, d4, d6
    bffa:	beq.n	c026 <_dtoa_r+0xb3e>
    bffc:	vmov.f64	d5, #36	; 0x41200000  10.0
    c000:	ldr	r3, [sp, #32]
    c002:	add	r1, r3
    c004:	mov	r3, fp
    c006:	vmul.f64	d7, d7, d5
    c00a:	vcvt.s32.f64	s12, d7
    c00e:	vmov	r2, s12
    c012:	adds	r2, #48	; 0x30
    c014:	strb.w	r2, [r3], #1
    c018:	cmp	r1, r3
    c01a:	vcvt.f64.s32	d6, s12
    c01e:	vsub.f64	d7, d7, d6
    c022:	bne.n	c006 <_dtoa_r+0xb1e>
    c024:	add	fp, r5
    c026:	vmov.f64	d6, #96	; 0x3f000000  0.5
    c02a:	vadd.f64	d5, d3, d6
    c02e:	vcmpe.f64	d5, d7
    c032:	vmrs	APSR_nzcv, fpscr
    c036:	bpl.n	c0c0 <_dtoa_r+0xbd8>
    c038:	str	r6, [sp, #8]
    c03a:	ldrb.w	r0, [fp, #-1]
    c03e:	b.w	b796 <_dtoa_r+0x2ae>
    c042:	movs	r3, #0
    c044:	str	r3, [sp, #20]
    c046:	mov	r6, r3
    c048:	b.n	bdf8 <_dtoa_r+0x910>
    c04a:	subs	r3, r3, r7
    c04c:	str	r3, [sp, #40]	; 0x28
    c04e:	movs	r3, #0
    c050:	b.w	b806 <_dtoa_r+0x31e>
    c054:	ldr	r2, [sp, #20]
    c056:	ldr	r3, [sp, #64]	; 0x40
    c058:	str	r2, [sp, #56]	; 0x38
    c05a:	ldr	r2, [sp, #24]
    c05c:	str	r2, [sp, #40]	; 0x28
    c05e:	rsb	r3, r3, #54	; 0x36
    c062:	b.w	b806 <_dtoa_r+0x31e>
    c066:	movs	r3, #0
    c068:	str	r3, [sp, #28]
    c06a:	b.n	be4c <_dtoa_r+0x964>
    c06c:	vldr	d4, [sp, #56]	; 0x38
    c070:	movs	r1, #2
    c072:	b.n	baf2 <_dtoa_r+0x60a>
    c074:	cmp	r7, #0
    c076:	beq.w	be58 <_dtoa_r+0x970>
    c07a:	ldr	r0, [sp, #52]	; 0x34
    c07c:	cmp	r0, #0
    c07e:	ble.w	bf24 <_dtoa_r+0xa3c>
    c082:	vmov.f64	d5, #36	; 0x41200000  10.0
    c086:	vmov.f64	d7, #28	; 0x40e00000  7.0
    c08a:	adds	r1, #1
    c08c:	vmov	s13, r1
    c090:	vmul.f64	d4, d4, d5
    c094:	ldr	r3, [sp, #8]
    c096:	vcvt.f64.s32	d6, s13
    c09a:	subs	r6, r3, #1
    c09c:	vfma.f64	d7, d4, d6
    c0a0:	vmov	r2, r3, d7
    c0a4:	mov	r1, r0
    c0a6:	sub.w	r3, r3, #54525952	; 0x3400000
    c0aa:	b.n	bb28 <_dtoa_r+0x640>
    c0ac:	str	r5, [sp, #28]
    c0ae:	b.n	bc2e <_dtoa_r+0x746>
    c0b0:	movs	r2, #57	; 0x39
    c0b2:	mov	sl, r6
    c0b4:	str	r5, [sp, #28]
    c0b6:	mov	r6, r8
    c0b8:	strb	r2, [r7, #0]
    c0ba:	add.w	fp, r7, #1
    c0be:	b.n	b9f6 <_dtoa_r+0x50e>
    c0c0:	vsub.f64	d6, d6, d3
    c0c4:	vcmpe.f64	d6, d7
    c0c8:	vmrs	APSR_nzcv, fpscr
    c0cc:	bgt.n	c0d2 <_dtoa_r+0xbea>
    c0ce:	b.n	bf24 <_dtoa_r+0xa3c>
    c0d0:	mov	fp, r2
    c0d2:	ldrb.w	r3, [fp, #-1]
    c0d6:	cmp	r3, #48	; 0x30
    c0d8:	add.w	r2, fp, #4294967295
    c0dc:	beq.n	c0d0 <_dtoa_r+0xbe8>
    c0de:	b.n	bbd6 <_dtoa_r+0x6ee>
    c0e0:	str	r6, [sp, #8]
    c0e2:	b.w	b796 <_dtoa_r+0x2ae>
    c0e6:	str	r3, [sp, #28]
    c0e8:	b.n	be4c <_dtoa_r+0x964>
    c0ea:	cmp.w	sl, #0
    c0ee:	bne.w	bc6a <_dtoa_r+0x782>
    c0f2:	b.n	be26 <_dtoa_r+0x93e>
    c0f4:	cmp	r2, #57	; 0x39
    c0f6:	mov	fp, r9
    c0f8:	mov	r9, r2
    c0fa:	beq.n	c0b0 <_dtoa_r+0xbc8>
    c0fc:	cmp.w	fp, #0
    c100:	bgt.w	bef6 <_dtoa_r+0xa0e>
    c104:	b.n	befa <_dtoa_r+0xa12>
    c106:	bne.w	befa <_dtoa_r+0xa12>
    c10a:	tst.w	r9, #1
    c10e:	beq.w	befa <_dtoa_r+0xa12>
    c112:	b.n	beee <_dtoa_r+0xa06>
    c114:	ldr	r3, [sp, #4]
    c116:	cmp	r3, #2
    c118:	bgt.n	c12c <_dtoa_r+0xc44>
    c11a:	ldr	r7, [sp, #52]	; 0x34
    c11c:	b.n	b994 <_dtoa_r+0x4ac>
    c11e:	movs	r1, #2
    c120:	b.n	baf2 <_dtoa_r+0x60a>
    c122:	ldr	r3, [sp, #4]
    c124:	cmp	r3, #2
    c126:	bgt.n	c12c <_dtoa_r+0xc44>
    c128:	ldr	r7, [sp, #52]	; 0x34
    c12a:	b.n	bc8a <_dtoa_r+0x7a2>
    c12c:	ldr	r7, [sp, #52]	; 0x34
    c12e:	b.n	bdd4 <_dtoa_r+0x8ec>
    c130:	movs	r3, #1
    c132:	str	r3, [sp, #56]	; 0x38
    c134:	b.w	b67a <_dtoa_r+0x192>
    c138:	beq.w	b95a <_dtoa_r+0x472>
    c13c:	rsb	r0, r0, #60	; 0x3c
    c140:	b.n	b94c <_dtoa_r+0x464>
    c142:	movs	r5, #0
    c144:	str	r5, [r4, #68]	; 0x44
    c146:	mov	r1, r5
    c148:	mov	r0, r4
    c14a:	bl	cc20 <_Balloc>
    c14e:	mov.w	r7, #4294967295
    c152:	movs	r3, #1
    c154:	str	r0, [sp, #32]
    c156:	mov	r8, r5
    c158:	str	r0, [r4, #64]	; 0x40
    c15a:	str	r7, [sp, #52]	; 0x34
    c15c:	str	r3, [sp, #36]	; 0x24
    c15e:	b.w	b6e2 <_dtoa_r+0x1fa>
    c162:	nop
    c164:	.word	0x200010a0
    c168:	.word	0x20001168

0000c16c <__sflush_r>:
    c16c:	ldrsh.w	r3, [r1, #12]
    c170:	uxth	r2, r3
    c172:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c176:	mov	r5, r1
    c178:	lsls	r1, r2, #28
    c17a:	mov	r8, r0
    c17c:	bmi.n	c1f8 <__sflush_r+0x8c>
    c17e:	ldr	r2, [r5, #4]
    c180:	orr.w	r3, r3, #2048	; 0x800
    c184:	cmp	r2, #0
    c186:	strh	r3, [r5, #12]
    c188:	ble.n	c272 <__sflush_r+0x106>
    c18a:	ldr	r4, [r5, #40]	; 0x28
    c18c:	cmp	r4, #0
    c18e:	beq.n	c228 <__sflush_r+0xbc>
    c190:	uxth	r3, r3
    c192:	and.w	r2, r3, #4096	; 0x1000
    c196:	movs	r1, #0
    c198:	uxth	r2, r2
    c19a:	ldr.w	r6, [r8]
    c19e:	str.w	r1, [r8]
    c1a2:	cmp	r2, #0
    c1a4:	beq.n	c27a <__sflush_r+0x10e>
    c1a6:	ldr	r2, [r5, #80]	; 0x50
    c1a8:	lsls	r7, r3, #29
    c1aa:	bpl.n	c1b8 <__sflush_r+0x4c>
    c1ac:	ldr	r1, [r5, #4]
    c1ae:	ldr	r3, [r5, #48]	; 0x30
    c1b0:	subs	r2, r2, r1
    c1b2:	cbz	r3, c1b8 <__sflush_r+0x4c>
    c1b4:	ldr	r3, [r5, #60]	; 0x3c
    c1b6:	subs	r2, r2, r3
    c1b8:	movs	r3, #0
    c1ba:	ldr	r1, [r5, #28]
    c1bc:	mov	r0, r8
    c1be:	blx	r4
    c1c0:	adds	r4, r0, #1
    c1c2:	beq.n	c23e <__sflush_r+0xd2>
    c1c4:	ldrsh.w	r3, [r5, #12]
    c1c8:	ldr	r2, [r5, #16]
    c1ca:	str	r2, [r5, #0]
    c1cc:	bic.w	r3, r3, #2048	; 0x800
    c1d0:	movs	r2, #0
    c1d2:	strh	r3, [r5, #12]
    c1d4:	lsls	r3, r3, #19
    c1d6:	str	r2, [r5, #4]
    c1d8:	bmi.n	c26e <__sflush_r+0x102>
    c1da:	ldr	r1, [r5, #48]	; 0x30
    c1dc:	str.w	r6, [r8]
    c1e0:	cbz	r1, c228 <__sflush_r+0xbc>
    c1e2:	add.w	r3, r5, #64	; 0x40
    c1e6:	cmp	r1, r3
    c1e8:	beq.n	c1f0 <__sflush_r+0x84>
    c1ea:	mov	r0, r8
    c1ec:	bl	c54c <_free_r>
    c1f0:	movs	r0, #0
    c1f2:	str	r0, [r5, #48]	; 0x30
    c1f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1f8:	ldr	r6, [r5, #16]
    c1fa:	cbz	r6, c228 <__sflush_r+0xbc>
    c1fc:	ldr	r4, [r5, #0]
    c1fe:	str	r6, [r5, #0]
    c200:	lsls	r0, r2, #30
    c202:	ite	eq
    c204:	ldreq	r3, [r5, #20]
    c206:	movne	r3, #0
    c208:	subs	r4, r4, r6
    c20a:	str	r3, [r5, #8]
    c20c:	b.n	c224 <__sflush_r+0xb8>
    c20e:	mov	r3, r4
    c210:	mov	r2, r6
    c212:	ldr	r7, [r5, #36]	; 0x24
    c214:	ldr	r1, [r5, #28]
    c216:	mov	r0, r8
    c218:	blx	r7
    c21a:	cmp	r0, #0
    c21c:	sub.w	r4, r4, r0
    c220:	add	r6, r0
    c222:	ble.n	c22e <__sflush_r+0xc2>
    c224:	cmp	r4, #0
    c226:	bgt.n	c20e <__sflush_r+0xa2>
    c228:	movs	r0, #0
    c22a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c22e:	ldrh	r3, [r5, #12]
    c230:	orr.w	r3, r3, #64	; 0x40
    c234:	strh	r3, [r5, #12]
    c236:	mov.w	r0, #4294967295
    c23a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c23e:	ldr.w	r2, [r8]
    c242:	cmp	r2, #29
    c244:	bhi.n	c22e <__sflush_r+0xc2>
    c246:	ldr	r3, [pc, #104]	; (c2b0 <__sflush_r+0x144>)
    c248:	lsrs	r3, r2
    c24a:	and.w	r3, r3, #1
    c24e:	eor.w	r4, r3, #1
    c252:	cmp	r3, #0
    c254:	beq.n	c22e <__sflush_r+0xc2>
    c256:	ldrsh.w	r3, [r5, #12]
    c25a:	ldr	r1, [r5, #16]
    c25c:	str	r1, [r5, #0]
    c25e:	bic.w	r3, r3, #2048	; 0x800
    c262:	lsls	r1, r3, #19
    c264:	str	r4, [r5, #4]
    c266:	strh	r3, [r5, #12]
    c268:	bpl.n	c1da <__sflush_r+0x6e>
    c26a:	cmp	r2, #0
    c26c:	bne.n	c1da <__sflush_r+0x6e>
    c26e:	str	r0, [r5, #80]	; 0x50
    c270:	b.n	c1da <__sflush_r+0x6e>
    c272:	ldr	r2, [r5, #60]	; 0x3c
    c274:	cmp	r2, #0
    c276:	bgt.n	c18a <__sflush_r+0x1e>
    c278:	b.n	c228 <__sflush_r+0xbc>
    c27a:	movs	r3, #1
    c27c:	ldr	r1, [r5, #28]
    c27e:	mov	r0, r8
    c280:	blx	r4
    c282:	adds	r3, r0, #1
    c284:	mov	r2, r0
    c286:	beq.n	c28e <__sflush_r+0x122>
    c288:	ldrh	r3, [r5, #12]
    c28a:	ldr	r4, [r5, #40]	; 0x28
    c28c:	b.n	c1a8 <__sflush_r+0x3c>
    c28e:	ldr.w	r3, [r8]
    c292:	cmp	r3, #0
    c294:	beq.n	c288 <__sflush_r+0x11c>
    c296:	cmp	r3, #29
    c298:	beq.n	c29e <__sflush_r+0x132>
    c29a:	cmp	r3, #22
    c29c:	bne.n	c2a4 <__sflush_r+0x138>
    c29e:	str.w	r6, [r8]
    c2a2:	b.n	c228 <__sflush_r+0xbc>
    c2a4:	ldrh	r3, [r5, #12]
    c2a6:	orr.w	r3, r3, #64	; 0x40
    c2aa:	strh	r3, [r5, #12]
    c2ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2b0:	.word	0x20400001

0000c2b4 <_fflush_r>:
    c2b4:	push	{r4, lr}
    c2b6:	mov	r4, r0
    c2b8:	sub	sp, #8
    c2ba:	cbz	r0, c2c0 <_fflush_r+0xc>
    c2bc:	ldr	r3, [r0, #56]	; 0x38
    c2be:	cbz	r3, c2d6 <_fflush_r+0x22>
    c2c0:	ldrsh.w	r0, [r1, #12]
    c2c4:	cbnz	r0, c2ca <_fflush_r+0x16>
    c2c6:	add	sp, #8
    c2c8:	pop	{r4, pc}
    c2ca:	mov	r0, r4
    c2cc:	add	sp, #8
    c2ce:	ldmia.w	sp!, {r4, lr}
    c2d2:	b.w	c16c <__sflush_r>
    c2d6:	str	r1, [sp, #4]
    c2d8:	bl	c3dc <__sinit>
    c2dc:	ldr	r1, [sp, #4]
    c2de:	b.n	c2c0 <_fflush_r+0xc>

0000c2e0 <_cleanup_r>:
    c2e0:	ldr	r1, [pc, #4]	; (c2e8 <_cleanup_r+0x8>)
    c2e2:	b.w	ca20 <_fwalk_reent>
    c2e6:	nop
    c2e8:	.word	0x0000d551

0000c2ec <__sinit.part.1>:
    c2ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2f0:	ldr	r3, [pc, #212]	; (c3c8 <__sinit.part.1+0xdc>)
    c2f2:	ldr	r5, [r0, #4]
    c2f4:	str	r3, [r0, #60]	; 0x3c
    c2f6:	movs	r4, #0
    c2f8:	mov	r7, r0
    c2fa:	add.w	r2, r0, #748	; 0x2ec
    c2fe:	movs	r3, #4
    c300:	movs	r1, #3
    c302:	str.w	r1, [r0, #740]	; 0x2e4
    c306:	str.w	r2, [r0, #744]	; 0x2e8
    c30a:	str.w	r4, [r0, #736]	; 0x2e0
    c30e:	sub	sp, #12
    c310:	str	r4, [r5, #0]
    c312:	str	r4, [r5, #4]
    c314:	str	r4, [r5, #8]
    c316:	str	r4, [r5, #100]	; 0x64
    c318:	strh	r4, [r5, #14]
    c31a:	str	r4, [r5, #16]
    c31c:	str	r4, [r5, #20]
    c31e:	str	r4, [r5, #24]
    c320:	strh	r3, [r5, #12]
    c322:	mov	r1, r4
    c324:	add.w	r0, r5, #92	; 0x5c
    c328:	movs	r2, #8
    c32a:	bl	8870 <memset>
    c32e:	ldr	r6, [r7, #8]
    c330:	ldr.w	fp, [pc, #152]	; c3cc <__sinit.part.1+0xe0>
    c334:	ldr.w	sl, [pc, #152]	; c3d0 <__sinit.part.1+0xe4>
    c338:	ldr.w	r9, [pc, #152]	; c3d4 <__sinit.part.1+0xe8>
    c33c:	ldr.w	r8, [pc, #152]	; c3d8 <__sinit.part.1+0xec>
    c340:	str.w	fp, [r5, #32]
    c344:	movs	r3, #1
    c346:	movs	r2, #9
    c348:	str.w	sl, [r5, #36]	; 0x24
    c34c:	str.w	r9, [r5, #40]	; 0x28
    c350:	str.w	r8, [r5, #44]	; 0x2c
    c354:	str	r5, [r5, #28]
    c356:	mov	r1, r4
    c358:	strh	r3, [r6, #14]
    c35a:	strh	r2, [r6, #12]
    c35c:	add.w	r0, r6, #92	; 0x5c
    c360:	str	r4, [r6, #0]
    c362:	str	r4, [r6, #4]
    c364:	str	r4, [r6, #8]
    c366:	str	r4, [r6, #100]	; 0x64
    c368:	str	r4, [r6, #16]
    c36a:	str	r4, [r6, #20]
    c36c:	str	r4, [r6, #24]
    c36e:	movs	r2, #8
    c370:	str	r3, [sp, #4]
    c372:	bl	8870 <memset>
    c376:	ldr	r5, [r7, #12]
    c378:	str	r6, [r6, #28]
    c37a:	movs	r0, #18
    c37c:	movs	r2, #2
    c37e:	str.w	fp, [r6, #32]
    c382:	str.w	sl, [r6, #36]	; 0x24
    c386:	str.w	r9, [r6, #40]	; 0x28
    c38a:	str.w	r8, [r6, #44]	; 0x2c
    c38e:	mov	r1, r4
    c390:	strh	r0, [r5, #12]
    c392:	strh	r2, [r5, #14]
    c394:	str	r4, [r5, #0]
    c396:	str	r4, [r5, #4]
    c398:	str	r4, [r5, #8]
    c39a:	str	r4, [r5, #100]	; 0x64
    c39c:	str	r4, [r5, #16]
    c39e:	str	r4, [r5, #20]
    c3a0:	str	r4, [r5, #24]
    c3a2:	add.w	r0, r5, #92	; 0x5c
    c3a6:	movs	r2, #8
    c3a8:	bl	8870 <memset>
    c3ac:	ldr	r3, [sp, #4]
    c3ae:	str	r5, [r5, #28]
    c3b0:	str.w	fp, [r5, #32]
    c3b4:	str.w	sl, [r5, #36]	; 0x24
    c3b8:	str.w	r9, [r5, #40]	; 0x28
    c3bc:	str.w	r8, [r5, #44]	; 0x2c
    c3c0:	str	r3, [r7, #56]	; 0x38
    c3c2:	add	sp, #12
    c3c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3c8:	.word	0x0000c2e1
    c3cc:	.word	0x0000d245
    c3d0:	.word	0x0000d269
    c3d4:	.word	0x0000d2a5
    c3d8:	.word	0x0000d2c5

0000c3dc <__sinit>:
    c3dc:	ldr	r3, [r0, #56]	; 0x38
    c3de:	cbz	r3, c3e2 <__sinit+0x6>
    c3e0:	bx	lr
    c3e2:	b.w	c2ec <__sinit.part.1>
    c3e6:	nop

0000c3e8 <__sfp_lock_acquire>:
    c3e8:	bx	lr
    c3ea:	nop

0000c3ec <__sfp_lock_release>:
    c3ec:	bx	lr
    c3ee:	nop

0000c3f0 <__fputwc>:
    c3f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3f4:	sub	sp, #8
    c3f6:	mov	r8, r0
    c3f8:	mov	r9, r1
    c3fa:	mov	r4, r2
    c3fc:	bl	81f0 <__locale_mb_cur_max>
    c400:	cmp	r0, #1
    c402:	beq.n	c46c <__fputwc+0x7c>
    c404:	add.w	r3, r4, #92	; 0x5c
    c408:	mov	r2, r9
    c40a:	add	r1, sp, #4
    c40c:	mov	r0, r8
    c40e:	bl	d478 <_wcrtomb_r>
    c412:	cmp.w	r0, #4294967295
    c416:	mov	sl, r0
    c418:	beq.n	c45e <__fputwc+0x6e>
    c41a:	cbz	r0, c480 <__fputwc+0x90>
    c41c:	ldrb.w	r6, [sp, #4]
    c420:	movs	r5, #0
    c422:	b.n	c436 <__fputwc+0x46>
    c424:	ldr	r3, [r4, #0]
    c426:	adds	r2, r3, #1
    c428:	str	r2, [r4, #0]
    c42a:	strb	r6, [r3, #0]
    c42c:	adds	r5, #1
    c42e:	cmp	r5, sl
    c430:	bcs.n	c480 <__fputwc+0x90>
    c432:	add	r3, sp, #4
    c434:	ldrb	r6, [r3, r5]
    c436:	ldr	r3, [r4, #8]
    c438:	subs	r3, #1
    c43a:	cmp	r3, #0
    c43c:	str	r3, [r4, #8]
    c43e:	bge.n	c424 <__fputwc+0x34>
    c440:	ldr	r7, [r4, #24]
    c442:	cmp	r3, r7
    c444:	mov	r1, r6
    c446:	mov	r2, r4
    c448:	mov	r0, r8
    c44a:	blt.n	c450 <__fputwc+0x60>
    c44c:	cmp	r6, #10
    c44e:	bne.n	c424 <__fputwc+0x34>
    c450:	bl	d3cc <__swbuf_r>
    c454:	adds	r3, r0, #1
    c456:	bne.n	c42c <__fputwc+0x3c>
    c458:	add	sp, #8
    c45a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c45e:	ldrh	r3, [r4, #12]
    c460:	orr.w	r3, r3, #64	; 0x40
    c464:	strh	r3, [r4, #12]
    c466:	add	sp, #8
    c468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c46c:	add.w	r3, r9, #4294967295
    c470:	cmp	r3, #254	; 0xfe
    c472:	bhi.n	c404 <__fputwc+0x14>
    c474:	uxtb.w	r6, r9
    c478:	mov	sl, r0
    c47a:	strb.w	r6, [sp, #4]
    c47e:	b.n	c420 <__fputwc+0x30>
    c480:	mov	r0, r9
    c482:	add	sp, #8
    c484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c488 <_fputwc_r>:
    c488:	ldrsh.w	r3, [r2, #12]
    c48c:	tst.w	r3, #8192	; 0x2000
    c490:	bne.n	c4aa <_fputwc_r+0x22>
    c492:	push	{r4}
    c494:	ldr	r4, [r2, #100]	; 0x64
    c496:	orr.w	r3, r3, #8192	; 0x2000
    c49a:	orr.w	r4, r4, #8192	; 0x2000
    c49e:	str	r4, [r2, #100]	; 0x64
    c4a0:	strh	r3, [r2, #12]
    c4a2:	ldr.w	r4, [sp], #4
    c4a6:	b.w	c3f0 <__fputwc>
    c4aa:	b.w	c3f0 <__fputwc>
    c4ae:	nop

0000c4b0 <_malloc_trim_r>:
    c4b0:	push	{r3, r4, r5, r6, r7, lr}
    c4b2:	ldr	r7, [pc, #140]	; (c540 <_malloc_trim_r+0x90>)
    c4b4:	mov	r4, r1
    c4b6:	mov	r6, r0
    c4b8:	bl	890c <__malloc_lock>
    c4bc:	ldr	r3, [r7, #8]
    c4be:	ldr	r5, [r3, #4]
    c4c0:	bic.w	r5, r5, #3
    c4c4:	subs	r1, r5, r4
    c4c6:	addw	r1, r1, #4079	; 0xfef
    c4ca:	bic.w	r1, r1, #4080	; 0xff0
    c4ce:	bic.w	r1, r1, #15
    c4d2:	sub.w	r4, r1, #4096	; 0x1000
    c4d6:	cmp.w	r4, #4096	; 0x1000
    c4da:	blt.n	c4ec <_malloc_trim_r+0x3c>
    c4dc:	movs	r1, #0
    c4de:	mov	r0, r6
    c4e0:	bl	8cf4 <_sbrk_r>
    c4e4:	ldr	r3, [r7, #8]
    c4e6:	add	r3, r5
    c4e8:	cmp	r0, r3
    c4ea:	beq.n	c4f6 <_malloc_trim_r+0x46>
    c4ec:	mov	r0, r6
    c4ee:	bl	8910 <__malloc_unlock>
    c4f2:	movs	r0, #0
    c4f4:	pop	{r3, r4, r5, r6, r7, pc}
    c4f6:	negs	r1, r4
    c4f8:	mov	r0, r6
    c4fa:	bl	8cf4 <_sbrk_r>
    c4fe:	adds	r0, #1
    c500:	beq.n	c51e <_malloc_trim_r+0x6e>
    c502:	ldr	r3, [pc, #64]	; (c544 <_malloc_trim_r+0x94>)
    c504:	ldr	r2, [r7, #8]
    c506:	ldr	r1, [r3, #0]
    c508:	subs	r5, r5, r4
    c50a:	orr.w	r5, r5, #1
    c50e:	mov	r0, r6
    c510:	subs	r1, r1, r4
    c512:	str	r5, [r2, #4]
    c514:	str	r1, [r3, #0]
    c516:	bl	8910 <__malloc_unlock>
    c51a:	movs	r0, #1
    c51c:	pop	{r3, r4, r5, r6, r7, pc}
    c51e:	movs	r1, #0
    c520:	mov	r0, r6
    c522:	bl	8cf4 <_sbrk_r>
    c526:	ldr	r2, [r7, #8]
    c528:	subs	r3, r0, r2
    c52a:	cmp	r3, #15
    c52c:	ble.n	c4ec <_malloc_trim_r+0x3c>
    c52e:	ldr	r4, [pc, #24]	; (c548 <_malloc_trim_r+0x98>)
    c530:	ldr	r1, [pc, #16]	; (c544 <_malloc_trim_r+0x94>)
    c532:	ldr	r4, [r4, #0]
    c534:	orr.w	r3, r3, #1
    c538:	subs	r0, r0, r4
    c53a:	str	r3, [r2, #4]
    c53c:	str	r0, [r1, #0]
    c53e:	b.n	c4ec <_malloc_trim_r+0x3c>
    c540:	.word	0x20001780
    c544:	.word	0x20002348
    c548:	.word	0x20001b8c

0000c54c <_free_r>:
    c54c:	cmp	r1, #0
    c54e:	beq.n	c5dc <_free_r+0x90>
    c550:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c554:	mov	r5, r1
    c556:	mov	r8, r0
    c558:	bl	890c <__malloc_lock>
    c55c:	ldr.w	r7, [r5, #-4]
    c560:	ldr	r1, [pc, #424]	; (c70c <_free_r+0x1c0>)
    c562:	bic.w	r3, r7, #1
    c566:	sub.w	r4, r5, #8
    c56a:	adds	r2, r4, r3
    c56c:	ldr	r6, [r1, #8]
    c56e:	ldr	r0, [r2, #4]
    c570:	cmp	r2, r6
    c572:	bic.w	r0, r0, #3
    c576:	beq.n	c63e <_free_r+0xf2>
    c578:	lsls	r6, r7, #31
    c57a:	str	r0, [r2, #4]
    c57c:	bmi.n	c596 <_free_r+0x4a>
    c57e:	ldr.w	r7, [r5, #-8]
    c582:	subs	r4, r4, r7
    c584:	add.w	lr, r1, #8
    c588:	ldr	r5, [r4, #8]
    c58a:	cmp	r5, lr
    c58c:	add	r3, r7
    c58e:	beq.n	c670 <_free_r+0x124>
    c590:	ldr	r7, [r4, #12]
    c592:	str	r7, [r5, #12]
    c594:	str	r5, [r7, #8]
    c596:	adds	r5, r2, r0
    c598:	ldr	r5, [r5, #4]
    c59a:	lsls	r5, r5, #31
    c59c:	bpl.n	c624 <_free_r+0xd8>
    c59e:	orr.w	r2, r3, #1
    c5a2:	str	r2, [r4, #4]
    c5a4:	str	r3, [r4, r3]
    c5a6:	cmp.w	r3, #512	; 0x200
    c5aa:	bcs.n	c5de <_free_r+0x92>
    c5ac:	lsrs	r3, r3, #3
    c5ae:	adds	r2, r3, #1
    c5b0:	ldr	r5, [r1, #4]
    c5b2:	ldr.w	r7, [r1, r2, lsl #3]
    c5b6:	str	r7, [r4, #8]
    c5b8:	movs	r0, #1
    c5ba:	asrs	r3, r3, #2
    c5bc:	lsl.w	r3, r0, r3
    c5c0:	add.w	r0, r1, r2, lsl #3
    c5c4:	orrs	r5, r3
    c5c6:	subs	r0, #8
    c5c8:	str	r0, [r4, #12]
    c5ca:	str	r5, [r1, #4]
    c5cc:	str.w	r4, [r1, r2, lsl #3]
    c5d0:	str	r4, [r7, #12]
    c5d2:	mov	r0, r8
    c5d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5d8:	b.w	8910 <__malloc_unlock>
    c5dc:	bx	lr
    c5de:	lsrs	r2, r3, #9
    c5e0:	cmp	r2, #4
    c5e2:	bhi.n	c68c <_free_r+0x140>
    c5e4:	lsrs	r2, r3, #6
    c5e6:	add.w	r7, r2, #57	; 0x39
    c5ea:	lsls	r7, r7, #1
    c5ec:	add.w	r5, r2, #56	; 0x38
    c5f0:	add.w	r0, r1, r7, lsl #2
    c5f4:	ldr.w	r2, [r1, r7, lsl #2]
    c5f8:	ldr	r1, [pc, #272]	; (c70c <_free_r+0x1c0>)
    c5fa:	subs	r0, #8
    c5fc:	cmp	r0, r2
    c5fe:	beq.n	c69c <_free_r+0x150>
    c600:	ldr	r1, [r2, #4]
    c602:	bic.w	r1, r1, #3
    c606:	cmp	r3, r1
    c608:	bcs.n	c610 <_free_r+0xc4>
    c60a:	ldr	r2, [r2, #8]
    c60c:	cmp	r0, r2
    c60e:	bne.n	c600 <_free_r+0xb4>
    c610:	ldr	r0, [r2, #12]
    c612:	str	r0, [r4, #12]
    c614:	str	r2, [r4, #8]
    c616:	str	r4, [r0, #8]
    c618:	str	r4, [r2, #12]
    c61a:	mov	r0, r8
    c61c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c620:	b.w	8910 <__malloc_unlock>
    c624:	ldr	r5, [r2, #8]
    c626:	ldr	r7, [pc, #232]	; (c710 <_free_r+0x1c4>)
    c628:	cmp	r5, r7
    c62a:	add	r3, r0
    c62c:	beq.n	c6ae <_free_r+0x162>
    c62e:	ldr	r0, [r2, #12]
    c630:	str	r0, [r5, #12]
    c632:	orr.w	r2, r3, #1
    c636:	str	r5, [r0, #8]
    c638:	str	r2, [r4, #4]
    c63a:	str	r3, [r4, r3]
    c63c:	b.n	c5a6 <_free_r+0x5a>
    c63e:	lsls	r7, r7, #31
    c640:	add	r3, r0
    c642:	bmi.n	c654 <_free_r+0x108>
    c644:	ldr.w	r2, [r5, #-8]
    c648:	subs	r4, r4, r2
    c64a:	add	r3, r2
    c64c:	ldr	r0, [r4, #8]
    c64e:	ldr	r2, [r4, #12]
    c650:	str	r2, [r0, #12]
    c652:	str	r0, [r2, #8]
    c654:	ldr	r2, [pc, #188]	; (c714 <_free_r+0x1c8>)
    c656:	ldr	r2, [r2, #0]
    c658:	orr.w	r0, r3, #1
    c65c:	cmp	r3, r2
    c65e:	str	r0, [r4, #4]
    c660:	str	r4, [r1, #8]
    c662:	bcc.n	c5d2 <_free_r+0x86>
    c664:	ldr	r3, [pc, #176]	; (c718 <_free_r+0x1cc>)
    c666:	mov	r0, r8
    c668:	ldr	r1, [r3, #0]
    c66a:	bl	c4b0 <_malloc_trim_r>
    c66e:	b.n	c5d2 <_free_r+0x86>
    c670:	adds	r1, r2, r0
    c672:	ldr	r1, [r1, #4]
    c674:	lsls	r1, r1, #31
    c676:	bmi.n	c702 <_free_r+0x1b6>
    c678:	ldr	r1, [r2, #8]
    c67a:	ldr	r2, [r2, #12]
    c67c:	str	r2, [r1, #12]
    c67e:	add	r3, r0
    c680:	orr.w	r0, r3, #1
    c684:	str	r1, [r2, #8]
    c686:	str	r0, [r4, #4]
    c688:	str	r3, [r4, r3]
    c68a:	b.n	c5d2 <_free_r+0x86>
    c68c:	cmp	r2, #20
    c68e:	bhi.n	c6c0 <_free_r+0x174>
    c690:	add.w	r7, r2, #92	; 0x5c
    c694:	lsls	r7, r7, #1
    c696:	add.w	r5, r2, #91	; 0x5b
    c69a:	b.n	c5f0 <_free_r+0xa4>
    c69c:	asrs	r2, r5, #2
    c69e:	ldr	r3, [r1, #4]
    c6a0:	movs	r5, #1
    c6a2:	lsl.w	r2, r5, r2
    c6a6:	orrs	r3, r2
    c6a8:	str	r3, [r1, #4]
    c6aa:	mov	r2, r0
    c6ac:	b.n	c612 <_free_r+0xc6>
    c6ae:	orr.w	r2, r3, #1
    c6b2:	str	r4, [r1, #20]
    c6b4:	str	r4, [r1, #16]
    c6b6:	str	r5, [r4, #12]
    c6b8:	str	r5, [r4, #8]
    c6ba:	str	r2, [r4, #4]
    c6bc:	str	r3, [r4, r3]
    c6be:	b.n	c5d2 <_free_r+0x86>
    c6c0:	cmp	r2, #84	; 0x54
    c6c2:	bhi.n	c6d2 <_free_r+0x186>
    c6c4:	lsrs	r2, r3, #12
    c6c6:	add.w	r7, r2, #111	; 0x6f
    c6ca:	lsls	r7, r7, #1
    c6cc:	add.w	r5, r2, #110	; 0x6e
    c6d0:	b.n	c5f0 <_free_r+0xa4>
    c6d2:	cmp.w	r2, #340	; 0x154
    c6d6:	bhi.n	c6e6 <_free_r+0x19a>
    c6d8:	lsrs	r2, r3, #15
    c6da:	add.w	r7, r2, #120	; 0x78
    c6de:	lsls	r7, r7, #1
    c6e0:	add.w	r5, r2, #119	; 0x77
    c6e4:	b.n	c5f0 <_free_r+0xa4>
    c6e6:	movw	r0, #1364	; 0x554
    c6ea:	cmp	r2, r0
    c6ec:	bhi.n	c6fc <_free_r+0x1b0>
    c6ee:	lsrs	r2, r3, #18
    c6f0:	add.w	r7, r2, #125	; 0x7d
    c6f4:	lsls	r7, r7, #1
    c6f6:	add.w	r5, r2, #124	; 0x7c
    c6fa:	b.n	c5f0 <_free_r+0xa4>
    c6fc:	movs	r7, #254	; 0xfe
    c6fe:	movs	r5, #126	; 0x7e
    c700:	b.n	c5f0 <_free_r+0xa4>
    c702:	orr.w	r2, r3, #1
    c706:	str	r2, [r4, #4]
    c708:	str	r3, [r4, r3]
    c70a:	b.n	c5d2 <_free_r+0x86>
    c70c:	.word	0x20001780
    c710:	.word	0x20001788
    c714:	.word	0x20001b88
    c718:	.word	0x20002344

0000c71c <__sfvwrite_r>:
    c71c:	ldr	r3, [r2, #8]
    c71e:	cmp	r3, #0
    c720:	beq.n	c810 <__sfvwrite_r+0xf4>
    c722:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c726:	ldrh	r3, [r1, #12]
    c728:	sub	sp, #20
    c72a:	mov	r4, r1
    c72c:	lsls	r1, r3, #28
    c72e:	str	r0, [sp, #4]
    c730:	mov	r6, r2
    c732:	bpl.n	c788 <__sfvwrite_r+0x6c>
    c734:	ldr	r2, [r4, #16]
    c736:	cbz	r2, c788 <__sfvwrite_r+0x6c>
    c738:	and.w	r8, r3, #2
    c73c:	uxth.w	r0, r8
    c740:	ldr	r5, [r6, #0]
    c742:	cmp	r0, #0
    c744:	beq.n	c7a6 <__sfvwrite_r+0x8a>
    c746:	mov.w	r9, #0
    c74a:	ldr	r7, [pc, #720]	; (ca1c <__sfvwrite_r+0x300>)
    c74c:	mov	r8, r9
    c74e:	mov	sl, r6
    c750:	cmp	r8, r7
    c752:	mov	r3, r8
    c754:	mov	r2, r9
    c756:	it	cs
    c758:	movcs	r3, r7
    c75a:	ldr	r0, [sp, #4]
    c75c:	cmp.w	r8, #0
    c760:	beq.n	c804 <__sfvwrite_r+0xe8>
    c762:	ldr	r1, [r4, #28]
    c764:	ldr	r6, [r4, #36]	; 0x24
    c766:	blx	r6
    c768:	cmp	r0, #0
    c76a:	ble.n	c850 <__sfvwrite_r+0x134>
    c76c:	ldr.w	r3, [sl, #8]
    c770:	subs	r3, r3, r0
    c772:	add	r9, r0
    c774:	rsb	r8, r0, r8
    c778:	str.w	r3, [sl, #8]
    c77c:	cmp	r3, #0
    c77e:	bne.n	c750 <__sfvwrite_r+0x34>
    c780:	movs	r0, #0
    c782:	add	sp, #20
    c784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c788:	mov	r1, r4
    c78a:	ldr	r0, [sp, #4]
    c78c:	bl	b2f8 <__swsetup_r>
    c790:	cmp	r0, #0
    c792:	bne.w	ca0a <__sfvwrite_r+0x2ee>
    c796:	ldrh	r3, [r4, #12]
    c798:	ldr	r5, [r6, #0]
    c79a:	and.w	r8, r3, #2
    c79e:	uxth.w	r0, r8
    c7a2:	cmp	r0, #0
    c7a4:	bne.n	c746 <__sfvwrite_r+0x2a>
    c7a6:	ands.w	r9, r3, #1
    c7aa:	bne.n	c864 <__sfvwrite_r+0x148>
    c7ac:	mov	r7, r9
    c7ae:	str	r6, [sp, #8]
    c7b0:	cbz	r7, c7fa <__sfvwrite_r+0xde>
    c7b2:	lsls	r2, r3, #22
    c7b4:	ldr.w	r8, [r4, #8]
    c7b8:	bpl.n	c814 <__sfvwrite_r+0xf8>
    c7ba:	cmp	r7, r8
    c7bc:	mov	sl, r8
    c7be:	bcc.w	c90a <__sfvwrite_r+0x1ee>
    c7c2:	tst.w	r3, #1152	; 0x480
    c7c6:	bne.w	c92c <__sfvwrite_r+0x210>
    c7ca:	ldr	r0, [r4, #0]
    c7cc:	mov	r2, sl
    c7ce:	mov	r1, r9
    c7d0:	bl	87a8 <memmove>
    c7d4:	ldr	r0, [r4, #8]
    c7d6:	ldr	r3, [r4, #0]
    c7d8:	rsb	r0, r8, r0
    c7dc:	add	r3, sl
    c7de:	str	r0, [r4, #8]
    c7e0:	str	r3, [r4, #0]
    c7e2:	mov	r0, r7
    c7e4:	ldr	r2, [sp, #8]
    c7e6:	ldr	r3, [r2, #8]
    c7e8:	subs	r3, r3, r0
    c7ea:	add	r9, r0
    c7ec:	subs	r7, r7, r0
    c7ee:	str	r3, [r2, #8]
    c7f0:	cmp	r3, #0
    c7f2:	beq.n	c780 <__sfvwrite_r+0x64>
    c7f4:	ldrh	r3, [r4, #12]
    c7f6:	cmp	r7, #0
    c7f8:	bne.n	c7b2 <__sfvwrite_r+0x96>
    c7fa:	ldr.w	r9, [r5]
    c7fe:	ldr	r7, [r5, #4]
    c800:	adds	r5, #8
    c802:	b.n	c7b0 <__sfvwrite_r+0x94>
    c804:	ldr.w	r9, [r5]
    c808:	ldr.w	r8, [r5, #4]
    c80c:	adds	r5, #8
    c80e:	b.n	c750 <__sfvwrite_r+0x34>
    c810:	movs	r0, #0
    c812:	bx	lr
    c814:	ldr	r0, [r4, #0]
    c816:	ldr	r3, [r4, #16]
    c818:	cmp	r0, r3
    c81a:	bhi.n	c824 <__sfvwrite_r+0x108>
    c81c:	ldr	r1, [r4, #20]
    c81e:	cmp	r7, r1
    c820:	bcs.w	c992 <__sfvwrite_r+0x276>
    c824:	cmp	r8, r7
    c826:	it	cs
    c828:	movcs	r8, r7
    c82a:	mov	r2, r8
    c82c:	mov	r1, r9
    c82e:	bl	87a8 <memmove>
    c832:	ldr	r3, [r4, #8]
    c834:	ldr	r2, [r4, #0]
    c836:	rsb	r3, r8, r3
    c83a:	add	r2, r8
    c83c:	str	r3, [r4, #8]
    c83e:	str	r2, [r4, #0]
    c840:	cmp	r3, #0
    c842:	bne.n	c8d8 <__sfvwrite_r+0x1bc>
    c844:	mov	r1, r4
    c846:	ldr	r0, [sp, #4]
    c848:	bl	c2b4 <_fflush_r>
    c84c:	cmp	r0, #0
    c84e:	beq.n	c8d8 <__sfvwrite_r+0x1bc>
    c850:	ldrsh.w	r3, [r4, #12]
    c854:	orr.w	r3, r3, #64	; 0x40
    c858:	mov.w	r0, #4294967295
    c85c:	strh	r3, [r4, #12]
    c85e:	add	sp, #20
    c860:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c864:	mov	r8, r0
    c866:	str	r0, [sp, #8]
    c868:	mov	sl, r0
    c86a:	mov	r9, r0
    c86c:	cmp.w	r9, #0
    c870:	beq.n	c8c8 <__sfvwrite_r+0x1ac>
    c872:	ldr	r3, [sp, #8]
    c874:	cmp	r3, #0
    c876:	beq.n	c912 <__sfvwrite_r+0x1f6>
    c878:	ldr	r0, [r4, #0]
    c87a:	ldr	r3, [r4, #16]
    c87c:	ldr	r2, [r4, #20]
    c87e:	cmp	r8, r9
    c880:	mov	fp, r8
    c882:	it	cs
    c884:	movcs	fp, r9
    c886:	cmp	r0, r3
    c888:	mov	r7, fp
    c88a:	bls.n	c896 <__sfvwrite_r+0x17a>
    c88c:	ldr	r3, [r4, #8]
    c88e:	add	r3, r2
    c890:	cmp	fp, r3
    c892:	bgt.w	c9b6 <__sfvwrite_r+0x29a>
    c896:	cmp	fp, r2
    c898:	blt.n	c8dc <__sfvwrite_r+0x1c0>
    c89a:	mov	r3, r2
    c89c:	ldr	r7, [r4, #36]	; 0x24
    c89e:	ldr	r1, [r4, #28]
    c8a0:	ldr	r0, [sp, #4]
    c8a2:	mov	r2, sl
    c8a4:	blx	r7
    c8a6:	subs	r7, r0, #0
    c8a8:	ble.n	c850 <__sfvwrite_r+0x134>
    c8aa:	subs.w	r8, r8, r7
    c8ae:	beq.n	c8f8 <__sfvwrite_r+0x1dc>
    c8b0:	ldr	r3, [r6, #8]
    c8b2:	subs	r3, r3, r7
    c8b4:	add	sl, r7
    c8b6:	rsb	r9, r7, r9
    c8ba:	str	r3, [r6, #8]
    c8bc:	cmp	r3, #0
    c8be:	beq.w	c780 <__sfvwrite_r+0x64>
    c8c2:	cmp.w	r9, #0
    c8c6:	bne.n	c872 <__sfvwrite_r+0x156>
    c8c8:	movs	r3, #0
    c8ca:	ldr.w	sl, [r5]
    c8ce:	ldr.w	r9, [r5, #4]
    c8d2:	str	r3, [sp, #8]
    c8d4:	adds	r5, #8
    c8d6:	b.n	c86c <__sfvwrite_r+0x150>
    c8d8:	mov	r0, r8
    c8da:	b.n	c7e4 <__sfvwrite_r+0xc8>
    c8dc:	mov	r2, fp
    c8de:	mov	r1, sl
    c8e0:	bl	87a8 <memmove>
    c8e4:	ldr	r2, [r4, #8]
    c8e6:	ldr	r3, [r4, #0]
    c8e8:	rsb	r2, fp, r2
    c8ec:	add	r3, fp
    c8ee:	subs.w	r8, r8, r7
    c8f2:	str	r2, [r4, #8]
    c8f4:	str	r3, [r4, #0]
    c8f6:	bne.n	c8b0 <__sfvwrite_r+0x194>
    c8f8:	mov	r1, r4
    c8fa:	ldr	r0, [sp, #4]
    c8fc:	bl	c2b4 <_fflush_r>
    c900:	cmp	r0, #0
    c902:	bne.n	c850 <__sfvwrite_r+0x134>
    c904:	str.w	r8, [sp, #8]
    c908:	b.n	c8b0 <__sfvwrite_r+0x194>
    c90a:	ldr	r0, [r4, #0]
    c90c:	mov	r8, r7
    c90e:	mov	sl, r7
    c910:	b.n	c7cc <__sfvwrite_r+0xb0>
    c912:	mov	r2, r9
    c914:	movs	r1, #10
    c916:	mov	r0, sl
    c918:	bl	cb80 <memchr>
    c91c:	cmp	r0, #0
    c91e:	beq.n	ca00 <__sfvwrite_r+0x2e4>
    c920:	adds	r0, #1
    c922:	movs	r3, #1
    c924:	rsb	r8, sl, r0
    c928:	str	r3, [sp, #8]
    c92a:	b.n	c878 <__sfvwrite_r+0x15c>
    c92c:	ldr	r2, [r4, #20]
    c92e:	ldr	r0, [r4, #0]
    c930:	ldr	r1, [r4, #16]
    c932:	add.w	r8, r2, r2, lsl #1
    c936:	rsb	sl, r1, r0
    c93a:	add.w	r8, r8, r8, lsr #31
    c93e:	add.w	r0, sl, #1
    c942:	mov.w	r8, r8, asr #1
    c946:	add	r0, r7
    c948:	cmp	r0, r8
    c94a:	mov	r2, r8
    c94c:	itt	hi
    c94e:	movhi	r8, r0
    c950:	movhi	r2, r8
    c952:	lsls	r3, r3, #21
    c954:	bpl.n	c9dc <__sfvwrite_r+0x2c0>
    c956:	mov	r1, r2
    c958:	ldr	r0, [sp, #4]
    c95a:	bl	820c <_malloc_r>
    c95e:	mov	fp, r0
    c960:	cmp	r0, #0
    c962:	beq.n	ca10 <__sfvwrite_r+0x2f4>
    c964:	mov	r2, sl
    c966:	ldr	r1, [r4, #16]
    c968:	bl	2b94 <memcpy>
    c96c:	ldrh	r3, [r4, #12]
    c96e:	bic.w	r3, r3, #1152	; 0x480
    c972:	orr.w	r3, r3, #128	; 0x80
    c976:	strh	r3, [r4, #12]
    c978:	rsb	r3, sl, r8
    c97c:	add.w	r0, fp, sl
    c980:	str.w	r8, [r4, #20]
    c984:	str.w	fp, [r4, #16]
    c988:	str	r0, [r4, #0]
    c98a:	str	r3, [r4, #8]
    c98c:	mov	r8, r7
    c98e:	mov	sl, r7
    c990:	b.n	c7cc <__sfvwrite_r+0xb0>
    c992:	mvn.w	r3, #2147483648	; 0x80000000
    c996:	cmp	r3, r7
    c998:	it	cs
    c99a:	movcs	r3, r7
    c99c:	mov	r2, r9
    c99e:	sdiv	r3, r3, r1
    c9a2:	ldr	r0, [sp, #4]
    c9a4:	ldr	r6, [r4, #36]	; 0x24
    c9a6:	mul.w	r3, r1, r3
    c9aa:	ldr	r1, [r4, #28]
    c9ac:	blx	r6
    c9ae:	cmp	r0, #0
    c9b0:	bgt.w	c7e4 <__sfvwrite_r+0xc8>
    c9b4:	b.n	c850 <__sfvwrite_r+0x134>
    c9b6:	mov	r2, r3
    c9b8:	mov	r1, sl
    c9ba:	str	r3, [sp, #12]
    c9bc:	bl	87a8 <memmove>
    c9c0:	ldr	r2, [r4, #0]
    c9c2:	ldr	r3, [sp, #12]
    c9c4:	ldr	r0, [sp, #4]
    c9c6:	add	r2, r3
    c9c8:	str	r2, [r4, #0]
    c9ca:	mov	r1, r4
    c9cc:	bl	c2b4 <_fflush_r>
    c9d0:	ldr	r3, [sp, #12]
    c9d2:	cmp	r0, #0
    c9d4:	bne.w	c850 <__sfvwrite_r+0x134>
    c9d8:	mov	r7, r3
    c9da:	b.n	c8aa <__sfvwrite_r+0x18e>
    c9dc:	ldr	r0, [sp, #4]
    c9de:	bl	8914 <_realloc_r>
    c9e2:	mov	fp, r0
    c9e4:	cmp	r0, #0
    c9e6:	bne.n	c978 <__sfvwrite_r+0x25c>
    c9e8:	ldr	r5, [sp, #4]
    c9ea:	ldr	r1, [r4, #16]
    c9ec:	mov	r0, r5
    c9ee:	bl	c54c <_free_r>
    c9f2:	ldrsh.w	r3, [r4, #12]
    c9f6:	movs	r2, #12
    c9f8:	bic.w	r3, r3, #128	; 0x80
    c9fc:	str	r2, [r5, #0]
    c9fe:	b.n	c854 <__sfvwrite_r+0x138>
    ca00:	movs	r3, #1
    ca02:	add.w	r8, r9, #1
    ca06:	str	r3, [sp, #8]
    ca08:	b.n	c878 <__sfvwrite_r+0x15c>
    ca0a:	mov.w	r0, #4294967295
    ca0e:	b.n	c782 <__sfvwrite_r+0x66>
    ca10:	ldr	r2, [sp, #4]
    ca12:	movs	r3, #12
    ca14:	str	r3, [r2, #0]
    ca16:	ldrsh.w	r3, [r4, #12]
    ca1a:	b.n	c854 <__sfvwrite_r+0x138>
    ca1c:	.word	0x7ffffc00

0000ca20 <_fwalk_reent>:
    ca20:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca24:	adds.w	r7, r0, #736	; 0x2e0
    ca28:	beq.n	ca6a <_fwalk_reent+0x4a>
    ca2a:	mov	r8, r1
    ca2c:	mov	r6, r0
    ca2e:	mov.w	r9, #0
    ca32:	ldr	r5, [r7, #4]
    ca34:	ldr	r4, [r7, #8]
    ca36:	subs	r5, #1
    ca38:	bmi.n	ca5e <_fwalk_reent+0x3e>
    ca3a:	ldrh	r3, [r4, #12]
    ca3c:	cmp	r3, #1
    ca3e:	add.w	r5, r5, #4294967295
    ca42:	bls.n	ca56 <_fwalk_reent+0x36>
    ca44:	ldrsh.w	r3, [r4, #14]
    ca48:	adds	r3, #1
    ca4a:	mov	r1, r4
    ca4c:	mov	r0, r6
    ca4e:	beq.n	ca56 <_fwalk_reent+0x36>
    ca50:	blx	r8
    ca52:	orr.w	r9, r9, r0
    ca56:	adds	r3, r5, #1
    ca58:	add.w	r4, r4, #104	; 0x68
    ca5c:	bne.n	ca3a <_fwalk_reent+0x1a>
    ca5e:	ldr	r7, [r7, #0]
    ca60:	cmp	r7, #0
    ca62:	bne.n	ca32 <_fwalk_reent+0x12>
    ca64:	mov	r0, r9
    ca66:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca6a:	mov	r9, r7
    ca6c:	mov	r0, r9
    ca6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca72:	nop

0000ca74 <_localeconv_r>:
    ca74:	ldr	r2, [pc, #16]	; (ca88 <_localeconv_r+0x14>)
    ca76:	ldr	r3, [pc, #20]	; (ca8c <_localeconv_r+0x18>)
    ca78:	ldr	r2, [r2, #0]
    ca7a:	ldr	r0, [r2, #52]	; 0x34
    ca7c:	cmp	r0, #0
    ca7e:	it	eq
    ca80:	moveq	r0, r3
    ca82:	adds	r0, #240	; 0xf0
    ca84:	bx	lr
    ca86:	nop
    ca88:	.word	0x20001610
    ca8c:	.word	0x20001614

0000ca90 <__swhatbuf_r>:
    ca90:	push	{r4, r5, r6, lr}
    ca92:	mov	r5, r1
    ca94:	ldrsh.w	r1, [r1, #14]
    ca98:	cmp	r1, #0
    ca9a:	sub	sp, #64	; 0x40
    ca9c:	mov	r4, r2
    ca9e:	mov	r6, r3
    caa0:	blt.n	cacc <__swhatbuf_r+0x3c>
    caa2:	add	r2, sp, #4
    caa4:	bl	d5d4 <_fstat_r>
    caa8:	cmp	r0, #0
    caaa:	blt.n	cacc <__swhatbuf_r+0x3c>
    caac:	ldr	r2, [sp, #8]
    caae:	and.w	r2, r2, #61440	; 0xf000
    cab2:	sub.w	r2, r2, #8192	; 0x2000
    cab6:	clz	r2, r2
    caba:	lsrs	r2, r2, #5
    cabc:	mov.w	r3, #1024	; 0x400
    cac0:	mov.w	r0, #2048	; 0x800
    cac4:	str	r2, [r6, #0]
    cac6:	str	r3, [r4, #0]
    cac8:	add	sp, #64	; 0x40
    caca:	pop	{r4, r5, r6, pc}
    cacc:	ldrh	r0, [r5, #12]
    cace:	and.w	r0, r0, #128	; 0x80
    cad2:	uxth	r2, r0
    cad4:	movs	r0, #0
    cad6:	str	r0, [r6, #0]
    cad8:	cbz	r2, cae2 <__swhatbuf_r+0x52>
    cada:	movs	r3, #64	; 0x40
    cadc:	str	r3, [r4, #0]
    cade:	add	sp, #64	; 0x40
    cae0:	pop	{r4, r5, r6, pc}
    cae2:	mov.w	r3, #1024	; 0x400
    cae6:	mov	r0, r2
    cae8:	str	r3, [r4, #0]
    caea:	add	sp, #64	; 0x40
    caec:	pop	{r4, r5, r6, pc}
    caee:	nop

0000caf0 <__smakebuf_r>:
    caf0:	ldrh	r2, [r1, #12]
    caf2:	lsls	r2, r2, #30
    caf4:	mov	r3, r1
    caf6:	bpl.n	cb06 <__smakebuf_r+0x16>
    caf8:	add.w	r2, r1, #67	; 0x43
    cafc:	movs	r1, #1
    cafe:	str	r2, [r3, #0]
    cb00:	str	r2, [r3, #16]
    cb02:	str	r1, [r3, #20]
    cb04:	bx	lr
    cb06:	push	{r4, r5, r6, r7, lr}
    cb08:	sub	sp, #12
    cb0a:	add	r3, sp, #4
    cb0c:	mov	r2, sp
    cb0e:	mov	r4, r1
    cb10:	mov	r5, r0
    cb12:	bl	ca90 <__swhatbuf_r>
    cb16:	ldr	r1, [sp, #0]
    cb18:	mov	r6, r0
    cb1a:	mov	r0, r5
    cb1c:	bl	820c <_malloc_r>
    cb20:	ldrsh.w	r3, [r4, #12]
    cb24:	cbz	r0, cb5c <__smakebuf_r+0x6c>
    cb26:	ldr	r2, [sp, #4]
    cb28:	ldr	r7, [pc, #72]	; (cb74 <__smakebuf_r+0x84>)
    cb2a:	ldr	r1, [sp, #0]
    cb2c:	str	r7, [r5, #60]	; 0x3c
    cb2e:	orr.w	r3, r3, #128	; 0x80
    cb32:	strh	r3, [r4, #12]
    cb34:	str	r0, [r4, #0]
    cb36:	str	r0, [r4, #16]
    cb38:	str	r1, [r4, #20]
    cb3a:	cbnz	r2, cb44 <__smakebuf_r+0x54>
    cb3c:	orrs	r3, r6
    cb3e:	strh	r3, [r4, #12]
    cb40:	add	sp, #12
    cb42:	pop	{r4, r5, r6, r7, pc}
    cb44:	mov	r0, r5
    cb46:	ldrsh.w	r1, [r4, #14]
    cb4a:	bl	d5fc <_isatty_r>
    cb4e:	ldrsh.w	r3, [r4, #12]
    cb52:	cmp	r0, #0
    cb54:	beq.n	cb3c <__smakebuf_r+0x4c>
    cb56:	orr.w	r3, r3, #1
    cb5a:	b.n	cb3c <__smakebuf_r+0x4c>
    cb5c:	lsls	r2, r3, #22
    cb5e:	bmi.n	cb40 <__smakebuf_r+0x50>
    cb60:	add.w	r2, r4, #67	; 0x43
    cb64:	orr.w	r3, r3, #2
    cb68:	movs	r1, #1
    cb6a:	strh	r3, [r4, #12]
    cb6c:	str	r2, [r4, #0]
    cb6e:	str	r2, [r4, #16]
    cb70:	str	r1, [r4, #20]
    cb72:	b.n	cb40 <__smakebuf_r+0x50>
    cb74:	.word	0x0000c2e1
	...

0000cb80 <memchr>:
    cb80:	and.w	r1, r1, #255	; 0xff
    cb84:	cmp	r2, #16
    cb86:	blt.n	cbe0 <memchr+0x60>
    cb88:	tst.w	r0, #7
    cb8c:	beq.n	cba0 <memchr+0x20>
    cb8e:	ldrb.w	r3, [r0], #1
    cb92:	subs	r2, #1
    cb94:	cmp	r3, r1
    cb96:	beq.n	cbf4 <memchr+0x74>
    cb98:	tst.w	r0, #7
    cb9c:	cbz	r2, cbf0 <memchr+0x70>
    cb9e:	bne.n	cb8e <memchr+0xe>
    cba0:	push	{r4, r5, r6, r7}
    cba2:	orr.w	r1, r1, r1, lsl #8
    cba6:	orr.w	r1, r1, r1, lsl #16
    cbaa:	bic.w	r4, r2, #7
    cbae:	mvns.w	r7, #0
    cbb2:	movs	r3, #0
    cbb4:	ldrd	r5, r6, [r0], #8
    cbb8:	subs	r4, #8
    cbba:	eor.w	r5, r5, r1
    cbbe:	eor.w	r6, r6, r1
    cbc2:	uadd8	r5, r5, r7
    cbc6:	sel	r5, r3, r7
    cbca:	uadd8	r6, r6, r7
    cbce:	sel	r6, r5, r7
    cbd2:	cbnz	r6, cbf8 <memchr+0x78>
    cbd4:	bne.n	cbb4 <memchr+0x34>
    cbd6:	pop	{r4, r5, r6, r7}
    cbd8:	and.w	r1, r1, #255	; 0xff
    cbdc:	and.w	r2, r2, #7
    cbe0:	cbz	r2, cbf0 <memchr+0x70>
    cbe2:	ldrb.w	r3, [r0], #1
    cbe6:	subs	r2, #1
    cbe8:	eor.w	r3, r3, r1
    cbec:	cbz	r3, cbf4 <memchr+0x74>
    cbee:	bne.n	cbe2 <memchr+0x62>
    cbf0:	movs	r0, #0
    cbf2:	bx	lr
    cbf4:	subs	r0, #1
    cbf6:	bx	lr
    cbf8:	cmp	r5, #0
    cbfa:	itte	eq
    cbfc:	moveq	r5, r6
    cbfe:	subeq	r0, #3
    cc00:	subne	r0, #7
    cc02:	tst.w	r5, #1
    cc06:	bne.n	cc18 <memchr+0x98>
    cc08:	adds	r0, #1
    cc0a:	tst.w	r5, #256	; 0x100
    cc0e:	ittt	eq
    cc10:	addeq	r0, #1
    cc12:	tsteq.w	r5, #98304	; 0x18000
    cc16:	addeq	r0, #1
    cc18:	pop	{r4, r5, r6, r7}
    cc1a:	subs	r0, #1
    cc1c:	bx	lr
    cc1e:	nop

0000cc20 <_Balloc>:
    cc20:	ldr	r3, [r0, #76]	; 0x4c
    cc22:	push	{r4, r5, r6, lr}
    cc24:	mov	r5, r0
    cc26:	mov	r4, r1
    cc28:	cbz	r3, cc3e <_Balloc+0x1e>
    cc2a:	ldr.w	r0, [r3, r4, lsl #2]
    cc2e:	cbz	r0, cc52 <_Balloc+0x32>
    cc30:	ldr	r2, [r0, #0]
    cc32:	str.w	r2, [r3, r4, lsl #2]
    cc36:	movs	r3, #0
    cc38:	str	r3, [r0, #16]
    cc3a:	str	r3, [r0, #12]
    cc3c:	pop	{r4, r5, r6, pc}
    cc3e:	movs	r2, #33	; 0x21
    cc40:	movs	r1, #4
    cc42:	bl	d4cc <_calloc_r>
    cc46:	str	r0, [r5, #76]	; 0x4c
    cc48:	mov	r3, r0
    cc4a:	cmp	r0, #0
    cc4c:	bne.n	cc2a <_Balloc+0xa>
    cc4e:	movs	r0, #0
    cc50:	pop	{r4, r5, r6, pc}
    cc52:	movs	r1, #1
    cc54:	lsl.w	r6, r1, r4
    cc58:	adds	r2, r6, #5
    cc5a:	mov	r0, r5
    cc5c:	lsls	r2, r2, #2
    cc5e:	bl	d4cc <_calloc_r>
    cc62:	cmp	r0, #0
    cc64:	beq.n	cc4e <_Balloc+0x2e>
    cc66:	str	r4, [r0, #4]
    cc68:	str	r6, [r0, #8]
    cc6a:	b.n	cc36 <_Balloc+0x16>

0000cc6c <_Bfree>:
    cc6c:	cbz	r1, cc7c <_Bfree+0x10>
    cc6e:	ldr	r3, [r0, #76]	; 0x4c
    cc70:	ldr	r2, [r1, #4]
    cc72:	ldr.w	r0, [r3, r2, lsl #2]
    cc76:	str	r0, [r1, #0]
    cc78:	str.w	r1, [r3, r2, lsl #2]
    cc7c:	bx	lr
    cc7e:	nop

0000cc80 <__multadd>:
    cc80:	push	{r4, r5, r6, r7, lr}
    cc82:	ldr	r4, [r1, #16]
    cc84:	sub	sp, #12
    cc86:	mov	r5, r1
    cc88:	mov	r6, r0
    cc8a:	add.w	lr, r1, #20
    cc8e:	movs	r7, #0
    cc90:	ldr.w	r0, [lr]
    cc94:	uxth	r1, r0
    cc96:	mla	r1, r2, r1, r3
    cc9a:	lsrs	r3, r1, #16
    cc9c:	lsrs	r0, r0, #16
    cc9e:	mla	r3, r2, r0, r3
    cca2:	uxth	r1, r1
    cca4:	adds	r7, #1
    cca6:	add.w	r1, r1, r3, lsl #16
    ccaa:	cmp	r4, r7
    ccac:	str.w	r1, [lr], #4
    ccb0:	mov.w	r3, r3, lsr #16
    ccb4:	bgt.n	cc90 <__multadd+0x10>
    ccb6:	cbz	r3, ccc8 <__multadd+0x48>
    ccb8:	ldr	r2, [r5, #8]
    ccba:	cmp	r4, r2
    ccbc:	bge.n	ccce <__multadd+0x4e>
    ccbe:	add.w	r2, r5, r4, lsl #2
    ccc2:	adds	r4, #1
    ccc4:	str	r3, [r2, #20]
    ccc6:	str	r4, [r5, #16]
    ccc8:	mov	r0, r5
    ccca:	add	sp, #12
    cccc:	pop	{r4, r5, r6, r7, pc}
    ccce:	ldr	r1, [r5, #4]
    ccd0:	str	r3, [sp, #4]
    ccd2:	adds	r1, #1
    ccd4:	mov	r0, r6
    ccd6:	bl	cc20 <_Balloc>
    ccda:	ldr	r2, [r5, #16]
    ccdc:	adds	r2, #2
    ccde:	add.w	r1, r5, #12
    cce2:	mov	r7, r0
    cce4:	lsls	r2, r2, #2
    cce6:	adds	r0, #12
    cce8:	bl	2b94 <memcpy>
    ccec:	ldr	r2, [r6, #76]	; 0x4c
    ccee:	ldr	r1, [r5, #4]
    ccf0:	ldr	r3, [sp, #4]
    ccf2:	ldr.w	r0, [r2, r1, lsl #2]
    ccf6:	str	r0, [r5, #0]
    ccf8:	str.w	r5, [r2, r1, lsl #2]
    ccfc:	mov	r5, r7
    ccfe:	b.n	ccbe <__multadd+0x3e>

0000cd00 <__hi0bits>:
    cd00:	lsrs	r3, r0, #16
    cd02:	lsls	r3, r3, #16
    cd04:	cbnz	r3, cd34 <__hi0bits+0x34>
    cd06:	lsls	r0, r0, #16
    cd08:	movs	r3, #16
    cd0a:	tst.w	r0, #4278190080	; 0xff000000
    cd0e:	itt	eq
    cd10:	lsleq	r0, r0, #8
    cd12:	addeq	r3, #8
    cd14:	tst.w	r0, #4026531840	; 0xf0000000
    cd18:	itt	eq
    cd1a:	lsleq	r0, r0, #4
    cd1c:	addeq	r3, #4
    cd1e:	tst.w	r0, #3221225472	; 0xc0000000
    cd22:	itt	eq
    cd24:	lsleq	r0, r0, #2
    cd26:	addeq	r3, #2
    cd28:	cmp	r0, #0
    cd2a:	blt.n	cd3c <__hi0bits+0x3c>
    cd2c:	lsls	r2, r0, #1
    cd2e:	bmi.n	cd38 <__hi0bits+0x38>
    cd30:	movs	r0, #32
    cd32:	bx	lr
    cd34:	movs	r3, #0
    cd36:	b.n	cd0a <__hi0bits+0xa>
    cd38:	adds	r0, r3, #1
    cd3a:	bx	lr
    cd3c:	mov	r0, r3
    cd3e:	bx	lr

0000cd40 <__lo0bits>:
    cd40:	ldr	r3, [r0, #0]
    cd42:	ands.w	r2, r3, #7
    cd46:	beq.n	cd58 <__lo0bits+0x18>
    cd48:	lsls	r1, r3, #31
    cd4a:	bmi.n	cd8e <__lo0bits+0x4e>
    cd4c:	lsls	r2, r3, #30
    cd4e:	bmi.n	cd92 <__lo0bits+0x52>
    cd50:	lsrs	r3, r3, #2
    cd52:	str	r3, [r0, #0]
    cd54:	movs	r0, #2
    cd56:	bx	lr
    cd58:	uxth	r1, r3
    cd5a:	cbnz	r1, cd60 <__lo0bits+0x20>
    cd5c:	lsrs	r3, r3, #16
    cd5e:	movs	r2, #16
    cd60:	tst.w	r3, #255	; 0xff
    cd64:	itt	eq
    cd66:	lsreq	r3, r3, #8
    cd68:	addeq	r2, #8
    cd6a:	lsls	r1, r3, #28
    cd6c:	itt	eq
    cd6e:	lsreq	r3, r3, #4
    cd70:	addeq	r2, #4
    cd72:	lsls	r1, r3, #30
    cd74:	itt	eq
    cd76:	lsreq	r3, r3, #2
    cd78:	addeq	r2, #2
    cd7a:	lsls	r1, r3, #31
    cd7c:	bmi.n	cd88 <__lo0bits+0x48>
    cd7e:	lsrs	r3, r3, #1
    cd80:	bne.n	cd86 <__lo0bits+0x46>
    cd82:	movs	r0, #32
    cd84:	bx	lr
    cd86:	adds	r2, #1
    cd88:	str	r3, [r0, #0]
    cd8a:	mov	r0, r2
    cd8c:	bx	lr
    cd8e:	movs	r0, #0
    cd90:	bx	lr
    cd92:	lsrs	r3, r3, #1
    cd94:	str	r3, [r0, #0]
    cd96:	movs	r0, #1
    cd98:	bx	lr
    cd9a:	nop

0000cd9c <__i2b>:
    cd9c:	push	{r4, lr}
    cd9e:	mov	r4, r1
    cda0:	movs	r1, #1
    cda2:	bl	cc20 <_Balloc>
    cda6:	movs	r2, #1
    cda8:	str	r4, [r0, #20]
    cdaa:	str	r2, [r0, #16]
    cdac:	pop	{r4, pc}
    cdae:	nop

0000cdb0 <__multiply>:
    cdb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdb4:	ldr	r5, [r1, #16]
    cdb6:	ldr	r7, [r2, #16]
    cdb8:	cmp	r5, r7
    cdba:	sub	sp, #12
    cdbc:	mov	r4, r1
    cdbe:	mov	r6, r2
    cdc0:	bge.n	cdcc <__multiply+0x1c>
    cdc2:	mov	r2, r5
    cdc4:	mov	r4, r6
    cdc6:	mov	r5, r7
    cdc8:	mov	r6, r1
    cdca:	mov	r7, r2
    cdcc:	ldr	r3, [r4, #8]
    cdce:	ldr	r1, [r4, #4]
    cdd0:	add.w	r8, r5, r7
    cdd4:	cmp	r8, r3
    cdd6:	it	gt
    cdd8:	addgt	r1, #1
    cdda:	bl	cc20 <_Balloc>
    cdde:	add.w	ip, r0, #20
    cde2:	add.w	r9, ip, r8, lsl #2
    cde6:	cmp	ip, r9
    cde8:	str	r0, [sp, #0]
    cdea:	bcs.n	cdf8 <__multiply+0x48>
    cdec:	mov	r3, ip
    cdee:	movs	r1, #0
    cdf0:	str.w	r1, [r3], #4
    cdf4:	cmp	r9, r3
    cdf6:	bhi.n	cdf0 <__multiply+0x40>
    cdf8:	add.w	r2, r6, #20
    cdfc:	add.w	sl, r2, r7, lsl #2
    ce00:	add.w	r3, r4, #20
    ce04:	cmp	r2, sl
    ce06:	add.w	lr, r3, r5, lsl #2
    ce0a:	bcs.n	ceb6 <__multiply+0x106>
    ce0c:	str.w	r9, [sp, #4]
    ce10:	mov	r9, r3
    ce12:	ldr.w	r3, [r2], #4
    ce16:	uxth.w	fp, r3
    ce1a:	cmp.w	fp, #0
    ce1e:	beq.n	ce62 <__multiply+0xb2>
    ce20:	movs	r0, #0
    ce22:	mov	r7, r9
    ce24:	mov	r6, ip
    ce26:	mov	r5, r0
    ce28:	b.n	ce2c <__multiply+0x7c>
    ce2a:	mov	r6, r3
    ce2c:	ldr.w	r4, [r7], #4
    ce30:	ldr	r0, [r6, #0]
    ce32:	uxth	r1, r4
    ce34:	uxth	r3, r0
    ce36:	mla	r1, fp, r1, r3
    ce3a:	lsrs	r4, r4, #16
    ce3c:	lsrs	r0, r0, #16
    ce3e:	adds	r3, r1, r5
    ce40:	mla	r0, fp, r4, r0
    ce44:	add.w	r0, r0, r3, lsr #16
    ce48:	uxth	r1, r3
    ce4a:	mov	r3, r6
    ce4c:	orr.w	r1, r1, r0, lsl #16
    ce50:	cmp	lr, r7
    ce52:	mov.w	r5, r0, lsr #16
    ce56:	str.w	r1, [r3], #4
    ce5a:	bhi.n	ce2a <__multiply+0x7a>
    ce5c:	str	r5, [r6, #4]
    ce5e:	ldr.w	r3, [r2, #-4]
    ce62:	movs.w	fp, r3, lsr #16
    ce66:	beq.n	ceaa <__multiply+0xfa>
    ce68:	ldr.w	r3, [ip]
    ce6c:	mov	r7, ip
    ce6e:	mov	r0, r3
    ce70:	mov	r5, r9
    ce72:	movs	r1, #0
    ce74:	b.n	ce78 <__multiply+0xc8>
    ce76:	mov	r7, r6
    ce78:	ldrh	r4, [r5, #0]
    ce7a:	lsrs	r0, r0, #16
    ce7c:	mla	r0, fp, r4, r0
    ce80:	add	r1, r0
    ce82:	uxth	r4, r3
    ce84:	mov	r6, r7
    ce86:	orr.w	r3, r4, r1, lsl #16
    ce8a:	str.w	r3, [r6], #4
    ce8e:	ldr	r0, [r7, #4]
    ce90:	ldr.w	r4, [r5], #4
    ce94:	uxth	r3, r0
    ce96:	lsrs	r4, r4, #16
    ce98:	mla	r4, fp, r4, r3
    ce9c:	add.w	r3, r4, r1, lsr #16
    cea0:	cmp	lr, r5
    cea2:	mov.w	r1, r3, lsr #16
    cea6:	bhi.n	ce76 <__multiply+0xc6>
    cea8:	str	r3, [r7, #4]
    ceaa:	cmp	sl, r2
    ceac:	add.w	ip, ip, #4
    ceb0:	bhi.n	ce12 <__multiply+0x62>
    ceb2:	ldr.w	r9, [sp, #4]
    ceb6:	cmp.w	r8, #0
    ceba:	ble.n	ced4 <__multiply+0x124>
    cebc:	ldr.w	r3, [r9, #-4]
    cec0:	sub.w	r9, r9, #4
    cec4:	cbz	r3, cece <__multiply+0x11e>
    cec6:	b.n	ced4 <__multiply+0x124>
    cec8:	ldr.w	r3, [r9, #-4]!
    cecc:	cbnz	r3, ced4 <__multiply+0x124>
    cece:	subs.w	r8, r8, #1
    ced2:	bne.n	cec8 <__multiply+0x118>
    ced4:	ldr	r0, [sp, #0]
    ced6:	str.w	r8, [r0, #16]
    ceda:	add	sp, #12
    cedc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cee0 <__pow5mult>:
    cee0:	ands.w	r3, r2, #3
    cee4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cee8:	mov	r4, r2
    ceea:	mov	r7, r0
    ceec:	bne.n	cf4c <__pow5mult+0x6c>
    ceee:	mov	r6, r1
    cef0:	asrs	r4, r4, #2
    cef2:	beq.n	cf2e <__pow5mult+0x4e>
    cef4:	ldr	r5, [r7, #72]	; 0x48
    cef6:	cbz	r5, cf5e <__pow5mult+0x7e>
    cef8:	lsls	r3, r4, #31
    cefa:	mov.w	r8, #0
    cefe:	bmi.n	cf0e <__pow5mult+0x2e>
    cf00:	asrs	r4, r4, #1
    cf02:	beq.n	cf2e <__pow5mult+0x4e>
    cf04:	ldr	r0, [r5, #0]
    cf06:	cbz	r0, cf34 <__pow5mult+0x54>
    cf08:	mov	r5, r0
    cf0a:	lsls	r3, r4, #31
    cf0c:	bpl.n	cf00 <__pow5mult+0x20>
    cf0e:	mov	r2, r5
    cf10:	mov	r1, r6
    cf12:	mov	r0, r7
    cf14:	bl	cdb0 <__multiply>
    cf18:	cbz	r6, cf48 <__pow5mult+0x68>
    cf1a:	ldr	r2, [r6, #4]
    cf1c:	ldr	r3, [r7, #76]	; 0x4c
    cf1e:	asrs	r4, r4, #1
    cf20:	ldr.w	r1, [r3, r2, lsl #2]
    cf24:	str	r1, [r6, #0]
    cf26:	str.w	r6, [r3, r2, lsl #2]
    cf2a:	mov	r6, r0
    cf2c:	bne.n	cf04 <__pow5mult+0x24>
    cf2e:	mov	r0, r6
    cf30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf34:	mov	r2, r5
    cf36:	mov	r1, r5
    cf38:	mov	r0, r7
    cf3a:	bl	cdb0 <__multiply>
    cf3e:	str	r0, [r5, #0]
    cf40:	str.w	r8, [r0]
    cf44:	mov	r5, r0
    cf46:	b.n	cf0a <__pow5mult+0x2a>
    cf48:	mov	r6, r0
    cf4a:	b.n	cf00 <__pow5mult+0x20>
    cf4c:	subs	r2, r3, #1
    cf4e:	ldr	r5, [pc, #44]	; (cf7c <__pow5mult+0x9c>)
    cf50:	movs	r3, #0
    cf52:	ldr.w	r2, [r5, r2, lsl #2]
    cf56:	bl	cc80 <__multadd>
    cf5a:	mov	r6, r0
    cf5c:	b.n	cef0 <__pow5mult+0x10>
    cf5e:	movs	r1, #1
    cf60:	mov	r0, r7
    cf62:	bl	cc20 <_Balloc>
    cf66:	movw	r1, #625	; 0x271
    cf6a:	movs	r2, #1
    cf6c:	movs	r3, #0
    cf6e:	str	r1, [r0, #20]
    cf70:	str	r2, [r0, #16]
    cf72:	mov	r5, r0
    cf74:	str	r0, [r7, #72]	; 0x48
    cf76:	str	r3, [r0, #0]
    cf78:	b.n	cef8 <__pow5mult+0x18>
    cf7a:	nop
    cf7c:	.word	0x20001190

0000cf80 <__lshift>:
    cf80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf84:	mov	r9, r2
    cf86:	ldr	r2, [r1, #16]
    cf88:	ldr	r3, [r1, #8]
    cf8a:	mov.w	r4, r9, asr #5
    cf8e:	add.w	r8, r4, r2
    cf92:	add.w	r5, r8, #1
    cf96:	cmp	r5, r3
    cf98:	mov	r6, r1
    cf9a:	mov	sl, r0
    cf9c:	ldr	r1, [r1, #4]
    cf9e:	ble.n	cfaa <__lshift+0x2a>
    cfa0:	lsls	r3, r3, #1
    cfa2:	cmp	r5, r3
    cfa4:	add.w	r1, r1, #1
    cfa8:	bgt.n	cfa0 <__lshift+0x20>
    cfaa:	mov	r0, sl
    cfac:	bl	cc20 <_Balloc>
    cfb0:	cmp	r4, #0
    cfb2:	add.w	r2, r0, #20
    cfb6:	ble.n	d02a <__lshift+0xaa>
    cfb8:	add.w	r3, r2, r4, lsl #2
    cfbc:	movs	r1, #0
    cfbe:	str.w	r1, [r2], #4
    cfc2:	cmp	r3, r2
    cfc4:	bne.n	cfbe <__lshift+0x3e>
    cfc6:	ldr	r4, [r6, #16]
    cfc8:	add.w	r1, r6, #20
    cfcc:	ands.w	r9, r9, #31
    cfd0:	add.w	lr, r1, r4, lsl #2
    cfd4:	beq.n	d01a <__lshift+0x9a>
    cfd6:	rsb	r2, r9, #32
    cfda:	movs	r4, #0
    cfdc:	ldr	r7, [r1, #0]
    cfde:	lsl.w	ip, r7, r9
    cfe2:	orr.w	r4, ip, r4
    cfe6:	mov	ip, r3
    cfe8:	str.w	r4, [r3], #4
    cfec:	ldr.w	r4, [r1], #4
    cff0:	cmp	lr, r1
    cff2:	lsr.w	r4, r4, r2
    cff6:	bhi.n	cfdc <__lshift+0x5c>
    cff8:	str.w	r4, [ip, #4]
    cffc:	cbz	r4, d002 <__lshift+0x82>
    cffe:	add.w	r5, r8, #2
    d002:	ldr.w	r3, [sl, #76]	; 0x4c
    d006:	ldr	r2, [r6, #4]
    d008:	subs	r5, #1
    d00a:	ldr.w	r1, [r3, r2, lsl #2]
    d00e:	str	r5, [r0, #16]
    d010:	str	r1, [r6, #0]
    d012:	str.w	r6, [r3, r2, lsl #2]
    d016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d01a:	subs	r3, #4
    d01c:	ldr.w	r2, [r1], #4
    d020:	str.w	r2, [r3, #4]!
    d024:	cmp	lr, r1
    d026:	bhi.n	d01c <__lshift+0x9c>
    d028:	b.n	d002 <__lshift+0x82>
    d02a:	mov	r3, r2
    d02c:	b.n	cfc6 <__lshift+0x46>
    d02e:	nop

0000d030 <__mcmp>:
    d030:	ldr	r2, [r0, #16]
    d032:	ldr	r3, [r1, #16]
    d034:	subs	r2, r2, r3
    d036:	bne.n	d060 <__mcmp+0x30>
    d038:	lsls	r3, r3, #2
    d03a:	adds	r0, #20
    d03c:	adds	r1, #20
    d03e:	add	r1, r3
    d040:	push	{r4}
    d042:	add	r3, r0
    d044:	b.n	d04a <__mcmp+0x1a>
    d046:	cmp	r0, r3
    d048:	bcs.n	d064 <__mcmp+0x34>
    d04a:	ldr.w	r4, [r3, #-4]!
    d04e:	ldr.w	r2, [r1, #-4]!
    d052:	cmp	r4, r2
    d054:	beq.n	d046 <__mcmp+0x16>
    d056:	bcc.n	d06c <__mcmp+0x3c>
    d058:	movs	r0, #1
    d05a:	ldr.w	r4, [sp], #4
    d05e:	bx	lr
    d060:	mov	r0, r2
    d062:	bx	lr
    d064:	movs	r0, #0
    d066:	ldr.w	r4, [sp], #4
    d06a:	bx	lr
    d06c:	mov.w	r0, #4294967295
    d070:	b.n	d05a <__mcmp+0x2a>
    d072:	nop

0000d074 <__mdiff>:
    d074:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d078:	ldr	r3, [r1, #16]
    d07a:	mov	r7, r1
    d07c:	ldr	r1, [r2, #16]
    d07e:	subs	r3, r3, r1
    d080:	cmp	r3, #0
    d082:	mov	r8, r2
    d084:	bne.n	d0b6 <__mdiff+0x42>
    d086:	lsls	r1, r1, #2
    d088:	add.w	r2, r7, #20
    d08c:	add.w	r5, r8, #20
    d090:	adds	r3, r2, r1
    d092:	add	r1, r5
    d094:	b.n	d09a <__mdiff+0x26>
    d096:	cmp	r2, r3
    d098:	bcs.n	d158 <__mdiff+0xe4>
    d09a:	ldr.w	r6, [r3, #-4]!
    d09e:	ldr.w	r4, [r1, #-4]!
    d0a2:	cmp	r6, r4
    d0a4:	beq.n	d096 <__mdiff+0x22>
    d0a6:	bcs.n	d16a <__mdiff+0xf6>
    d0a8:	mov	r3, r7
    d0aa:	mov	r4, r2
    d0ac:	mov	r7, r8
    d0ae:	mov.w	r9, #1
    d0b2:	mov	r8, r3
    d0b4:	b.n	d0c4 <__mdiff+0x50>
    d0b6:	blt.n	d174 <__mdiff+0x100>
    d0b8:	add.w	r5, r7, #20
    d0bc:	add.w	r4, r2, #20
    d0c0:	mov.w	r9, #0
    d0c4:	ldr	r1, [r7, #4]
    d0c6:	bl	cc20 <_Balloc>
    d0ca:	ldr.w	r3, [r8, #16]
    d0ce:	ldr	r6, [r7, #16]
    d0d0:	str.w	r9, [r0, #12]
    d0d4:	add.w	ip, r4, r3, lsl #2
    d0d8:	mov	lr, r4
    d0da:	add.w	r7, r5, r6, lsl #2
    d0de:	add.w	r4, r0, #20
    d0e2:	movs	r3, #0
    d0e4:	ldr.w	r1, [lr], #4
    d0e8:	ldr.w	r8, [r5], #4
    d0ec:	uxth	r2, r1
    d0ee:	uxtah	r3, r3, r8
    d0f2:	lsrs	r1, r1, #16
    d0f4:	subs	r2, r3, r2
    d0f6:	rsb	r3, r1, r8, lsr #16
    d0fa:	add.w	r3, r3, r2, asr #16
    d0fe:	uxth	r2, r2
    d100:	orr.w	r2, r2, r3, lsl #16
    d104:	cmp	ip, lr
    d106:	str.w	r2, [r4], #4
    d10a:	mov.w	r3, r3, asr #16
    d10e:	bhi.n	d0e4 <__mdiff+0x70>
    d110:	cmp	r7, r5
    d112:	bls.n	d144 <__mdiff+0xd0>
    d114:	mov	ip, r4
    d116:	mov	r1, r5
    d118:	ldr.w	lr, [r1], #4
    d11c:	uxtah	r2, r3, lr
    d120:	asrs	r3, r2, #16
    d122:	add.w	r3, r3, lr, lsr #16
    d126:	uxth	r2, r2
    d128:	orr.w	r2, r2, r3, lsl #16
    d12c:	cmp	r7, r1
    d12e:	str.w	r2, [ip], #4
    d132:	mov.w	r3, r3, asr #16
    d136:	bhi.n	d118 <__mdiff+0xa4>
    d138:	mvns	r5, r5
    d13a:	add	r5, r7
    d13c:	bic.w	r5, r5, #3
    d140:	adds	r5, #4
    d142:	add	r4, r5
    d144:	subs	r4, #4
    d146:	cbnz	r2, d152 <__mdiff+0xde>
    d148:	ldr.w	r3, [r4, #-4]!
    d14c:	subs	r6, #1
    d14e:	cmp	r3, #0
    d150:	beq.n	d148 <__mdiff+0xd4>
    d152:	str	r6, [r0, #16]
    d154:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d158:	movs	r1, #0
    d15a:	bl	cc20 <_Balloc>
    d15e:	movs	r2, #1
    d160:	movs	r3, #0
    d162:	str	r2, [r0, #16]
    d164:	str	r3, [r0, #20]
    d166:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d16a:	mov	r4, r5
    d16c:	mov.w	r9, #0
    d170:	mov	r5, r2
    d172:	b.n	d0c4 <__mdiff+0x50>
    d174:	mov	r3, r7
    d176:	add.w	r4, r7, #20
    d17a:	add.w	r5, r8, #20
    d17e:	mov	r7, r8
    d180:	mov.w	r9, #1
    d184:	mov	r8, r3
    d186:	b.n	d0c4 <__mdiff+0x50>

0000d188 <__d2b>:
    d188:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d18c:	vmov	r6, r7, d0
    d190:	sub	sp, #12
    d192:	mov	r8, r1
    d194:	movs	r1, #1
    d196:	mov	r4, r7
    d198:	ubfx	r5, r7, #20, #11
    d19c:	mov	r7, r2
    d19e:	bl	cc20 <_Balloc>
    d1a2:	ubfx	r4, r4, #0, #20
    d1a6:	mov	r9, r0
    d1a8:	cbz	r5, d1ae <__d2b+0x26>
    d1aa:	orr.w	r4, r4, #1048576	; 0x100000
    d1ae:	str	r4, [sp, #4]
    d1b0:	cbz	r6, d1fa <__d2b+0x72>
    d1b2:	add	r0, sp, #8
    d1b4:	str.w	r6, [r0, #-8]!
    d1b8:	bl	cd40 <__lo0bits>
    d1bc:	cmp	r0, #0
    d1be:	bne.n	d22a <__d2b+0xa2>
    d1c0:	ldmia.w	sp, {r2, r3}
    d1c4:	str.w	r2, [r9, #20]
    d1c8:	cmp	r3, #0
    d1ca:	ite	eq
    d1cc:	moveq	r1, #1
    d1ce:	movne	r1, #2
    d1d0:	str.w	r3, [r9, #24]
    d1d4:	str.w	r1, [r9, #16]
    d1d8:	cbnz	r5, d212 <__d2b+0x8a>
    d1da:	add.w	r3, r9, r1, lsl #2
    d1de:	subw	r0, r0, #1074	; 0x432
    d1e2:	str.w	r0, [r8]
    d1e6:	ldr	r0, [r3, #16]
    d1e8:	bl	cd00 <__hi0bits>
    d1ec:	rsb	r0, r0, r1, lsl #5
    d1f0:	str	r0, [r7, #0]
    d1f2:	mov	r0, r9
    d1f4:	add	sp, #12
    d1f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d1fa:	add	r0, sp, #4
    d1fc:	bl	cd40 <__lo0bits>
    d200:	ldr	r3, [sp, #4]
    d202:	str.w	r3, [r9, #20]
    d206:	movs	r1, #1
    d208:	adds	r0, #32
    d20a:	str.w	r1, [r9, #16]
    d20e:	cmp	r5, #0
    d210:	beq.n	d1da <__d2b+0x52>
    d212:	subw	r5, r5, #1075	; 0x433
    d216:	add	r5, r0
    d218:	rsb	r0, r0, #53	; 0x35
    d21c:	str.w	r5, [r8]
    d220:	str	r0, [r7, #0]
    d222:	mov	r0, r9
    d224:	add	sp, #12
    d226:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d22a:	ldmia.w	sp, {r2, r3}
    d22e:	rsb	r1, r0, #32
    d232:	lsl.w	r1, r3, r1
    d236:	orrs	r2, r1
    d238:	lsrs	r3, r0
    d23a:	str	r3, [sp, #4]
    d23c:	str.w	r2, [r9, #20]
    d240:	b.n	d1c8 <__d2b+0x40>
    d242:	nop

0000d244 <__sread>:
    d244:	push	{r4, lr}
    d246:	mov	r4, r1
    d248:	ldrsh.w	r1, [r1, #14]
    d24c:	bl	d64c <_read_r>
    d250:	cmp	r0, #0
    d252:	blt.n	d25c <__sread+0x18>
    d254:	ldr	r3, [r4, #80]	; 0x50
    d256:	add	r3, r0
    d258:	str	r3, [r4, #80]	; 0x50
    d25a:	pop	{r4, pc}
    d25c:	ldrh	r3, [r4, #12]
    d25e:	bic.w	r3, r3, #4096	; 0x1000
    d262:	strh	r3, [r4, #12]
    d264:	pop	{r4, pc}
    d266:	nop

0000d268 <__swrite>:
    d268:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d26c:	mov	r6, r2
    d26e:	ldrsh.w	r2, [r1, #12]
    d272:	mov	r7, r3
    d274:	lsls	r3, r2, #23
    d276:	mov	r4, r1
    d278:	mov	r5, r0
    d27a:	bpl.n	d28c <__swrite+0x24>
    d27c:	movs	r2, #0
    d27e:	movs	r3, #2
    d280:	ldrsh.w	r1, [r1, #14]
    d284:	bl	d620 <_lseek_r>
    d288:	ldrsh.w	r2, [r4, #12]
    d28c:	ldrsh.w	r1, [r4, #14]
    d290:	bic.w	r2, r2, #4096	; 0x1000
    d294:	strh	r2, [r4, #12]
    d296:	mov	r3, r7
    d298:	mov	r2, r6
    d29a:	mov	r0, r5
    d29c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2a0:	b.w	b2cc <_write_r>

0000d2a4 <__sseek>:
    d2a4:	push	{r4, lr}
    d2a6:	mov	r4, r1
    d2a8:	ldrsh.w	r1, [r1, #14]
    d2ac:	bl	d620 <_lseek_r>
    d2b0:	ldrh	r3, [r4, #12]
    d2b2:	adds	r2, r0, #1
    d2b4:	itee	eq
    d2b6:	biceq.w	r3, r3, #4096	; 0x1000
    d2ba:	orrne.w	r3, r3, #4096	; 0x1000
    d2be:	strne	r0, [r4, #80]	; 0x50
    d2c0:	strh	r3, [r4, #12]
    d2c2:	pop	{r4, pc}

0000d2c4 <__sclose>:
    d2c4:	ldrsh.w	r1, [r1, #14]
    d2c8:	b.w	d52c <_close_r>

0000d2cc <__ssprint_r>:
    d2cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2d0:	ldr	r3, [r2, #8]
    d2d2:	sub	sp, #12
    d2d4:	mov	r8, r2
    d2d6:	cmp	r3, #0
    d2d8:	beq.n	d3c0 <__ssprint_r+0xf4>
    d2da:	mov	fp, r0
    d2dc:	mov.w	r9, #0
    d2e0:	ldr	r6, [r2, #0]
    d2e2:	ldr	r0, [r1, #0]
    d2e4:	ldr	r3, [r1, #8]
    d2e6:	mov	r5, r1
    d2e8:	mov	r4, r9
    d2ea:	cmp	r4, #0
    d2ec:	beq.n	d37a <__ssprint_r+0xae>
    d2ee:	cmp	r4, r3
    d2f0:	mov	r7, r3
    d2f2:	mov	sl, r3
    d2f4:	bcc.n	d384 <__ssprint_r+0xb8>
    d2f6:	ldrh	r3, [r5, #12]
    d2f8:	tst.w	r3, #1152	; 0x480
    d2fc:	beq.n	d35a <__ssprint_r+0x8e>
    d2fe:	ldr	r7, [r5, #20]
    d300:	ldr	r1, [r5, #16]
    d302:	add.w	r7, r7, r7, lsl #1
    d306:	rsb	sl, r1, r0
    d30a:	add.w	r7, r7, r7, lsr #31
    d30e:	adds	r0, r4, #1
    d310:	asrs	r7, r7, #1
    d312:	add	r0, sl
    d314:	cmp	r0, r7
    d316:	mov	r2, r7
    d318:	itt	hi
    d31a:	movhi	r7, r0
    d31c:	movhi	r2, r7
    d31e:	lsls	r3, r3, #21
    d320:	bpl.n	d38a <__ssprint_r+0xbe>
    d322:	mov	r1, r2
    d324:	mov	r0, fp
    d326:	bl	820c <_malloc_r>
    d32a:	cmp	r0, #0
    d32c:	beq.n	d39e <__ssprint_r+0xd2>
    d32e:	mov	r2, sl
    d330:	ldr	r1, [r5, #16]
    d332:	str	r0, [sp, #4]
    d334:	bl	2b94 <memcpy>
    d338:	ldrh	r2, [r5, #12]
    d33a:	ldr	r3, [sp, #4]
    d33c:	bic.w	r2, r2, #1152	; 0x480
    d340:	orr.w	r2, r2, #128	; 0x80
    d344:	strh	r2, [r5, #12]
    d346:	rsb	r2, sl, r7
    d34a:	add.w	r0, r3, sl
    d34e:	str	r7, [r5, #20]
    d350:	str	r3, [r5, #16]
    d352:	str	r0, [r5, #0]
    d354:	str	r2, [r5, #8]
    d356:	mov	r7, r4
    d358:	mov	sl, r4
    d35a:	mov	r2, sl
    d35c:	mov	r1, r9
    d35e:	bl	87a8 <memmove>
    d362:	ldr.w	r2, [r8, #8]
    d366:	ldr	r3, [r5, #8]
    d368:	ldr	r0, [r5, #0]
    d36a:	subs	r3, r3, r7
    d36c:	add	r0, sl
    d36e:	subs	r4, r2, r4
    d370:	str	r3, [r5, #8]
    d372:	str	r0, [r5, #0]
    d374:	str.w	r4, [r8, #8]
    d378:	cbz	r4, d3c0 <__ssprint_r+0xf4>
    d37a:	ldr.w	r9, [r6]
    d37e:	ldr	r4, [r6, #4]
    d380:	adds	r6, #8
    d382:	b.n	d2ea <__ssprint_r+0x1e>
    d384:	mov	r7, r4
    d386:	mov	sl, r4
    d388:	b.n	d35a <__ssprint_r+0x8e>
    d38a:	mov	r0, fp
    d38c:	bl	8914 <_realloc_r>
    d390:	mov	r3, r0
    d392:	cmp	r0, #0
    d394:	bne.n	d346 <__ssprint_r+0x7a>
    d396:	ldr	r1, [r5, #16]
    d398:	mov	r0, fp
    d39a:	bl	c54c <_free_r>
    d39e:	movs	r3, #12
    d3a0:	str.w	r3, [fp]
    d3a4:	ldrh	r3, [r5, #12]
    d3a6:	movs	r2, #0
    d3a8:	orr.w	r3, r3, #64	; 0x40
    d3ac:	mov.w	r0, #4294967295
    d3b0:	strh	r3, [r5, #12]
    d3b2:	str.w	r2, [r8, #8]
    d3b6:	str.w	r2, [r8, #4]
    d3ba:	add	sp, #12
    d3bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3c0:	movs	r0, #0
    d3c2:	str.w	r0, [r8, #4]
    d3c6:	add	sp, #12
    d3c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d3cc <__swbuf_r>:
    d3cc:	push	{r3, r4, r5, r6, r7, lr}
    d3ce:	mov	r5, r1
    d3d0:	mov	r4, r2
    d3d2:	mov	r6, r0
    d3d4:	cbz	r0, d3dc <__swbuf_r+0x10>
    d3d6:	ldr	r3, [r0, #56]	; 0x38
    d3d8:	cmp	r3, #0
    d3da:	beq.n	d472 <__swbuf_r+0xa6>
    d3dc:	ldrsh.w	r2, [r4, #12]
    d3e0:	ldr	r3, [r4, #24]
    d3e2:	str	r3, [r4, #8]
    d3e4:	uxth	r1, r2
    d3e6:	lsls	r0, r1, #28
    d3e8:	bpl.n	d45c <__swbuf_r+0x90>
    d3ea:	ldr	r3, [r4, #16]
    d3ec:	cmp	r3, #0
    d3ee:	beq.n	d45c <__swbuf_r+0x90>
    d3f0:	lsls	r1, r1, #18
    d3f2:	uxtb	r7, r5
    d3f4:	bpl.n	d422 <__swbuf_r+0x56>
    d3f6:	ldr	r2, [r4, #0]
    d3f8:	ldr	r1, [r4, #20]
    d3fa:	subs	r3, r2, r3
    d3fc:	cmp	r3, r1
    d3fe:	bge.n	d43a <__swbuf_r+0x6e>
    d400:	adds	r3, #1
    d402:	ldr	r1, [r4, #8]
    d404:	adds	r0, r2, #1
    d406:	subs	r1, #1
    d408:	str	r1, [r4, #8]
    d40a:	str	r0, [r4, #0]
    d40c:	strb	r5, [r2, #0]
    d40e:	ldr	r2, [r4, #20]
    d410:	cmp	r2, r3
    d412:	beq.n	d44a <__swbuf_r+0x7e>
    d414:	ldrh	r3, [r4, #12]
    d416:	lsls	r3, r3, #31
    d418:	bpl.n	d41e <__swbuf_r+0x52>
    d41a:	cmp	r7, #10
    d41c:	beq.n	d44a <__swbuf_r+0x7e>
    d41e:	mov	r0, r7
    d420:	pop	{r3, r4, r5, r6, r7, pc}
    d422:	ldr	r1, [r4, #100]	; 0x64
    d424:	orr.w	r2, r2, #8192	; 0x2000
    d428:	bic.w	r1, r1, #8192	; 0x2000
    d42c:	strh	r2, [r4, #12]
    d42e:	ldr	r2, [r4, #0]
    d430:	str	r1, [r4, #100]	; 0x64
    d432:	ldr	r1, [r4, #20]
    d434:	subs	r3, r2, r3
    d436:	cmp	r3, r1
    d438:	blt.n	d400 <__swbuf_r+0x34>
    d43a:	mov	r1, r4
    d43c:	mov	r0, r6
    d43e:	bl	c2b4 <_fflush_r>
    d442:	cbnz	r0, d456 <__swbuf_r+0x8a>
    d444:	ldr	r2, [r4, #0]
    d446:	movs	r3, #1
    d448:	b.n	d402 <__swbuf_r+0x36>
    d44a:	mov	r1, r4
    d44c:	mov	r0, r6
    d44e:	bl	c2b4 <_fflush_r>
    d452:	cmp	r0, #0
    d454:	beq.n	d41e <__swbuf_r+0x52>
    d456:	mov.w	r7, #4294967295
    d45a:	b.n	d41e <__swbuf_r+0x52>
    d45c:	mov	r1, r4
    d45e:	mov	r0, r6
    d460:	bl	b2f8 <__swsetup_r>
    d464:	cmp	r0, #0
    d466:	bne.n	d456 <__swbuf_r+0x8a>
    d468:	ldrsh.w	r2, [r4, #12]
    d46c:	ldr	r3, [r4, #16]
    d46e:	uxth	r1, r2
    d470:	b.n	d3f0 <__swbuf_r+0x24>
    d472:	bl	c3dc <__sinit>
    d476:	b.n	d3dc <__swbuf_r+0x10>

0000d478 <_wcrtomb_r>:
    d478:	push	{r4, r5, r6, r7, lr}
    d47a:	mov	r6, r0
    d47c:	sub	sp, #20
    d47e:	mov	r7, r3
    d480:	cbz	r1, d4a6 <_wcrtomb_r+0x2e>
    d482:	ldr	r4, [pc, #64]	; (d4c4 <_wcrtomb_r+0x4c>)
    d484:	ldr	r5, [pc, #64]	; (d4c8 <_wcrtomb_r+0x50>)
    d486:	ldr	r4, [r4, #0]
    d488:	ldr	r4, [r4, #52]	; 0x34
    d48a:	cmp	r4, #0
    d48c:	it	eq
    d48e:	moveq	r4, r5
    d490:	ldr.w	r4, [r4, #224]	; 0xe0
    d494:	blx	r4
    d496:	adds	r3, r0, #1
    d498:	bne.n	d4a2 <_wcrtomb_r+0x2a>
    d49a:	movs	r2, #0
    d49c:	movs	r3, #138	; 0x8a
    d49e:	str	r2, [r7, #0]
    d4a0:	str	r3, [r6, #0]
    d4a2:	add	sp, #20
    d4a4:	pop	{r4, r5, r6, r7, pc}
    d4a6:	mov	r4, r1
    d4a8:	ldr	r1, [pc, #24]	; (d4c4 <_wcrtomb_r+0x4c>)
    d4aa:	ldr	r2, [pc, #28]	; (d4c8 <_wcrtomb_r+0x50>)
    d4ac:	ldr	r1, [r1, #0]
    d4ae:	ldr	r1, [r1, #52]	; 0x34
    d4b0:	cmp	r1, #0
    d4b2:	it	eq
    d4b4:	moveq	r1, r2
    d4b6:	mov	r2, r4
    d4b8:	ldr.w	r4, [r1, #224]	; 0xe0
    d4bc:	add	r1, sp, #4
    d4be:	blx	r4
    d4c0:	b.n	d496 <_wcrtomb_r+0x1e>
    d4c2:	nop
    d4c4:	.word	0x20001610
    d4c8:	.word	0x20001614

0000d4cc <_calloc_r>:
    d4cc:	push	{r4, lr}
    d4ce:	mul.w	r1, r2, r1
    d4d2:	bl	820c <_malloc_r>
    d4d6:	mov	r4, r0
    d4d8:	cbz	r0, d512 <_calloc_r+0x46>
    d4da:	ldr.w	r2, [r0, #-4]
    d4de:	bic.w	r2, r2, #3
    d4e2:	subs	r2, #4
    d4e4:	cmp	r2, #36	; 0x24
    d4e6:	bhi.n	d51a <_calloc_r+0x4e>
    d4e8:	cmp	r2, #19
    d4ea:	bls.n	d516 <_calloc_r+0x4a>
    d4ec:	movs	r3, #0
    d4ee:	cmp	r2, #27
    d4f0:	str	r3, [r0, #0]
    d4f2:	str	r3, [r0, #4]
    d4f4:	bls.n	d524 <_calloc_r+0x58>
    d4f6:	cmp	r2, #36	; 0x24
    d4f8:	str	r3, [r0, #8]
    d4fa:	str	r3, [r0, #12]
    d4fc:	iteee	ne
    d4fe:	addne.w	r2, r0, #16
    d502:	streq	r3, [r0, #16]
    d504:	streq	r3, [r0, #20]
    d506:	addeq.w	r2, r0, #24
    d50a:	movs	r3, #0
    d50c:	str	r3, [r2, #0]
    d50e:	str	r3, [r2, #4]
    d510:	str	r3, [r2, #8]
    d512:	mov	r0, r4
    d514:	pop	{r4, pc}
    d516:	mov	r2, r0
    d518:	b.n	d50a <_calloc_r+0x3e>
    d51a:	movs	r1, #0
    d51c:	bl	8870 <memset>
    d520:	mov	r0, r4
    d522:	pop	{r4, pc}
    d524:	add.w	r2, r0, #8
    d528:	b.n	d50a <_calloc_r+0x3e>
    d52a:	nop

0000d52c <_close_r>:
    d52c:	push	{r3, r4, r5, lr}
    d52e:	ldr	r4, [pc, #28]	; (d54c <_close_r+0x20>)
    d530:	movs	r3, #0
    d532:	mov	r5, r0
    d534:	mov	r0, r1
    d536:	str	r3, [r4, #0]
    d538:	bl	2da8 <_close>
    d53c:	adds	r3, r0, #1
    d53e:	beq.n	d542 <_close_r+0x16>
    d540:	pop	{r3, r4, r5, pc}
    d542:	ldr	r3, [r4, #0]
    d544:	cmp	r3, #0
    d546:	beq.n	d540 <_close_r+0x14>
    d548:	str	r3, [r5, #0]
    d54a:	pop	{r3, r4, r5, pc}
    d54c:	.word	0x20004284

0000d550 <_fclose_r>:
    d550:	cmp	r1, #0
    d552:	beq.n	d5d0 <_fclose_r+0x80>
    d554:	push	{r4, r5, r6, lr}
    d556:	mov	r5, r0
    d558:	mov	r4, r1
    d55a:	cbz	r0, d560 <_fclose_r+0x10>
    d55c:	ldr	r3, [r0, #56]	; 0x38
    d55e:	cbz	r3, d5c0 <_fclose_r+0x70>
    d560:	ldrsh.w	r3, [r4, #12]
    d564:	cbnz	r3, d56a <_fclose_r+0x1a>
    d566:	movs	r0, #0
    d568:	pop	{r4, r5, r6, pc}
    d56a:	mov	r1, r4
    d56c:	mov	r0, r5
    d56e:	bl	c16c <__sflush_r>
    d572:	ldr	r3, [r4, #44]	; 0x2c
    d574:	mov	r6, r0
    d576:	cbz	r3, d586 <_fclose_r+0x36>
    d578:	ldr	r1, [r4, #28]
    d57a:	mov	r0, r5
    d57c:	blx	r3
    d57e:	cmp	r0, #0
    d580:	it	lt
    d582:	movlt.w	r6, #4294967295
    d586:	ldrh	r3, [r4, #12]
    d588:	lsls	r3, r3, #24
    d58a:	bmi.n	d5c6 <_fclose_r+0x76>
    d58c:	ldr	r1, [r4, #48]	; 0x30
    d58e:	cbz	r1, d5a2 <_fclose_r+0x52>
    d590:	add.w	r3, r4, #64	; 0x40
    d594:	cmp	r1, r3
    d596:	beq.n	d59e <_fclose_r+0x4e>
    d598:	mov	r0, r5
    d59a:	bl	c54c <_free_r>
    d59e:	movs	r3, #0
    d5a0:	str	r3, [r4, #48]	; 0x30
    d5a2:	ldr	r1, [r4, #68]	; 0x44
    d5a4:	cbz	r1, d5b0 <_fclose_r+0x60>
    d5a6:	mov	r0, r5
    d5a8:	bl	c54c <_free_r>
    d5ac:	movs	r3, #0
    d5ae:	str	r3, [r4, #68]	; 0x44
    d5b0:	bl	c3e8 <__sfp_lock_acquire>
    d5b4:	movs	r3, #0
    d5b6:	strh	r3, [r4, #12]
    d5b8:	bl	c3ec <__sfp_lock_release>
    d5bc:	mov	r0, r6
    d5be:	pop	{r4, r5, r6, pc}
    d5c0:	bl	c3dc <__sinit>
    d5c4:	b.n	d560 <_fclose_r+0x10>
    d5c6:	ldr	r1, [r4, #16]
    d5c8:	mov	r0, r5
    d5ca:	bl	c54c <_free_r>
    d5ce:	b.n	d58c <_fclose_r+0x3c>
    d5d0:	movs	r0, #0
    d5d2:	bx	lr

0000d5d4 <_fstat_r>:
    d5d4:	push	{r3, r4, r5, lr}
    d5d6:	mov	r3, r1
    d5d8:	ldr	r4, [pc, #28]	; (d5f8 <_fstat_r+0x24>)
    d5da:	mov	r5, r0
    d5dc:	mov	r1, r2
    d5de:	mov	r0, r3
    d5e0:	movs	r3, #0
    d5e2:	str	r3, [r4, #0]
    d5e4:	bl	2db0 <_fstat>
    d5e8:	adds	r3, r0, #1
    d5ea:	beq.n	d5ee <_fstat_r+0x1a>
    d5ec:	pop	{r3, r4, r5, pc}
    d5ee:	ldr	r3, [r4, #0]
    d5f0:	cmp	r3, #0
    d5f2:	beq.n	d5ec <_fstat_r+0x18>
    d5f4:	str	r3, [r5, #0]
    d5f6:	pop	{r3, r4, r5, pc}
    d5f8:	.word	0x20004284

0000d5fc <_isatty_r>:
    d5fc:	push	{r3, r4, r5, lr}
    d5fe:	ldr	r4, [pc, #28]	; (d61c <_isatty_r+0x20>)
    d600:	movs	r3, #0
    d602:	mov	r5, r0
    d604:	mov	r0, r1
    d606:	str	r3, [r4, #0]
    d608:	bl	2dbc <_isatty>
    d60c:	adds	r3, r0, #1
    d60e:	beq.n	d612 <_isatty_r+0x16>
    d610:	pop	{r3, r4, r5, pc}
    d612:	ldr	r3, [r4, #0]
    d614:	cmp	r3, #0
    d616:	beq.n	d610 <_isatty_r+0x14>
    d618:	str	r3, [r5, #0]
    d61a:	pop	{r3, r4, r5, pc}
    d61c:	.word	0x20004284

0000d620 <_lseek_r>:
    d620:	push	{r4, r5, r6, lr}
    d622:	mov	r5, r1
    d624:	ldr	r4, [pc, #32]	; (d648 <_lseek_r+0x28>)
    d626:	mov	r1, r2
    d628:	mov	r6, r0
    d62a:	mov	r2, r3
    d62c:	mov	r0, r5
    d62e:	movs	r3, #0
    d630:	str	r3, [r4, #0]
    d632:	bl	2dc0 <_lseek>
    d636:	adds	r3, r0, #1
    d638:	beq.n	d63c <_lseek_r+0x1c>
    d63a:	pop	{r4, r5, r6, pc}
    d63c:	ldr	r3, [r4, #0]
    d63e:	cmp	r3, #0
    d640:	beq.n	d63a <_lseek_r+0x1a>
    d642:	str	r3, [r6, #0]
    d644:	pop	{r4, r5, r6, pc}
    d646:	nop
    d648:	.word	0x20004284

0000d64c <_read_r>:
    d64c:	push	{r4, r5, r6, lr}
    d64e:	mov	r5, r1
    d650:	ldr	r4, [pc, #32]	; (d674 <_read_r+0x28>)
    d652:	mov	r1, r2
    d654:	mov	r6, r0
    d656:	mov	r2, r3
    d658:	mov	r0, r5
    d65a:	movs	r3, #0
    d65c:	str	r3, [r4, #0]
    d65e:	bl	2da4 <_read>
    d662:	adds	r3, r0, #1
    d664:	beq.n	d668 <_read_r+0x1c>
    d666:	pop	{r4, r5, r6, pc}
    d668:	ldr	r3, [r4, #0]
    d66a:	cmp	r3, #0
    d66c:	beq.n	d666 <_read_r+0x1a>
    d66e:	str	r3, [r6, #0]
    d670:	pop	{r4, r5, r6, pc}
    d672:	nop
    d674:	.word	0x20004284

0000d678 <__aeabi_uldivmod>:
    d678:	cbnz	r3, d690 <__aeabi_uldivmod+0x18>
    d67a:	cbnz	r2, d690 <__aeabi_uldivmod+0x18>
    d67c:	cmp	r1, #0
    d67e:	it	eq
    d680:	cmpeq	r0, #0
    d682:	itt	ne
    d684:	movne.w	r1, #4294967295
    d688:	movne.w	r0, #4294967295
    d68c:	b.w	d98c <__aeabi_idiv0>
    d690:	sub.w	ip, sp, #8
    d694:	strd	ip, lr, [sp, #-16]!
    d698:	bl	d6a8 <__udivmoddi4>
    d69c:	ldr.w	lr, [sp, #4]
    d6a0:	ldrd	r2, r3, [sp, #8]
    d6a4:	add	sp, #16
    d6a6:	bx	lr

0000d6a8 <__udivmoddi4>:
    d6a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6ac:	mov	ip, r1
    d6ae:	mov	r6, r1
    d6b0:	mov	r4, r0
    d6b2:	ldr	r5, [sp, #32]
    d6b4:	cmp	r3, #0
    d6b6:	bne.n	d75a <__udivmoddi4+0xb2>
    d6b8:	cmp	r2, r1
    d6ba:	mov	r7, r2
    d6bc:	bls.n	d798 <__udivmoddi4+0xf0>
    d6be:	clz	lr, r2
    d6c2:	cmp.w	lr, #0
    d6c6:	beq.n	d6e0 <__udivmoddi4+0x38>
    d6c8:	rsb	r4, lr, #32
    d6cc:	lsr.w	r4, r0, r4
    d6d0:	lsl.w	r6, r1, lr
    d6d4:	orr.w	ip, r4, r6
    d6d8:	lsl.w	r7, r2, lr
    d6dc:	lsl.w	r4, r0, lr
    d6e0:	mov.w	r9, r7, lsr #16
    d6e4:	lsrs	r2, r4, #16
    d6e6:	udiv	r0, ip, r9
    d6ea:	uxth.w	r8, r7
    d6ee:	mls	r6, r9, r0, ip
    d6f2:	orr.w	r6, r2, r6, lsl #16
    d6f6:	mul.w	r3, r0, r8
    d6fa:	cmp	r3, r6
    d6fc:	bls.n	d712 <__udivmoddi4+0x6a>
    d6fe:	adds	r6, r6, r7
    d700:	add.w	r2, r0, #4294967295
    d704:	bcs.w	d94c <__udivmoddi4+0x2a4>
    d708:	cmp	r3, r6
    d70a:	bls.w	d94c <__udivmoddi4+0x2a4>
    d70e:	subs	r0, #2
    d710:	add	r6, r7
    d712:	subs	r6, r6, r3
    d714:	uxth	r2, r4
    d716:	udiv	r3, r6, r9
    d71a:	mls	r6, r9, r3, r6
    d71e:	orr.w	r4, r2, r6, lsl #16
    d722:	mul.w	r8, r3, r8
    d726:	cmp	r8, r4
    d728:	bls.n	d73e <__udivmoddi4+0x96>
    d72a:	adds	r4, r4, r7
    d72c:	add.w	r2, r3, #4294967295
    d730:	bcs.w	d948 <__udivmoddi4+0x2a0>
    d734:	cmp	r8, r4
    d736:	bls.w	d948 <__udivmoddi4+0x2a0>
    d73a:	subs	r3, #2
    d73c:	add	r4, r7
    d73e:	rsb	r4, r8, r4
    d742:	orr.w	r0, r3, r0, lsl #16
    d746:	movs	r1, #0
    d748:	cmp	r5, #0
    d74a:	beq.n	d812 <__udivmoddi4+0x16a>
    d74c:	lsr.w	r4, r4, lr
    d750:	movs	r3, #0
    d752:	str	r4, [r5, #0]
    d754:	str	r3, [r5, #4]
    d756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d75a:	cmp	r3, r1
    d75c:	bls.n	d76e <__udivmoddi4+0xc6>
    d75e:	cmp	r5, #0
    d760:	beq.n	d80e <__udivmoddi4+0x166>
    d762:	movs	r1, #0
    d764:	stmia.w	r5, {r0, r6}
    d768:	mov	r0, r1
    d76a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d76e:	clz	r1, r3
    d772:	cmp	r1, #0
    d774:	bne.w	d898 <__udivmoddi4+0x1f0>
    d778:	cmp	r3, r6
    d77a:	bcc.n	d782 <__udivmoddi4+0xda>
    d77c:	cmp	r2, r0
    d77e:	bhi.w	d972 <__udivmoddi4+0x2ca>
    d782:	subs	r4, r0, r2
    d784:	sbc.w	r6, r6, r3
    d788:	movs	r0, #1
    d78a:	mov	ip, r6
    d78c:	cmp	r5, #0
    d78e:	beq.n	d812 <__udivmoddi4+0x16a>
    d790:	stmia.w	r5, {r4, ip}
    d794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d798:	cbnz	r2, d7a0 <__udivmoddi4+0xf8>
    d79a:	movs	r7, #1
    d79c:	udiv	r7, r7, r2
    d7a0:	clz	lr, r7
    d7a4:	cmp.w	lr, #0
    d7a8:	bne.n	d816 <__udivmoddi4+0x16e>
    d7aa:	subs	r3, r6, r7
    d7ac:	mov.w	r8, r7, lsr #16
    d7b0:	uxth.w	ip, r7
    d7b4:	movs	r1, #1
    d7b6:	udiv	r0, r3, r8
    d7ba:	lsrs	r2, r4, #16
    d7bc:	mls	r6, r8, r0, r3
    d7c0:	orr.w	r6, r2, r6, lsl #16
    d7c4:	mul.w	r3, ip, r0
    d7c8:	cmp	r3, r6
    d7ca:	bls.n	d7dc <__udivmoddi4+0x134>
    d7cc:	adds	r6, r6, r7
    d7ce:	add.w	r2, r0, #4294967295
    d7d2:	bcs.n	d7da <__udivmoddi4+0x132>
    d7d4:	cmp	r3, r6
    d7d6:	bhi.w	d976 <__udivmoddi4+0x2ce>
    d7da:	mov	r0, r2
    d7dc:	subs	r6, r6, r3
    d7de:	uxth	r2, r4
    d7e0:	udiv	r3, r6, r8
    d7e4:	mls	r6, r8, r3, r6
    d7e8:	orr.w	r4, r2, r6, lsl #16
    d7ec:	mul.w	ip, ip, r3
    d7f0:	cmp	ip, r4
    d7f2:	bls.n	d804 <__udivmoddi4+0x15c>
    d7f4:	adds	r4, r4, r7
    d7f6:	add.w	r2, r3, #4294967295
    d7fa:	bcs.n	d802 <__udivmoddi4+0x15a>
    d7fc:	cmp	ip, r4
    d7fe:	bhi.w	d96c <__udivmoddi4+0x2c4>
    d802:	mov	r3, r2
    d804:	rsb	r4, ip, r4
    d808:	orr.w	r0, r3, r0, lsl #16
    d80c:	b.n	d748 <__udivmoddi4+0xa0>
    d80e:	mov	r1, r5
    d810:	mov	r0, r5
    d812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d816:	rsb	r1, lr, #32
    d81a:	lsl.w	r3, r6, lr
    d81e:	lsl.w	r7, r7, lr
    d822:	lsr.w	r9, r0, r1
    d826:	mov.w	r8, r7, lsr #16
    d82a:	lsrs	r6, r1
    d82c:	orr.w	r9, r9, r3
    d830:	udiv	sl, r6, r8
    d834:	mov.w	r4, r9, lsr #16
    d838:	mls	r6, r8, sl, r6
    d83c:	uxth.w	ip, r7
    d840:	orr.w	r3, r4, r6, lsl #16
    d844:	mul.w	r2, sl, ip
    d848:	cmp	r2, r3
    d84a:	lsl.w	r4, r0, lr
    d84e:	bls.n	d866 <__udivmoddi4+0x1be>
    d850:	adds	r3, r3, r7
    d852:	add.w	r1, sl, #4294967295
    d856:	bcs.w	d968 <__udivmoddi4+0x2c0>
    d85a:	cmp	r2, r3
    d85c:	bls.w	d968 <__udivmoddi4+0x2c0>
    d860:	sub.w	sl, sl, #2
    d864:	add	r3, r7
    d866:	subs	r3, r3, r2
    d868:	uxth.w	r9, r9
    d86c:	udiv	r1, r3, r8
    d870:	mls	r3, r8, r1, r3
    d874:	orr.w	r3, r9, r3, lsl #16
    d878:	mul.w	r6, r1, ip
    d87c:	cmp	r6, r3
    d87e:	bls.n	d890 <__udivmoddi4+0x1e8>
    d880:	adds	r3, r3, r7
    d882:	add.w	r2, r1, #4294967295
    d886:	bcs.n	d960 <__udivmoddi4+0x2b8>
    d888:	cmp	r6, r3
    d88a:	bls.n	d960 <__udivmoddi4+0x2b8>
    d88c:	subs	r1, #2
    d88e:	add	r3, r7
    d890:	subs	r3, r3, r6
    d892:	orr.w	r1, r1, sl, lsl #16
    d896:	b.n	d7b6 <__udivmoddi4+0x10e>
    d898:	rsb	lr, r1, #32
    d89c:	lsr.w	r4, r2, lr
    d8a0:	lsls	r3, r1
    d8a2:	orrs	r3, r4
    d8a4:	lsr.w	r7, r0, lr
    d8a8:	lsl.w	r4, r6, r1
    d8ac:	mov.w	ip, r3, lsr #16
    d8b0:	lsr.w	r6, r6, lr
    d8b4:	orrs	r4, r7
    d8b6:	udiv	r9, r6, ip
    d8ba:	lsrs	r7, r4, #16
    d8bc:	mls	r6, ip, r9, r6
    d8c0:	uxth.w	r8, r3
    d8c4:	orr.w	r6, r7, r6, lsl #16
    d8c8:	mul.w	r7, r9, r8
    d8cc:	cmp	r7, r6
    d8ce:	lsl.w	r2, r2, r1
    d8d2:	lsl.w	sl, r0, r1
    d8d6:	bls.n	d8ea <__udivmoddi4+0x242>
    d8d8:	adds	r6, r6, r3
    d8da:	add.w	r0, r9, #4294967295
    d8de:	bcs.n	d964 <__udivmoddi4+0x2bc>
    d8e0:	cmp	r7, r6
    d8e2:	bls.n	d964 <__udivmoddi4+0x2bc>
    d8e4:	sub.w	r9, r9, #2
    d8e8:	add	r6, r3
    d8ea:	subs	r6, r6, r7
    d8ec:	uxth	r0, r4
    d8ee:	udiv	r4, r6, ip
    d8f2:	mls	r6, ip, r4, r6
    d8f6:	orr.w	r7, r0, r6, lsl #16
    d8fa:	mul.w	r8, r4, r8
    d8fe:	cmp	r8, r7
    d900:	bls.n	d912 <__udivmoddi4+0x26a>
    d902:	adds	r7, r7, r3
    d904:	add.w	r0, r4, #4294967295
    d908:	bcs.n	d95c <__udivmoddi4+0x2b4>
    d90a:	cmp	r8, r7
    d90c:	bls.n	d95c <__udivmoddi4+0x2b4>
    d90e:	subs	r4, #2
    d910:	add	r7, r3
    d912:	orr.w	r0, r4, r9, lsl #16
    d916:	rsb	r7, r8, r7
    d91a:	umull	r8, r9, r0, r2
    d91e:	cmp	r7, r9
    d920:	mov	r4, r8
    d922:	mov	r6, r9
    d924:	bcc.n	d950 <__udivmoddi4+0x2a8>
    d926:	beq.n	d97c <__udivmoddi4+0x2d4>
    d928:	cbz	r5, d984 <__udivmoddi4+0x2dc>
    d92a:	subs.w	r3, sl, r4
    d92e:	sbc.w	r7, r7, r6
    d932:	lsl.w	lr, r7, lr
    d936:	lsrs	r3, r1
    d938:	lsrs	r7, r1
    d93a:	orr.w	r3, lr, r3
    d93e:	stmia.w	r5, {r3, r7}
    d942:	movs	r1, #0
    d944:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d948:	mov	r3, r2
    d94a:	b.n	d73e <__udivmoddi4+0x96>
    d94c:	mov	r0, r2
    d94e:	b.n	d712 <__udivmoddi4+0x6a>
    d950:	subs.w	r4, r8, r2
    d954:	sbc.w	r6, r9, r3
    d958:	subs	r0, #1
    d95a:	b.n	d928 <__udivmoddi4+0x280>
    d95c:	mov	r4, r0
    d95e:	b.n	d912 <__udivmoddi4+0x26a>
    d960:	mov	r1, r2
    d962:	b.n	d890 <__udivmoddi4+0x1e8>
    d964:	mov	r9, r0
    d966:	b.n	d8ea <__udivmoddi4+0x242>
    d968:	mov	sl, r1
    d96a:	b.n	d866 <__udivmoddi4+0x1be>
    d96c:	subs	r3, #2
    d96e:	add	r4, r7
    d970:	b.n	d804 <__udivmoddi4+0x15c>
    d972:	mov	r0, r1
    d974:	b.n	d78c <__udivmoddi4+0xe4>
    d976:	subs	r0, #2
    d978:	add	r6, r7
    d97a:	b.n	d7dc <__udivmoddi4+0x134>
    d97c:	cmp	sl, r8
    d97e:	bcc.n	d950 <__udivmoddi4+0x2a8>
    d980:	mov	r6, r7
    d982:	b.n	d928 <__udivmoddi4+0x280>
    d984:	mov	r1, r5
    d986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d98a:	nop

0000d98c <__aeabi_idiv0>:
    d98c:	bx	lr
    d98e:	nop

0000d990 <___init_veneer>:
    d990:	ldr.w	pc, [pc]	; d994 <___init_veneer+0x4>
    d994:	.word	0x600016e9
	...

Disassembly of section .fini:

0000d9a0 <_fini>:
    d9a0:	push	{r3, r4, r5, r6, r7, lr}
    d9a2:	nop
