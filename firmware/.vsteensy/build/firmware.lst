
.vsteensy/build/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00001b50 l    d  .fini	00000000 .fini
20000000 l    d  .data	00000000 .data
200003f0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00000af0 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00000ff4 l     F .text.itcm	0000005c schedule_transfer
00001050 l     F .text.itcm	00000030 run_callbacks
00001080 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.0
00001124 l     F .text.itcm	000005b8 isr
20000d88 l     O .bss	00000004 endpointN_notify_mask
20000d90 l     O .bss	00000004 endpoint0_notify_mask
20000d94 l     O .bss	00000001 usb_reboot_timer
20000d98 l     O .bss	00000008 endpoint0_setupdata
20000da0 l     O .bss	00000008 reply_buffer
20000da8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20000db1 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20000db4 l     O .bss	00000004 s_hotTemp
20000db8 l     O .bss	00000004 s_hot_ROOM
20000dbc l     O .bss	00000004 s_roomC_hotC
20000dc0 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200003f0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200003f4 l       .bss	00000000 object.8610
60001648 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000000b0 l     F .text.itcm	0000000c _GLOBAL__sub_I_setup
00000000 l    df *ABS*	00000000 TestClass.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 yield.cpp
20000418 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00000b8c l     F .text.itcm	00000028 rx_event
00000bb4 l     F .text.itcm	00000070 usb_serial_flush_callback
00000c24 l     F .text.itcm	0000015c usb_serial_write.part.1
20000438 l     O .bss	00000700 txbuffer
20000b38 l     O .bss	00000001 tx_noautoflush
20000b39 l     O .bss	00000001 tx_head
20000b3c l     O .bss	000000c0 rx_buffer
20000bfc l     O .bss	00000006 rx_index
20000c04 l     O .bss	00000006 rx_count
20000c20 l     O .bss	00000060 rx_transfer
20000c80 l     O .bss	00000002 tx_available
20000ca0 l     O .bss	000000e0 tx_transfer
20000d80 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 usb_desc.c
20000334 l     O .data	0000000a qualifier_descriptor
20000358 l     O .data	00000043 config_descriptor
2000039c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20200000 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015f0 l     F .text.progmem	00000008 __startup_late_hook_veneer
600015f8 l     F .text.progmem	00000008 __memset_veneer
60001600 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001608 l     F .text.progmem	00000008 __setup_veneer
60001610 l     F .text.progmem	00000008 __yield_veneer
60001618 l     F .text.progmem	00000008 __delay_veneer
60001620 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001628 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001630 l     F .text.progmem	00000008 __loop_veneer
60001638 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001640 l     F .text.progmem	00000008 __pwm_init_veneer
00001b40 l     F .text.itcm	00000008 ___init_veneer
00000ea8 g     F .text.itcm	00000014 usb_serial_available
00000afc g     F .text.itcm	00000002 startup_default_late_hook
00000750  w    F .text.itcm	000000a0 yield
20000d8c g     O .bss	00000004 usb_timer1_callback
20000340 g     O .data	00000018 usb_string_manufacturer_name_default
20000dc4 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00000a28 g     F .text.itcm	00000020 Print::println()
60001490 g     F .text.progmem	00000058 analog_init
2000031c g     O .data	00000004 F_CPU_ACTUAL
000018a4 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000093c g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000430 g     O .bss	00000001 EventResponder::runningFromYield
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000041c g     O .bss	00000004 EventResponder::firstInterrupt
00001824 g     F .text.itcm	00000028 usb_transfer_status
20000320 g     O .data	00000001 usb_enable_serial_event_processing
00000a0c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000000 g     O .data	00000280 digital_pin_to_info_PGM
00001b50 g       .text.itcm	00000000 _etext
200003f0 g       .bss	00000000 _sbss
60001650 g       *ABS*	00000000 _stextload
00000084 g     F .text.itcm	0000002c loop
000016dc g     F .text.itcm	00000064 usb_config_rx
000008d4 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
20000420 g     O .bss	00000004 EventResponder::lastInterrupt
000018cc g     F .text.itcm	00000134 memcpy
20000414 g     O .bss	00000004 systick_millis_count
20000db0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
2000040c g     O .bss	00000001 test_class
20000340  w    O .data	00000018 usb_string_manufacturer_name
00000870  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600013a4 g     F .text.progmem	000000ec usb_init
000000c0 g     F .text.itcm	00000004 collywobble_namespace::TestClass::getTestVar()
20000de4 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
00000af8 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	0000026c ResetHandler
00000e38 g     F .text.itcm	0000004c usb_serial_getchar
200012c0 g     O .bss	00000008 usb_cdc_line_coding
20000428 g     O .bss	00000004 EventResponder::lastYield
000006d0 g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
2000042c g     O .bss	00000004 EventResponder::firstYield
00001a50 g     F .text.itcm	00000050 __libc_init_array
00000b00  w    F .text.itcm	0000008c HardFault_HandlerC
000009f4  w    F .text.itcm	00000004 usb_serial_class::clear()
600031a4 g       *ABS*	00000000 _sdataload
20000434 g     O .bss	00000004 MillisTimer::listWaiting
20000d81 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015e0 g     F .text.progmem	00000000 _init
00000d80 g     F .text.itcm	00000002 usb_serial_reset
200032a0 g       .bss	00000000 _ebss
00000001 g       *ABS*	00000000 _itcm_block_count
20002000 g     O .bss	00000020 endpoint0_transfer_data
00000418 g     F .text.itcm	000002b8 pwm_init
60001340 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20002020 g     O .bss	00000020 endpoint0_transfer_ack
200012c8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000017d8 g     F .text.itcm	00000028 usb_transmit
000009d4 g     F .text.itcm	00000020 systick_isr
20000324 g     O .data	00000010 Serial
20000de0 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00000a14  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00000af8  w    F .text.itcm	00000002 startup_early_hook
00000e84 g     F .text.itcm	00000024 usb_serial_peekchar
000000c4 g     F .text.itcm	00000294 set_arm_clock
20000410 g     O .bss	00000004 systick_cycle_count
200003cc g     O .data	00000016 usb_string_serial_number_default
00000a04  w    F .text.itcm	00000004 usb_serial_class::flush()
000009fc  w    F .text.itcm	00000004 usb_serial_class::read()
000017a8 g     F .text.itcm	0000002e usb_prepare_transfer
00000ae0 g     F .text.itcm	00000018 unused_interrupt_vector
20000d84 g     O .bss	00000004 usb_timer0_callback
600014e8 g     F .text.progmem	000000f8 tempmon_init
00000a1c  w    F .text.itcm	0000000c serialEvent()
000000bc g     F .text.itcm	00000004 collywobble_namespace::TestClass::TestClass(unsigned char)
00000ebc g     F .text.itcm	0000003c usb_serial_flush_input
00000ef8 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20000280  w    O .data	00000028 vtable for usb_serial_class
20000424 g     O .bss	00000004 MillisTimer::listActive
00000f88 g     F .text.itcm	0000006c usb_serial_flush_output
20001000 g     O .bss	000002c0 _VectorsRam
00001aa0 g     F .text.itcm	0000009a memset
0000184c g     F .text.itcm	00000058 usb_init_serialnumber
60001650 g       .text.progmem	00000000 __init_array_end
000007f0 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
200003c8 g     O .data	00000004 string0
00000f24 g     F .text.itcm	00000018 usb_serial_write
00000afc  w    F .text.itcm	00000002 startup_late_hook
00000a00  w    F .text.itcm	00000004 usb_serial_class::available()
20003000 g     O .bss	00000280 endpoint_queue_head
200003b0  w    O .data	00000016 usb_string_product_name
00000358 g     F .text.itcm	000000c0 delay
00001b50 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00000ac8 g     F .text.itcm	00000016 Print::print(long)
60001648 g       .text.progmem	00000000 __preinit_array_end
0000007c g     F .text.itcm	00000008 setup
200002ac g     O .data	0000006c usb_descriptor_list
20078000 g       .bss	00000000 _estack
00000f3c g     F .text.itcm	0000004c usb_serial_write_buffer_free
00000d84 g     F .text.itcm	000000b4 usb_serial_configure
200003f0 g       .data	00000000 _edata
000000bc g     F .text.itcm	00000004 collywobble_namespace::TestClass::TestClass(unsigned char)
00000a08  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00001a00 g     F .text.itcm	0000004e ultoa
0000088c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
000009f8  w    F .text.itcm	00000004 usb_serial_class::peek()
60001648 g       .text.progmem	00000000 __init_array_start
20000318 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
200003b0 g     O .data	00000016 usb_string_product_name_default
600012a0 g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001648 g       .text.progmem	00000000 __preinit_array_start
00001800 g     F .text.itcm	00000024 usb_receive
00003590 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000008d0 g     F .text.itcm	00000004 pendablesrvreq_isr
00000a48 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00001740 g     F .text.itcm	00000068 usb_config_tx
200003cc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.5......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104a:	ldr	r1, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #464]	; (60001224 <ResetHandler+0x1f0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001072:	ldr	r1, [pc, #440]	; (6000122c <ResetHandler+0x1f8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109a:	ldr	r3, [pc, #412]	; (60001238 <ResetHandler+0x204>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #384]	; (6000123c <ResetHandler+0x208>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #384]	; (60001240 <ResetHandler+0x20c>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #380]	; (60001244 <ResetHandler+0x210>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #372]	; (60001248 <ResetHandler+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #372]	; (6000124c <ResetHandler+0x218>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #364]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #424]	; 60001294 <ResetHandler+0x260>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #420]	; 60001298 <ResetHandler+0x264>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #420]	; 6000129c <ResetHandler+0x268>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #276]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	600012a0 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #292]	; (6000125c <ResetHandler+0x228>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #296]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #284]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #284]	; (6000126c <ResetHandler+0x238>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #288]	; (60001270 <ResetHandler+0x23c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #276]	; (6000127c <ResetHandler+0x248>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001340 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #260]	; (60001280 <ResetHandler+0x24c>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001628 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #236]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x258>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #188]	; (60001288 <ResetHandler+0x254>)
600011cc:	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x25c>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001638 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013a4 <usb_init>
	analog_init();
600011e4:	bl	60001490 <analog_init>
	pwm_init();
600011e8:	bl	60001640 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e8 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600015f0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001620 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
60001200:	bl	60001608 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
60001204:	bl	60001630 <__loop_veneer>
		yield();
60001208:	bl	60001610 <__yield_veneer>
6000120c:	b.n	60001204 <ResetHandler+0x1d0>
6000120e:	nop
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaab
60001218:	.word	0x20078000
6000121c:	.word	0x00000000
60001220:	.word	0x60001650
60001224:	.word	0x00001b50
60001228:	.word	0x20000000
6000122c:	.word	0x600031a4
60001230:	.word	0x200003f0
60001234:	.word	0x200003f0
60001238:	.word	0x200032a0
6000123c:	.word	0xe000ed88
60001240:	.word	0x20000ffc
60001244:	.word	0x00000ae1
60001248:	.word	0xe000e400
6000124c:	.word	0xe000e4a0
60001250:	.word	0x400d8000
60001254:	.word	0x400fc000
60001258:	.word	0xe000ed08
6000125c:	.word	0xe000e014
60001260:	.word	0xe000e018
60001264:	.word	0x000008d1
60001268:	.word	0xe000edfc
6000126c:	.word	0x20200000
60001270:	.word	0x000009d5
60001274:	.word	0xe0001000
60001278:	.word	0xe0001004
6000127c:	.word	0x20000410
60001280:	.word	0x23c34600
60001284:	.word	0x40084000
60001288:	.word	0x400d4000
6000128c:	.word	0x56c00000
60001290:	.word	0x20000414
60001294:	.word	0x20001000
60001298:	.word	0x2018101b
6000129c:	.word	0x13110d0c

600012a0 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600012a0:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a2:	ldr	r2, [pc, #100]	; (60001308 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a4:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a6:	ldr	r3, [pc, #100]	; (6000130c <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a8:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	ldr	r0, [pc, #96]	; (60001310 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ae:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b0:	ldr	r6, [pc, #96]	; (60001314 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012b2:	ldr	r5, [pc, #100]	; (60001318 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b6:	ldr	r7, [pc, #100]	; (6000131c <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b8:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012bc:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012be:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c0:	ldr	r6, [pc, #92]	; (60001320 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c2:	ldr	r5, [pc, #96]	; (60001324 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c6:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c8:	ldr	r7, [pc, #92]	; (60001328 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ca:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012cc:	ldr	r6, [pc, #92]	; (6000132c <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012ce:	ldr	r5, [pc, #96]	; (60001330 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012d0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d4:	ldr	r7, [pc, #92]	; (60001334 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d6:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d8:	ldr	r6, [pc, #92]	; (60001338 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012da:	ldr	r5, [pc, #96]	; (6000133c <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012dc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012de:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012e0:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012e2:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012e4:	dsb	sy
	asm("isb");
600012e8:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012ec:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600012f8:	ldr.w	r3, [r2, #-136]
600012fc:	orr.w	r3, r3, #196608	; 0x30000
60001300:	str.w	r3, [r2, #-136]
60001304:	pop	{r4, r5, r6, r7, pc}
60001306:	nop
60001308:	.word	0xe000ed9c
6000130c:	.word	0xe000eda0
60001310:	.word	0xe000ed94
60001314:	.word	0x03080025
60001318:	.word	0x00200011
6000131c:	.word	0x07020021
60001320:	.word	0x20000012
60001324:	.word	0x13080025
60001328:	.word	0x20200013
6000132c:	.word	0x130b0027
60001330:	.word	0x40000014
60001334:	.word	0x13100033
60001338:	.word	0x60000015
6000133c:	.word	0x070b002f

60001340 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
60001340:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001342:	ldr	r2, [pc, #92]	; (600013a0 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001344:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001346:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000134a:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000134e:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001352:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001356:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135a:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000135c:	tst.w	r3, #2
60001360:	beq.n	60001370 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001362:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001364:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001366:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001368:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000136a:	tst.w	r3, #2
6000136e:	bne.n	60001362 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001370:	tst.w	r3, #8192	; 0x2000
60001374:	bne.n	6000137a <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001376:	str	r5, [r2, #20]
			continue;
60001378:	b.n	6000135a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000137a:	tst.w	r3, #4096	; 0x1000
6000137e:	bne.n	60001384 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001380:	str	r6, [r2, #20]
			continue;
60001382:	b.n	6000135a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001384:	cmp	r3, #0
60001386:	bge.n	6000135a <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001388:	tst.w	r3, #65536	; 0x10000
6000138c:	beq.n	60001392 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138e:	str	r1, [r2, #24]
			continue;
60001390:	b.n	6000135a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001392:	lsls	r3, r3, #25
60001394:	bmi.n	6000139a <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001396:	str	r7, [r2, #20]
			continue;
60001398:	b.n	6000135a <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000139a:	pop	{r4, r5, r6, r7}
6000139c:	bx	lr
6000139e:	nop
600013a0:	.word	0x400d8000

600013a4 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013a4:	ldr	r3, [pc, #192]	; (60001468 <usb_init+0xc4>)
600013a6:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
600013aa:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013ac:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013b0:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013b4:	bl	60001600 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013b8:	ldr	r1, [pc, #176]	; (6000146c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013ba:	ldr	r0, [pc, #180]	; (60001470 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013bc:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c0:	ldr	r4, [pc, #176]	; (60001474 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c2:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013c6:	ldr	r3, [pc, #176]	; (60001478 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013c8:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013cc:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013d0:	ldr	r2, [r4, #0]
600013d2:	ands	r3, r2
600013d4:	cbnz	r3, 600013de <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013d6:	ldr.w	r3, [r0, #424]	; 0x1a8
600013da:	lsls	r2, r3, #30
600013dc:	beq.n	60001414 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013de:	ldr	r3, [pc, #144]	; (60001470 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013e0:	mov.w	r1, #2147483648	; 0x80000000
600013e4:	ldr	r2, [pc, #140]	; (60001474 <usb_init+0xd0>)
600013e6:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013e8:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013ea:	ldr.w	r1, [r3, #320]	; 0x140
600013ee:	orr.w	r1, r1, #2
600013f2:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600013f6:	ldr.w	r3, [r2, #320]	; 0x140
600013fa:	lsls	r3, r3, #30
600013fc:	bmi.n	600013f6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600013fe:	mov.w	r0, #131072	; 0x20000
60001402:	ldr	r1, [pc, #120]	; (6000147c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001404:	ldr	r3, [pc, #108]	; (60001474 <usb_init+0xd0>)
60001406:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000140a:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000140c:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000140e:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001410:	bl	60001618 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001414:	ldr	r5, [pc, #104]	; (60001480 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001416:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001418:	ldr	r3, [pc, #88]	; (60001474 <usb_init+0xd0>)
6000141a:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000141e:	ldr	r4, [pc, #80]	; (60001470 <usb_init+0xcc>)
60001420:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001422:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001424:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001426:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001428:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000142a:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000142e:	mov.w	r2, #640	; 0x280
60001432:	bl	600015f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001436:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000143a:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000143e:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001442:	ldr	r2, [pc, #64]	; (60001484 <usb_init+0xe0>)
60001444:	ldr	r1, [pc, #64]	; (60001488 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001446:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001448:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000144a:	str.w	r5, [r4, #344]	; 0x158
6000144e:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001452:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001456:	ldr	r2, [pc, #52]	; (6000148c <usb_init+0xe8>)
60001458:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000145c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000145e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001460:	str.w	r3, [r4, #320]	; 0x140
60001464:	pop	{r4, r5, r6, pc}
60001466:	nop
60001468:	.word	0x400d8000
6000146c:	.word	0x400fc000
60001470:	.word	0x402e0000
60001474:	.word	0x400d9000
60001478:	.word	0x001e1c00
6000147c:	.word	0xe000e28c
60001480:	.word	0x20003000
60001484:	.word	0x20001000
60001488:	.word	0x00001125
6000148c:	.word	0xe000e10c

60001490 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001490:	ldr	r3, [pc, #68]	; (600014d8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001492:	ldr	r1, [pc, #72]	; (600014dc <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001494:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001496:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001498:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
6000149c:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000149e:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014a0:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014a6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014a8:	orr.w	r0, r0, #768	; 0x300
600014ac:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014b0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	ldr	r3, [r2, #72]	; 0x48
600014b4:	lsls	r3, r3, #24
600014b6:	bmi.n	600014b2 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014b8:	ldr	r3, [pc, #36]	; (600014e0 <analog_init+0x50>)
600014ba:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014be:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014c0:	ldr	r2, [pc, #24]	; (600014dc <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014c2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014c4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014c6:	ldr	r3, [r2, #72]	; 0x48
600014c8:	ands.w	r3, r3, #128	; 0x80
600014cc:	bne.n	600014c6 <analog_init+0x36>
	calibrating = 0;
600014ce:	ldr	r2, [pc, #20]	; (600014e4 <analog_init+0x54>)
600014d0:	strb	r3, [r2, #0]
}
600014d2:	pop	{r4, r5}
600014d4:	bx	lr
600014d6:	nop
600014d8:	.word	0x400fc000
600014dc:	.word	0x400c4000
600014e0:	.word	0x400c8000
600014e4:	.word	0x20000db1

600014e8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e8:	ldr	r2, [pc, #216]	; (600015c4 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014ea:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014ec:	ldr	r1, [pc, #216]	; (600015c8 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f2:	ldr	r3, [r2, #0]
600014f4:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014f8:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014fa:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fc:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001500:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001504:	ldr.w	lr, [pc, #212]	; 600015dc <tempmon_init+0xf4>
60001508:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000150a:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150e:	ldr	r7, [pc, #188]	; (600015cc <tempmon_init+0xe4>)
60001510:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001514:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001518:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000151c:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001520:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001528:	vmov	s15, r0
6000152c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001532:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001536:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153e:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001548:	ldr	r5, [pc, #132]	; (600015d0 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000154a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001550:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001558:	ldr	r6, [pc, #120]	; (600015d4 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	ldr	r1, [pc, #120]	; (600015d8 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001560:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001562:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001564:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001568:	vmov	s15, r3
6000156c:	vcvt.f32.u32	s15, s15
60001570:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001574:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001578:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001580:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001584:	vmov	r3, s11
60001588:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000158c:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001590:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001594:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001596:	and.w	r1, r1, r0, lsl #16
6000159a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a2:	orrs	r3, r1
600015a4:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a8:	vmov	r3, s15
600015ac:	ldr.w	r1, [r2, #272]	; 0x110
600015b0:	ubfx	r3, r3, #0, #12
600015b4:	orrs	r3, r1
600015b6:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015ba:	ldr	r3, [r2, #0]
600015bc:	orr.w	r3, r3, #2
600015c0:	str	r3, [r2, #0]
600015c2:	pop	{r4, r5, r6, r7, pc}
600015c4:	.word	0x400d8180
600015c8:	.word	0x401f4400
600015cc:	.word	0x20000dbc
600015d0:	.word	0x20000db8
600015d4:	.word	0x20000dc0
600015d8:	.word	0x0fff0000
600015dc:	.word	0x20000db4

600015e0 <_init>:
600015e0:	push	{r3, r4, r5, r6, r7, lr}
600015e2:	nop
600015e4:	pop	{r3, r4, r5, r6, r7}
600015e6:	pop	{r3}
600015e8:	mov	lr, r3
600015ea:	bx	lr
600015ec:			; <UNDEFINED> instruction: 0xffffffff

600015f0 <__startup_late_hook_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__startup_late_hook_veneer+0x4>
600015f4:	.word	0x00000afd

600015f8 <__memset_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__memset_veneer+0x4>
600015fc:	.word	0x00001aa1

60001600 <__usb_init_serialnumber_veneer>:
60001600:	ldr.w	pc, [pc]	; 60001604 <__usb_init_serialnumber_veneer+0x4>
60001604:	.word	0x0000184d

60001608 <__setup_veneer>:
60001608:	ldr.w	pc, [pc]	; 6000160c <__setup_veneer+0x4>
6000160c:	.word	0x0000007d

60001610 <__yield_veneer>:
60001610:	ldr.w	pc, [pc]	; 60001614 <__yield_veneer+0x4>
60001614:	.word	0x00000751

60001618 <__delay_veneer>:
60001618:	ldr.w	pc, [pc]	; 6000161c <__delay_veneer+0x4>
6000161c:	.word	0x00000359

60001620 <____libc_init_array_veneer>:
60001620:	ldr.w	pc, [pc]	; 60001624 <____libc_init_array_veneer+0x4>
60001624:	.word	0x00001a51

60001628 <__set_arm_clock_veneer>:
60001628:	ldr.w	pc, [pc]	; 6000162c <__set_arm_clock_veneer+0x4>
6000162c:	.word	0x000000c5

60001630 <__loop_veneer>:
60001630:	ldr.w	pc, [pc]	; 60001634 <__loop_veneer+0x4>
60001634:	.word	0x00000085

60001638 <__startup_early_hook_veneer>:
60001638:	ldr.w	pc, [pc]	; 6000163c <__startup_early_hook_veneer+0x4>
6000163c:	.word	0x00000af9

60001640 <__pwm_init_veneer>:
60001640:	ldr.w	pc, [pc]	; 60001644 <__pwm_init_veneer+0x4>
60001644:	.word	0x00000419

60001648 <__init_array_start>:
60001648:	.word	0x00000045
6000164c:	.word	0x000000b1

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	nop.w
      32:	movs	r3, #1
      34:	.word	0xbd107023
      38:	lsls	r0, r6, #15
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	subs	r4, r2, r5
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	movs	r0, r0
      6c:	.word	0x200003f4
      70:	subs	r4, r2, r5
      72:	.short	0x0000
      74:	lsls	r0, r6, #15
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <setup>:

using namespace collywobble_namespace;

void setup() {
  Serial.begin(600000000);
  pinMode(13, OUTPUT);
      7c:	.word	0x200d2101
      80:	b.w	6d0 <pinMode>

00000084 <loop>:
}

TestClass test_class(10);


void loop() {
      84:	.word	0x4c08b510
  int var = test_class.getTestVar();
      88:	ldr	r0, [pc, #32]	; (ac <loop+0x28>)
      8a:	.short	0xf000
      8c:	ldrb.w	r4, [r9, <undefined>]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
      90:	.word	0xf0004620
      94:	ldc2	6, cr4, [r9, #-128]	; 0xffffff80
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
      98:	.word	0xfcc6f000
  Serial.println(var);
  delay(500);
      9c:	mov.w	r0, #500	; 0x1f4
   
}
      a0:	.word	0x4010e8bd


void loop() {
  int var = test_class.getTestVar();
  Serial.println(var);
  delay(500);
      a4:	b.w	358 <delay>
      a8:	.word	0x20000324
      ac:	lsls	r4, r1, #16
      ae:	movs	r0, #0

000000b0 <_GLOBAL__sub_I_setup>:
void setup() {
  Serial.begin(600000000);
  pinMode(13, OUTPUT);
}

TestClass test_class(10);
      b0:	.word	0x4801210a
      b4:	b.w	bc <collywobble_namespace::TestClass::TestClass(unsigned char)>
      b8:	.word	0x2000040c

000000bc <collywobble_namespace::TestClass::TestClass(unsigned char)>:

TestClass::TestClass(
  uint8_t test_var_init
):
  // INITIALISATION LIST
  test_var(test_var_init)
      bc:	strb	r1, [r0, #0]
{}
      be:	.short	0x4770

000000c0 <collywobble_namespace::TestClass::getTestVar()>:

uint8_t TestClass::getTestVar(){
  return test_var;
}
      c0:	ldrb	r0, [r0, #0]
      c2:	.short	0x4770

000000c4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
      c4:	ldr	r2, [pc, #560]	; (2f8 <set_arm_clock+0x234>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
      c6:	ldr	r3, [pc, #564]	; (2fc <set_arm_clock+0x238>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
      c8:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
      ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
      ce:	ldr	r5, [pc, #560]	; (300 <set_arm_clock+0x23c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
      d0:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
      d2:	.short	0x6999
	uint32_t dcdc = DCDC_REG3;
      d4:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
      d6:	.short	0xd91d
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
      d8:	ldr	r3, [pc, #552]	; (304 <set_arm_clock+0x240>)
      da:	cmp	r0, r3
      dc:	bls.w	2e2 <set_arm_clock+0x21e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
      e0:	ldr	r3, [pc, #548]	; (308 <set_arm_clock+0x244>)
      e2:	movw	r6, #1575	; 0x627
      e6:	ldr.w	lr, [pc, #608]	; 348 <set_arm_clock+0x284>
      ea:	add	r3, r0
      ec:	ldr	r5, [pc, #540]	; (30c <set_arm_clock+0x248>)
      ee:	lsrs	r2, r3, #8
      f0:	.word	0x3202fbae
      f4:	lsrs	r3, r2, #7
      f6:	.short	0xeb03
      f8:	lsls	r3, r0, #14
      fa:	.short	0xeb03
      fc:	lsls	r3, r0, #10
      fe:	addw	r3, r2, #1250	; 0x4e2
     102:	.short	0x42b3
     104:	it	cs
     106:	movcs	r3, r6
     108:	.word	0x7348f5a3
     10c:	umull	r3, r6, r5, r3
     110:	.word	0xe00408f6
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     114:	ldr	r6, [pc, #504]	; (310 <set_arm_clock+0x24c>)
     116:	.short	0x42b0
     118:	ite	ls
     11a:	.short	0x2606
     11c:	movhi	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     11e:	.short	0x4a77
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     120:	and.w	lr, r7, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     124:	.word	0x3080f8d2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     128:	cmp	lr, r6
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     12a:	orr.w	r3, r3, #192	; 0xc0
     12e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     132:	bcs.n	14a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     134:	ldr	r3, [pc, #456]	; (300 <set_arm_clock+0x23c>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     136:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     13a:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     13c:	orrs	r7, r6
		DCDC_REG3 = dcdc;
     13e:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     140:	ldr	r3, [r2, #0]
     142:	cmp	r3, #0
     144:	bge.n	140 <set_arm_clock+0x7c>
     146:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     14a:	ands.w	r3, r4, #33554432	; 0x2000000
     14e:	bne.n	1ae <set_arm_clock+0xea>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     150:	ldr	r5, [pc, #448]	; (314 <set_arm_clock+0x250>)
     152:	ldr	r2, [pc, #452]	; (318 <set_arm_clock+0x254>)
     154:	ldr.w	ip, [r5, #16]
     158:	mov	r5, r2
     15a:	and.w	r2, ip, r2
     15e:	cmp	r2, r5
     160:	itet	eq
     162:	moveq.w	r3, #402653184	; 0x18000000
     166:	movne.w	r2, #4096	; 0x1000
     16a:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     16c:	eor.w	r5, r4, r3
     170:	tst.w	r5, #939524096	; 0x38000000
     174:	beq.n	184 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     176:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     17a:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     17e:	ldr	r5, [pc, #380]	; (2fc <set_arm_clock+0x238>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     180:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
     182:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     184:	eor.w	r3, r1, r2
     188:	tst.w	r3, #12288	; 0x3000
     18c:	beq.n	1a0 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     18e:	ldr	r3, [pc, #364]	; (2fc <set_arm_clock+0x238>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     190:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     194:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     196:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     198:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     19a:	ldr	r3, [r2, #72]	; 0x48
     19c:	lsls	r5, r3, #28
     19e:	bmi.n	19a <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     1a0:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     1a4:	ldr	r2, [pc, #340]	; (2fc <set_arm_clock+0x238>)
     1a6:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     1a8:	ldr	r3, [r2, #72]	; 0x48
     1aa:	lsls	r1, r3, #26
     1ac:	bmi.n	1a8 <set_arm_clock+0xe4>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     1ae:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     1b0:	ldr	r5, [pc, #360]	; (31c <set_arm_clock+0x258>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     1b2:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     1b4:	mul.w	r3, r1, r2
     1b8:	mul.w	r3, r0, r3
     1bc:	cmp	r3, r5
     1be:	bhi.n	1d4 <set_arm_clock+0x110>
		if (div_arm < 8) {
     1c0:	cmp	r2, #7
     1c2:	bhi.w	2ce <set_arm_clock+0x20a>
			div_arm = div_arm + 1;
     1c6:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     1c8:	mul.w	r3, r1, r2
     1cc:	mul.w	r3, r0, r3
     1d0:	cmp	r3, r5
     1d2:	bls.n	1c0 <set_arm_clock+0xfc>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     1d4:	ldr	r0, [pc, #328]	; (320 <set_arm_clock+0x25c>)
     1d6:	ldr	r5, [pc, #332]	; (324 <set_arm_clock+0x260>)
     1d8:	add	r0, r3
     1da:	umull	r3, r0, r5, r0
     1de:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
     1e0:	cmp	r3, #108	; 0x6c
     1e2:	bhi.n	2d8 <set_arm_clock+0x214>
	if (mult < 54) mult = 54;
     1e4:	cmp	r3, #53	; 0x35
     1e6:	bhi.n	2e6 <set_arm_clock+0x222>
     1e8:	ldr.w	r8, [pc, #352]	; 34c <set_arm_clock+0x288>
     1ec:	movs	r3, #54	; 0x36
     1ee:	ldr	r0, [pc, #312]	; (328 <set_arm_clock+0x264>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     1f0:	ldr.w	ip, [pc, #288]	; 314 <set_arm_clock+0x250>
     1f4:	ldr	r5, [pc, #308]	; (32c <set_arm_clock+0x268>)
     1f6:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     1fa:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     1fe:	and.w	r5, r9, r5
     202:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     204:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     208:	beq.n	222 <set_arm_clock+0x15e>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     20a:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     20e:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     212:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     214:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     218:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     21c:	ldr	r3, [r5, #0]
     21e:	cmp	r3, #0
     220:	bge.n	21c <set_arm_clock+0x158>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     222:	ldr.w	ip, [pc, #216]	; 2fc <set_arm_clock+0x238>
     226:	subs	r2, #1
     228:	ldr.w	r3, [ip, #16]
     22c:	and.w	r3, r3, #7
     230:	cmp	r3, r2
     232:	beq.n	244 <set_arm_clock+0x180>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     234:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     238:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     23a:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     23e:	ldr	r3, [r5, #72]	; 0x48
     240:	lsls	r3, r3, #15
     242:	bmi.n	23e <set_arm_clock+0x17a>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     244:	subs	r1, #1
     246:	lsls	r1, r1, #10
     248:	eor.w	r3, r4, r1
     24c:	tst.w	r3, #7168	; 0x1c00
     250:	beq.n	268 <set_arm_clock+0x1a4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     252:	ldr	r3, [pc, #168]	; (2fc <set_arm_clock+0x238>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     254:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     258:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     25c:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     25e:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
     260:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     262:	ldr	r3, [r2, #72]	; 0x48
     264:	lsls	r1, r3, #30
     266:	bmi.n	262 <set_arm_clock+0x19e>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     268:	ldr	r3, [pc, #196]	; (330 <set_arm_clock+0x26c>)
     26a:	ldr	r1, [pc, #200]	; (334 <set_arm_clock+0x270>)
     26c:	add	r3, r0
     26e:	lsrs	r3, r3, #7
     270:	umull	r3, r1, r1, r3
     274:	lsrs	r1, r1, #12
     276:	cmp	r1, #4
     278:	it	cs
     27a:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     27c:	subs	r3, r1, #1
     27e:	lsls	r3, r3, #8
     280:	eor.w	r2, r4, r3
     284:	tst.w	r2, #768	; 0x300
     288:	beq.n	298 <set_arm_clock+0x1d4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     28a:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     28e:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     292:	ldr	r2, [pc, #104]	; (2fc <set_arm_clock+0x238>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     294:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     296:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
     298:	ldr	r3, [pc, #96]	; (2fc <set_arm_clock+0x238>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     29a:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     29e:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
     2a0:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     2a2:	ldr	r3, [r2, #72]	; 0x48
     2a4:	lsls	r3, r3, #26
     2a6:	bmi.n	2a2 <set_arm_clock+0x1de>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     2a8:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     2ac:	ldr	r2, [pc, #136]	; (338 <set_arm_clock+0x274>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     2ae:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     2b0:	ldr	r3, [pc, #136]	; (33c <set_arm_clock+0x278>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     2b2:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
     2b4:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     2b6:	bcs.n	2ca <set_arm_clock+0x206>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     2b8:	ldr	r3, [pc, #68]	; (300 <set_arm_clock+0x23c>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     2ba:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     2be:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     2c0:	orrs	r7, r6
		DCDC_REG3 = dcdc;
     2c2:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     2c4:	ldr	r3, [r2, #0]
     2c6:	cmp	r3, #0
     2c8:	bge.n	2c4 <set_arm_clock+0x200>
	}

	return frequency;
}
     2ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     2ce:	cmp	r1, #4
     2d0:	bhi.n	1d4 <set_arm_clock+0x110>
				div_ahb = div_ahb + 1;
     2d2:	adds	r1, #1
				div_arm = 1;
     2d4:	movs	r2, #1
     2d6:	b.n	1b4 <set_arm_clock+0xf0>
     2d8:	ldr.w	r8, [pc, #116]	; 350 <set_arm_clock+0x28c>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     2dc:	movs	r3, #108	; 0x6c
     2de:	ldr	r0, [pc, #96]	; (340 <set_arm_clock+0x27c>)
     2e0:	b.n	1f0 <set_arm_clock+0x12c>
     2e2:	movs	r6, #18
     2e4:	b.n	11e <set_arm_clock+0x5a>
     2e6:	ldr	r0, [pc, #92]	; (344 <set_arm_clock+0x280>)
     2e8:	ldr.w	r8, [pc, #104]	; 354 <set_arm_clock+0x290>
     2ec:	mul.w	r0, r0, r3
     2f0:	orr.w	r8, r3, r8
     2f4:	b.n	1f0 <set_arm_clock+0x12c>
     2f6:	nop
     2f8:	.word	0x1f78a400
     2fc:	.word	0x400fc000
     300:	.word	0x40080000
     304:	.word	0x23c34600
     308:	.word	0xdc3cba00
     30c:	.word	0x51eb851f
     310:	.word	0x016e3600
     314:	.word	0x400d8000
     318:	.word	0x80003040
     31c:	.word	0x269fb1ff
     320:	.word	0x005b8d80
     324:	.word	0x165e9f81
     328:	.word	0x269fb200
     32c:	.word	0x8001307f
     330:	.word	0x08f0d17f
     334:	.word	0x00e5109f
     338:	.word	0x2000031c
     33c:	.word	0x20000318
     340:	.word	0x4d3f6400
     344:	.word	0x00b71b00
     348:	.word	0x004cb223
     34c:	.word	0x80002036
     350:	.word	0x8000206c
     354:	.word	0x80002000

00000358 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     358:	cmp	r0, #0
     35a:	beq.n	402 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
     35c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     360:	mov	r9, r0
     362:	sub	sp, #12
     364:	ldr	r4, [pc, #156]	; (404 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     366:	movs	r0, #1
     368:	ldr	r5, [pc, #156]	; (408 <delay+0xb0>)
     36a:	ldr	r6, [pc, #160]	; (40c <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     36c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     370:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     372:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     374:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
     378:	cmp	r3, #0
     37a:	bne.n	36c <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
     37c:	ldr	r7, [pc, #144]	; (410 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
     37e:	mov.w	lr, #1000	; 0x3e8
     382:	ldr	r0, [pc, #144]	; (414 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
     384:	ldr.w	ip, [r7]
     388:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
     38a:	add.w	r7, r7, #1660944384	; 0x63000000
     38e:	ldr	r3, [r0, #0]
     390:	rsb	r1, r1, ip
     394:	add.w	r7, r7, #1818624	; 0x1bc000
     398:	addw	r7, r7, #3711	; 0xe7f
     39c:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     3a0:	mov	sl, r7
     3a2:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
     3a4:	lsrs	r3, r3, #18
     3a6:	udiv	r3, r1, r3
     3aa:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     3ae:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     3b2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     3b4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     3b6:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
     3ba:	cmp	r3, #0
     3bc:	bne.n	3ae <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
     3be:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     3c2:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
     3c6:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     3c8:	mul.w	r2, lr, r2
     3cc:	rsb	r1, r1, ip
     3d0:	umull	r3, lr, sl, r3
     3d4:	rsb	r3, r8, r2
     3d8:	mov.w	r2, lr, lsr #18
     3dc:	udiv	r1, r1, r2
     3e0:	adds	r2, r1, r3
     3e2:	cmp.w	r2, #1000	; 0x3e8
     3e6:	bcc.n	3f8 <delay+0xa0>
			if (--msec == 0) return;
     3e8:	subs.w	r9, r9, #1
			start += 1000;
     3ec:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     3f0:	bne.n	3ae <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     3f2:	add	sp, #12
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     3fa:	bl	750 <yield>
	}
     3fe:	ldr	r0, [sp, #4]
     400:	b.n	3ae <delay+0x56>
     402:	bx	lr
     404:	.word	0x20000de4
     408:	.word	0x20000414
     40c:	.word	0x20000410
     410:	.word	0xe0001004
     414:	.word	0x2000031c

00000418 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     418:	ldr	r0, [pc, #656]	; (6ac <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     41a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     41e:	ldr	r3, [pc, #656]	; (6b0 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     420:	ldr	r2, [r0, #120]	; 0x78
     422:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
     426:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     428:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     42a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     42c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     430:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     434:	ldr	r4, [pc, #636]	; (6b4 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     436:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     43a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     43c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     440:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     442:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     444:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     448:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     44c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     450:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     454:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     458:	ldrh.w	r0, [r3, #392]	; 0x188
     45c:	uxth	r0, r0
     45e:	orr.w	r0, r0, #240	; 0xf0
     462:	strh.w	r0, [r3, #392]	; 0x188
     466:	add.w	r0, r1, r1, lsl #1
     46a:	ldr	r3, [pc, #580]	; (6b0 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
     46c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     46e:	movs	r5, #0
     470:	lsls	r0, r0, #5
     472:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     474:	cmp	r1, #4
     476:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     478:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     47c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
     47e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     480:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     482:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     484:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     486:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     488:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     48a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     48c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     48e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     490:	bne.n	466 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     492:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     496:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     49a:	ldr	r3, [pc, #540]	; (6b8 <pwm_init+0x2a0>)
     49c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     4a0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     4a2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     4a4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     4a8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     4aa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     4ae:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     4b2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     4b6:	ldrh.w	r0, [r4, #392]	; 0x188
     4ba:	uxth	r0, r0
     4bc:	orr.w	r0, r0, #3840	; 0xf00
     4c0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     4c4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     4c8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     4cc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     4d0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     4d4:	ldrh.w	r0, [r3, #392]	; 0x188
     4d8:	uxth	r0, r0
     4da:	orr.w	r0, r0, #240	; 0xf0
     4de:	strh.w	r0, [r3, #392]	; 0x188
     4e2:	add.w	r0, r1, r1, lsl #1
     4e6:	ldr	r3, [pc, #464]	; (6b8 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
     4e8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     4ea:	movs	r5, #0
     4ec:	lsls	r0, r0, #5
     4ee:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     4f0:	cmp	r1, #4
     4f2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     4f4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     4f6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     4fa:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     4fc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     4fe:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     500:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     502:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     504:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     506:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     508:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     50a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     50c:	bne.n	4e2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     50e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     512:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     516:	ldr	r3, [pc, #420]	; (6bc <pwm_init+0x2a4>)
     518:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     51c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     51e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     520:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     524:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     526:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     52a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     52e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     532:	ldrh.w	r0, [r4, #392]	; 0x188
     536:	uxth	r0, r0
     538:	orr.w	r0, r0, #3840	; 0xf00
     53c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     540:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     544:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     548:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     54c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     550:	ldrh.w	r0, [r3, #392]	; 0x188
     554:	uxth	r0, r0
     556:	orr.w	r0, r0, #240	; 0xf0
     55a:	strh.w	r0, [r3, #392]	; 0x188
     55e:	add.w	r0, r1, r1, lsl #1
     562:	ldr	r3, [pc, #344]	; (6bc <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
     564:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     566:	movs	r5, #0
     568:	lsls	r0, r0, #5
     56a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     56c:	cmp	r1, #4
     56e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     570:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     572:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     576:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     578:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     57a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     57c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     57e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     580:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     582:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     584:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     586:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     588:	bne.n	55e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     58a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     58e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     592:	ldr	r3, [pc, #300]	; (6c0 <pwm_init+0x2a8>)
     594:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     598:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     59a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     59c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     5a0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     5a2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     5a6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     5aa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     5ae:	ldrh.w	r0, [r4, #392]	; 0x188
     5b2:	uxth	r0, r0
     5b4:	orr.w	r0, r0, #3840	; 0xf00
     5b8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     5bc:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     5c0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     5c4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     5c8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     5cc:	ldrh.w	r0, [r3, #392]	; 0x188
     5d0:	uxth	r0, r0
     5d2:	orr.w	r0, r0, #240	; 0xf0
     5d6:	strh.w	r0, [r3, #392]	; 0x188
     5da:	add.w	r0, r1, r1, lsl #1
     5de:	ldr	r3, [pc, #224]	; (6c0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
     5e0:	adds	r1, #1
     5e2:	lsls	r0, r0, #5
     5e4:	mov	r4, r3
     5e6:	cmp	r1, #4
     5e8:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     5ea:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     5ec:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     5f0:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     5f2:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     5f4:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     5f6:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     5f8:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
     5fa:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     5fc:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     5fe:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     600:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     602:	bne.n	5da <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     604:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     608:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     60a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     60c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     610:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     612:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     616:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     618:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     61c:	orrs	r3, r7
     61e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     622:	ldrh.w	r3, [r4, #392]	; 0x188
     626:	uxth	r3, r3
     628:	orr.w	r3, r3, #3840	; 0xf00
     62c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     630:	lsls	r0, r2, #5
     632:	ldr	r3, [pc, #144]	; (6c4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     634:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     636:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     638:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     63a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     63c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     63e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     640:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     642:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     646:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     648:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     64a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     64c:	bne.n	630 <pwm_init+0x218>
     64e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     650:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     652:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     656:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     65a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     65c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     660:	lsls	r0, r2, #5
     662:	ldr	r3, [pc, #100]	; (6c8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     664:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     666:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     668:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     66a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     66c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     66e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     670:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     672:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     674:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     676:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     678:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     67a:	bne.n	660 <pwm_init+0x248>
     67c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     67e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     680:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     684:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     688:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     68a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     68e:	lsls	r0, r2, #5
     690:	ldr	r3, [pc, #56]	; (6cc <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     692:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     694:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     696:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     698:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     69a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     69c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     69e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     6a0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     6a2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     6a4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     6a6:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     6a8:	bne.n	68e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     6aa:	pop	{r4, r5, r6, r7, pc}
     6ac:	.word	0x400fc000
     6b0:	.word	0x403dc000
     6b4:	.word	0xfc030000
     6b8:	.word	0x403e0000
     6bc:	.word	0x403e4000
     6c0:	.word	0x403e8000
     6c4:	.word	0x401dc000
     6c8:	.word	0x401e0000
     6cc:	.word	0x401e4000

000006d0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     6d0:	cmp	r0, #39	; 0x27
     6d2:	bhi.n	70e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     6d4:	lsls	r0, r0, #4
     6d6:	ldr	r2, [pc, #104]	; (740 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     6d8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     6da:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     6de:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     6e0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     6e2:	beq.n	710 <pinMode+0x40>
     6e4:	cmp	r1, #4
     6e6:	beq.n	710 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     6e8:	ldr	r4, [r3, #12]
     6ea:	ldr	r2, [r0, #4]
     6ec:	bic.w	r2, r2, r4
     6f0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     6f2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     6f4:	cbz	r1, 732 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     6f6:	cmp	r1, #2
     6f8:	beq.n	738 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     6fa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     6fc:	ldr	r3, [r3, #4]
}
     6fe:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     702:	ite	eq
     704:	ldreq	r1, [pc, #60]	; (744 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     706:	ldrne	r1, [pc, #64]	; (748 <pinMode+0x78>)
     708:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     70a:	movs	r2, #21
     70c:	str	r2, [r3, #0]
}
     70e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     710:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     712:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     714:	ldr	r4, [r0, #4]
     716:	orr.w	r2, r2, r4
     71a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     71c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     71e:	beq.n	732 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     720:	movw	r1, #2104	; 0x838
     724:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     726:	ldr	r3, [r3, #4]
     728:	movs	r2, #21
}
     72a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     72e:	str	r2, [r3, #0]
}
     730:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     732:	movs	r1, #56	; 0x38
     734:	str	r1, [r2, #0]
     736:	b.n	726 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     738:	ldr	r1, [pc, #16]	; (74c <pinMode+0x7c>)
     73a:	str	r1, [r2, #0]
     73c:	b.n	726 <pinMode+0x56>
     73e:	nop
     740:	.word	0x20000000
     744:	.word	0x00013038
     748:	.word	0x00010038
     74c:	.word	0x0001f038

00000750 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
     750:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
     752:	ldr	r4, [pc, #132]	; (7d8 <yield+0x88>)
     754:	ldrb	r3, [r4, #0]
     756:	cbnz	r3, 77a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     758:	ldr	r3, [pc, #128]	; (7dc <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     75a:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     75c:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
     75e:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     760:	cbnz	r3, 7aa <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     762:	ldr	r3, [pc, #124]	; (7e0 <yield+0x90>)
     764:	ldrb	r3, [r3, #0]
     766:	cmp	r3, #0
     768:	bne.n	7be <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
     76a:	ldr	r3, [pc, #120]	; (7e4 <yield+0x94>)

	running = 0;
     76c:	movs	r1, #0
     76e:	ldr	r2, [r3, #0]
     770:	strb	r1, [r4, #0]
     772:	cbz	r2, 77a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     774:	mrs	r2, IPSR
		if (ipsr != 0) return;
     778:	cbz	r2, 77c <yield+0x2c>
     77a:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     77c:	mrs	r0, PRIMASK
		__disable_irq();
     780:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
     782:	ldr	r2, [r3, #0]
		if (first == nullptr) {
     784:	cbz	r2, 7c4 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
     786:	ldr	r4, [pc, #96]	; (7e8 <yield+0x98>)
     788:	ldrb	r1, [r4, #0]
     78a:	cbnz	r1, 7c4 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     78c:	movs	r6, #1
		firstYield = first->_next;
     78e:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
     790:	strb	r6, [r4, #0]
		firstYield = first->_next;
     792:	str	r5, [r3, #0]
		if (firstYield) {
     794:	cbz	r5, 7cc <yield+0x7c>
			firstYield->_prev = nullptr;
     796:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     798:	cbnz	r0, 79c <yield+0x4c>
     79a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     79c:	movs	r5, #0
		(*(first->_function))(*first);
     79e:	ldr	r3, [r2, #8]
     7a0:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
     7a2:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
     7a4:	blx	r3
		runningFromYield = false;
     7a6:	strb	r5, [r4, #0]
     7a8:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     7aa:	bl	ea8 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
     7ae:	cmp	r0, #0
     7b0:	beq.n	762 <yield+0x12>
     7b2:	bl	a1c <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
     7b6:	ldr	r3, [pc, #40]	; (7e0 <yield+0x90>)
     7b8:	ldrb	r3, [r3, #0]
     7ba:	cmp	r3, #0
     7bc:	beq.n	76a <yield+0x1a>
     7be:	bl	18a4 <HardwareSerial::processSerialEvents()>
     7c2:	b.n	76a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     7c4:	cmp	r0, #0
     7c6:	bne.n	77a <yield+0x2a>
     7c8:	cpsie	i
     7ca:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
     7cc:	ldr	r3, [pc, #28]	; (7ec <yield+0x9c>)
     7ce:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     7d0:	cmp	r0, #0
     7d2:	bne.n	79c <yield+0x4c>
     7d4:	b.n	79a <yield+0x4a>
     7d6:	nop
     7d8:	.word	0x20000418
     7dc:	.word	0x20000320
     7e0:	.word	0x20000de0
     7e4:	.word	0x2000042c
     7e8:	.word	0x20000430
     7ec:	.word	0x20000428

000007f0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
     7f0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     7f2:	mrs	r2, PRIMASK
		__disable_irq();
     7f6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
     7f8:	ldrb	r3, [r0, #29]
     7fa:	cbnz	r3, 80a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
     7fc:	ldrb	r1, [r0, #28]
     7fe:	cmp	r1, #1
     800:	beq.n	814 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
     802:	cmp	r1, #3
     804:	beq.n	828 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
     806:	movs	r3, #1
     808:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     80a:	cbnz	r2, 80e <EventResponder::triggerEventNotImmediate()+0x1e>
     80c:	cpsie	i
	}
	enableInterrupts(irq);
}
     80e:	ldr.w	r4, [sp], #4
     812:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
     814:	ldr	r4, [pc, #68]	; (85c <EventResponder::triggerEventNotImmediate()+0x6c>)
     816:	ldr	r1, [r4, #0]
     818:	cbz	r1, 844 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     81a:	ldr	r1, [pc, #68]	; (860 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
     81c:	str	r3, [r0, #20]
				_prev = lastYield;
     81e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
     820:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
     822:	str	r3, [r0, #24]
				_prev->_next = this;
     824:	str	r0, [r3, #20]
     826:	b.n	806 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
     828:	ldr	r4, [pc, #56]	; (864 <EventResponder::triggerEventNotImmediate()+0x74>)
     82a:	ldr	r1, [r4, #0]
     82c:	cbz	r1, 850 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     82e:	ldr	r1, [pc, #56]	; (868 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
     830:	str	r3, [r0, #20]
				_prev = lastInterrupt;
     832:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
     834:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
     836:	str	r3, [r0, #24]
				_prev->_next = this;
     838:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
     83a:	ldr	r3, [pc, #48]	; (86c <EventResponder::triggerEventNotImmediate()+0x7c>)
     83c:	mov.w	r1, #268435456	; 0x10000000
     840:	str	r1, [r3, #0]
     842:	b.n	806 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
     844:	ldr	r3, [pc, #24]	; (860 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
     846:	str	r1, [r0, #20]
				_prev = nullptr;
     848:	str	r1, [r0, #24]
				firstYield = this;
     84a:	str	r0, [r4, #0]
				lastYield = this;
     84c:	str	r0, [r3, #0]
     84e:	b.n	806 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
     850:	ldr	r3, [pc, #20]	; (868 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
     852:	str	r1, [r0, #20]
				_prev = nullptr;
     854:	str	r1, [r0, #24]
				firstInterrupt = this;
     856:	str	r0, [r4, #0]
				lastInterrupt = this;
     858:	str	r0, [r3, #0]
     85a:	b.n	83a <EventResponder::triggerEventNotImmediate()+0x4a>
     85c:	.word	0x2000042c
     860:	.word	0x20000428
     864:	.word	0x2000041c
     868:	.word	0x20000420
     86c:	.word	0xe000ed04

00000870 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     870:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     872:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     874:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     876:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     878:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     87a:	beq.n	884 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     87c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     880:	b.w	7f0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     884:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     886:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     88a:	bx	r3

0000088c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
     88c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     88e:	mrs	r1, PRIMASK
		__disable_irq();
     892:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     894:	ldr	r4, [pc, #48]	; (8c8 <EventResponder::runFromInterrupt()+0x3c>)
     896:	ldr	r3, [r4, #0]
		if (first) {
     898:	cbz	r3, 8be <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     89a:	ldr	r6, [pc, #48]	; (8cc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
     89c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
     89e:	ldr	r2, [r3, #20]
     8a0:	str	r2, [r4, #0]
			if (firstInterrupt) {
     8a2:	cbz	r2, 8c4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
     8a4:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     8a6:	cbnz	r1, 8aa <EventResponder::runFromInterrupt()+0x1e>
     8a8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
     8aa:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
     8ac:	mov	r0, r3
     8ae:	ldr	r3, [r3, #8]
     8b0:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     8b2:	mrs	r1, PRIMASK
		__disable_irq();
     8b6:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
     8b8:	ldr	r3, [r4, #0]
		if (first) {
     8ba:	cmp	r3, #0
     8bc:	bne.n	89e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     8be:	cbnz	r1, 8c2 <EventResponder::runFromInterrupt()+0x36>
     8c0:	cpsie	i
     8c2:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
     8c4:	str	r2, [r6, #0]
     8c6:	b.n	8a6 <EventResponder::runFromInterrupt()+0x1a>
     8c8:	.word	0x2000041c
     8cc:	.word	0x20000420

000008d0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
     8d0:	b.w	88c <EventResponder::runFromInterrupt()>

000008d4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
     8d4:	ldr	r2, [pc, #96]	; (938 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
     8d6:	push	{r4, r5}
	if (listActive == nullptr) {
     8d8:	ldr	r4, [r2, #0]
     8da:	cmp	r4, #0
     8dc:	beq.n	930 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
     8de:	ldr	r3, [r0, #0]
     8e0:	ldr	r1, [r4, #0]
     8e2:	cmp	r3, r1
     8e4:	bcs.n	906 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     8e6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
     8e8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
     8ea:	str	r4, [r0, #8]
		_prev = nullptr;
     8ec:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
     8ee:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
     8f0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
     8f2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     8f4:	movs	r3, #2
}
     8f6:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
     8f8:	strb	r3, [r0, #20]
}
     8fa:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
     8fc:	str	r3, [r0, #0]
     8fe:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
     900:	ldr	r1, [r2, #0]
     902:	cmp	r3, r1
     904:	bcc.n	918 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     906:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     908:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
     90a:	cmp	r2, #0
     90c:	bne.n	8fc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
     90e:	str	r2, [r0, #8]
		_prev = timer;
     910:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
     912:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
     914:	str	r0, [r4, #8]
     916:	b.n	8f4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     918:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
     91a:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
     91c:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
     91e:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
     920:	str	r5, [r0, #12]
				timer->_prev = this;
     922:	str	r0, [r4, #12]
				_prev->_next = this;
     924:	ldr	r1, [r0, #12]
     926:	str	r0, [r1, #8]
				timer->_ms -= _ms;
     928:	str	r3, [r4, #0]
				_state = TimerActive;
     92a:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
     92c:	pop	{r4, r5}
     92e:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
     930:	str	r4, [r0, #8]
		_prev = nullptr;
     932:	str	r4, [r0, #12]
		listActive = this;
     934:	str	r0, [r2, #0]
     936:	b.n	8f4 <MillisTimer::addToActiveList()+0x20>
     938:	.word	0x20000424

0000093c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
     93c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
     93e:	ldr	r6, [pc, #136]	; (9c8 <MillisTimer::runFromTimer()+0x8c>)
     940:	ldr	r4, [r6, #0]
	while (timer) {
     942:	cbz	r4, 990 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     944:	ldr	r3, [r4, #0]
     946:	cmp	r3, #0
     948:	bne.n	9c0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
     94a:	mov	r5, r3
     94c:	ldr	r7, [pc, #124]	; (9cc <MillisTimer::runFromTimer()+0x90>)
     94e:	b.n	95a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
     950:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     952:	cbz	r4, 990 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
     954:	ldr	r3, [r4, #0]
     956:	cmp	r3, #0
     958:	bne.n	9c0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
     95a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
     95c:	cbz	r3, 960 <MillisTimer::runFromTimer()+0x24>
     95e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
     960:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
     962:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     964:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
     966:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     968:	ldr	r3, [r3, #0]
     96a:	cmp	r3, r7
     96c:	bne.n	9b2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     96e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     970:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     972:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     974:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
     976:	beq.n	9ba <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     978:	bl	7f0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
     97c:	ldr	r3, [r4, #4]
     97e:	cmp	r3, #0
     980:	beq.n	950 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
     982:	str	r3, [r4, #0]
				timer->addToActiveList();
     984:	mov	r0, r4
     986:	bl	8d4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
     98a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
     98c:	cmp	r4, #0
     98e:	bne.n	954 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     990:	mrs	r3, PRIMASK
		__disable_irq();
     994:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     996:	ldr	r2, [pc, #56]	; (9d0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     998:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
     99a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
     99c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
     99e:	cbnz	r3, 9a2 <MillisTimer::runFromTimer()+0x66>
     9a0:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
     9a2:	cbz	r0, 9b0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
     9a4:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
     9a6:	bl	8d4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
     9aa:	mov	r0, r4
     9ac:	cmp	r0, #0
     9ae:	bne.n	9a4 <MillisTimer::runFromTimer()+0x68>
     9b0:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
     9b2:	mov	r2, r4
     9b4:	movs	r1, #0
     9b6:	blx	r3
     9b8:	b.n	97c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     9ba:	ldr	r3, [r0, #8]
     9bc:	blx	r3
     9be:	b.n	97c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
     9c0:	subs	r3, #1
     9c2:	str	r3, [r4, #0]
			break;
     9c4:	b.n	990 <MillisTimer::runFromTimer()+0x54>
     9c6:	nop
     9c8:	.word	0x20000424
     9cc:	.word	0x00000871
     9d0:	.word	0x20000434

000009d4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     9d4:	ldr	r2, [pc, #16]	; (9e8 <systick_isr+0x14>)
     9d6:	ldr	r3, [pc, #20]	; (9ec <systick_isr+0x18>)
     9d8:	ldr	r1, [r2, #0]
	systick_millis_count++;
     9da:	ldr	r2, [pc, #20]	; (9f0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     9dc:	str	r1, [r3, #0]
	systick_millis_count++;
     9de:	ldr	r3, [r2, #0]
     9e0:	adds	r3, #1
     9e2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
     9e4:	b.w	93c <MillisTimer::runFromTimer()>
     9e8:	.word	0xe0001004
     9ec:	.word	0x20000410
     9f0:	.word	0x20000414

000009f4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
     9f4:	b.w	ebc <usb_serial_flush_input>

000009f8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     9f8:	b.w	e84 <usb_serial_peekchar>

000009fc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     9fc:	b.w	e38 <usb_serial_getchar>

00000a00 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     a00:	b.w	ea8 <usb_serial_available>

00000a04 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     a04:	b.w	f88 <usb_serial_flush_output>

00000a08 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
     a08:	b.w	f3c <usb_serial_write_buffer_free>

00000a0c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a0c:	mov	r0, r1
     a0e:	mov	r1, r2
     a10:	b.w	f24 <usb_serial_write>

00000a14 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     a14:	mov	r0, r1
     a16:	b.w	ef8 <usb_serial_putchar>
     a1a:	nop

00000a1c <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
     a1c:	ldr	r3, [pc, #4]	; (a24 <serialEvent()+0x8>)
     a1e:	movs	r2, #0
     a20:	strb	r2, [r3, #0]
     a22:	bx	lr
     a24:	.word	0x20000320

00000a28 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     a28:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
     a2a:	ldr	r4, [pc, #24]	; (a44 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
     a2c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
     a2e:	ldr	r3, [r0, #0]
     a30:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     a32:	ldrh	r4, [r4, #0]
	return write(buf, 2);
     a34:	add	r1, sp, #4
     a36:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
     a38:	strh.w	r4, [sp, #4]
	return write(buf, 2);
     a3c:	blx	r3
}
     a3e:	add	sp, #8
     a40:	pop	{r4, pc}
     a42:	nop
     a44:	.word	0x200002a8

00000a48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
     a48:	push	{r4, r5, r6, r7, lr}
     a4a:	mov	r6, r0
     a4c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
     a4e:	cmp	r2, #0
     a50:	beq.n	aba <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
     a52:	cmp	r2, #1
     a54:	it	eq
     a56:	moveq	r2, #10
	}


	if (n == 0) {
     a58:	cbz	r1, ab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
     a5a:	movs	r5, #33	; 0x21
     a5c:	b.n	a60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
     a5e:	uxtb	r5, r7
     a60:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
     a62:	udiv	r4, r1, r2
     a66:	mls	r1, r2, r4, r1
     a6a:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     a6c:	cmp	r1, #9
     a6e:	add.w	r1, r0, #55	; 0x37
     a72:	add.w	r0, r0, #48	; 0x30
     a76:	it	hi
     a78:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
     a7a:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     a7c:	add	r4, sp, #40	; 0x28
     a7e:	it	ls
     a80:	uxtbls	r0, r0
     a82:	add	r4, r5
     a84:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
     a88:	cmp	r1, #0
     a8a:	bne.n	a5e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
     a8c:	cbz	r3, a9c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
     a8e:	subs	r5, #1
		buf[i] = '-';
     a90:	add	r3, sp, #40	; 0x28
     a92:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
     a94:	uxtb	r5, r5
		buf[i] = '-';
     a96:	add	r3, r5
     a98:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
     a9c:	ldr	r3, [r6, #0]
     a9e:	add	r1, sp, #4
     aa0:	rsb	r2, r5, #34	; 0x22
     aa4:	mov	r0, r6
     aa6:	add	r1, r5
     aa8:	ldr	r3, [r3, #4]
     aaa:	blx	r3
}
     aac:	add	sp, #44	; 0x2c
     aae:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     ab0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     ab2:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
     ab4:	strb.w	r2, [sp, #37]	; 0x25
     ab8:	b.n	a8c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
     aba:	ldr	r3, [r0, #0]
     abc:	uxtb	r1, r1
     abe:	ldr	r3, [r3, #0]
     ac0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
     ac2:	add	sp, #44	; 0x2c
     ac4:	pop	{r4, r5, r6, r7, pc}
     ac6:	nop

00000ac8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
     ac8:	cmp	r1, #0
     aca:	blt.n	ad4 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
     acc:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
     ace:	movs	r2, #10
     ad0:	b.w	a48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
     ad4:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
     ad6:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
     ad8:	movs	r2, #10
     ada:	b.w	a48 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ade:	nop

00000ae0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     ae0:	movs	r0, #4
     ae2:	mov	r1, lr
     ae4:	tst	r0, r1
     ae6:	beq.n	af0 <_MSP>
     ae8:	mrs	r0, PSP
     aec:	b.w	b00 <HardFault_HandlerC>

00000af0 <_MSP>:
     af0:	mrs	r0, MSP
     af4:	b.w	b00 <HardFault_HandlerC>

00000af8 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     af8:	bx	lr
     afa:	nop

00000afc <startup_default_late_hook>:
extern void __libc_init_array(void); // C++ standard library


void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     afc:	bx	lr
     afe:	nop

00000b00 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b00:	ldr	r3, [pc, #108]	; (b70 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b02:	movs	r1, #5
     b04:	ldr	r2, [pc, #108]	; (b74 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b06:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b08:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     b0a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     b0e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     b10:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     b14:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b16:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b18:	ldr	r4, [pc, #92]	; (b78 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b1a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     b1c:	ldr	r0, [pc, #92]	; (b7c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     b1e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     b20:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     b24:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     b28:	ldr	r3, [r4, #0]
     b2a:	cmp	r3, r0
     b2c:	bls.n	b34 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     b2e:	ldr	r0, [pc, #80]	; (b80 <HardFault_HandlerC+0x80>)
     b30:	bl	c4 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b34:	ldr	r5, [pc, #56]	; (b70 <HardFault_HandlerC+0x70>)
     b36:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b38:	movs	r0, #0
     b3a:	ldr	r2, [pc, #72]	; (b84 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     b3c:	ldr	r1, [pc, #72]	; (b88 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     b3e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     b42:	str	r0, [sp, #4]
     b44:	ldr	r3, [sp, #4]
     b46:	cmp	r3, r2
     b48:	bhi.n	b56 <HardFault_HandlerC+0x56>
     b4a:	ldr	r3, [sp, #4]
     b4c:	adds	r3, #1
     b4e:	str	r3, [sp, #4]
     b50:	ldr	r3, [sp, #4]
     b52:	cmp	r3, r2
     b54:	bls.n	b4a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     b56:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     b5a:	str	r0, [sp, #4]
     b5c:	ldr	r3, [sp, #4]
     b5e:	cmp	r3, r1
     b60:	bhi.n	b3e <HardFault_HandlerC+0x3e>
     b62:	ldr	r3, [sp, #4]
     b64:	adds	r3, #1
     b66:	str	r3, [sp, #4]
     b68:	ldr	r3, [sp, #4]
     b6a:	cmp	r3, r1
     b6c:	bls.n	b62 <HardFault_HandlerC+0x62>
     b6e:	b.n	b3e <HardFault_HandlerC+0x3e>
     b70:	.word	0x401bc000
     b74:	.word	0x401f8000
     b78:	.word	0x2000031c
     b7c:	.word	0x23c345ff
     b80:	.word	0x11e1a300
     b84:	.word	0x000f423f
     b88:	.word	0x0089543f

00000b8c <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
     b8c:	ldr	r3, [r0, #4]
	int index = t->callback_param;
     b8e:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
     b90:	ubfx	r3, r3, #16, #15
     b94:	ldr	r1, [pc, #20]	; (bac <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
     b96:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
     b98:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
     b9c:	ldr	r4, [pc, #16]	; (bb0 <rx_event+0x24>)
     b9e:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
     ba0:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
     ba4:	strh.w	r5, [r4, r2, lsl #1]
}
     ba8:	pop	{r4, r5}
     baa:	bx	lr
     bac:	.word	0x20000c04
     bb0:	.word	0x20000bfc

00000bb4 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
     bb4:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
     bb6:	ldr	r3, [pc, #84]	; (c0c <usb_serial_flush_callback+0x58>)
     bb8:	ldrb	r3, [r3, #0]
     bba:	cbnz	r3, bcc <usb_serial_flush_callback+0x18>
     bbc:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
     bc0:	ldr	r3, [pc, #76]	; (c10 <usb_serial_flush_callback+0x5c>)
     bc2:	ldrb	r3, [r3, #0]
     bc4:	cbz	r3, bcc <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
     bc6:	ldr	r5, [pc, #76]	; (c14 <usb_serial_flush_callback+0x60>)
     bc8:	ldrh	r2, [r5, #0]
     bca:	cbnz	r2, bce <usb_serial_flush_callback+0x1a>
     bcc:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     bce:	ldr	r7, [pc, #72]	; (c18 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     bd0:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     bd2:	ldr	r6, [pc, #72]	; (c1c <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     bd4:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     bd8:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     bda:	ldr	r0, [pc, #68]	; (c20 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     bdc:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     be0:	add.w	r1, r0, r1, lsl #8
     be4:	mov	r0, r6
     be6:	bl	17a8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     bea:	mov	r1, r6
     bec:	movs	r0, #4
     bee:	bl	17d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     bf2:	ldrb	r3, [r7, #0]
     bf4:	adds	r3, #1
     bf6:	uxtb	r3, r3
     bf8:	cmp	r3, #6
     bfa:	it	ls
     bfc:	strbls	r3, [r7, #0]
	tx_available = 0;
     bfe:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
     c02:	it	hi
     c04:	strbhi	r4, [r7, #0]
	tx_available = 0;
     c06:	strh	r3, [r5, #0]
     c08:	pop	{r3, r4, r5, r6, r7, pc}
     c0a:	nop
     c0c:	.word	0x20000b38
     c10:	.word	0x20000db0
     c14:	.word	0x20000c80
     c18:	.word	0x20000b39
     c1c:	.word	0x20000ca0
     c20:	.word	0x20000438

00000c24 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     c24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c28:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     c2a:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
     c2c:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     c2e:	cmp	r1, #0
     c30:	beq.w	d5c <usb_serial_write.part.1+0x138>
     c34:	movs	r3, #0
     c36:	ldr.w	r8, [pc, #320]	; d78 <usb_serial_write.part.1+0x154>
     c3a:	ldr.w	r9, [pc, #304]	; d6c <usb_serial_write.part.1+0x148>
     c3e:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
     c40:	ldr	r6, [pc, #284]	; (d60 <usb_serial_write.part.1+0x13c>)
     c42:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     c46:	ldr.w	sl, [pc, #308]	; d7c <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
     c4a:	ldr	r2, [pc, #280]	; (d64 <usb_serial_write.part.1+0x140>)
     c4c:	ldrb	r4, [r2, #0]
     c4e:	ldr	r2, [pc, #280]	; (d68 <usb_serial_write.part.1+0x144>)
     c50:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     c54:	cmp	r3, #0
     c56:	bne.n	d14 <usb_serial_write.part.1+0xf0>
     c58:	mov	r5, r3
     c5a:	mov	r4, r3
     c5c:	b.n	c88 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     c5e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
     c62:	cbnz	r4, c66 <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
     c64:	ldr	r5, [r6, #0]
     c66:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     c68:	cmp	r3, #0
     c6a:	bne.n	d08 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
     c6c:	ldr	r3, [r6, #0]
     c6e:	subs	r3, r3, r5
     c70:	cmp	r3, #120	; 0x78
     c72:	bhi.n	d50 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
     c74:	ldrb.w	r3, [sl]
     c78:	cmp	r3, #0
     c7a:	beq.n	d08 <usb_serial_write.part.1+0xe4>
			yield();
     c7c:	bl	750 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
     c80:	ldrh.w	r3, [r8]
     c84:	cmp	r3, #0
     c86:	bne.n	d10 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
     c88:	mov	r0, r7
     c8a:	bl	1824 <usb_transfer_status>
			if (!(status & 0x80)) {
     c8e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
     c92:	ldr	r2, [pc, #216]	; (d6c <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
     c94:	bne.n	c5e <usb_serial_write.part.1+0x3a>
     c96:	ldr	r2, [pc, #204]	; (d64 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     c98:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
     c9c:	strb.w	r0, [r9]
     ca0:	ldrb	r4, [r2, #0]
     ca2:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     ca4:	ldr	r1, [pc, #200]	; (d70 <usb_serial_write.part.1+0x14c>)
     ca6:	lsls	r4, r4, #8
		if (size >= tx_available) {
     ca8:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
     caa:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     cae:	add	r0, r4
     cb0:	add	r0, r1
		if (size >= tx_available) {
     cb2:	bcc.n	d26 <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
     cb4:	ldr	r1, [sp, #8]
     cb6:	bl	18cc <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
     cba:	ldr	r3, [pc, #180]	; (d70 <usb_serial_write.part.1+0x14c>)
     cbc:	mov.w	r2, #256	; 0x100
     cc0:	mov	r0, r7
     cc2:	adds	r1, r3, r4
     cc4:	movs	r3, #0
     cc6:	bl	17a8 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
     cca:	mov	r1, r7
     ccc:	movs	r0, #4
     cce:	bl	17d8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
     cd2:	ldr	r3, [pc, #144]	; (d64 <usb_serial_write.part.1+0x140>)
     cd4:	ldr	r2, [pc, #140]	; (d64 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     cd6:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     cd8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     cda:	ldr	r0, [pc, #152]	; (d74 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
     cdc:	adds	r3, #1
     cde:	uxtb	r3, r3
     ce0:	cmp	r3, #6
     ce2:	it	hi
     ce4:	movhi	r3, #0
     ce6:	strb	r3, [r2, #0]
			size -= tx_available;
     ce8:	ldrh.w	r2, [r8]
			sent += tx_available;
     cec:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     cee:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
     cf2:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
     cf6:	add	r3, r2
     cf8:	str	r3, [sp, #4]
			data += tx_available;
     cfa:	ldr	r3, [sp, #8]
     cfc:	add	r3, r2
     cfe:	str	r3, [sp, #8]
     d00:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
     d02:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     d06:	bne.n	c4a <usb_serial_write.part.1+0x26>
     d08:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     d0a:	add	sp, #20
     d0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d10:	ldr	r2, [pc, #80]	; (d64 <usb_serial_write.part.1+0x140>)
     d12:	ldrb	r4, [r2, #0]
     d14:	mov	r2, r3
     d16:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     d1a:	lsls	r4, r4, #8
     d1c:	ldr	r1, [pc, #80]	; (d70 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
     d1e:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
     d20:	add	r0, r4
     d22:	add	r0, r1
		if (size >= tx_available) {
     d24:	bcs.n	cb4 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
     d26:	ldr	r1, [sp, #8]
     d28:	mov	r2, fp
     d2a:	str	r3, [sp, #12]
     d2c:	bl	18cc <memcpy>
			tx_available -= size;
     d30:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     d32:	mov.w	r1, #3221225472	; 0xc0000000
     d36:	ldr	r2, [pc, #60]	; (d74 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
     d38:	rsb	r3, fp, r3
     d3c:	strh.w	r3, [r8]
     d40:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
     d42:	str.w	r1, [r2, #132]	; 0x84
     d46:	add	r3, fp
     d48:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     d4a:	add	sp, #20
     d4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     d50:	movs	r3, #1
				return sent;
     d52:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
     d54:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     d56:	add	sp, #20
     d58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
     d5c:	mov	r0, r1
     d5e:	b.n	d0a <usb_serial_write.part.1+0xe6>
     d60:	.word	0x20000414
     d64:	.word	0x20000b39
     d68:	.word	0x20000ca0
     d6c:	.word	0x20000d80
     d70:	.word	0x20000438
     d74:	.word	0x402e0000
     d78:	.word	0x20000c80
     d7c:	.word	0x20000db0

00000d80 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
     d80:	bx	lr
     d82:	nop

00000d84 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
     d84:	movs	r1, #0
     d86:	movs	r2, #224	; 0xe0
     d88:	ldr	r0, [pc, #128]	; (e0c <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
     d8a:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     d8c:	mov	r4, r1
     d8e:	ldr	r6, [pc, #128]	; (e10 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
     d90:	ldr	r5, [pc, #128]	; (e14 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
     d92:	bl	1aa0 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     d96:	ldr	r7, [pc, #128]	; (e18 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
     d98:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     d9a:	ldr	r3, [pc, #128]	; (e1c <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     d9c:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
     d9e:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
     da0:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
     da2:	ldr	r6, [pc, #124]	; (e20 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
     da4:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     da6:	bl	1aa0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
     daa:	mov	r3, r4
     dac:	mov	r2, r4
     dae:	movs	r1, #16
     db0:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
     db2:	str	r4, [r7, #0]
     db4:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
     db6:	str	r4, [r6, #0]
     db8:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
     dba:	bl	1740 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
     dbe:	mov	r2, r4
     dc0:	ldr	r3, [pc, #96]	; (e24 <usb_serial_configure+0xa0>)
     dc2:	movs	r1, #64	; 0x40
     dc4:	movs	r0, #3
     dc6:	bl	16dc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
     dca:	mov	r3, r4
     dcc:	mov	r2, r4
     dce:	movs	r1, #64	; 0x40
     dd0:	movs	r0, #4
     dd2:	bl	1740 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
     dd6:	mov	r3, r4
     dd8:	movs	r2, #64	; 0x40
     dda:	mov	r0, r5
     ddc:	ldr	r1, [pc, #72]	; (e28 <usb_serial_configure+0xa4>)
     dde:	bl	17a8 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
     de2:	mov	r1, r5
     de4:	movs	r0, #3
     de6:	bl	1800 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
     dea:	ldr	r3, [pc, #64]	; (e2c <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
     dec:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
     dee:	ldr	r1, [pc, #64]	; (e30 <usb_serial_configure+0xac>)
     df0:	ldr	r0, [pc, #64]	; (e34 <usb_serial_configure+0xb0>)
     df2:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
     df4:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     df8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     dfc:	ldr.w	r2, [r3, #328]	; 0x148
     e00:	orr.w	r2, r2, #16777216	; 0x1000000
     e04:	str.w	r2, [r3, #328]	; 0x148
     e08:	pop	{r3, r4, r5, r6, r7, pc}
     e0a:	nop
     e0c:	.word	0x20000ca0
     e10:	.word	0x20000b39
     e14:	.word	0x20000c20
     e18:	.word	0x20000c04
     e1c:	.word	0x20000c80
     e20:	.word	0x20000bfc
     e24:	.word	0x00000b8d
     e28:	.word	0x20000b3c
     e2c:	.word	0x402e0000
     e30:	.word	0x20000d84
     e34:	.word	0x00000bb5

00000e38 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e38:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
     e3a:	ldr	r5, [pc, #56]	; (e74 <usb_serial_getchar+0x3c>)
     e3c:	ldr	r3, [pc, #56]	; (e78 <usb_serial_getchar+0x40>)
     e3e:	ldrh	r2, [r5, #0]
     e40:	ldrh	r0, [r3, #0]
     e42:	cmp	r2, r0
     e44:	bcs.n	e6e <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
     e46:	adds	r3, r2, #1
     e48:	ldr	r1, [pc, #48]	; (e7c <usb_serial_getchar+0x44>)
     e4a:	uxth	r3, r3
     e4c:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
     e4e:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
     e50:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
     e52:	bls.n	e58 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
     e54:	mov	r0, r4
	}
	return -1;
}
     e56:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
     e58:	movs	r3, #0
     e5a:	movs	r2, #64	; 0x40
     e5c:	ldr	r0, [pc, #32]	; (e80 <usb_serial_getchar+0x48>)
     e5e:	bl	17a8 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
     e62:	ldr	r1, [pc, #28]	; (e80 <usb_serial_getchar+0x48>)
     e64:	movs	r0, #3
     e66:	bl	1800 <usb_receive>
		}
		return c;
     e6a:	mov	r0, r4
     e6c:	pop	{r3, r4, r5, pc}
	}
	return -1;
     e6e:	mov.w	r0, #4294967295
     e72:	pop	{r3, r4, r5, pc}
     e74:	.word	0x20000bfc
     e78:	.word	0x20000c04
     e7c:	.word	0x20000b3c
     e80:	.word	0x20000c20

00000e84 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
     e84:	ldr	r3, [pc, #20]	; (e9c <usb_serial_peekchar+0x18>)
     e86:	ldr	r2, [pc, #24]	; (ea0 <usb_serial_peekchar+0x1c>)
     e88:	ldrh	r3, [r3, #0]
     e8a:	ldrh	r2, [r2, #0]
     e8c:	cmp	r2, r3
     e8e:	bls.n	e96 <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
     e90:	ldr	r2, [pc, #16]	; (ea4 <usb_serial_peekchar+0x20>)
     e92:	ldrb	r0, [r2, r3]
     e94:	bx	lr
	}

	return -1;
     e96:	mov.w	r0, #4294967295
}
     e9a:	bx	lr
     e9c:	.word	0x20000bfc
     ea0:	.word	0x20000c04
     ea4:	.word	0x20000b3c

00000ea8 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
     ea8:	ldr	r2, [pc, #8]	; (eb4 <usb_serial_available+0xc>)
     eaa:	ldr	r3, [pc, #12]	; (eb8 <usb_serial_available+0x10>)
     eac:	ldrh	r0, [r2, #0]
     eae:	ldrh	r3, [r3, #0]
}
     eb0:	subs	r0, r0, r3
     eb2:	bx	lr
     eb4:	.word	0x20000c04
     eb8:	.word	0x20000bfc

00000ebc <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     ebc:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
     ebe:	ldr	r3, [pc, #40]	; (ee8 <usb_serial_flush_input+0x2c>)
     ec0:	ldr	r4, [pc, #40]	; (eec <usb_serial_flush_input+0x30>)
     ec2:	ldrh	r5, [r3, #0]
     ec4:	ldrh	r3, [r4, #0]
     ec6:	cmp	r3, r5
     ec8:	bcc.n	ecc <usb_serial_flush_input+0x10>
     eca:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
     ecc:	movs	r3, #0
     ece:	ldr	r1, [pc, #32]	; (ef0 <usb_serial_flush_input+0x34>)
     ed0:	ldr	r0, [pc, #32]	; (ef4 <usb_serial_flush_input+0x38>)
     ed2:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
     ed4:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
     ed6:	bl	17a8 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
     eda:	ldr	r1, [pc, #24]	; (ef4 <usb_serial_flush_input+0x38>)
     edc:	movs	r0, #3
	}
}
     ede:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
     ee2:	b.w	1800 <usb_receive>
     ee6:	nop
     ee8:	.word	0x20000c04
     eec:	.word	0x20000bfc
     ef0:	.word	0x20000b3c
     ef4:	.word	0x20000c20

00000ef8 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     ef8:	ldr	r3, [pc, #36]	; (f20 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     efa:	push	{lr}
     efc:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     efe:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     f00:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     f04:	cbnz	r3, f10 <usb_serial_putchar+0x18>
     f06:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
     f0a:	add	sp, #12
     f0c:	ldr.w	pc, [sp], #4
     f10:	movs	r1, #1
     f12:	add.w	r0, sp, #7
     f16:	bl	c24 <usb_serial_write.part.1>
     f1a:	add	sp, #12
     f1c:	ldr.w	pc, [sp], #4
     f20:	.word	0x20000db0

00000f24 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
     f24:	ldr	r3, [pc, #16]	; (f38 <usb_serial_write+0x14>)
     f26:	ldrb	r3, [r3, #0]
     f28:	and.w	r2, r3, #255	; 0xff
     f2c:	cbz	r3, f32 <usb_serial_write+0xe>
     f2e:	b.w	c24 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
     f32:	mov	r0, r2
     f34:	bx	lr
     f36:	nop
     f38:	.word	0x20000db0

00000f3c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
     f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     f40:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
     f42:	ldr.w	r8, [pc, #64]	; f84 <usb_serial_write_buffer_free+0x48>
     f46:	movs	r3, #1
     f48:	ldr	r5, [pc, #48]	; (f7c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
     f4a:	mov	r7, r4
     f4c:	ldr	r6, [pc, #48]	; (f80 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
     f4e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     f52:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     f54:	mov	r0, r5
     f56:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
     f58:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     f5a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
     f5e:	beq.n	f6c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
     f60:	bl	1824 <usb_transfer_status>
     f64:	lsls	r3, r0, #24
     f66:	it	pl
     f68:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
     f6c:	cmp	r4, #7
     f6e:	bne.n	f52 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     f70:	movs	r3, #0
	return sum;
}
     f72:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
     f74:	strb.w	r3, [r8]
	return sum;
}
     f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f7c:	.word	0x20000ca0
     f80:	.word	0x20000b39
     f84:	.word	0x20000b38

00000f88 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
     f88:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
     f8a:	ldr	r3, [pc, #80]	; (fdc <usb_serial_flush_output+0x54>)
     f8c:	ldrb	r3, [r3, #0]
     f8e:	cbz	r3, f96 <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
     f90:	ldr	r4, [pc, #76]	; (fe0 <usb_serial_flush_output+0x58>)
     f92:	ldrh	r2, [r4, #0]
     f94:	cbnz	r2, f98 <usb_serial_flush_output+0x10>
     f96:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     f98:	ldr	r6, [pc, #72]	; (fe4 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     f9a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
     f9e:	ldr	r5, [pc, #72]	; (fe8 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     fa0:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     fa2:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     fa4:	rsb	r2, r2, #256	; 0x100
     fa8:	ldr	r0, [pc, #64]	; (fec <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
     faa:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     fae:	ldr	r7, [pc, #64]	; (ff0 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     fb0:	add.w	r1, r0, r1, lsl #8
     fb4:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
     fb6:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
     fba:	bl	17a8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     fbe:	mov	r1, r5
     fc0:	movs	r0, #4
     fc2:	bl	17d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     fc6:	ldrb	r3, [r6, #0]
     fc8:	adds	r3, #1
     fca:	uxtb	r3, r3
     fcc:	cmp	r3, #6
     fce:	it	hi
     fd0:	movhi	r3, #0
     fd2:	strb	r3, [r6, #0]
	tx_available = 0;
     fd4:	movs	r3, #0
     fd6:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
     fd8:	strb	r3, [r7, #0]
     fda:	pop	{r3, r4, r5, r6, r7, pc}
     fdc:	.word	0x20000db0
     fe0:	.word	0x20000c80
     fe4:	.word	0x20000b39
     fe8:	.word	0x20000ca0
     fec:	.word	0x20000438
     ff0:	.word	0x20000b38

00000ff4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ff4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     ff6:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ff8:	cbz	r3, 1002 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     ffa:	ldr	r3, [r2, #4]
     ffc:	orr.w	r3, r3, #32768	; 0x8000
    1000:	str	r3, [r2, #4]
	}
	__disable_irq();
    1002:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1004:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1006:	cbz	r4, 1030 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1008:	ldr	r3, [pc, #64]	; (104c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    100a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    100c:	ldr.w	r4, [r3, #432]	; 0x1b0
    1010:	tst	r4, r1
    1012:	bne.n	1044 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1014:	ldr.w	r4, [r3, #320]	; 0x140
    1018:	orr.w	r4, r4, #16384	; 0x4000
    101c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1020:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    1024:	ldr.w	r4, [r3, #320]	; 0x140
    1028:	lsls	r4, r4, #17
    102a:	bpl.n	1014 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    102c:	tst	r1, r5
    102e:	bne.n	1044 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    1030:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    1032:	ldr	r4, [pc, #24]	; (104c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1034:	str	r2, [r0, #8]
	endpoint->status = 0;
    1036:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1038:	ldr.w	r3, [r4, #432]	; 0x1b0
    103c:	orrs	r1, r3
    103e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1042:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1044:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1046:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1048:	pop	{r4, r5}
    104a:	bx	lr
    104c:	.word	0x402e0000

00001050 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1050:	push	{r3, r4, r5, lr}
    1052:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    1054:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    1056:	b.n	1066 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    1058:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    105a:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    105c:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    105e:	ldr	r2, [r5, #52]	; 0x34
    1060:	mov	r3, r4
    1062:	cmp	r4, r2
    1064:	beq.n	1078 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    1066:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    1068:	cbz	r3, 1078 <run_callbacks+0x28>
    106a:	cmp	r3, #1
    106c:	beq.n	1078 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    106e:	ldr	r2, [r3, #4]
    1070:	lsls	r2, r2, #24
    1072:	bpl.n	1058 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    1074:	str	r3, [r5, #48]	; 0x30
			return;
    1076:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    1078:	movs	r3, #0
    107a:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    107c:	str	r3, [r5, #52]	; 0x34
    107e:	pop	{r3, r4, r5, pc}

00001080 <endpoint0_transmit.constprop.0>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1080:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1082:	cbnz	r1, 10c2 <endpoint0_transmit.constprop.0+0x42>
    1084:	ldr	r4, [pc, #136]	; (1110 <endpoint0_transmit.constprop.0+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1086:	ldr	r1, [pc, #140]	; (1114 <endpoint0_transmit.constprop.0+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1088:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    108a:	ldr	r3, [pc, #140]	; (1118 <endpoint0_transmit.constprop.0+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    108c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    108e:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1090:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1092:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1094:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1096:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1098:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    109a:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    109e:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10a0:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    10a4:	ldr	r5, [pc, #116]	; (111c <endpoint0_transmit.constprop.0+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    10a6:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    10aa:	ldr.w	r1, [r3, #432]	; 0x1b0
    10ae:	orr.w	r1, r1, #1
    10b2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    10b6:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    10b8:	ldr.w	r3, [r2, #432]	; 0x1b0
    10bc:	cmp	r3, #0
    10be:	bne.n	10b8 <endpoint0_transmit.constprop.0+0x38>
}
    10c0:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10c2:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10c4:	ldr	r3, [pc, #88]	; (1120 <endpoint0_transmit.constprop.0+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    10c6:	ldr	r5, [pc, #80]	; (1118 <endpoint0_transmit.constprop.0+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10c8:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    10ca:	ldr	r4, [pc, #68]	; (1110 <endpoint0_transmit.constprop.0+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10cc:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    10d0:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    10d2:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    10d4:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10d6:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    10da:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10dc:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    10e0:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10e2:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    10e6:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    10ea:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    10ee:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    10f0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    10f2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    10f6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    10fa:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    10fe:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1100:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1102:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1106:	ldr.w	r3, [r2, #432]	; 0x1b0
    110a:	cmp	r3, #0
    110c:	bne.n	1106 <endpoint0_transmit.constprop.0+0x86>
    110e:	b.n	1086 <endpoint0_transmit.constprop.0+0x6>
    1110:	.word	0x20003000
    1114:	.word	0x20002020
    1118:	.word	0x402e0000
    111c:	.word	0x20000d90
    1120:	.word	0x20002000

00001124 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    1124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1128:	ldr	r4, [pc, #748]	; (1418 <isr+0x2f4>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    112a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    112c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1130:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1134:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1138:	beq.n	11f8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    113a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    113e:	cmp	r3, #0
    1140:	beq.n	11ee <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1142:	mov.w	r9, #65537	; 0x10001
    1146:	ldr.w	fp, [pc, #752]	; 1438 <isr+0x314>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    114a:	mov	r6, r4
    114c:	ldr	r7, [pc, #716]	; (141c <isr+0x2f8>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    114e:	mov	sl, r9
    1150:	ldr	r1, [r7, #40]	; 0x28
    1152:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1154:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1158:	ldr.w	r3, [r4, #320]	; 0x140
    115c:	orr.w	r3, r3, #8192	; 0x2000
    1160:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1164:	ldr.w	r3, [r4, #320]	; 0x140
    1168:	lsls	r5, r3, #18
    116a:	bpl.n	1158 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    116c:	ldr.w	r3, [r6, #320]	; 0x140
    1170:	bic.w	r3, r3, #8192	; 0x2000
    1174:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1178:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    117c:	ldr.w	r3, [r4, #436]	; 0x1b4
    1180:	ands.w	r3, r3, #65537	; 0x10001
    1184:	bne.n	117c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1186:	uxth	r0, r1
    1188:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    118c:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1190:	cmp	r0, r5
    1192:	bhi.w	12c2 <isr+0x19e>
    1196:	cmp.w	r0, #1664	; 0x680
    119a:	bcs.w	154e <isr+0x42a>
    119e:	cmp.w	r0, #258	; 0x102
    11a2:	beq.w	1454 <isr+0x330>
    11a6:	bhi.w	1354 <isr+0x230>
    11aa:	cmp	r0, #128	; 0x80
    11ac:	beq.w	13fc <isr+0x2d8>
    11b0:	cmp	r0, #130	; 0x82
    11b2:	bne.w	1344 <isr+0x220>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    11b6:	uxth	r2, r2
    11b8:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    11bc:	cmp	r1, #7
    11be:	bhi.w	1344 <isr+0x220>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    11c2:	lsls	r1, r1, #2
    11c4:	ldr	r0, [pc, #600]	; (1420 <isr+0x2fc>)
		reply_buffer[0] = 0;
    11c6:	ldr	r5, [pc, #604]	; (1424 <isr+0x300>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    11c8:	add	r0, r1
    11ca:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    11cc:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    11ce:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    11d0:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    11d2:	bpl.w	15a0 <isr+0x47c>
    11d6:	lsls	r1, r1, #15
    11d8:	bpl.n	11de <isr+0xba>
			reply_buffer[0] = 1;
    11da:	movs	r3, #1
    11dc:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    11de:	movs	r1, #2
    11e0:	ldr	r0, [pc, #576]	; (1424 <isr+0x300>)
    11e2:	bl	1080 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    11e6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    11ea:	cmp	r3, #0
    11ec:	bne.n	1150 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    11ee:	ldr	r2, [pc, #552]	; (1418 <isr+0x2f4>)
    11f0:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    11f4:	cmp	r3, #0
    11f6:	bne.n	1282 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    11f8:	tst.w	r8, #64	; 0x40
    11fc:	beq.n	1230 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    11fe:	ldr	r3, [pc, #536]	; (1418 <isr+0x2f4>)
    1200:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1204:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1206:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    120a:	ldr.w	r1, [r3, #444]	; 0x1bc
    120e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1212:	ldr.w	r4, [r2, #432]	; 0x1b0
    1216:	ldr	r3, [pc, #512]	; (1418 <isr+0x2f4>)
    1218:	cmp	r4, #0
    121a:	bne.n	1212 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    121c:	mov.w	r2, #4294967295
    1220:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1224:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1228:	bl	d80 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    122c:	ldr	r3, [pc, #504]	; (1428 <isr+0x304>)
    122e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1230:	tst.w	r8, #16777216	; 0x1000000
    1234:	beq.n	123e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1236:	ldr	r3, [pc, #500]	; (142c <isr+0x308>)
    1238:	ldr	r3, [r3, #0]
    123a:	cbz	r3, 123e <isr+0x11a>
    123c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    123e:	tst.w	r8, #33554432	; 0x2000000
    1242:	beq.n	124c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1244:	ldr	r3, [pc, #488]	; (1430 <isr+0x30c>)
    1246:	ldr	r3, [r3, #0]
    1248:	cbz	r3, 124c <isr+0x128>
    124a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    124c:	tst.w	r8, #4
    1250:	beq.n	1258 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1252:	ldr	r3, [pc, #452]	; (1418 <isr+0x2f4>)
    1254:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1258:	ldr	r3, [pc, #444]	; (1418 <isr+0x2f4>)
    125a:	ldr.w	r2, [r3, #328]	; 0x148
    125e:	lsls	r2, r2, #24
    1260:	bpl.n	127c <isr+0x158>
    1262:	tst.w	r8, #128	; 0x80
    1266:	beq.n	127c <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1268:	ldr	r1, [pc, #456]	; (1434 <isr+0x310>)
    126a:	ldrb	r2, [r1, #0]
    126c:	cmp	r2, #0
    126e:	beq.w	158e <isr+0x46a>
			if (--usb_reboot_timer == 0) {
    1272:	subs	r3, r2, #1
    1274:	uxtb	r3, r3
    1276:	strb	r3, [r1, #0]
    1278:	cbnz	r3, 127c <isr+0x158>
				asm("bkpt #251"); // run bootloader
    127a:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    127c:	add	sp, #12
    127e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1282:	ldr	r1, [pc, #436]	; (1438 <isr+0x314>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1284:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1288:	ldr	r0, [r1, #0]
    128a:	tst	r3, r0
    128c:	bne.w	1628 <isr+0x504>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1290:	ldr	r2, [pc, #404]	; (1428 <isr+0x304>)
    1292:	ldr	r4, [r2, #0]
			if (completestatus) {
    1294:	ands	r4, r3
    1296:	beq.n	11f8 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1298:	lsls	r3, r4, #29
    129a:	bmi.w	1662 <isr+0x53e>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    129e:	lsls	r7, r4, #13
    12a0:	bmi.w	1682 <isr+0x55e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    12a4:	lsls	r6, r4, #28
    12a6:	bmi.w	167a <isr+0x556>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    12aa:	lsls	r5, r4, #12
    12ac:	bmi.w	1672 <isr+0x54e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    12b0:	lsls	r0, r4, #27
    12b2:	bmi.w	166a <isr+0x546>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    12b6:	lsls	r1, r4, #11
    12b8:	bpl.n	11f8 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    12ba:	ldr	r0, [pc, #384]	; (143c <isr+0x318>)
    12bc:	bl	1050 <run_callbacks>
    12c0:	b.n	11f8 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    12c2:	movw	r5, #8225	; 0x2021
    12c6:	cmp	r0, r5
    12c8:	beq.n	133c <isr+0x218>
    12ca:	bhi.n	13ac <isr+0x288>
    12cc:	cmp.w	r0, #2176	; 0x880
    12d0:	beq.w	1532 <isr+0x40e>
    12d4:	cmp.w	r0, #2304	; 0x900
    12d8:	bne.n	1344 <isr+0x220>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    12da:	ubfx	r1, r1, #16, #8
    12de:	ldr	r2, [pc, #352]	; (1440 <isr+0x31c>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    12e0:	ldr	r0, [pc, #352]	; (1444 <isr+0x320>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    12e2:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    12e4:	ldr	r1, [pc, #352]	; (1448 <isr+0x324>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    12e6:	ldr	r2, [pc, #356]	; (144c <isr+0x328>)
    12e8:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    12ea:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    12ee:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    12f2:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    12f6:	bl	d84 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12fa:	ldr	r2, [pc, #340]	; (1450 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    12fc:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12fe:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1300:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1302:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1304:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1306:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1308:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    130c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    130e:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1312:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1314:	str.w	r1, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1318:	ldr.w	r2, [r6, #432]	; 0x1b0
    131c:	orr.w	r2, r2, #65536	; 0x10000
    1320:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1324:	ldr	r2, [pc, #272]	; (1438 <isr+0x314>)
    1326:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1328:	ldr.w	r3, [r4, #432]	; 0x1b0
    132c:	cmp	r3, #0
    132e:	bne.n	1328 <isr+0x204>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1330:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1334:	cmp	r3, #0
    1336:	bne.w	1150 <isr+0x2c>
    133a:	b.n	11ee <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    133c:	lsrs	r0, r2, #16
    133e:	cmp	r0, #7
    1340:	beq.w	15a8 <isr+0x484>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1344:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1348:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    134c:	cmp	r3, #0
    134e:	bne.w	1150 <isr+0x2c>
    1352:	b.n	11ee <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1354:	movw	r5, #770	; 0x302
    1358:	cmp	r0, r5
    135a:	beq.w	14cc <isr+0x3a8>
    135e:	cmp.w	r0, #1280	; 0x500
    1362:	bne.n	1344 <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1364:	ldr	r2, [pc, #232]	; (1450 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1366:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1368:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    136a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    136c:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    136e:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1370:	ldr.w	r0, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1374:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1376:	orr.w	r3, r0, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    137a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    137c:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1380:	ldr.w	r3, [r6, #432]	; 0x1b0
    1384:	orr.w	r3, r3, #65536	; 0x10000
    1388:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    138c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1390:	cmp	r3, #0
    1392:	bne.n	138c <isr+0x268>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1394:	lsrs	r3, r1, #16
    1396:	lsls	r3, r3, #25
    1398:	orr.w	r3, r3, #16777216	; 0x1000000
    139c:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13a0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13a4:	cmp	r3, #0
    13a6:	bne.w	1150 <isr+0x2c>
    13aa:	b.n	11ee <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13ac:	movw	r3, #8737	; 0x2221
    13b0:	cmp	r0, r3
    13b2:	beq.w	14ba <isr+0x396>
    13b6:	movw	r3, #8993	; 0x2321
    13ba:	cmp	r0, r3
    13bc:	bne.n	1344 <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13be:	ldr	r3, [pc, #144]	; (1450 <isr+0x32c>)
    13c0:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13c2:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    13c4:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13c6:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    13c8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13ca:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    13ce:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13d0:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    13d4:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    13d6:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    13d8:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    13dc:	ldr.w	r3, [r4, #432]	; 0x1b0
    13e0:	orr.w	r3, r3, #65536	; 0x10000
    13e4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    13e8:	ldr.w	r3, [r4, #432]	; 0x1b0
    13ec:	cmp	r3, #0
    13ee:	bne.n	13e8 <isr+0x2c4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13f0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13f4:	cmp	r3, #0
    13f6:	bne.w	1150 <isr+0x2c>
    13fa:	b.n	11ee <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    13fc:	ldr	r2, [pc, #36]	; (1424 <isr+0x300>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    13fe:	movs	r1, #2
    1400:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1402:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1404:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1406:	bl	1080 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    140a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    140e:	cmp	r3, #0
    1410:	bne.w	1150 <isr+0x2c>
    1414:	b.n	11ee <isr+0xca>
    1416:	nop
    1418:	.word	0x402e0000
    141c:	.word	0x20003000
    1420:	.word	0x402e01c0
    1424:	.word	0x20000da0
    1428:	.word	0x20000d88
    142c:	.word	0x20000d84
    1430:	.word	0x20000d8c
    1434:	.word	0x20000d94
    1438:	.word	0x20000d90
    143c:	.word	0x20003240
    1440:	.word	0x20000db0
    1444:	.word	0x00cc0002
    1448:	.word	0x000200c8
    144c:	.word	0x00c80002
    1450:	.word	0x20002020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1454:	uxth	r2, r2
    1456:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    145a:	cmp	r3, #7
    145c:	bhi.w	1344 <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1460:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1464:	mov.w	r3, r3, lsl #2
    1468:	ldr	r2, [pc, #544]	; (168c <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    146a:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    146e:	add	r2, r3
    1470:	ldr	r3, [r2, #0]
    1472:	ite	ne
    1474:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1478:	biceq.w	r3, r3, #1
    147c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    147e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1480:	ldr	r3, [pc, #524]	; (1690 <isr+0x56c>)
    1482:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1484:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1486:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1488:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    148c:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    148e:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1492:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1494:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1496:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    149a:	ldr.w	r3, [r4, #432]	; 0x1b0
    149e:	orr.w	r3, r3, #65536	; 0x10000
    14a2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    14a6:	ldr.w	r3, [r4, #432]	; 0x1b0
    14aa:	cmp	r3, #0
    14ac:	bne.n	14a6 <isr+0x382>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14ae:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14b2:	cmp	r3, #0
    14b4:	bne.w	1150 <isr+0x2c>
    14b8:	b.n	11ee <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    14ba:	ldr	r3, [pc, #472]	; (1694 <isr+0x570>)
		usb_cdc_line_rtsdtr = setup.wValue;
    14bc:	ubfx	r1, r1, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    14c0:	ldr	r2, [pc, #468]	; (1698 <isr+0x574>)
    14c2:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    14c4:	ldr	r3, [pc, #468]	; (169c <isr+0x578>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    14c6:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    14c8:	strb	r1, [r3, #0]
    14ca:	b.n	13be <isr+0x29a>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    14cc:	uxth	r2, r2
    14ce:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    14d2:	cmp	r3, #7
    14d4:	bhi.w	1344 <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    14d8:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    14dc:	mov.w	r3, r3, lsl #2
    14e0:	ldr	r2, [pc, #424]	; (168c <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14e2:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    14e6:	add	r2, r3
    14e8:	ldr	r3, [r2, #0]
    14ea:	ite	ne
    14ec:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    14f0:	orreq.w	r3, r3, #1
    14f4:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14f6:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14f8:	ldr	r3, [pc, #404]	; (1690 <isr+0x56c>)
    14fa:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14fc:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14fe:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1500:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1504:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1506:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    150a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    150c:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    150e:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1512:	ldr.w	r3, [r4, #432]	; 0x1b0
    1516:	orr.w	r3, r3, #65536	; 0x10000
    151a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    151e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1522:	cmp	r3, #0
    1524:	bne.n	151e <isr+0x3fa>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1526:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    152a:	cmp	r3, #0
    152c:	bne.w	1150 <isr+0x2c>
    1530:	b.n	11ee <isr+0xca>
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1532:	ldr	r2, [pc, #364]	; (16a0 <isr+0x57c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1534:	movs	r1, #1
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1536:	ldr	r3, [pc, #364]	; (16a4 <isr+0x580>)
    1538:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    153a:	mov	r0, r3
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    153c:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    153e:	bl	1080 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1542:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1546:	cmp	r3, #0
    1548:	bne.w	1150 <isr+0x2c>
    154c:	b.n	11ee <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    154e:	ldr	r3, [pc, #344]	; (16a8 <isr+0x584>)
    1550:	ldr	r0, [r3, #4]
    1552:	cmp	r0, #0
    1554:	beq.w	1344 <isr+0x220>
    1558:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    155a:	uxth.w	lr, r2
    155e:	b.n	156a <isr+0x446>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1560:	adds	r3, #12
    1562:	ldr	r0, [r3, #4]
    1564:	cmp	r0, #0
    1566:	beq.w	1344 <isr+0x220>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    156a:	ldrh	r5, [r3, #0]
    156c:	cmp	r5, r1
    156e:	bne.n	1560 <isr+0x43c>
    1570:	ldrh	r5, [r3, #2]
    1572:	cmp	r5, lr
    1574:	bne.n	1560 <isr+0x43c>
				if ((setup.wValue >> 8) == 3) {
    1576:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1578:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    157a:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    157c:	ite	eq
    157e:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    1580:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    1582:	cmp	r1, r2
    1584:	it	cs
    1586:	movcs	r1, r2
    1588:	bl	1080 <endpoint0_transmit.constprop.0>
    158c:	b.n	11e6 <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    158e:	ldr.w	r2, [r3, #328]	; 0x148
    1592:	bic.w	r2, r2, #128	; 0x80
    1596:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    159a:	add	sp, #12
    159c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    15a0:	lsls	r2, r1, #31
    15a2:	bpl.w	11de <isr+0xba>
    15a6:	b.n	11da <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15a8:	ldr	r5, [pc, #256]	; (16ac <isr+0x588>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15aa:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    15ac:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15ae:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15b0:	ldr	r3, [pc, #252]	; (16b0 <isr+0x58c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    15b2:	ldr	r1, [pc, #256]	; (16b4 <isr+0x590>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15b4:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    15b6:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    15b8:	ldr	r1, [pc, #252]	; (16b8 <isr+0x594>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15ba:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    15be:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    15c0:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15c4:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    15c8:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    15cc:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    15d0:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    15d2:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    15d4:	sub.w	r0, r1, #4096	; 0x1000
    15d8:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    15da:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    15de:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    15e0:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    15e2:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    15e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    15ea:	cmp	r3, #0
    15ec:	bne.n	15e6 <isr+0x4c2>
	}
	endpoint0_transfer_ack.next = 1;
    15ee:	ldr	r2, [pc, #160]	; (1690 <isr+0x56c>)
    15f0:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15f2:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15f6:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15f8:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15fa:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15fe:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1600:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1604:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1606:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    160a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    160c:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1610:	ldr.w	r3, [r6, #432]	; 0x1b0
    1614:	orrs	r3, r0
    1616:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    161a:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    161e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1622:	cmp	r3, #0
    1624:	bne.n	161e <isr+0x4fa>
    1626:	b.n	11e6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1628:	ldr	r4, [pc, #128]	; (16ac <isr+0x588>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    162a:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    162e:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1630:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1632:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1634:	cmp	r4, r0
    1636:	bne.w	1290 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    163a:	ldr	r1, [pc, #128]	; (16bc <isr+0x598>)
    163c:	ldr	r4, [pc, #128]	; (16c0 <isr+0x59c>)
    163e:	ldmia	r1, {r0, r1}
    1640:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1642:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1644:	str	r0, [r4, #0]
    1646:	strh	r1, [r4, #4]
    1648:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    164a:	bne.w	1290 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    164e:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1652:	movs	r4, #80	; 0x50
    1654:	ldr	r0, [pc, #108]	; (16c4 <isr+0x5a0>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    1656:	orr.w	r1, r1, #128	; 0x80
    165a:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    165e:	strb	r4, [r0, #0]
    1660:	b.n	1290 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1662:	ldr	r0, [pc, #100]	; (16c8 <isr+0x5a4>)
    1664:	bl	1050 <run_callbacks>
    1668:	b.n	129e <isr+0x17a>
    166a:	ldr	r0, [pc, #96]	; (16cc <isr+0x5a8>)
    166c:	bl	1050 <run_callbacks>
    1670:	b.n	12b6 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1672:	ldr	r0, [pc, #92]	; (16d0 <isr+0x5ac>)
    1674:	bl	1050 <run_callbacks>
    1678:	b.n	12b0 <isr+0x18c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    167a:	ldr	r0, [pc, #88]	; (16d4 <isr+0x5b0>)
    167c:	bl	1050 <run_callbacks>
    1680:	b.n	12aa <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1682:	ldr	r0, [pc, #84]	; (16d8 <isr+0x5b4>)
    1684:	bl	1050 <run_callbacks>
    1688:	b.n	12a4 <isr+0x180>
    168a:	nop
    168c:	.word	0x402e01c0
    1690:	.word	0x20002020
    1694:	.word	0x20000414
    1698:	.word	0x200012c8
    169c:	.word	0x20000d81
    16a0:	.word	0x20000db0
    16a4:	.word	0x20000da0
    16a8:	.word	0x200002ac
    16ac:	.word	0x20000d98
    16b0:	.word	0x20002000
    16b4:	.word	0x00070080
    16b8:	.word	0x20002da8
    16bc:	.word	0x20000da8
    16c0:	.word	0x200012c0
    16c4:	.word	0x20000d94
    16c8:	.word	0x20003100
    16cc:	.word	0x20003200
    16d0:	.word	0x200031c0
    16d4:	.word	0x20003180
    16d8:	.word	0x20003140

000016dc <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    16dc:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    16de:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    16e2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    16e6:	ite	ne
    16e8:	movne	r7, #0
    16ea:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    16ee:	cmp	r2, #2
    16f0:	bls.n	16f6 <usb_config_rx+0x1a>
    16f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    16f6:	mov.w	sl, r0, lsl #7
    16fa:	ldr.w	r9, [pc, #64]	; 173c <usb_config_rx+0x60>
    16fe:	mov	r5, r1
    1700:	mov	r4, r0
    1702:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1706:	movs	r1, #0
    1708:	movs	r2, #64	; 0x40
    170a:	mov	r8, r3
    170c:	mov	r0, r6
    170e:	bl	1aa0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1712:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1714:	orr.w	r1, r7, r5, lsl #16
    1718:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    171c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1720:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1722:	cmp.w	r8, #0
    1726:	beq.n	16f2 <usb_config_rx+0x16>
    1728:	ldr	r3, [pc, #12]	; (1738 <usb_config_rx+0x5c>)
    172a:	lsls	r0, r4
    172c:	ldr	r4, [r3, #0]
    172e:	orrs	r0, r4
    1730:	str	r0, [r3, #0]
    1732:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1736:	nop
    1738:	.word	0x20000d88
    173c:	.word	0x20003000

00001740 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1740:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1742:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1746:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    174a:	ite	ne
    174c:	movne	r7, #0
    174e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1752:	cmp	r2, #2
    1754:	bls.n	175a <usb_config_tx+0x1a>
    1756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    175a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    175c:	lsls	r5, r0, #7
    175e:	ldr.w	r9, [pc, #68]	; 17a4 <usb_config_tx+0x64>
    1762:	mov	r8, r1
    1764:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1766:	movs	r1, #0
    1768:	mov	r4, r0
    176a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    176c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1770:	mov	r0, sl
    1772:	bl	1aa0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1776:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1778:	orr.w	r1, r7, r8, lsl #16
    177c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1780:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1784:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1788:	cmp	r6, #0
    178a:	beq.n	1756 <usb_config_tx+0x16>
    178c:	add.w	r0, r4, #16
    1790:	ldr	r3, [pc, #12]	; (17a0 <usb_config_tx+0x60>)
    1792:	lsls	r2, r0
    1794:	ldr	r0, [r3, #0]
    1796:	orrs	r2, r0
    1798:	str	r2, [r3, #0]
    179a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    179e:	nop
    17a0:	.word	0x20000d88
    17a4:	.word	0x20003000

000017a8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17a8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    17aa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    17ac:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17ae:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    17b2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    17b4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    17b6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    17b8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    17bc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    17c0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    17c4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    17c8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    17ca:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    17cc:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    17ce:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    17d0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    17d2:	pop	{r4, r5, r6, r7}
    17d4:	bx	lr
    17d6:	nop

000017d8 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    17d8:	subs	r3, r0, #2
    17da:	cmp	r3, #2
    17dc:	bls.n	17e0 <usb_transmit+0x8>
    17de:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    17e0:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    17e2:	ldr	r3, [pc, #24]	; (17fc <usb_transmit+0x24>)
    17e4:	add.w	r4, r0, #16
    17e8:	movs	r5, #1
    17ea:	mov	r2, r1
    17ec:	add.w	r0, r3, r0, lsl #7
    17f0:	lsl.w	r1, r5, r4
}
    17f4:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    17f6:	b.w	ff4 <schedule_transfer>
    17fa:	nop
    17fc:	.word	0x20003040

00001800 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1800:	subs	r3, r0, #2
    1802:	cmp	r3, #2
    1804:	bls.n	1808 <usb_receive+0x8>
    1806:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1808:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    180a:	ldr	r3, [pc, #20]	; (1820 <usb_receive+0x20>)
    180c:	movs	r4, #1
    180e:	mov	r2, r1
    1810:	lsl.w	r1, r4, r0
    1814:	add.w	r0, r3, r0, lsl #7
}
    1818:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    181c:	b.w	ff4 <schedule_transfer>
    1820:	.word	0x20003000

00001824 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    1824:	ldr	r2, [pc, #32]	; (1848 <usb_transfer_status+0x24>)
    1826:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    182a:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    182c:	orr.w	r3, r3, #16384	; 0x4000
    1830:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    1834:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    1836:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    183a:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    183c:	tst.w	r3, #16384	; 0x4000
    1840:	beq.n	182a <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    1842:	mov	r0, r1
    1844:	bx	lr
    1846:	nop
    1848:	.word	0x402e0000

0000184c <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    184c:	ldr	r2, [pc, #72]	; (1898 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    184e:	ldr	r3, [pc, #76]	; (189c <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1850:	ldr.w	r0, [r2, #544]	; 0x220
    1854:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1858:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    185a:	push	{r4, lr}
    185c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    185e:	bhi.n	1866 <usb_init_serialnumber+0x1a>
    1860:	add.w	r0, r0, r0, lsl #2
    1864:	lsls	r0, r0, #1
    1866:	ldr	r4, [pc, #56]	; (18a0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1868:	add	r1, sp, #4
    186a:	movs	r2, #10
    186c:	bl	1a00 <ultoa>
    1870:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1872:	movs	r3, #0
    1874:	mov	r0, r4
		char c = buf[i];
    1876:	ldrb.w	r2, [r1], #1
    187a:	adds	r3, #1
		if (!c) break;
    187c:	cbz	r2, 188e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    187e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1880:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1884:	bne.n	1876 <usb_init_serialnumber+0x2a>
    1886:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1888:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    188a:	add	sp, #16
    188c:	pop	{r4, pc}
    188e:	lsls	r3, r3, #1
    1890:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1892:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    1894:	add	sp, #16
    1896:	pop	{r4, pc}
    1898:	.word	0x401f4400
    189c:	.word	0x0098967f
    18a0:	.word	0x200003cc

000018a4 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    18a4:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    18a6:	ldr	r3, [pc, #28]	; (18c4 <HardwareSerial::processSerialEvents()+0x20>)
    18a8:	ldrb	r4, [r3, #0]
    18aa:	cbz	r4, 18c0 <HardwareSerial::processSerialEvents()+0x1c>
    18ac:	ldr	r5, [pc, #24]	; (18c8 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    18ae:	ldr.w	r3, [r5, #4]!
    18b2:	cmp	r3, #0
    18b4:	beq.n	18ae <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    18b6:	blx	r3
			if (--handlers_still_to_process == 0) return;
    18b8:	subs	r3, r4, #1
    18ba:	ands.w	r4, r3, #255	; 0xff
    18be:	bne.n	18ae <HardwareSerial::processSerialEvents()+0xa>
    18c0:	pop	{r3, r4, r5, pc}
    18c2:	nop
    18c4:	.word	0x20000de0
    18c8:	.word	0x20000dc0

000018cc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    18cc:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    18ce:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    18d2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    18d6:	bne.n	19b4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    18d8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    18da:	bcc.n	1960 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    18dc:	ldr.w	r3, [r1], #4
    18e0:	str.w	r3, [r0], #4
    18e4:	ldr.w	r3, [r1], #4
    18e8:	str.w	r3, [r0], #4
    18ec:	ldr.w	r3, [r1], #4
    18f0:	str.w	r3, [r0], #4
    18f4:	ldr.w	r3, [r1], #4
    18f8:	str.w	r3, [r0], #4
    18fc:	ldr.w	r3, [r1], #4
    1900:	str.w	r3, [r0], #4
    1904:	ldr.w	r3, [r1], #4
    1908:	str.w	r3, [r0], #4
    190c:	ldr.w	r3, [r1], #4
    1910:	str.w	r3, [r0], #4
    1914:	ldr.w	r3, [r1], #4
    1918:	str.w	r3, [r0], #4
    191c:	ldr.w	r3, [r1], #4
    1920:	str.w	r3, [r0], #4
    1924:	ldr.w	r3, [r1], #4
    1928:	str.w	r3, [r0], #4
    192c:	ldr.w	r3, [r1], #4
    1930:	str.w	r3, [r0], #4
    1934:	ldr.w	r3, [r1], #4
    1938:	str.w	r3, [r0], #4
    193c:	ldr.w	r3, [r1], #4
    1940:	str.w	r3, [r0], #4
    1944:	ldr.w	r3, [r1], #4
    1948:	str.w	r3, [r0], #4
    194c:	ldr.w	r3, [r1], #4
    1950:	str.w	r3, [r0], #4
    1954:	ldr.w	r3, [r1], #4
    1958:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    195c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    195e:	bcs.n	18dc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1960:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1962:	bcc.n	1988 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1964:	ldr.w	r3, [r1], #4
    1968:	str.w	r3, [r0], #4
    196c:	ldr.w	r3, [r1], #4
    1970:	str.w	r3, [r0], #4
    1974:	ldr.w	r3, [r1], #4
    1978:	str.w	r3, [r0], #4
    197c:	ldr.w	r3, [r1], #4
    1980:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1984:	subs	r2, #16
	bhs	.Lmid_block_loop
    1986:	bcs.n	1964 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1988:	adds	r2, #12
	blo	.Lcopy_less_than_4
    198a:	bcc.n	1998 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    198c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1990:	str.w	r3, [r0], #4
	subs	r2, #4
    1994:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1996:	bcs.n	198c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1998:	adds	r2, #4
	beq	.Ldone
    199a:	beq.n	19ae <memcpy+0xe2>

	lsls	r2, r2, #31
    199c:	lsls	r2, r2, #31
	itt ne
    199e:	itt	ne
	ldrbne  r3, [r1], #1
    19a0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    19a4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    19a8:	bcc.n	19ae <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    19aa:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    19ac:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    19ae:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    19b0:	bx	lr
    19b2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    19b4:	cmp	r2, #8
	blo	.Lbyte_copy
    19b6:	bcc.n	19e0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    19b8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    19ba:	beq.n	18d8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    19bc:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    19c0:	beq.n	18d8 <memcpy+0xc>

	rsb	r3, #4
    19c2:	rsb	r3, r3, #4
	subs	r2, r3
    19c6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    19c8:	lsls	r3, r3, #31
	itt ne
    19ca:	itt	ne
	ldrbne  r3, [r1], #1
    19cc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    19d0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    19d4:	bcc.n	18d8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    19d6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    19da:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    19de:	b.n	18d8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    19e0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    19e2:	bcc.n	1998 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    19e4:	subs	r2, #1
	ldrb    r3, [r1], #1
    19e6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    19ea:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    19ee:	bcs.n	19e4 <memcpy+0x118>

	ldrb	r3, [r1]
    19f0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    19f2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    19f4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    19f6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    19f8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    19fa:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    19fc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    19fe:	bx	lr

00001a00 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1a00:	push	{r4, r5, r6, r7}
    1a02:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1a04:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1a06:	mov	r7, r6
    1a08:	b.n	1a0c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1a0a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1a0c:	udiv	r3, r0, r2
    1a10:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a14:	add.w	r4, r0, #55	; 0x37
    1a18:	cmp	r0, #9
    1a1a:	add.w	r0, r0, #48	; 0x30
    1a1e:	uxtb	r4, r4
    1a20:	it	ls
    1a22:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1a24:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a26:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1a2a:	cmp	r3, #0
    1a2c:	bne.n	1a0a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1a2e:	adds	r2, r1, r5
    1a30:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1a32:	cbz	r5, 1a48 <ultoa+0x48>
    1a34:	adds	r3, #1
		t = buf[j];
    1a36:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1a3a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1a3c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1a3e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1a40:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1a42:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1a46:	blt.n	1a34 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1a48:	mov	r0, r1
    1a4a:	pop	{r4, r5, r6, r7}
    1a4c:	bx	lr
    1a4e:	nop

00001a50 <__libc_init_array>:
    1a50:	push	{r4, r5, r6, lr}
    1a52:	ldr	r6, [pc, #60]	; (1a90 <__libc_init_array+0x40>)
    1a54:	ldr	r5, [pc, #60]	; (1a94 <__libc_init_array+0x44>)
    1a56:	subs	r6, r6, r5
    1a58:	asrs	r6, r6, #2
    1a5a:	it	ne
    1a5c:	movne	r4, #0
    1a5e:	beq.n	1a6c <__libc_init_array+0x1c>
    1a60:	adds	r4, #1
    1a62:	ldr.w	r3, [r5], #4
    1a66:	blx	r3
    1a68:	cmp	r6, r4
    1a6a:	bne.n	1a60 <__libc_init_array+0x10>
    1a6c:	ldr	r6, [pc, #40]	; (1a98 <__libc_init_array+0x48>)
    1a6e:	ldr	r5, [pc, #44]	; (1a9c <__libc_init_array+0x4c>)
    1a70:	subs	r6, r6, r5
    1a72:	bl	1b40 <___init_veneer>
    1a76:	asrs	r6, r6, #2
    1a78:	it	ne
    1a7a:	movne	r4, #0
    1a7c:	beq.n	1a8c <__libc_init_array+0x3c>
    1a7e:	adds	r4, #1
    1a80:	ldr.w	r3, [r5], #4
    1a84:	blx	r3
    1a86:	cmp	r6, r4
    1a88:	bne.n	1a7e <__libc_init_array+0x2e>
    1a8a:	pop	{r4, r5, r6, pc}
    1a8c:	pop	{r4, r5, r6, pc}
    1a8e:	nop
    1a90:	.word	0x60001648
    1a94:	.word	0x60001648
    1a98:	.word	0x60001650
    1a9c:	.word	0x60001648

00001aa0 <memset>:
    1aa0:	push	{r4, r5, r6}
    1aa2:	lsls	r4, r0, #30
    1aa4:	beq.n	1b34 <memset+0x94>
    1aa6:	subs	r4, r2, #1
    1aa8:	cmp	r2, #0
    1aaa:	beq.n	1b30 <memset+0x90>
    1aac:	uxtb	r5, r1
    1aae:	mov	r3, r0
    1ab0:	b.n	1ab8 <memset+0x18>
    1ab2:	subs	r2, r4, #1
    1ab4:	cbz	r4, 1b30 <memset+0x90>
    1ab6:	mov	r4, r2
    1ab8:	strb.w	r5, [r3], #1
    1abc:	lsls	r2, r3, #30
    1abe:	bne.n	1ab2 <memset+0x12>
    1ac0:	cmp	r4, #3
    1ac2:	bls.n	1b22 <memset+0x82>
    1ac4:	uxtb	r5, r1
    1ac6:	orr.w	r5, r5, r5, lsl #8
    1aca:	cmp	r4, #15
    1acc:	orr.w	r5, r5, r5, lsl #16
    1ad0:	bls.n	1b06 <memset+0x66>
    1ad2:	add.w	r2, r3, #16
    1ad6:	mov	r6, r4
    1ad8:	subs	r6, #16
    1ada:	cmp	r6, #15
    1adc:	str.w	r5, [r2, #-16]
    1ae0:	str.w	r5, [r2, #-12]
    1ae4:	str.w	r5, [r2, #-8]
    1ae8:	str.w	r5, [r2, #-4]
    1aec:	add.w	r2, r2, #16
    1af0:	bhi.n	1ad8 <memset+0x38>
    1af2:	sub.w	r2, r4, #16
    1af6:	bic.w	r2, r2, #15
    1afa:	and.w	r4, r4, #15
    1afe:	adds	r2, #16
    1b00:	cmp	r4, #3
    1b02:	add	r3, r2
    1b04:	bls.n	1b22 <memset+0x82>
    1b06:	mov	r6, r3
    1b08:	mov	r2, r4
    1b0a:	subs	r2, #4
    1b0c:	cmp	r2, #3
    1b0e:	str.w	r5, [r6], #4
    1b12:	bhi.n	1b0a <memset+0x6a>
    1b14:	subs	r2, r4, #4
    1b16:	bic.w	r2, r2, #3
    1b1a:	adds	r2, #4
    1b1c:	add	r3, r2
    1b1e:	and.w	r4, r4, #3
    1b22:	cbz	r4, 1b30 <memset+0x90>
    1b24:	uxtb	r1, r1
    1b26:	add	r4, r3
    1b28:	strb.w	r1, [r3], #1
    1b2c:	cmp	r3, r4
    1b2e:	bne.n	1b28 <memset+0x88>
    1b30:	pop	{r4, r5, r6}
    1b32:	bx	lr
    1b34:	mov	r4, r2
    1b36:	mov	r3, r0
    1b38:	b.n	1ac0 <memset+0x20>
    1b3a:	nop
    1b3c:	movs	r0, r0
	...

00001b40 <___init_veneer>:
    1b40:	ldr.w	pc, [pc]	; 1b44 <___init_veneer+0x4>
    1b44:	.word	0x600015e1
	...

Disassembly of section .fini:

00001b50 <_fini>:
    1b50:	push	{r3, r4, r5, r6, r7, lr}
    1b52:	nop
